{"mappings":"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","sources":["node_modules/semver/internal/re.js","node_modules/semver/internal/constants.js","node_modules/semver/internal/debug.js","node_modules/semver/classes/semver.js","node_modules/semver/internal/parse-options.js","node_modules/semver/internal/identifiers.js","node_modules/semver/functions/parse.js","node_modules/semver/functions/valid.js","node_modules/semver/functions/clean.js","node_modules/semver/functions/inc.js","node_modules/semver/functions/diff.js","node_modules/semver/functions/eq.js","node_modules/semver/functions/compare.js","node_modules/semver/functions/major.js","node_modules/semver/functions/minor.js","node_modules/semver/functions/patch.js","node_modules/semver/functions/prerelease.js","node_modules/semver/functions/rcompare.js","node_modules/semver/functions/compare-loose.js","node_modules/semver/functions/compare-build.js","node_modules/semver/functions/sort.js","node_modules/semver/functions/rsort.js","node_modules/semver/functions/gt.js","node_modules/semver/functions/lt.js","node_modules/semver/functions/neq.js","node_modules/semver/functions/gte.js","node_modules/semver/functions/lte.js","node_modules/semver/functions/cmp.js","node_modules/semver/functions/coerce.js","node_modules/semver/classes/comparator.js","node_modules/semver/classes/range.js","node_modules/lru-cache/index.js","node_modules/yallist/yallist.js","node_modules/yallist/iterator.js","node_modules/semver/functions/satisfies.js","node_modules/semver/ranges/to-comparators.js","node_modules/semver/ranges/max-satisfying.js","node_modules/semver/ranges/min-satisfying.js","node_modules/semver/ranges/min-version.js","node_modules/semver/ranges/valid.js","node_modules/semver/ranges/outside.js","node_modules/semver/ranges/gtr.js","node_modules/semver/ranges/ltr.js","node_modules/semver/ranges/intersects.js","node_modules/semver/ranges/simplify.js","node_modules/semver/ranges/subset.js","node_modules/js-sha256/src/sha256.js","node_modules/tslib/tslib.es6.js","node_modules/rxjs/src/internal/util/isFunction.ts","node_modules/rxjs/src/internal/util/createErrorClass.ts","node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","node_modules/rxjs/src/internal/util/arrRemove.ts","node_modules/rxjs/src/internal/Subscription.ts","node_modules/rxjs/src/internal/config.ts","node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts","node_modules/rxjs/src/internal/util/reportUnhandledError.ts","node_modules/rxjs/src/internal/util/noop.ts","node_modules/rxjs/src/internal/NotificationFactories.ts","node_modules/rxjs/src/internal/util/errorContext.ts","node_modules/rxjs/src/internal/Subscriber.ts","node_modules/rxjs/src/internal/symbol/observable.ts","node_modules/rxjs/src/internal/util/identity.ts","node_modules/rxjs/src/internal/util/pipe.ts","node_modules/rxjs/src/internal/Observable.ts","node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","node_modules/rxjs/src/internal/Subject.ts","node_modules/rxjs/src/internal/BehaviorSubject.ts","node_modules/rxjs/src/internal/scheduler/dateTimestampProvider.ts","node_modules/rxjs/src/internal/ReplaySubject.ts","node_modules/rxjs/src/internal/AsyncSubject.ts","node_modules/rxjs/src/internal/util/EmptyError.ts","node_modules/rxjs/src/internal/lastValueFrom.ts","node_modules/rxjs/src/internal/firstValueFrom.ts","node_modules/rxjs/src/internal/scheduler/Action.ts","node_modules/rxjs/src/internal/scheduler/intervalProvider.ts","node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","node_modules/rxjs/src/internal/Scheduler.ts","node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","node_modules/rxjs/src/internal/scheduler/async.ts","node_modules/rxjs/src/internal/util/isDate.ts","node_modules/rxjs/src/internal/util/lift.ts","node_modules/rxjs/src/internal/util/isArrayLike.ts","node_modules/rxjs/src/internal/util/isPromise.ts","node_modules/rxjs/src/internal/util/isInteropObservable.ts","node_modules/rxjs/src/internal/util/isAsyncIterable.ts","node_modules/rxjs/src/internal/util/throwUnobservableError.ts","node_modules/rxjs/src/internal/symbol/iterator.ts","node_modules/rxjs/src/internal/util/isIterable.ts","node_modules/rxjs/src/internal/util/isReadableStreamLike.ts","node_modules/rxjs/src/internal/observable/innerFrom.ts","node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts","node_modules/rxjs/src/internal/util/executeSchedule.ts","node_modules/rxjs/src/internal/operators/timeout.ts","node_modules/rxjs/src/internal/util/argsArgArrayOrObject.ts","node_modules/rxjs/src/internal/operators/observeOn.ts","node_modules/rxjs/src/internal/operators/subscribeOn.ts","node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts","node_modules/rxjs/src/internal/scheduled/schedulePromise.ts","node_modules/rxjs/src/internal/scheduled/scheduleArray.ts","node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts","node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts","node_modules/rxjs/src/internal/scheduled/scheduled.ts","node_modules/rxjs/src/internal/observable/from.ts","node_modules/rxjs/src/internal/operators/map.ts","node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts","node_modules/rxjs/src/internal/util/isScheduler.ts","node_modules/rxjs/src/internal/util/args.ts","node_modules/rxjs/src/internal/util/createObject.ts","node_modules/rxjs/src/internal/observable/combineLatest.ts","node_modules/rxjs/src/internal/operators/mergeInternals.ts","node_modules/rxjs/src/internal/operators/mergeMap.ts","node_modules/rxjs/src/internal/operators/mergeAll.ts","node_modules/rxjs/src/internal/operators/concatAll.ts","node_modules/rxjs/src/internal/observable/concat.ts","node_modules/rxjs/src/internal/observable/defer.ts","node_modules/rxjs/src/internal/observable/empty.ts","node_modules/rxjs/src/internal/observable/fromEvent.ts","node_modules/rxjs/src/internal/observable/timer.ts","node_modules/rxjs/src/internal/observable/interval.ts","node_modules/rxjs/src/internal/observable/merge.ts","node_modules/rxjs/src/internal/observable/never.ts","projects/scion/toolkit/util/src/defined.util.ts","projects/scion/toolkit/util/src/arrays.util.ts","projects/scion/toolkit/util/src/objects.util.ts","projects/scion/toolkit/util/src/dictionaries.util.ts","projects/scion/toolkit/util/src/maps.util.ts","projects/scion/toolkit/util/src/observables.util.ts","node_modules/rxjs/src/internal/observable/of.ts","node_modules/rxjs/src/internal/observable/throwError.ts","node_modules/rxjs/src/internal/operators/filter.ts","node_modules/rxjs/src/internal/operators/switchMap.ts","node_modules/rxjs/src/internal/operators/withLatestFrom.ts","node_modules/rxjs/src/internal/operators/audit.ts","node_modules/rxjs/src/internal/operators/auditTime.ts","node_modules/rxjs/src/internal/operators/catchError.ts","node_modules/rxjs/src/internal/operators/debounceTime.ts","node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts","node_modules/rxjs/src/internal/operators/expand.ts","node_modules/rxjs/src/internal/operators/finalize.ts","node_modules/rxjs/src/internal/operators/take.ts","node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts","node_modules/rxjs/src/internal/operators/throwIfEmpty.ts","node_modules/rxjs/src/internal/operators/first.ts","node_modules/rxjs/src/internal/operators/mapTo.ts","node_modules/rxjs/src/internal/operators/mergeMapTo.ts","node_modules/rxjs/src/internal/operators/pairwise.ts","node_modules/rxjs/src/internal/operators/share.ts","node_modules/rxjs/src/internal/operators/skipWhile.ts","node_modules/rxjs/src/internal/operators/startWith.ts","node_modules/rxjs/src/internal/operators/takeUntil.ts","node_modules/rxjs/src/internal/operators/takeWhile.ts","node_modules/rxjs/src/internal/operators/tap.ts","projects/scion/toolkit/bean-manager/src/bean-manager.ts","projects/scion/toolkit/uuid/src/uuid.util.ts","projects/scion/toolkit/operators/src/operators.ts","node_modules/semver/index.js","projects/scion/toolkit/observable/src/dimension.observable.ts","projects/scion/toolkit/observable/src/mutation.observable.ts","projects/scion/toolkit/observable/src/bounding-client-rect.observable.ts","projects/scion/microfrontend-platform/src/lib/platform.model.ts","projects/scion/microfrontend-platform/src/lib/messaging.model.ts","projects/scion/microfrontend-platform/src/lib/ɵmessaging.model.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/message-client.ts","projects/scion/microfrontend-platform/src/lib/topic-matcher.util.ts","projects/scion/microfrontend-platform/src/lib/operators.ts","projects/scion/microfrontend-platform/src/lib/version.ts","projects/scion/microfrontend-platform/src/lib/logger.ts","projects/scion/microfrontend-platform/src/lib/platform-state.ts","projects/scion/microfrontend-platform/src/lib/microfrontend-platform-ref.ts","projects/scion/microfrontend-platform/src/lib/safe-runner.ts","projects/scion/microfrontend-platform/src/lib/error.util.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/broker-gateway.ts","projects/scion/microfrontend-platform/src/lib/platform-property-service.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/intent-client.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-registry/manifest-registry.ts","projects/scion/microfrontend-platform/src/lib/url.util.ts","projects/scion/microfrontend-platform/src/lib/host/microfrontend-platform-config.ts","projects/scion/microfrontend-platform/src/lib/host/application-registry.ts","projects/scion/microfrontend-platform/src/lib/host/http-client.ts","projects/scion/microfrontend-platform/src/lib/host/progress-monitor/progress-monitor.ts","projects/scion/microfrontend-platform/src/lib/host/progress-monitor/progress-monitors.ts","projects/scion/microfrontend-platform/src/lib/host/host-manifest-interceptor.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-collector.ts","projects/scion/microfrontend-platform/src/lib/host/client-registry/client.registry.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/topic-subscription.registry.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/retained-message-store.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/message-interception.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/param-matcher.ts","projects/scion/microfrontend-platform/src/lib/host/client-registry/client.constants.ts","projects/scion/microfrontend-platform/src/lib/host/client-registry/ɵclient.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/message-broker.ts","projects/scion/microfrontend-platform/src/lib/client/context/context.model.ts","projects/scion/microfrontend-platform/src/lib/client/context/router-outlet-context-provider.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/router-outlet-url-assigner.ts","projects/scion/microfrontend-platform/src/lib/client/keyboard-event/keystroke.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/metadata.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/router-outlet.element.ts","projects/scion/microfrontend-platform/src/lib/client/context/context-service.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/relative-path-resolver.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/outlet-router.ts","projects/scion/microfrontend-platform/src/lib/client/focus/focus-monitor.ts","projects/scion/microfrontend-platform/src/lib/client/focus/focus-in-event-dispatcher.ts","projects/scion/microfrontend-platform/src/lib/host/focus/focus-tracker.ts","projects/scion/microfrontend-platform/src/lib/client/preferred-size/preferred-size-service.ts","projects/scion/microfrontend-platform/src/lib/client/mouse-event/mouse-move-event-dispatcher.ts","projects/scion/microfrontend-platform/src/lib/client/mouse-event/mouse-up-event-dispatcher.ts","projects/scion/microfrontend-platform/src/lib/client/keyboard-event/keyboard-event-dispatcher.ts","projects/scion/microfrontend-platform/src/lib/qualifier-matcher.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-registry/manifest-object-store.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-registry/ɵmanifest-registry.ts","projects/scion/microfrontend-platform/src/lib/client/manifest-registry/manifest-service.ts","projects/scion/microfrontend-platform/src/lib/host/activator/activator-installer.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/message-handler.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/ɵintent-client.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/ɵmessage-client.ts","projects/scion/microfrontend-platform/src/lib/host/host-application-config-provider.ts","projects/scion/microfrontend-platform/src/lib/microfrontend-platform-stopper.ts","projects/scion/microfrontend-platform/src/lib/host/client-registry/ɵclient.registry.ts","projects/scion/microfrontend-platform/src/lib/microfrontend-platform.ts","projects/scion/microfrontend-platform/src/lib/host/host-config.ts","src/refs.ts"],"sourcesContent":["const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++\n  debug(index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$')\n","// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\nmodule.exports = {\n  SEMVER_SPEC_VERSION,\n  MAX_LENGTH,\n  MAX_SAFE_INTEGER,\n  MAX_SAFE_COMPONENT_LENGTH\n}\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier)\n        this.inc('pre', identifier)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier)\n        }\n        this.inc('pre', identifier)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre':\n        if (this.prerelease.length === 0) {\n          this.prerelease = [0]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            this.prerelease.push(0)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          if (this.prerelease[0] === identifier) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = [identifier, 0]\n            }\n          } else {\n            this.prerelease = [identifier, 0]\n          }\n        }\n        break\n\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.format()\n    this.raw = this.version\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nconst opts = ['includePrerelease', 'loose', 'rtl']\nconst parseOptions = options =>\n  !options ? {}\n  : typeof options !== 'object' ? { loose: true }\n  : opts.filter(k => options[k]).reduce((options, k) => {\n    options[k] = true\n    return options\n  }, {})\nmodule.exports = parseOptions\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers\n}\n","const {MAX_LENGTH} = require('../internal/constants')\nconst { re, t } = require('../internal/re')\nconst SemVer = require('../classes/semver')\n\nconst parseOptions = require('../internal/parse-options')\nconst parse = (version, options) => {\n  options = parseOptions(options)\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  const r = options.loose ? re[t.LOOSE] : re[t.FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nmodule.exports = parse\n","const parse = require('./parse')\nconst valid = (version, options) => {\n  const v = parse(version, options)\n  return v ? v.version : null\n}\nmodule.exports = valid\n","const parse = require('./parse')\nconst clean = (version, options) => {\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\nmodule.exports = clean\n","const SemVer = require('../classes/semver')\n\nconst inc = (version, release, options, identifier) => {\n  if (typeof (options) === 'string') {\n    identifier = options\n    options = undefined\n  }\n\n  try {\n    return new SemVer(version, options).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = inc\n","const parse = require('./parse')\nconst eq = require('./eq')\n\nconst diff = (version1, version2) => {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    const v1 = parse(version1)\n    const v2 = parse(version2)\n    const hasPre = v1.prerelease.length || v2.prerelease.length\n    const prefix = hasPre ? 'pre' : ''\n    const defaultResult = hasPre ? 'prerelease' : ''\n    for (const key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\nmodule.exports = diff\n","const compare = require('./compare')\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\nmodule.exports = eq\n","const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const SemVer = require('../classes/semver')\nconst major = (a, loose) => new SemVer(a, loose).major\nmodule.exports = major\n","const SemVer = require('../classes/semver')\nconst minor = (a, loose) => new SemVer(a, loose).minor\nmodule.exports = minor\n","const SemVer = require('../classes/semver')\nconst patch = (a, loose) => new SemVer(a, loose).patch\nmodule.exports = patch\n","const parse = require('./parse')\nconst prerelease = (version, options) => {\n  const parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\nmodule.exports = prerelease\n","const compare = require('./compare')\nconst rcompare = (a, b, loose) => compare(b, a, loose)\nmodule.exports = rcompare\n","const compare = require('./compare')\nconst compareLoose = (a, b) => compare(a, b, true)\nmodule.exports = compareLoose\n","const SemVer = require('../classes/semver')\nconst compareBuild = (a, b, loose) => {\n  const versionA = new SemVer(a, loose)\n  const versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\nmodule.exports = compareBuild\n","const compareBuild = require('./compare-build')\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\nmodule.exports = sort\n","const compareBuild = require('./compare-build')\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\nmodule.exports = rsort\n","const compare = require('./compare')\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\nmodule.exports = gt\n","const compare = require('./compare')\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\nmodule.exports = lt\n","const compare = require('./compare')\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\nmodule.exports = neq\n","const compare = require('./compare')\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\nmodule.exports = gte\n","const compare = require('./compare')\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\nmodule.exports = lte\n","const eq = require('./eq')\nconst neq = require('./neq')\nconst gt = require('./gt')\nconst gte = require('./gte')\nconst lt = require('./lt')\nconst lte = require('./lte')\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n","const SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst {re, t} = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    let next\n    while ((next = re[t.COERCERTL].exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    re[t.COERCERTL].lastIndex = -1\n  }\n\n  if (match === null)\n    return null\n\n  return parse(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)\n}\nmodule.exports = coerce\n","const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (!options || typeof options !== 'object') {\n      options = {\n        loose: !!options,\n        includePrerelease: false\n      }\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    const sameDirectionIncreasing =\n      (this.operator === '>=' || this.operator === '>') &&\n      (comp.operator === '>=' || comp.operator === '>')\n    const sameDirectionDecreasing =\n      (this.operator === '<=' || this.operator === '<') &&\n      (comp.operator === '<=' || comp.operator === '<')\n    const sameSemVer = this.semver.version === comp.semver.version\n    const differentDirectionsInclusive =\n      (this.operator === '>=' || this.operator === '<=') &&\n      (comp.operator === '>=' || comp.operator === '<=')\n    const oppositeDirectionsLessThan =\n      cmp(this.semver, '<', comp.semver, options) &&\n      (this.operator === '>=' || this.operator === '>') &&\n        (comp.operator === '<=' || comp.operator === '<')\n    const oppositeDirectionsGreaterThan =\n      cmp(this.semver, '>', comp.semver, options) &&\n      (this.operator === '<=' || this.operator === '<') &&\n        (comp.operator === '>=' || comp.operator === '>')\n\n    return (\n      sameDirectionIncreasing ||\n      sameDirectionDecreasing ||\n      (sameSemVer && differentDirectionsInclusive) ||\n      oppositeDirectionsLessThan ||\n      oppositeDirectionsGreaterThan\n    )\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst {re, t} = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n","// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First, split based on boolean or ||\n    this.raw = range\n    this.set = range\n      .split(/\\s*\\|\\|\\s*/)\n      // map the range to a 2d array of comparators\n      .map(range => this.parseRange(range.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0)\n        this.set = [first]\n      else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(' ').trim()\n      })\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    range = range.trim()\n\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts = Object.keys(this.options).join(',')\n    const memoKey = `parseRange:${memoOpts}:${range}`\n    const cached = cache.get(memoKey)\n    if (cached)\n      return cached\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range, re[t.COMPARATORTRIM])\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ')\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n      // in loose mode, throw out any that are not valid comparators\n      .filter(this.options.loose ? comp => !!comp.match(compRe) : () => true)\n      .map(comp => new Comparator(comp, this.options))\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const l = rangeList.length\n    const rangeMap = new Map()\n    for (const comp of rangeList) {\n      if (isNullSet(comp))\n        return [comp]\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has(''))\n      rangeMap.delete('')\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\nmodule.exports = Range\n\nconst LRU = require('lru-cache')\nconst cache = new LRU({ max: 1000 })\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace\n} = require('../internal/re')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\nconst replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((comp) => {\n    return replaceTilde(comp, options)\n  }).join(' ')\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\nconst replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((comp) => {\n    return replaceCaret(comp, options)\n  }).join(' ')\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map((comp) => {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<')\n        pr = '-0'\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp.trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return (`${from} ${to}`).trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","const Range = require('../classes/range')\nconst satisfies = (version, range, options) => {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\nmodule.exports = satisfies\n","const Range = require('../classes/range')\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\n\nmodule.exports = toComparators\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null\n  let maxSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\nmodule.exports = maxSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst minSatisfying = (versions, range, options) => {\n  let min = null\n  let minSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\nmodule.exports = minSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst gt = require('../functions/gt')\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let setMin = null\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt(compver, setMin)) {\n            setMin = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n    if (setMin && (!minver || gt(minver, setMin)))\n      minver = setMin\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n","const Range = require('../classes/range')\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = validRange\n","const SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst {ANY} = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n","// Determine if version is greater than all the versions possible in the range.\nconst outside = require('./outside')\nconst gtr = (version, range, options) => outside(version, range, '>', options)\nmodule.exports = gtr\n","const outside = require('./outside')\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options)\nmodule.exports = ltr\n","const Range = require('../classes/range')\nconst intersects = (r1, r2, options) => {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\nmodule.exports = intersects\n","// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let min = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!min)\n        min = version\n    } else {\n      if (prev) {\n        set.push([min, prev])\n      }\n      prev = null\n      min = null\n    }\n  }\n  if (min)\n    set.push([min, null])\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max)\n      ranges.push(min)\n    else if (!max && min === v[0])\n      ranges.push('*')\n    else if (!max)\n      ranges.push(`>=${min}`)\n    else if (min === v[0])\n      ranges.push(`<=${max}`)\n    else\n      ranges.push(`${min} - ${max}`)\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n","const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom)\n    return true\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub)\n        continue OUTER\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull)\n      return false\n  }\n  return true\n}\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom)\n    return true\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY)\n      return true\n    else if (options.includePrerelease)\n      sub = [ new Comparator('>=0.0.0-0') ]\n    else\n      sub = [ new Comparator('>=0.0.0') ]\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease)\n      return true\n    else\n      dom = [ new Comparator('>=0.0.0') ]\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=')\n      gt = higherGT(gt, c, options)\n    else if (c.operator === '<' || c.operator === '<=')\n      lt = lowerLT(lt, c, options)\n    else\n      eqSet.add(c.semver)\n  }\n\n  if (eqSet.size > 1)\n    return null\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0)\n      return null\n    else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<='))\n      return null\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options))\n      return null\n\n    if (lt && !satisfies(eq, String(lt), options))\n      return null\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options))\n        return false\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt)\n          return false\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options))\n        return false\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt)\n          return false\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options))\n        return false\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0)\n      return false\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0)\n    return false\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0)\n    return false\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre)\n    return false\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a)\n    return b\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a)\n    return b\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n","/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.9.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA256_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (outputType, is224) {\n    return function (message) {\n      return new Sha256(is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function (is224) {\n    var method = createOutputMethod('hex', is224);\n    if (NODE_JS) {\n      method = nodeWrap(method, is224);\n    }\n    method.create = function () {\n      return new Sha256(is224);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method, is224) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var algorithm = is224 ? 'sha224' : 'sha256';\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw new Error(ERROR);\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  var createHmacOutputMethod = function (outputType, is224) {\n    return function (key, message) {\n      return new HmacSha256(key, is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createHmacMethod = function (is224) {\n    var method = createHmacOutputMethod('hex', is224);\n    method.create = function (key) {\n      return new HmacSha256(key, is224);\n    };\n    method.update = function (key, message) {\n      return method.create(key).update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createHmacOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  function Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    if (is224) {\n      this.h0 = 0xc1059ed8;\n      this.h1 = 0x367cd507;\n      this.h2 = 0x3070dd17;\n      this.h3 = 0xf70e5939;\n      this.h4 = 0xffc00b31;\n      this.h5 = 0x68581511;\n      this.h6 = 0x64f98fa7;\n      this.h7 = 0xbefa4fa4;\n    } else { // 256\n      this.h0 = 0x6a09e667;\n      this.h1 = 0xbb67ae85;\n      this.h2 = 0x3c6ef372;\n      this.h3 = 0xa54ff53a;\n      this.h4 = 0x510e527f;\n      this.h5 = 0x9b05688c;\n      this.h6 = 0x1f83d9ab;\n      this.h7 = 0x5be0cd19;\n    }\n\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n  }\n\n  Sha256.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n          blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n          blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Sha256.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha256.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\n      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n\n    for (j = 16; j < 64; ++j) {\n      // rightrotate\n      t1 = blocks[j - 15];\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n      t1 = blocks[j - 2];\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n    }\n\n    bc = b & c;\n    for (j = 0; j < 64; j += 4) {\n      if (this.first) {\n        if (this.is224) {\n          ab = 300032;\n          t1 = blocks[0] - 1413257819;\n          h = t1 - 150054599 << 0;\n          d = t1 + 24177077 << 0;\n        } else {\n          ab = 704751109;\n          t1 = blocks[0] - 210244248;\n          h = t1 - 1521486534 << 0;\n          d = t1 + 143694565 << 0;\n        }\n        this.first = false;\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\n        ab = a & b;\n        maj = ab ^ (a & c) ^ bc;\n        ch = (e & f) ^ (~e & g);\n        t1 = h + s1 + ch + K[j] + blocks[j];\n        t2 = s0 + maj;\n        h = d + t1 << 0;\n        d = t1 + t2 << 0;\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\n      da = d & a;\n      maj = da ^ (d & b) ^ ab;\n      ch = (h & e) ^ (~h & f);\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n      t2 = s0 + maj;\n      g = c + t1 << 0;\n      c = t1 + t2 << 0;\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\n      cd = c & d;\n      maj = cd ^ (c & a) ^ da;\n      ch = (g & h) ^ (~g & e);\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n      t2 = s0 + maj;\n      f = b + t1 << 0;\n      b = t1 + t2 << 0;\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\n      bc = b & c;\n      maj = bc ^ (b & d) ^ cd;\n      ch = (f & g) ^ (~f & h);\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n      t2 = s0 + maj;\n      e = a + t1 << 0;\n      a = t1 + t2 << 0;\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n    this.h5 = this.h5 + f << 0;\n    this.h6 = this.h6 + g << 0;\n    this.h7 = this.h7 + h << 0;\n  };\n\n  Sha256.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\n      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\n      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\n      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\n      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +\n      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +\n      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +\n      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\n      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +\n      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +\n      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +\n      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\n    if (!this.is224) {\n      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +\n        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +\n        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +\n        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\n    }\n    return hex;\n  };\n\n  Sha256.prototype.toString = Sha256.prototype.hex;\n\n  Sha256.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var arr = [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\n    ];\n    if (!this.is224) {\n      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\n    }\n    return arr;\n  };\n\n  Sha256.prototype.array = Sha256.prototype.digest;\n\n  Sha256.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n      dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n  };\n\n  function HmacSha256(key, is224, sharedMemory) {\n    var i, type = typeof key;\n    if (type === 'string') {\n      var bytes = [], length = key.length, index = 0, code;\n      for (i = 0; i < length; ++i) {\n        code = key.charCodeAt(i);\n        if (code < 0x80) {\n          bytes[index++] = code;\n        } else if (code < 0x800) {\n          bytes[index++] = (0xc0 | (code >> 6));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes[index++] = (0xe0 | (code >> 12));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\n          bytes[index++] = (0xf0 | (code >> 18));\n          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        }\n      }\n      key = bytes;\n    } else {\n      if (type === 'object') {\n        if (key === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\n          key = new Uint8Array(key);\n        } else if (!Array.isArray(key)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n    }\n\n    if (key.length > 64) {\n      key = (new Sha256(is224, true)).update(key).array();\n    }\n\n    var oKeyPad = [], iKeyPad = [];\n    for (i = 0; i < 64; ++i) {\n      var b = key[i] || 0;\n      oKeyPad[i] = 0x5c ^ b;\n      iKeyPad[i] = 0x36 ^ b;\n    }\n\n    Sha256.call(this, is224, sharedMemory);\n\n    this.update(iKeyPad);\n    this.oKeyPad = oKeyPad;\n    this.inner = true;\n    this.sharedMemory = sharedMemory;\n  }\n  HmacSha256.prototype = new Sha256();\n\n  HmacSha256.prototype.finalize = function () {\n    Sha256.prototype.finalize.call(this);\n    if (this.inner) {\n      this.inner = false;\n      var innerHash = this.array();\n      Sha256.call(this, this.is224, this.sharedMemory);\n      this.update(this.oKeyPad);\n      this.update(innerHash);\n      Sha256.prototype.finalize.call(this);\n    }\n  };\n\n  var exports = createMethod();\n  exports.sha256 = exports;\n  exports.sha224 = createMethod(true);\n  exports.sha256.hmac = createHmacMethod();\n  exports.sha224.hmac = createHmacMethod(true);\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha256 = exports.sha256;\n    root.sha224 = exports.sha224;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n","/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n","/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the finalization\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown: initialFinalizer } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _finalizers } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The finalization logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the finalizer if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever finalizer is handed to it automatically.\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = this._finalizers ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All finalizer instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The finalizer to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _finalizers } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n","type SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearTimeoutFunction = (handle: number) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const {delegate} = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle);\n  },\n  delegate: undefined,\n};\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n","import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\n/**\n * Internal optimization only, DO NOT EXPOSE.\n * @internal\n */\nclass ConsumerObserver<T> implements Observer<T> {\n  constructor(private partialObserver: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    const { partialObserver } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n\n  error(err: any): void {\n    const { partialObserver } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n\n  complete(): void {\n    const { partialObserver } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let partialObserver: Partial<Observer<T>>;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      partialObserver = {\n        next: observerOrNext ?? undefined,\n        error: error ?? undefined,\n        complete: complete ?? undefined,\n      };\n    } else {\n      // The first argument is a partial observer.\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context),\n        };\n      } else {\n        // The \"normal\" path. Just use the partial observer directly.\n        partialObserver = observerOrNext;\n      }\n    }\n\n    // Wrap the partial observer to ensure it's a full observer, and\n    // make sure proper error handling is accounted for.\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\n\nfunction handleUnhandledError(error: any) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    // Ideal path, we report this as an unhandled error,\n    // which is thrown on a new call stack.\n    reportUnhandledError(error);\n  }\n}\n\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n","/**\n * This function takes one parameter and just returns it. Simply put,\n * this is like `<T>(x: T): T => x`.\n *\n * ## Examples\n *\n * This is useful in some cases when using things like `mergeMap`\n *\n * ```ts\n * import { interval, take, map, range, mergeMap, identity } from 'rxjs';\n *\n * const source$ = interval(1000).pipe(take(5));\n *\n * const result$ = source$.pipe(\n *   map(i => range(i)),\n *   mergeMap(identity) // same as mergeMap(x => x)\n * );\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * Or when you want to selectively apply an operator\n *\n * ```ts\n * import { interval, take, identity } from 'rxjs';\n *\n * const shouldLimit = () => Math.random() < 0.5;\n *\n * const source$ = interval(1000);\n *\n * const result$ = source$.pipe(shouldLimit() ? take(5) : identity);\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * @param x Any value that is returned by this function\n * @returns The value passed as the first parameter to this function\n */\nexport function identity<T>(x: T): T {\n  return x;\n}\n","import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\n/**\n * pipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\n * and uses it to return a value.\n * It returns a function that takes one argument, passes it to the first UnaryFunction, and then\n * passes the result to the next one, passes that result to the next one, and so on.  \n */\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: Partial<Observer<T>>): Subscription;\n  subscribe(next: (value: T) => void): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Examples\n   *\n   * Subscribe with an {@link guide/observer Observer}\n   *\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Subscribe with functions ({@link deprecations/subscribe-arguments deprecated})\n   *\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Cancel a subscription\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // 'unsubscribed!' after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   * or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   * Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   * the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, take } from 'rxjs';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *   let total = 0;\n   *\n   *   await source$.forEach(value => {\n   *     total += value;\n   *     console.log('observable -> ' + value);\n   *   });\n   *\n   *   return total;\n   * }\n   *\n   * getTotal().then(\n   *   total => console.log('Total: ' + total)\n   * );\n   *\n   * // Expected:\n   * // 'observable -> 0'\n   * // 'observable -> 1'\n   * // 'observable -> 2'\n   * // 'observable -> 3'\n   * // 'Total: 6'\n   * ```\n   *\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      const subscriber = new SafeSubscriber<T>({\n        next: (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve,\n      });\n      this.subscribe(subscriber);\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, filter, map, scan } from 'rxjs';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x));\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface ObjectUnsubscribedError extends Error {}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ObjectUnsubscribedError;\n}\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = createErrorClass(\n  (_super) =>\n    function ObjectUnsubscribedErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ObjectUnsubscribedError';\n      this.message = 'object unsubscribed';\n    }\n);\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n\n  getValue(): T {\n    const { hasError, thrownError, _value } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n\n  next(value: T): void {\n    super.next((this._value = value));\n  }\n}\n","import { TimestampProvider } from '../types';\n\ninterface DateTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const dateTimestampProvider: DateTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (dateTimestampProvider.delegate || Date).now();\n  },\n  delegate: undefined,\n};\n","import { Subject } from './Subject';\nimport { TimestampProvider } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n *\n * `ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n * `ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\n * value for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n *\n * When a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\n * a First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\n * error if it has observed an error.\n *\n * There are two main configuration items to be concerned with:\n *\n * 1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n * 2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n *\n * Both configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\n * are less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n *\n * ### Differences with BehaviorSubject\n *\n * `BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple fo exceptions:\n *\n * 1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n * 2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n * @see {@link shareReplay}\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _buffer: (T | number)[] = [];\n  private _infiniteTimeWindow = true;\n\n  /**\n   * @param bufferSize The size of the buffer to replay on subscription\n   * @param windowTime The amount of time the buffered items will say buffered\n   * @param timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\n   * calculate the amount of time something has been buffered.\n   */\n  constructor(\n    private _bufferSize = Infinity,\n    private _windowTime = Infinity,\n    private _timestampProvider: TimestampProvider = dateTimestampProvider\n  ) {\n    super();\n    this._infiniteTimeWindow = _windowTime === Infinity;\n    this._bufferSize = Math.max(1, _bufferSize);\n    this._windowTime = Math.max(1, _windowTime);\n  }\n\n  next(value: T): void {\n    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n    if (!isStopped) {\n      _buffer.push(value);\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n    this._trimBuffer();\n    super.next(value);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._trimBuffer();\n\n    const subscription = this._innerSubscribe(subscriber);\n\n    const { _infiniteTimeWindow, _buffer } = this;\n    // We use a copy here, so reentrant code does not mutate our array while we're\n    // emitting it to a new subscriber.\n    const copy = _buffer.slice();\n    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i] as T);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  }\n\n  private _trimBuffer() {\n    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n    // If we don't have an infinite buffer size, and we're over the length,\n    // use splice to truncate the old buffer values off. Note that we have to\n    // double the size for instances where we're not using an infinite time window\n    // because we're storing the values and the timestamps in the same array.\n    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    // Now, if we're not in an infinite time window, remove all values where the time is\n    // older than what is allowed.\n    if (!_infiniteTimeWindow) {\n      const now = _timestampProvider.now();\n      let last = 0;\n      // Search the array for the first timestamp that isn't expired and\n      // truncate the buffer up to that point.\n      for (let i = 1; i < _buffer.length && (_buffer[i] as number) <= now; i += 2) {\n        last = i;\n      }\n      last && _buffer.splice(0, last + 1);\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private _value: T | null = null;\n  private _hasValue = false;\n  private _isComplete = false;\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<T>) {\n    const { hasError, _hasValue, _value, thrownError, isStopped, _isComplete } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped || _isComplete) {\n      _hasValue && subscriber.next(_value!);\n      subscriber.complete();\n    }\n  }\n\n  next(value: T): void {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  }\n\n  complete(): void {\n    const { _hasValue, _value, _isComplete } = this;\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && super.next(_value!);\n      super.complete();\n    }\n  }\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface EmptyError extends Error {}\n\nexport interface EmptyErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): EmptyError;\n}\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n * @see {@link firstValueFrom}\n * @see {@link lastValueFrom}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = createErrorClass((_super) => function EmptyErrorImpl(this: any) {\n  _super(this);\n  this.name = 'EmptyError';\n  this.message = 'no elements in sequence';\n});\n","import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\n\nexport interface LastValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function lastValueFrom<T, D>(source: Observable<T>, config: LastValueFromConfig<D>): Promise<T | D>;\nexport function lastValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * waiting for it to complete, and resolving the returned promise with the\n * last value from the observed stream.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will complete. If the source\n * observable does not complete, you will end up with a promise that is hung up, and\n * potentially all of the state of an async function hanging out in memory. To avoid\n * this situation, look into adding something like {@link timeout}, {@link take},\n * {@link takeWhile}, or {@link takeUntil} amongst others.\n *\n * ## Example\n *\n * Wait for the last value from a stream and emit it from a promise in\n * an async function\n *\n * ```ts\n * import { interval, take, lastValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000).pipe(take(10));\n *   const finalNumber = await lastValueFrom(source$);\n *   console.log(`The final number is ${ finalNumber }`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // 'The final number is 9'\n * ```\n *\n * @see {@link firstValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function lastValueFrom<T, D>(source: Observable<T>, config?: LastValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    let _hasValue = false;\n    let _value: T;\n    source.subscribe({\n      next: (value) => {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: () => {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n  });\n}\n","import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\n\nexport interface FirstValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function firstValueFrom<T, D>(source: Observable<T>, config: FirstValueFromConfig<D>): Promise<T | D>;\nexport function firstValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * and returning a promise that will resolve as soon as the first value\n * arrives from the observable. The subscription will then be closed.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will emit at least one value,\n * *OR* complete. If the source observable does not emit one value or complete, you will\n * end up with a promise that is hung up, and potentially all of the state of an\n * async function hanging out in memory. To avoid this situation, look into adding\n * something like {@link timeout}, {@link take}, {@link takeWhile}, or {@link takeUntil}\n * amongst others.\n *\n * ## Example\n *\n * Wait for the first value from a stream and emit it from a promise in\n * an async function\n *\n * ```ts\n * import { interval, firstValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000);\n *   const firstNumber = await firstValueFrom(source$);\n *   console.log(`The first number is ${ firstNumber }`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // 'The first number is 0'\n * ```\n *\n * @see {@link lastValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function firstValueFrom<T, D>(source: Observable<T>, config?: FirstValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    const subscriber = new SafeSubscriber<T>({\n      next: (value) => {\n        resolve(value);\n        subscriber.unsubscribe();\n      },\n      error: reject,\n      complete: () => {\n        if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n    source.subscribe(subscriber);\n  });\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","type SetIntervalFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearIntervalFunction = (handle: number) => void;\n\ninterface IntervalProvider {\n  setInterval: SetIntervalFunction;\n  clearInterval: ClearIntervalFunction;\n  delegate:\n    | {\n        setInterval: SetIntervalFunction;\n        clearInterval: ClearIntervalFunction;\n      }\n    | undefined;\n}\n\nexport const intervalProvider: IntervalProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setInterval(handler: () => void, timeout?: number, ...args) {\n    const {delegate} = intervalProvider;\n    if (delegate?.setInterval) {\n      return delegate.setInterval(handler, timeout, ...args);\n    }\n    return setInterval(handler, timeout, ...args);\n  },\n  clearInterval(handle) {\n    const { delegate } = intervalProvider;\n    return (delegate?.clearInterval || clearInterval)(handle);\n  },\n  delegate: undefined,\n};\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\n\nexport class AsyncAction<T> extends Action<T> {\n  public id: any;\n  public state?: T;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, _id?: any, delay: number = 0): any {\n    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(_scheduler: AsyncScheduler, id: any, delay: number | null = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    intervalProvider.clearInterval(id);\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, _delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      // HACK: Since code elsewhere is relying on the \"truthiness\" of the\n      // return here, we can't have it return \"\" or 0 or false.\n      // TODO: Clean this up when we refactor schedulers mid-version-8 or so.\n      errorValue = e ? e : new Error('Scheduled action threw falsy error');\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      const { id, scheduler } = this;\n      const { actions } = scheduler;\n\n      this.work = this.state = this.scheduler = null!;\n      this.pending = false;\n\n      arrRemove(actions, this);\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null!;\n      super.unsubscribe();\n    }\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}. Will be made internal in v8.\n */\nexport class Scheduler implements SchedulerLike {\n  public static now: () => number = dateTimestampProvider.now;\n\n  constructor(private schedulerActionCtor: typeof Action, now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * const task = () => console.log('it works!');\n *\n * asyncScheduler.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * asyncScheduler.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n */\n\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\n\n/**\n * @deprecated Renamed to {@link asyncScheduler}. Will be removed in v8.\n */\nexport const async = asyncScheduler;\n","/**\n * Checks to see if a value is not only a `Date` object,\n * but a *valid* `Date` object that can be converted to a\n * number. For example, `new Date('blah')` is indeed an\n * `instanceof Date`, however it cannot be converted to a\n * number.\n */\nexport function isValidDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value as any);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n","import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n","/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n","import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n","import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n","import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { isValidDate } from '../util/isDate';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport interface TimeoutConfig<T, O extends ObservableInput<unknown> = ObservableInput<T>, M = unknown> {\n  /**\n   * The time allowed between values from the source before timeout is triggered.\n   */\n  each?: number;\n\n  /**\n   * The relative time as a `number` in milliseconds, or a specific time as a `Date` object,\n   * by which the first value must arrive from the source before timeout is triggered.\n   */\n  first?: number | Date;\n\n  /**\n   * The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\n   */\n  scheduler?: SchedulerLike;\n\n  /**\n   * A factory used to create observable to switch to when timeout occurs. Provides\n   * a {@link TimeoutInfo} about the source observable's emissions and what delay or\n   * exact time triggered the timeout.\n   */\n  with?: (info: TimeoutInfo<T, M>) => O;\n\n  /**\n   * Optional additional metadata you can provide to code that handles\n   * the timeout, will be provided through the {@link TimeoutError}.\n   * This can be used to help identify the source of a timeout or pass along\n   * other information related to the timeout.\n   */\n  meta?: M;\n}\n\nexport interface TimeoutInfo<T, M = unknown> {\n  /** Optional metadata that was provided to the timeout configuration. */\n  readonly meta: M;\n  /** The number of messages seen before the timeout */\n  readonly seen: number;\n  /** The last message seen */\n  readonly lastValue: T | null;\n}\n\n/**\n * An error emitted when a timeout occurs.\n */\nexport interface TimeoutError<T = unknown, M = unknown> extends Error {\n  /**\n   * The information provided to the error by the timeout\n   * operation that created the error. Will be `null` if\n   * used directly in non-RxJS code with an empty constructor.\n   * (Note that using this constructor directly is not recommended,\n   * you should create your own errors)\n   */\n  info: TimeoutInfo<T, M> | null;\n}\n\nexport interface TimeoutErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new <T = unknown, M = unknown>(info?: TimeoutInfo<T, M>): TimeoutError<T, M>;\n}\n\n/**\n * An error thrown by the {@link timeout} operator.\n *\n * Provided so users can use as a type and do quality comparisons.\n * We recommend you do not subclass this or create instances of this class directly.\n * If you have need of a error representing a timeout, you should\n * create your own error class and use that.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport const TimeoutError: TimeoutErrorCtor = createErrorClass(\n  (_super) =>\n    function TimeoutErrorImpl(this: any, info: TimeoutInfo<any> | null = null) {\n      _super(this);\n      this.message = 'Timeout has occurred';\n      this.name = 'TimeoutError';\n      this.info = info;\n    }\n);\n\n/**\n * If `with` is provided, this will return an observable that will switch to a different observable if the source\n * does not push values within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ## Examples\n *\n * Emit a custom error if there is too much time between values\n *\n * ```ts\n * import { interval, timeout, throwError } from 'rxjs';\n *\n * class CustomTimeoutError extends Error {\n *   constructor() {\n *     super('It was too slow');\n *     this.name = 'CustomTimeoutError';\n *   }\n * }\n *\n * const slow$ = interval(900);\n *\n * slow$.pipe(\n *   timeout({\n *     each: 1000,\n *     with: () => throwError(() => new CustomTimeoutError())\n *   })\n * )\n * .subscribe({\n *   error: console.error\n * });\n * ```\n *\n * Switch to a faster observable if your source is slow.\n *\n * ```ts\n * import { interval, timeout } from 'rxjs';\n *\n * const slow$ = interval(900);\n * const fast$ = interval(500);\n *\n * slow$.pipe(\n *   timeout({\n *     each: 1000,\n *     with: () => fast$,\n *   })\n * )\n * .subscribe(console.log);\n * ```\n * @param config The configuration for the timeout.\n */\nexport function timeout<T, O extends ObservableInput<unknown>, M = unknown>(\n  config: TimeoutConfig<T, O, M> & { with: (info: TimeoutInfo<T, M>) => O }\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n\n/**\n * Returns an observable that will error or switch to a different observable if the source does not push values\n * within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ### Handling TimeoutErrors\n *\n * If no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\n * The timeout error provides useful information you can examine when you're handling the error. The most common way to handle\n * the error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\n * directly, if your error handling is only a side effect (such as notifying the user, or logging).\n *\n * In this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\n * not from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\n *\n * ## Examples\n *\n * Emit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\n *\n * ```ts\n * import { interval, timeout } from 'rxjs';\n *\n * // A random interval that lasts between 0 and 10 seconds per tick\n * const source$ = interval(Math.round(Math.random() * 10_000));\n *\n * source$.pipe(\n *   timeout({ first: 5_000 })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * Emit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\n * and subscription.\n *\n * ```ts\n * import { timer, timeout, expand } from 'rxjs';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10_000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime())\n *   .pipe(expand(() => timer(getRandomTime())));\n *\n * source$\n *   .pipe(timeout({ each: 5_000 }))\n *   .subscribe({\n *     next: console.log,\n *     error: console.error\n *   });\n * ```\n *\n * Emit a {@link TimeoutError} if the source does not emit before 7 seconds, _or_ if the source waits longer than\n * 5 seconds between any two values after the first.\n *\n * ```ts\n * import { timer, timeout, expand } from 'rxjs';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10_000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime())\n *   .pipe(expand(() => timer(getRandomTime())));\n *\n * source$\n *   .pipe(timeout({ first: 7_000, each: 5_000 }))\n *   .subscribe({\n *     next: console.log,\n *     error: console.error\n *   });\n * ```\n */\nexport function timeout<T, M = unknown>(config: Omit<TimeoutConfig<T, any, M>, 'with'>): OperatorFunction<T, T>;\n\n/**\n * Returns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\n * This is functionally the same as `timeout({ first: someDate })`.\n *\n * <span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\n *\n * ![](timeout.png)\n *\n * @param first The date to at which the resulting observable will timeout if the source observable\n * does not emit at least one value.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(first: Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an observable that will error if the source does not push a value within the specified time in milliseconds.\n * This is functionally the same as `timeout({ each: milliseconds })`.\n *\n * <span class=\"informal\">Errors if it waits too long between any value</span>\n *\n * ![](timeout.png)\n *\n * @param each The time allowed between each pushed value from the source before the resulting observable\n * will timeout.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(each: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * ![](timeout.png)\n *\n * @see {@link timeoutWith}\n *\n * @return A function that returns an Observable that mirrors behaviour of the\n * source Observable, unless timeout happens when it throws an error.\n */\nexport function timeout<T, O extends ObservableInput<any>, M>(\n  config: number | Date | TimeoutConfig<T, O, M>,\n  schedulerArg?: SchedulerLike\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  // Intentionally terse code.\n  // If the first argument is a valid `Date`, then we use it as the `first` config.\n  // Otherwise, if the first argument is a `number`, then we use it as the `each` config.\n  // Otherwise, it can be assumed the first argument is the configuration object itself, and\n  // we destructure that into what we're going to use, setting important defaults as we do.\n  // NOTE: The default for `scheduler` will be the `scheduler` argument if it exists, or\n  // it will default to the `asyncScheduler`.\n  const {\n    first,\n    each,\n    with: _with = timeoutErrorFactory,\n    scheduler = schedulerArg ?? asyncScheduler,\n    meta = null!,\n  } = (isValidDate(config) ? { first: config } : typeof config === 'number' ? { each: config } : config) as TimeoutConfig<T, O, M>;\n\n  if (first == null && each == null) {\n    // Ensure timeout was provided at runtime.\n    throw new TypeError('No timeout provided.');\n  }\n\n  return operate((source, subscriber) => {\n    // This subscription encapsulates our subscription to the\n    // source for this operator. We're capturing it separately,\n    // because if there is a `with` observable to fail over to,\n    // we want to unsubscribe from our original subscription, and\n    // hand of the subscription to that one.\n    let originalSourceSubscription: Subscription;\n    // The subscription for our timeout timer. This changes\n    // every time get get a new value.\n    let timerSubscription: Subscription;\n    // A bit of state we pass to our with and error factories to\n    // tell what the last value we saw was.\n    let lastValue: T | null = null;\n    // A bit of state we pass to the with and error factories to\n    // tell how many values we have seen so far.\n    let seen = 0;\n    const startTimer = (delay: number) => {\n      timerSubscription = executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          try {\n            originalSourceSubscription.unsubscribe();\n            innerFrom(\n              _with!({\n                meta,\n                lastValue,\n                seen,\n              })\n            ).subscribe(subscriber);\n          } catch (err) {\n            subscriber.error(err);\n          }\n        },\n        delay\n      );\n    };\n\n    originalSourceSubscription = source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // clear the timer so we can emit and start another one.\n          timerSubscription?.unsubscribe();\n          seen++;\n          // Emit\n          subscriber.next((lastValue = value));\n          // null | undefined are both < 0. Thanks, JavaScript.\n          each! > 0 && startTimer(each!);\n        },\n        undefined,\n        undefined,\n        () => {\n          if (!timerSubscription?.closed) {\n            timerSubscription?.unsubscribe();\n          }\n          // Be sure not to hold the last value in memory after unsubscription\n          // it could be quite large.\n          lastValue = null;\n        }\n      )\n    );\n\n    // Intentionally terse code.\n    // If we've `seen` a value, that means the \"first\" clause was met already, if it existed.\n    //   it also means that a timer was already started for \"each\" (in the next handler above).\n    // If `first` was provided, and it's a number, then use it.\n    // If `first` was provided and it's not a number, it's a Date, and we get the difference between it and \"now\".\n    // If `first` was not provided at all, then our first timer will be the value from `each`.\n    !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler!.now()) : each!);\n  });\n}\n\n/**\n * The default function to use to emit an error when timeout occurs and a `with` function\n * is not specified.\n * @param info The information about the timeout to pass along to the error\n */\nfunction timeoutErrorFactory(info: TimeoutInfo<any>): Observable<never> {\n  throw new TimeoutError(info);\n}\n","const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","/** @prettier */\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint\n *\n * ```ts\n * import { interval, observeOn, animationFrameScheduler } from 'rxjs';\n *\n * const someDiv = document.createElement('div');\n * someDiv.style.cssText = 'width: 200px;background: #09c';\n * document.body.appendChild(someDiv);\n * const intervals = interval(10);      // Intervals are scheduled\n *                                      // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\n * )                                    // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param delay Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\n        () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\n        (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\n      )\n    );\n  });\n}\n","import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\n *\n * ```ts\n * import { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { InteropObservable, SchedulerLike } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n","import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n","import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike | undefined): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from, take } from 'rxjs';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * With `asyncScheduler`\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // 'start'\n * // 'end'\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n *\n * Map every click to the `clientX` position of that click\n *\n * ```ts\n * import { fromEvent, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n *\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n","import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n","export function createObject(keys: string[], values: any[]) {\n  return keys.reduce((result, key, i) => ((result[key] = values[i]), result), {} as any);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf, ObservableInputTuple } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { Subscriber } from '../Subscriber';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { Subscription } from '../Subscription';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { AnyCatcher } from '../AnyCatcher';\nimport { executeSchedule } from '../util/executeSchedule';\n\n// combineLatest(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function combineLatest<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// combineLatest([a, b, c])\nexport function combineLatest(sources: []): Observable<never>;\nexport function combineLatest<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R,\n  scheduler: SchedulerLike\n): Observable<R>;\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  sources: readonly [...ObservableInputTuple<A>],\n  scheduler: SchedulerLike\n): Observable<A>;\n\n// combineLatest(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelectorAndScheduler: [...ObservableInputTuple<A>, (...values: A) => R, SchedulerLike]\n): Observable<R>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): Observable<A>;\n\n// combineLatest({a, b, c})\nexport function combineLatest(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function combineLatest<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed in the\n * observables array. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to this operator,\n * the returned Observable will always emit an array of `n` values, in an order\n * corresponding to the order of the passed Observables (the value from the first Observable\n * will be at index 0 of the array and so on).\n *\n * Static version of `combineLatest` accepts an array of Observables. Note that an array of\n * Observables is a good choice, if you don't know beforehand how many Observables\n * you will combine. Passing an empty array will result in an Observable that\n * completes immediately.\n *\n * To ensure the output array always has the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will now be impossible to include a value from the\n * completed Observable in the resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, the resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, the result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of a completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * ## Examples\n *\n * Combine two timer Observables\n *\n * ```ts\n * import { timer, combineLatest } from 'rxjs';\n *\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest([firstTimer, secondTimer]);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * Combine a dictionary of Observables\n *\n * ```ts\n * import { of, delay, startWith, combineLatest } from 'rxjs';\n *\n * const observables = {\n *   a: of(1).pipe(delay(1000), startWith(0)),\n *   b: of(5).pipe(delay(5000), startWith(0)),\n *   c: of(10).pipe(delay(10000), startWith(0))\n * };\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // { a: 0, b: 0, c: 0 } immediately\n * // { a: 1, b: 0, c: 0 } after 1s\n * // { a: 1, b: 5, c: 0 } after 5s\n * // { a: 1, b: 5, c: 10 } after 10s\n * ```\n *\n * Combine an array of Observables\n *\n * ```ts\n * import { of, delay, startWith, combineLatest } from 'rxjs';\n *\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000), // emit 0 and then emit n after n seconds\n *     startWith(0)\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n * Use map operator to dynamically calculate the Body-Mass Index\n *\n * ```ts\n * import { of, combineLatest, map } from 'rxjs';\n *\n * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest([weight, height]).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} [observables] An array of input Observables to combine with each other.\n * An array of Observables must be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<O extends ObservableInput<any>, R>(...args: any[]): Observable<R> | Observable<ObservedValueOf<O>[]> {\n  const scheduler = popScheduler(args);\n  const resultSelector = popResultSelector(args);\n\n  const { args: observables, keys } = argsArgArrayOrObject(args);\n\n  if (observables.length === 0) {\n    // If no observables are passed, or someone has passed an ampty array\n    // of observables, or even an empty object POJO, we need to just\n    // complete (EMPTY), but we have to honor the scheduler provided if any.\n    return from([], scheduler as any);\n  }\n\n  const result = new Observable<ObservedValueOf<O>[]>(\n    combineLatestInit(\n      observables as ObservableInput<ObservedValueOf<O>>[],\n      scheduler,\n      keys\n        ? // A handler for scrubbing the array of args into a dictionary.\n          (values) => createObject(keys, values)\n        : // A passthrough to just return the array\n          identity\n    )\n  );\n\n  return resultSelector ? (result.pipe(mapOneOrManyArgs(resultSelector)) as Observable<R>) : result;\n}\n\nexport function combineLatestInit(\n  observables: ObservableInput<any>[],\n  scheduler?: SchedulerLike,\n  valueTransform: (values: any[]) => any = identity\n) {\n  return (subscriber: Subscriber<any>) => {\n    // The outer subscription. We're capturing this in a function\n    // because we may have to schedule it.\n    maybeSchedule(\n      scheduler,\n      () => {\n        const { length } = observables;\n        // A store for the values each observable has emitted so far. We match observable to value on index.\n        const values = new Array(length);\n        // The number of currently active subscriptions, as they complete, we decrement this number to see if\n        // we are all done combining values, so we can complete the result.\n        let active = length;\n        // The number of inner sources that still haven't emitted the first value\n        // We need to track this because all sources need to emit one value in order\n        // to start emitting values.\n        let remainingFirstValues = length;\n        // The loop to kick off subscription. We're keying everything on index `i` to relate the observables passed\n        // in to the slot in the output array or the key in the array of keys in the output dictionary.\n        for (let i = 0; i < length; i++) {\n          maybeSchedule(\n            scheduler,\n            () => {\n              const source = from(observables[i], scheduler as any);\n              let hasFirstValue = false;\n              source.subscribe(\n                createOperatorSubscriber(\n                  subscriber,\n                  (value) => {\n                    // When we get a value, record it in our set of values.\n                    values[i] = value;\n                    if (!hasFirstValue) {\n                      // If this is our first value, record that.\n                      hasFirstValue = true;\n                      remainingFirstValues--;\n                    }\n                    if (!remainingFirstValues) {\n                      // We're not waiting for any more\n                      // first values, so we can emit!\n                      subscriber.next(valueTransform(values.slice()));\n                    }\n                  },\n                  () => {\n                    if (!--active) {\n                      // We only complete the result if we have no more active\n                      // inner observables.\n                      subscriber.complete();\n                    }\n                  }\n                )\n              );\n            },\n            subscriber\n          );\n        }\n      },\n      subscriber\n    );\n  };\n}\n\n/**\n * A small utility to handle the couple of locations where we want to schedule if a scheduler was provided,\n * but we don't if there was no scheduler.\n */\nfunction maybeSchedule(scheduler: SchedulerLike | undefined, execute: () => void, subscription: Subscription) {\n  if (scheduler) {\n    executeSchedule(subscription, scheduler, execute);\n  } else {\n    execute();\n  }\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n","import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n *\n * ```ts\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n *\n * ```ts\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(10)))\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n","import { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.svg)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, map, interval, take, concatAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(4)))\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaustAll}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable emitting values from all the\n * inner Observables concatenated.\n */\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeAll(1);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(\n  ...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]\n): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n *\n * Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n *\n * ```ts\n * import { interval, take, range, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * Concatenate 3 Observables\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * Concatenate the same Observable to repeat it\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n *   .subscribe({\n *     next: value => console.log(value),\n *     complete: () => console.log('...and it is done!')\n *   });\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // '...and it is done!' also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param args Input Observables to concatenate.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(from(args, popScheduler(args)));\n}\n","import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInput } from '../types';\nimport { innerFrom } from './innerFrom';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create an Observable only when the Observer\n * subscribes. It waits until an Observer subscribes to it, calls the given\n * factory function to get an Observable -- where a factory function typically\n * generates a new Observable -- and subscribes the Observer to this Observable.\n * In case the factory function returns a falsy value, then EMPTY is used as\n * Observable instead. Last but not least, an exception during the factory\n * function call is transferred to the Observer by calling `error`.\n *\n * ## Example\n *\n * Subscribe to either an Observable of clicks or an Observable of interval, at random\n *\n * ```ts\n * import { defer, fromEvent, interval } from 'rxjs';\n *\n * const clicksOrInterval = defer(() => {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): ObservableInput} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n */\nexport function defer<R extends ObservableInput<any>>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\n  return new Observable<ObservedValueOf<R>>((subscriber) => {\n    innerFrom(observableFactory()).subscribe(subscriber);\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * A simple Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * A simple Observable that only emits the complete notification. It can be used\n * for composing with other Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n *\n * Emit the number 7, then complete\n *\n * ```ts\n * import { EMPTY, startWith } from 'rxjs';\n *\n * const result = EMPTY.pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * Map and flatten only odd numbers to the sequence `'a'`, `'b'`, `'c'`\n *\n * ```ts\n * import { interval, mergeMap, of, EMPTY } from 'rxjs';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : EMPTY),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link NEVER}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\n\n// These constants are used to create handler registry functions using array mapping below.\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'] as const;\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'] as const;\nconst jqueryMethods = ['on', 'off'] as const;\n\nexport interface NodeStyleEventEmitter {\n  addListener(eventName: string | symbol, handler: NodeEventHandler): this;\n  removeListener(eventName: string | symbol, handler: NodeEventHandler): this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener(eventName: string, handler: NodeEventHandler): void | {};\n  removeListener(eventName: string, handler: NodeEventHandler): void | {};\n}\n\n// Use handler types like those in @types/jquery. See:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/847731ba1d7fa6db6b911c0e43aa0afe596e7723/types/jquery/misc.d.ts#L6395\nexport interface JQueryStyleEventEmitter<TContext, T> {\n  on(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n  off(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n}\n\nexport interface EventListenerObject<E> {\n  handleEvent(evt: E): void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: EventListenerOptions | boolean\n  ): void;\n}\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\nexport function fromEvent<T>(target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>, eventName: string): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  resultSelector: (event: T) => R\n): Observable<R>;\nexport function fromEvent<T>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (event: T) => R\n): Observable<R>;\n\nexport function fromEvent(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string\n): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent<T>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string,\n  resultSelector: (value: T, ...args: any[]) => R\n): Observable<R>;\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n *\n * Emit clicks happening on the DOM document\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * Use `addEventListener` with capture option\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n */\nexport function fromEvent<T>(\n  target: any,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T> {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent<T>(target, eventName, options as EventListenerOptions).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  // Figure out our add and remove methods. In order to do this,\n  // we are going to analyze the target in a preferred order, if\n  // the target matches a given signature, we take the two \"add\" and \"remove\"\n  // method names and apply them to a map to create opposite versions of the\n  // same function. This is because they all operate in duplicate pairs,\n  // `addListener(name, handler)`, `removeListener(name, handler)`, for example.\n  // The call only differs by method name, as to whether or not you're adding or removing.\n  const [add, remove] =\n    // If it is an EventTarget, we need to use a slightly different method than the other two patterns.\n    isEventTarget(target)\n      ? eventTargetMethods.map((methodName) => (handler: any) => target[methodName](eventName, handler, options as EventListenerOptions))\n      : // In all other cases, the call pattern is identical with the exception of the method names.\n      isNodeStyleEventEmitter(target)\n      ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n      : isJQueryStyleEventEmitter(target)\n      ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n      : [];\n\n  // If add is falsy, it's because we didn't match a pattern above.\n  // Check to see if it is an ArrayLike, because if it is, we want to\n  // try to apply fromEvent to all of it's items. We do this check last,\n  // because there are may be some types that are both ArrayLike *and* implement\n  // event registry points, and we'd rather delegate to that when possible.\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap((subTarget: any) => fromEvent(subTarget, eventName, options as EventListenerOptions))(\n        innerFrom(target)\n      ) as Observable<T>;\n    }\n  }\n\n  // If add is falsy and we made it here, it's because we didn't\n  // match any valid target objects above.\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n\n  return new Observable<T>((subscriber) => {\n    // The handler we are going to register. Forwards the event object, by itself, or\n    // an array of arguments to the event handler, if there is more than one argument,\n    // to the consumer.\n    const handler = (...args: any[]) => subscriber.next(1 < args.length ? args : args[0]);\n    // Do the work of adding the handler to the target.\n    add(handler);\n    // When we finalize, we want to remove the handler and free up memory.\n    return () => remove!(handler);\n  });\n}\n\n/**\n * Used to create `add` and `remove` functions to register and unregister event handlers\n * from a target in the most common handler pattern, where there are only two arguments.\n * (e.g.  `on(name, fn)`, `off(name, fn)`, `addListener(name, fn)`, or `removeListener(name, fn)`)\n * @param target The target we're calling methods on\n * @param eventName The event name for the event we're creating register or unregister functions for\n */\nfunction toCommonHandlerRegistry(target: any, eventName: string) {\n  return (methodName: string) => (handler: any) => target[methodName](eventName, handler);\n}\n\n/**\n * Checks to see if the target implements the required node-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isNodeStyleEventEmitter(target: any): target is NodeStyleEventEmitter {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\n\n/**\n * Checks to see if the target implements the required jQuery-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isJQueryStyleEventEmitter(target: any): target is JQueryStyleEventEmitter<any, any> {\n  return isFunction(target.on) && isFunction(target.off);\n}\n\n/**\n * Checks to see if the target implements the required EventTarget methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isEventTarget(target: any): target is HasEventTargetAddRemove<any> {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\n\n/**\n * Creates an observable that will wait for a specified time period, or exact date, before\n * emitting the number 0.\n *\n * <span class=\"informal\">Used to emit a notification after a delay.</span>\n *\n * This observable is useful for creating delays in code, or racing against other values\n * for ad-hoc timeouts.\n *\n * The `delay` is specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Examples\n *\n * Wait 3 seconds and start another observable\n *\n * You might want to use `timer` to delay subscription to an\n * observable by a set amount of time. Here we use a timer with\n * {@link concatMapTo} or {@link concatMap} in order to wait\n * a few seconds and start a subscription to a source.\n *\n * ```ts\n * import { of, timer, concatMap } from 'rxjs';\n *\n * // This could be any observable\n * const source = of(1, 2, 3);\n *\n * timer(3000)\n *   .pipe(concatMap(() => source))\n *   .subscribe(console.log);\n * ```\n *\n * Take all values until the start of the next minute\n *\n * Using a `Date` as the trigger for the first emission, you can\n * do things like wait until midnight to fire an event, or in this case,\n * wait until a new minute starts (chosen so the example wouldn't take\n * too long to run) in order to stop watching a stream. Leveraging\n * {@link takeUntil}.\n *\n * ```ts\n * import { interval, takeUntil, timer } from 'rxjs';\n *\n * // Build a Date object that marks the\n * // next minute.\n * const currentDate = new Date();\n * const startOfNextMinute = new Date(\n *   currentDate.getFullYear(),\n *   currentDate.getMonth(),\n *   currentDate.getDate(),\n *   currentDate.getHours(),\n *   currentDate.getMinutes() + 1\n * );\n *\n * // This could be any observable stream\n * const source = interval(1000);\n *\n * const result = source.pipe(\n *   takeUntil(timer(startOfNextMinute))\n * );\n *\n * result.subscribe(console.log);\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `dueTime`.\n *\n * @param due If a `number`, the amount of time in milliseconds to wait before emitting.\n * If a `Date`, the exact time at which to emit.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(due: number | Date, scheduler?: SchedulerLike): Observable<0>;\n\n/**\n * Creates an observable that starts an interval after a specified delay, emitting incrementing numbers -- starting at `0` --\n * on each interval after words.\n *\n * The `delay` and `intervalDuration` are specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Example\n *\n * ### Start an interval that starts right away\n *\n * Since {@link interval} waits for the passed delay before starting,\n * sometimes that's not ideal. You may want to start an interval immediately.\n * `timer` works well for this. Here we have both side-by-side so you can\n * see them in comparison.\n *\n * Note that this observable will never complete.\n *\n * ```ts\n * import { timer, interval } from 'rxjs';\n *\n * timer(0, 1000).subscribe(n => console.log('timer', n));\n * interval(1000).subscribe(n => console.log('interval', n));\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `startDue`.\n * @param startDue If a `number`, is the time to wait before starting the interval.\n * If a `Date`, is the exact time at which to start the interval.\n * @param intervalDuration The delay between each value emitted in the interval. Passing a\n * negative number here will result in immediate completion after the first value is emitted, as though\n * no `intervalDuration` was passed at all.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(startDue: number | Date, intervalDuration: number, scheduler?: SchedulerLike): Observable<number>;\n\n/**\n * @deprecated The signature allowing `undefined` to be passed for `intervalDuration` will be removed in v8. Use the `timer(dueTime, scheduler?)` signature instead.\n */\nexport function timer(dueTime: number | Date, unused: undefined, scheduler?: SchedulerLike): Observable<0>;\n\nexport function timer(\n  dueTime: number | Date = 0,\n  intervalOrScheduler?: number | SchedulerLike,\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> {\n  // Since negative intervalDuration is treated as though no\n  // interval was specified at all, we start with a negative number.\n  let intervalDuration = -1;\n\n  if (intervalOrScheduler != null) {\n    // If we have a second argument, and it's a scheduler,\n    // override the scheduler we had defaulted. Otherwise,\n    // it must be an interval.\n    if (isScheduler(intervalOrScheduler)) {\n      scheduler = intervalOrScheduler;\n    } else {\n      // Note that this *could* be negative, in which case\n      // it's like not passing an intervalDuration at all.\n      intervalDuration = intervalOrScheduler;\n    }\n  }\n\n  return new Observable((subscriber) => {\n    // If a valid date is passed, calculate how long to wait before\n    // executing the first value... otherwise, if it's a number just schedule\n    // that many milliseconds (or scheduler-specified unit size) in the future.\n    let due = isValidDate(dueTime) ? +dueTime - scheduler!.now() : dueTime;\n\n    if (due < 0) {\n      // Ensure we don't schedule in the future.\n      due = 0;\n    }\n\n    // The incrementing value we emit.\n    let n = 0;\n\n    // Start the timer.\n    return scheduler.schedule(function () {\n      if (!subscriber.closed) {\n        // Emit the next value and increment.\n        subscriber.next(n++);\n\n        if (0 <= intervalDuration) {\n          // If we have a interval after the initial timer,\n          // reschedule with the period.\n          this.schedule(undefined, intervalDuration);\n        } else {\n          // We didn't have an interval. So just complete.\n          subscriber.complete();\n        }\n      }\n    }, due);\n  });\n}\n","import { Observable } from '../Observable';\nimport { asyncScheduler } from '../scheduler/async';\nimport { SchedulerLike } from '../types';\nimport { timer } from './timer';\n\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified {@link SchedulerLike}.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.</span>\n *\n * ![](interval.png)\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n * {@link SchedulerLike} to it.\n *\n * ## Example\n *\n * Emits ascending numbers, one every second (1000ms) up to the number 3\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const numbers = interval(1000);\n *\n * const takeFourNumbers = numbers.pipe(take(4));\n *\n * takeFourNumbers.subscribe(x => console.log('Next: ', x));\n *\n * // Logs:\n * // Next: 0\n * // Next: 1\n * // Next: 2\n * // Next: 3\n * ```\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n */\nexport function interval(period = 0, scheduler: SchedulerLike = asyncScheduler): Observable<number> {\n  if (period < 0) {\n    // We cannot schedule an interval in the past.\n    period = 0;\n  }\n\n  return timer(period, period, scheduler);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Merge together two Observables: 1s interval and clicks\n *\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * Merge together 3 Observables, but run only 2 concurrently\n *\n * ```ts\n * import { interval, take, merge } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n *\n * Emit the number 7, then never emit anything else (not even complete)\n *\n * ```ts\n * import { NEVER, startWith } from 'rxjs';\n *\n * const info = () => console.log('Will not be called');\n *\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe({\n *   next: x => console.log(x),\n *   error: info,\n *   complete: info\n * });\n * ```\n *\n * @see {@link Observable}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Replaced with the {@link NEVER} constant. Will be removed in v8.\n */\nexport function never() {\n  return NEVER;\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Provides utility methods to work with `undefined` values. The value `null` is considered as a defined value.\n *\n * Note: TypeScript 3.7 introduces the `nullish coalescing operator` [1] `(??)`, which is similar to the `Defined` function,\n * but also applies for `null` values.\n *\n * ## Links:\n * [1] https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing\n */\nexport namespace Defined {\n\n  /**\n   * Returns the value if not `undefined`, otherwise \"orElseValue\". The \"orElseValue\" value can be created with a factory function.\n   *\n   * Unlike JavaScript's \"nullish coalescing operator (??)\", the \"orElse\" function only tests for `undefined`, not `null`.\n   */\n  export function orElse<T>(value: T | undefined, orElseValue: T | (() => T)): T {\n    return (value !== undefined ? value : (typeof orElseValue === 'function' ? (orElseValue as (() => T))() : orElseValue));\n  }\n\n  /**\n   * Returns the value if not `undefined`, otherwise throws the error created by the passed factory function.\n   */\n  export function orElseThrow<T>(value: T | undefined, orElseThrowFn: () => Error): T {\n    if (value !== undefined) {\n      return value;\n    }\n    throw orElseThrowFn();\n  }\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Defined} from './defined.util';\nimport {identity} from 'rxjs';\n\n/**\n * Provides array utility methods.\n */\nexport namespace Arrays {\n\n  /**\n   * Returns the value, if an array, or adds it to an array. If `null` or `undefined` is given, by default, returns an empty array.\n   */\n  export function coerce<T>(value: T | T[] | null | undefined, options?: {coerceNullOrUndefined: true} | {}): NonNullable<T[]>;\n  export function coerce<T>(value: T | T[] | null | undefined, options: {coerceNullOrUndefined: false}): T[] | null | undefined;\n  export function coerce<T>(value: T | T[] | null | undefined, options?: {coerceNullOrUndefined?: boolean}): T[] | null | undefined {\n    if (value === null || value === undefined) {\n      if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n        return [];\n      }\n      return value as null | undefined;\n    }\n\n    return Array.isArray(value) ? value : [value];\n  }\n\n  /**\n   * Compares items of given arrays for reference equality.\n   *\n   * Use the parameter `exactOrder` to control if the item order must be equal (which is by default) or not.\n   */\n  export function isEqual(array1: any[], array2: any[], options?: {exactOrder?: boolean}): boolean {\n    if (array1 === array2) {\n      return true;\n    }\n    if (!array1 || !array2) {\n      return false;\n    }\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    const exactOrder = Defined.orElse(options && options.exactOrder, true);\n    return array1.every((item, index) => {\n      if (exactOrder) {\n        return item === array2[index];\n      }\n      else {\n        return array2.includes(item);\n      }\n    });\n  }\n\n  /**\n   * Removes the specified element from an array, or the elements which satisfy the provided predicate function.\n   * The original array will be changed.\n   *\n   * @param  array - The array from which elements should be removed.\n   * @param  element - The element to be removed, or a predicate function to resolve elements which to be removed.\n   * @param  options - Control if to remove all occurrences of the element. If not specified, all occurrences are removed.\n   * @return the elements removed from the array.\n   */\n  export function remove<T>(array: T[], element: any | ((element: T) => boolean), options?: {firstOnly: boolean}): T[] {\n    const firstOnly = Defined.orElse(options && options.firstOnly, false);\n\n    // define a function to resolve the element's index in the original array\n    const indexOfElementFn = ((): () => number => {\n      if (typeof element === 'function') {\n        return (): number => array.findIndex(element);\n      }\n      else {\n        return (): number => array.indexOf(element);\n      }\n    })();\n\n    const removedElements = [];\n    for (let i = indexOfElementFn(); i !== -1; i = indexOfElementFn()) {\n      removedElements.push(...array.splice(i, 1)); // changes the original array\n      if (firstOnly) {\n        break;\n      }\n    }\n    return removedElements;\n  }\n\n  /**\n   * Removes duplicate items from the array. The original array will not be modified.\n   *\n   * Use the parameter `keySelector` to provide a function for comparing objects.\n   */\n  export function distinct<T>(items: T[], keySelector: (item: T) => any = identity): T[] {\n    const itemSet = new Set(items.map(keySelector));\n    return items.filter(item => itemSet.delete(keySelector(item)));\n  }\n\n  /**\n   * Intersects the given arrays, returning a new array containing all the elements contained in every array.\n   * Arrays which are `undefined` or `null` are ignored.\n   */\n  export function intersect<T>(...arrays: Array<T[] | undefined | null>): T[] {\n    const _arrays = arrays.filter(array => array !== undefined && array !== null) as Array<T[]>;\n\n    if (!_arrays.length) {\n      return [];\n    }\n\n    const first = _arrays.pop()!;\n    return _arrays.reduce((intersection, array) => intersection.filter(value => array.includes(value)), [...first]);\n  }\n\n  /**\n   * Returns the last element in the given array, optionally matching the predicate if given.\n   *\n   * Returns `undefined` if no element is found.\n   */\n  export function last<T>(array: T[], predicate?: (item: T) => boolean): T | undefined {\n    if (!array) {\n      return undefined;\n    }\n\n    if (!predicate) {\n      return array[array.length - 1];\n    }\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      if (predicate(array[i])) {\n        return array[i];\n      }\n    }\n\n    return undefined;\n  }\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nexport namespace Objects {\n\n  /**\n   * Compares the two objects for shallow equality.\n   */\n  export function isEqual(a: any, b: any): boolean {\n    if (a === b) {\n      return true;\n    }\n\n    if (!a || !b) {\n      return false;\n    }\n\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n\n    return Object.entries(a).every(([key, value]) => (b[key] === value));\n  }\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Defined} from './defined.util';\n\n/**\n * Provides dictionary utility methods.\n */\nexport namespace Dictionaries {\n\n  /**\n   * Creates a {@link Dictionary} from the given dictionary-like object. If given a `Dictionary`, it is returned. If given `null` or `undefined`, by default, returns an empty {@link Dictionary}.\n   */\n  export function coerce<T = any>(dictionaryLike: Dictionary<T> | Map<string, T> | undefined | null, options?: {coerceNullOrUndefined: true} | {}): NonNullable<Dictionary<T>>;\n  export function coerce<T = any>(dictionaryLike: Dictionary<T> | Map<string, T> | undefined | null, options: {coerceNullOrUndefined: false}): Dictionary<T> | null | undefined;\n  export function coerce<T = any>(dictionaryLike: Dictionary<T> | Map<string, T> | undefined | null, options?: {coerceNullOrUndefined?: boolean}): Dictionary<T> | null | undefined {\n    if (dictionaryLike === null || dictionaryLike === undefined) {\n      if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n        return {};\n      }\n      return dictionaryLike as null | undefined;\n    }\n\n    if (dictionaryLike instanceof Map) {\n      return createDictionaryFromMap(dictionaryLike);\n    }\n\n    // Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n    // Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n    // This is most likely because the serialization takes place in a different realm.\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    // @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n    try {\n      const map = new Map(dictionaryLike as any);\n      return createDictionaryFromMap(map);\n    }\n    catch {\n      // noop\n    }\n\n    return dictionaryLike;\n  }\n\n  /**\n   * Returns a new {@link Dictionary} with `undefined` values removed.\n   */\n  export function withoutUndefinedEntries(object: Dictionary): Dictionary {\n    return Object.entries(object).reduce<Dictionary>((dictionary, [key, value]) => {\n      if (value !== undefined) {\n        dictionary[key] = value;\n      }\n      return dictionary;\n    }, {});\n  }\n}\n\n/**\n * Represents an object with a variable number of properties, whose keys are not known at development time.\n */\nexport interface Dictionary<T = any> {\n  [key: string]: T;\n}\n\nfunction createDictionaryFromMap(map: Map<any, any>): Dictionary {\n  return Array\n    .from(map.entries())\n    .reduce(\n      (dictionary: Dictionary, [key, value]: [string, any]): Dictionary => {\n        dictionary[key] = value;\n        return dictionary;\n      },\n      {},\n    );\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Arrays} from './arrays.util';\nimport {Dictionary} from './dictionaries.util';\nimport {Defined} from './defined.util';\n\n/**\n * Provides utility methods for {@link Map}.\n */\nexport namespace Maps {\n\n  /**\n   * Creates a {@link Map} from the given map-like object. If given a `Map`, it is returned. If given `null` or `undefined`, by default, returns an empty {@link Map}.\n   */\n  export function coerce<T = any>(mapLike: Map<string, T> | Dictionary<T> | undefined | null, options?: {coerceNullOrUndefined: true} | {}): NonNullable<Map<string, T>>;\n  export function coerce<T = any>(mapLike: Map<string, T> | Dictionary<T> | undefined | null, options: {coerceNullOrUndefined: false}): Map<string, T> | null | undefined;\n  export function coerce<T = any>(mapLike: Map<string, T> | Dictionary<T> | undefined | null, options?: {coerceNullOrUndefined?: boolean}): Map<string, T> | null | undefined {\n    if (mapLike === null || mapLike === undefined) {\n      if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n        return new Map<string, T>();\n      }\n      return mapLike as null | undefined;\n    }\n\n    if (mapLike instanceof Map) {\n      return mapLike;\n    }\n\n    // Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n    // Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n    // This is most likely because the serialization takes place in a different realm.\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    // @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n    try {\n      return new Map(mapLike as any);\n    }\n    catch {\n      // noop\n    }\n\n    return Object\n      .entries(mapLike)\n      .reduce(\n        (map: Map<string, any>, [key, value]: [string, any]) => map.set(key, value),\n        new Map<string, any>(),\n      );\n  }\n\n  /**\n   * Adds the given value into a {@link Set} in the multi value {@link Map}.\n   */\n  export function addSetValue<K, V>(multiValueMap: Map<K, Set<V>>, key: K, value: V): Map<K, Set<V>> {\n    const values = multiValueMap.get(key) || new Set<V>();\n    return multiValueMap.set(key, values.add(value));\n  }\n\n  /**\n   * Removes the given value or values matching the given predicate from the multi {@link Map}.\n   *\n   * @return `true` if the element was removed, or `false` otherwise.\n   */\n  export function removeSetValue<K, V>(multiValueMap: Map<K, Set<V>>, key: K, value: V | PredicateFn<V>): boolean {\n    const values = multiValueMap.get(key) || new Set<V>();\n\n    let hasRemoved;\n    if (typeof value === 'function') {\n      const predicateFn = value as PredicateFn<V>;\n      hasRemoved = Array.from(values)\n        .filter(predicateFn)\n        .reduce<boolean>((removed, it) => values.delete(it) || removed, false);\n    }\n    else {\n      hasRemoved = values.delete(value);\n    }\n\n    if (hasRemoved && !values.size) {\n      multiValueMap.delete(key);\n    }\n    return hasRemoved;\n  }\n\n  /**\n   * Adds the given value into an {@link Array} in the multi value {@link Map}.\n   */\n  export function addListValue<K, V>(map: Map<K, V[]>, key: K, value: V): Map<K, V[]> {\n    const values = map.get(key) || [];\n    return map.set(key, values.concat(value));\n  }\n\n  /**\n   * Removes the given value or values matching the given predicate from the multi {@link Map}.\n   *\n   * @return `true` if the element was removed, or `false` otherwise.\n   */\n  export function removeListValue<K, V>(multiValueMap: Map<K, V[]>, key: K, value: V | PredicateFn<V>): boolean {\n    const values = multiValueMap.get(key) || [];\n    const hasRemoved = Arrays.remove(values, value, {firstOnly: false}).length > 0;\n    if (hasRemoved && !values.length) {\n      multiValueMap.delete(key);\n    }\n    return hasRemoved;\n  }\n}\n\n/**\n * Represents a predicate function which returns `true` or `false`.\n */\nexport type PredicateFn<T> = (value: T) => boolean;\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {from, Observable, of} from 'rxjs';\n\nexport namespace Observables {\n\n  /**\n   * Creates an `Observable` from the passed value, which will emit the value and then complete,\n   * or, if passing an `Observable`, returns it unchanged. If passing a `Promise`, it is converted\n   * to an `Observable`.\n   */\n  export function coerce<T>(value: T | Observable<T> | Promise<T>): Observable<T> {\n    if (value instanceof Observable) {\n      return value;\n    }\n    if (value instanceof Promise) {\n      return from(value);\n    }\n    return of(value);\n  }\n}\n","import { SchedulerLike, ValueFromArray } from '../types';\nimport { Observable } from '../Observable';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return from(args as T[], scheduler);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerLike } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * Creates an observable that will create an error instance and push it to the consumer as an error\n * immediately upon subscription.\n *\n * <span class=\"informal\">Just errors and does nothing else</span>\n *\n * ![](throw.png)\n *\n * This creation function is useful for creating an observable that will create an error and error every\n * time it is subscribed to. Generally, inside of most operators when you might want to return an errored\n * observable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\n * {@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\n * that up and notify the consumer of the error.\n *\n * ## Example\n *\n * Create a simple observable that will create a new error with a timestamp and log it\n * and the message every time you subscribe to it\n *\n * ```ts\n * import { throwError } from 'rxjs';\n *\n * let errorCount = 0;\n *\n * const errorWithTimestamp$ = throwError(() => {\n *   const error: any = new Error(`This is error number ${ ++errorCount }`);\n *   error.timestamp = Date.now();\n *   return error;\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * // Logs the timestamp and a new error message for each subscription\n * ```\n *\n * ### Unnecessary usage\n *\n * Using `throwError` inside of an operator or creation function\n * with a callback, is usually not necessary\n *\n * ```ts\n * import { of, concatMap, timer, throwError } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // This is probably overkill.\n *       return throwError(() => new Error(`Invalid time ${ ms }`));\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * You can just throw the error instead\n *\n * ```ts\n * import { of, concatMap, timer } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // Cleaner and easier to read for most folks.\n *       throw new Error(`Invalid time ${ ms }`);\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * @param errorFactory A factory function that will create the error instance that is pushed.\n */\nexport function throwError(errorFactory: () => any): Observable<never>;\n\n/**\n * Returns an observable that will error with the specified error immediately upon subscription.\n *\n * @param error The error instance to emit\n * @deprecated Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\n */\nexport function throwError(error: any): Observable<never>;\n\n/**\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\n *\n * @param errorOrErrorFactory An error instance or error factory\n * @param scheduler A scheduler to use to schedule the error notification\n * @deprecated The `scheduler` parameter will be removed in v8.\n * Use `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\n * Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;\n\nexport function throwError(errorOrErrorFactory: any, scheduler?: SchedulerLike): Observable<never> {\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n  const init = (subscriber: Subscriber<never>) => subscriber.error(errorFactory());\n  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);\n}\n","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n *\n * Emit only click events whose target was a DIV element\n *\n * ```ts\n * import { fromEvent, filter } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n","import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n *\n * Generate new Observable according to source Observable values\n *\n * ```ts\n * import { of, switchMap } from 'rxjs';\n *\n * const switched = of(1, 2, 3).pipe(switchMap(x => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // 3\n * // 9\n * // 27\n * ```\n *\n * Restart an interval Observable on every click event\n *\n * ```ts\n * import { fromEvent, switchMap, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * only the values from the most recently projected inner Observable.\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return operate((source, subscriber) => {\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\n    let index = 0;\n    // Whether or not the source subscription has completed\n    let isComplete = false;\n\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\n    // This is called both when the source completes and when the inners complete.\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Cancel the previous inner subscription if there was one\n          innerSubscriber?.unsubscribe();\n          let innerIndex = 0;\n          const outerIndex = index++;\n          // Start the next inner subscription\n          innerFrom(project(value, outerIndex)).subscribe(\n            (innerSubscriber = createOperatorSubscriber(\n              subscriber,\n              // When we get a new inner value, next it through. Note that this is\n              // handling the deprecate result selector here. This is because with this architecture\n              // it ends up being smaller than using the map operator.\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\n              () => {\n                // The inner has completed. Null out the inner subcriber to\n                // free up memory and to signal that we have no inner subscription\n                // currently.\n                innerSubscriber = null!;\n                checkComplete();\n              }\n            ))\n          );\n        },\n        () => {\n          isComplete = true;\n          checkComplete();\n        }\n      )\n    );\n  });\n}\n","import { OperatorFunction, ObservableInputTuple } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\n\nexport function withLatestFrom<T, O extends unknown[]>(...inputs: [...ObservableInputTuple<O>]): OperatorFunction<T, [T, ...O]>;\n\nexport function withLatestFrom<T, O extends unknown[], R>(\n  ...inputs: [...ObservableInputTuple<O>, (...value: [T, ...O]) => R]\n): OperatorFunction<T, R>;\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n *\n * On every click event, emit an array with the latest timer event plus the click event\n *\n * ```ts\n * import { fromEvent, interval, withLatestFrom } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return A function that returns an Observable of projected values from the\n * most recent values from each input Observable, or an array of the most\n * recent values from each input Observable.\n */\nexport function withLatestFrom<T, R>(...inputs: any[]): OperatorFunction<T, R | any[]> {\n  const project = popResultSelector(inputs) as ((...args: any[]) => R) | undefined;\n\n  return operate((source, subscriber) => {\n    const len = inputs.length;\n    const otherValues = new Array(len);\n    // An array of whether or not the other sources have emitted. Matched with them by index.\n    // TODO: At somepoint, we should investigate the performance implications here, and look\n    // into using a `Set()` and checking the `size` to see if we're ready.\n    let hasValue = inputs.map(() => false);\n    // Flipped true when we have at least one value from all other sources and\n    // we are ready to start emitting values.\n    let ready = false;\n\n    // Other sources. Note that here we are not checking `subscriber.closed`,\n    // this causes all inputs to be subscribed to, even if nothing can be emitted\n    // from them. This is an important distinction because subscription constitutes\n    // a side-effect.\n    for (let i = 0; i < len; i++) {\n      innerFrom(inputs[i]).subscribe(\n        createOperatorSubscriber(\n          subscriber,\n          (value) => {\n            otherValues[i] = value;\n            if (!ready && !hasValue[i]) {\n              // If we're not ready yet, flag to show this observable has emitted.\n              hasValue[i] = true;\n              // Intentionally terse code.\n              // If all of our other observables have emitted, set `ready` to `true`,\n              // so we know we can start emitting values, then clean up the `hasValue` array,\n              // because we don't need it anymore.\n              (ready = hasValue.every(identity)) && (hasValue = null!);\n            }\n          },\n          // Completing one of the other sources has\n          // no bearing on the completion of our result.\n          noop\n        )\n      );\n    }\n\n    // Source subscription\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        if (ready) {\n          // We have at least one value from the other sources. Go ahead and emit.\n          const values = [value, ...otherValues];\n          subscriber.next(project ? project(...values) : values);\n        }\n      })\n    );\n  });\n}\n","import { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\n\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.svg)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, audit, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function audit<T>(durationSelector: (value: T) => ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    let durationSubscriber: Subscriber<any> | null = null;\n    let isComplete = false;\n\n    const endDuration = () => {\n      durationSubscriber?.unsubscribe();\n      durationSubscriber = null;\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n      isComplete && subscriber.complete();\n    };\n\n    const cleanupDuration = () => {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          lastValue = value;\n          if (!durationSubscriber) {\n            innerFrom(durationSelector(value)).subscribe(\n              (durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration))\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source value, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * ![](auditTime.png)\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link SchedulerLike} for managing timers.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, auditTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(auditTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function auditTime<T>(duration: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { Subscription } from '../Subscription';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <span class=\"informal\">\n * It only listens to the error channel and ignores notifications.\n * Handles errors from the source observable, and maps them to a new observable.\n * The error may also be rethrown, or a new error can be thrown to emit an error from the result.\n * </span>\n *\n * ![](catch.png)\n *\n * This operator handles errors, but forwards along all other events to the resulting observable.\n * If the source observable terminates with an error, it will map that error to a new observable,\n * subscribe to it, and forward all of its events to the resulting observable.\n *\n * ## Examples\n *\n * Continue with a different Observable when there's an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V'))\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retry the caught source Observable again in case of error, similar to `retry()` operator\n *\n * ```ts\n * import { of, map, catchError, take } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30)\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throw a new error when the source Observable throws an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     })\n *   )\n *   .subscribe({\n *     next: x => console.log(x),\n *     error: err => console.log(err)\n *   });\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n * @see {@link onErrorResumeNext}\n * @see {@link repeat}\n * @see {@link repeatWhen}\n * @see {@link retry }\n * @see {@link retryWhen}\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n * is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n * is returned by the `selector` will be used to continue the observable chain.\n * @return A function that returns an Observable that originates from either\n * the source or the Observable returned by the `selector` function.\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null = null;\n    let syncUnsub = false;\n    let handledResult: Observable<ObservedValueOf<O>>;\n\n    innerSub = source.subscribe(\n      createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\n        handledResult = innerFrom(selector(err, catchError(selector)(source)));\n        if (innerSub) {\n          innerSub.unsubscribe();\n          innerSub = null;\n          handledResult.subscribe(subscriber);\n        } else {\n          // We don't have an innerSub yet, that means the error was synchronous\n          // because the subscribe call hasn't returned yet.\n          syncUnsub = true;\n        }\n      })\n    );\n\n    if (syncUnsub) {\n      // We have a synchronous error, we need to make sure to\n      // finalize right away. This ensures that callbacks in the `finalize` operator are called\n      // at the right time, and that finalization occurs at the expected\n      // time between the source error and the subscription to the\n      // next observable.\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult!.subscribe(subscriber);\n    }\n  });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SchedulerAction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a notification from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent notification from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays notifications emitted by the source Observable, but drops\n * previous pending delayed emissions if a new notification arrives on the source\n * Observable. This operator keeps track of the most recent notification from the\n * source Observable, and emits that only when `dueTime` has passed\n * without any other notification appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous notification will be dropped\n * and will not be emitted and a new `dueTime` is scheduled.\n * If the completing event happens during `dueTime` the last cached notification\n * is emitted before the completion event is forwarded to the output observable.\n * If the error event happens during `dueTime` or after it only the error event is\n * forwarded to the output observable. The cache notification is not emitted in this case.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * notification to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n *\n * Emit the most recent click after a burst of clicks\n *\n * ```ts\n * import { fromEvent, debounceTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link throttle}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified `dueTime`, and may drop some values\n * if they occur too frequently.\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let activeTask: Subscription | null = null;\n    let lastValue: T | null = null;\n    let lastTime: number | null = null;\n\n    const emit = () => {\n      if (activeTask) {\n        // We have a value! Free up memory first, then emit the value.\n        activeTask.unsubscribe();\n        activeTask = null;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    function emitWhenIdle(this: SchedulerAction<unknown>) {\n      // This is called `dueTime` after the first value\n      // but we might have received new values during this window!\n\n      const targetTime = lastTime! + dueTime;\n      const now = scheduler.now();\n      if (now < targetTime) {\n        // On that case, re-schedule to the new target\n        activeTask = this.schedule(undefined, targetTime - now);\n        subscriber.add(activeTask);\n        return;\n      }\n\n      emit();\n    }\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          lastValue = value;\n          lastTime = scheduler.now();\n\n          // Only set up a task if it's not already up\n          if (!activeTask) {\n            activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n            subscriber.add(activeTask);\n          }\n        },\n        () => {\n          // Source completed.\n          // Emit any pending debounced values then complete\n          emit();\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        () => {\n          // Finalization.\n          lastValue = activeTask = null;\n        }\n      )\n    );\n  });\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Returns a result {@link Observable} that emits all values pushed by the source observable if they\n * are distinct in comparison to the last value the result observable emitted.\n *\n * 1. It will always emit the first value from the source.\n * 2. For all subsequent values pushed by the source, they will be compared to the previously emitted values\n *    using the provided `comparator` or an `===` equality check.\n * 3. If the value pushed by the source is determined to be unequal by this check, that value is emitted and\n *    becomes the new \"previously emitted value\" internally.\n *\n * ## Examples\n *\n * A very basic example with no `comparator`. Note that `1` is emitted more than once,\n * because it's distinct in comparison to the _previously emitted_ value,\n * not in comparison to _all other emitted values_.\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * of(1, 1, 1, 2, 2, 2, 1, 1, 3, 3)\n *   .pipe(distinctUntilChanged())\n *   .subscribe(console.log);\n * // Logs: 1, 2, 1, 3\n * ```\n *\n * With a `comparator`, you can do custom comparisons. Let's say\n * you only want to emit a value when all of its components have\n * changed:\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * const totallyDifferentBuilds$ = of(\n *   { engineVersion: '1.1.0', transmissionVersion: '1.2.0' },\n *   { engineVersion: '1.1.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.5.0' },\n *   { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ).pipe(\n *   distinctUntilChanged((prev, curr) => {\n *     return (\n *       prev.engineVersion === curr.engineVersion ||\n *       prev.transmissionVersion === curr.transmissionVersion\n *     );\n *   })\n * );\n *\n * totallyDifferentBuilds$.subscribe(console.log);\n *\n * // Logs:\n * // { engineVersion: '1.1.0', transmissionVersion: '1.2.0' }\n * // { engineVersion: '1.3.0', transmissionVersion: '1.4.0' }\n * // { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ```\n *\n * You can also provide a custom `comparator` to check that emitted\n * changes are only in one direction. Let's say you only want to get\n * the next record temperature:\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * const temps$ = of(30, 31, 20, 34, 33, 29, 35, 20);\n *\n * const recordHighs$ = temps$.pipe(\n *   distinctUntilChanged((prevHigh, temp) => {\n *     // If the current temp is less than\n *     // or the same as the previous record,\n *     // the record hasn't changed.\n *     return temp <= prevHigh;\n *   })\n * );\n *\n * recordHighs$.subscribe(console.log);\n * // Logs: 30, 31, 34, 35\n * ```\n *\n * @param comparator A function used to compare the previous and current values for\n * equality. Defaults to a `===` check.\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinctUntilChanged<T>(comparator?: (previous: T, current: T) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a result {@link Observable} that emits all values pushed by the source observable if they\n * are distinct in comparison to the last value the result observable emitted.\n *\n * 1. It will always emit the first value from the source.\n * 2. The `keySelector` will be run against all values, including the first value.\n * 3. For all values after the first, the selected key will be compared against the key selected from\n *    the previously emitted value using the `comparator`.\n * 4. If the keys are determined to be unequal by this check, the value (not the key), is emitted\n *    and the selected key from that value is saved for future comparisons against other keys.\n *\n * ## Example\n *\n * Selecting update events only when the `updatedBy` field shows\n * the account changed hands...\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * // A stream of updates to a given account\n * const accountUpdates$ = of(\n *   { updatedBy: 'blesh', data: [] },\n *   { updatedBy: 'blesh', data: [] },\n *   { updatedBy: 'ncjamieson', data: [] },\n *   { updatedBy: 'ncjamieson', data: [] },\n *   { updatedBy: 'blesh', data: [] }\n * );\n *\n * // We only want the events where it changed hands\n * const changedHands$ = accountUpdates$.pipe(\n *   distinctUntilChanged(undefined, update => update.updatedBy)\n * );\n *\n * changedHands$.subscribe(console.log);\n * // Logs:\n * // { updatedBy: 'blesh', data: Array[0] }\n * // { updatedBy: 'ncjamieson', data: Array[0] }\n * // { updatedBy: 'blesh', data: Array[0] }\n * ```\n *\n * @param comparator A function used to compare the previous and current keys for\n * equality. Defaults to a `===` check.\n * @param keySelector Used to select a key value to be passed to the `comparator`.\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinctUntilChanged<T, K>(\n  comparator: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K\n): MonoTypeOperatorFunction<T>;\n\nexport function distinctUntilChanged<T, K>(\n  comparator?: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K = identity as (value: T) => K\n): MonoTypeOperatorFunction<T> {\n  // We've been allowing `null` do be passed as the `compare`, so we can't do\n  // a default value for the parameter, because that will only work\n  // for `undefined`.\n  comparator = comparator ?? defaultCompare;\n\n  return operate((source, subscriber) => {\n    // The previous key, used to compare against keys selected\n    // from new arrivals to determine \"distinctiveness\".\n    let previousKey: K;\n    // Whether or not this is the first value we've gotten.\n    let first = true;\n\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        // We always call the key selector.\n        const currentKey = keySelector(value);\n\n        // If it's the first value, we always emit it.\n        // Otherwise, we compare this key to the previous key, and\n        // if the comparer returns false, we emit.\n        if (first || !comparator!(previousKey, currentKey)) {\n          // Update our state *before* we emit the value\n          // as emission can be the source of re-entrant code\n          // in functional libraries like this. We only really\n          // need to do this if it's the first value, or if the\n          // key we're tracking in previous needs to change.\n          first = false;\n          previousKey = currentKey;\n\n          // Emit the value!\n          subscriber.next(value);\n        }\n      })\n    );\n  });\n}\n\nfunction defaultCompare(a: any, b: any) {\n  return a === b;\n}\n","import { OperatorFunction, ObservableInput, ObservedValueOf, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/**\n * @deprecated The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\n * use `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\n * Details: Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent: number | undefined,\n  scheduler: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n *\n * Start emitting the powers of two on every click, at most 10 of them\n *\n * ```ts\n * import { fromEvent, map, expand, of, delay, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   map(() => 1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10)\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return A function that returns an Observable that emits the source values\n * and also result of applying the projection function to each value emitted on\n * the output Observable and merging the results of the Observables obtained\n * from this transformation.\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent = Infinity,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>> {\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n  return operate((source, subscriber) =>\n    mergeInternals(\n      // General merge params\n      source,\n      subscriber,\n      project,\n      concurrent,\n\n      // onBeforeNext\n      undefined,\n\n      // Expand-specific\n      true, // Use expand path\n      scheduler // Inner subscription scheduler\n    )\n  );\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * The specified function will also be called when the subscriber explicitly unsubscribes.\n *\n * ## Examples\n *\n * Execute callback function when the observable completes\n *\n * ```ts\n * import { interval, take, finalize } from 'rxjs';\n *\n * // emit value in sequence every 1 second\n * const source = interval(1000);\n * const example = source.pipe(\n *   take(5), //take only the first 5 values\n *   finalize(() => console.log('Sequence complete')) // Execute when the observable completes\n * );\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // results:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * // 'Sequence complete'\n * ```\n *\n * Execute callback function when the subscriber explicitly unsubscribes\n *\n * ```ts\n * import { interval, finalize, tap, noop, timer } from 'rxjs';\n *\n * const source = interval(100).pipe(\n *   finalize(() => console.log('[finalize] Called')),\n *   tap({\n *     next: () => console.log('[next] Called'),\n *     error: () => console.log('[error] Not called'),\n *     complete: () => console.log('[tap complete] Not called')\n *   })\n * );\n *\n * const sub = source.subscribe({\n *   next: x => console.log(x),\n *   error: noop,\n *   complete: () => console.log('[complete] Not called')\n * });\n *\n * timer(150).subscribe(() => sub.unsubscribe());\n *\n * // results:\n * // '[next] Called'\n * // 0\n * // '[finalize] Called'\n * ```\n *\n * @param {function} callback Function to be called when source terminates.\n * @return A function that returns an Observable that mirrors the source, but\n * will call the specified function on termination.\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\n    // REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n *\n * Take the first 5 seconds of an infinite 1-second interval Observable\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n *\n * If no clicks happen in 5 seconds, then emit 'no clicks'\n *\n * ```ts\n * import { fromEvent, takeUntil, interval, defaultIfEmpty } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param defaultValue The default value used if the source\n * Observable is empty.\n * @return A function that returns an Observable that emits either the\n * specified `defaultValue` if the source Observable emits no items, or the\n * values emitted by the source Observable.\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R): OperatorFunction<T, T | R> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => {\n          if (!hasValue) {\n            subscriber.next(defaultValue!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n *\n * Throw an error if the document wasn't clicked within 1 second\n *\n * ```ts\n * import { fromEvent, takeUntil, timer, throwIfEmpty } from 'rxjs';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(() => new Error('The document was not clicked within 1 second'))\n * )\n * .subscribe({\n *   next() {\n *    console.log('The document was clicked');\n *   },\n *   error(err) {\n *     console.error(err.message);\n *   }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n * @return A function that returns an Observable that throws an error if the\n * source Observable completed without emitting.\n */\nexport function throwIfEmpty<T>(errorFactory: () => any = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\n      )\n    );\n  });\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\n\nexport function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport function first<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function first<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;\nexport function first<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function first<T, S extends T, D>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue: D\n): OperatorFunction<T, S | D>;\nexport function first<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * ![](first.png)\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. Throws an error if\n * `defaultValue` was not provided and a matching element is not found.\n *\n * ## Examples\n *\n * Emit only the first click that happens on the DOM\n *\n * ```ts\n * import { fromEvent, first } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Emits the first click that happens on a DIV\n *\n * ```ts\n * import { fromEvent, first } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * This is how `first()` is different from {@link take}(1) which completes instead.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {D} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return A function that returns an Observable that emits the first item that\n * matches the condition.\n */\nexport function first<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n      take(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\n    );\n}\n","import { OperatorFunction } from '../types';\nimport { map } from './map';\n\n/** @deprecated To be removed in v9. Use {@link map} instead: `map(() => value)`. */\nexport function mapTo<R>(value: R): OperatorFunction<unknown, R>;\n/**\n * @deprecated Do not specify explicit type parameters. Signatures with type parameters\n * that cannot be inferred will be removed in v8. `mapTo` itself will be removed in v9,\n * use {@link map} instead: `map(() => value)`.\n * */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R>;\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n *\n * Map every click to the string `'Hi'`\n *\n * ```ts\n * import { fromEvent, mapTo } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n *\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param value The value to map each source value to.\n * @return A function that returns an Observable that emits the given `value`\n * every time the source Observable emits.\n * @deprecated To be removed in v9. Use {@link map} instead: `map(() => value)`.\n */\nexport function mapTo<R>(value: R): OperatorFunction<unknown, R> {\n  return map(() => value);\n}\n","import { OperatorFunction, ObservedValueOf, ObservableInput } from '../types';\nimport { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\n\n/** @deprecated Will be removed in v9. Use {@link mergeMap} instead: `mergeMap(() => result)` */\nexport function mergeMapTo<O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  concurrent?: number\n): OperatorFunction<unknown, ObservedValueOf<O>>;\n/**\n * @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead.\n * Details: https://rxjs.dev/deprecations/resultSelector\n */\nexport function mergeMapTo<T, R, O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * ![](mergeMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * ## Example\n *\n * For each click event, start an interval Observable ticking every 1 second\n *\n * ```ts\n * import { fromEvent, mergeMapTo, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(mergeMapTo(interval(1000)));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits items from the\n * given `innerObservable`.\n * @deprecated Will be removed in v9. Use {@link mergeMap} instead: `mergeMap(() => result)`\n */\nexport function mergeMapTo<T, R, O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    return mergeMap(() => innerObservable, resultSelector, concurrent);\n  }\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return mergeMap(() => innerObservable, concurrent);\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n *\n * On every click (starting from the second), emit the relative distance to the previous click\n *\n * ```ts\n * import { fromEvent, pairwise, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(([first, second]) => {\n *     const x0 = first.clientX;\n *     const y0 = first.clientY;\n *     const x1 = second.clientX;\n *     const y1 = second.clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   })\n * );\n *\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return A function that returns an Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return operate((source, subscriber) => {\n    let prev: T;\n    let hasPrev = false;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const p = prev;\n        prev = value;\n        hasPrev && subscriber.next([p, value]);\n        hasPrev = true;\n      })\n    );\n  });\n}\n","import { Observable } from '../Observable';\nimport { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubjectLike } from '../types';\nimport { operate } from '../util/lift';\n\nexport interface ShareConfig<T> {\n  /**\n   * The factory used to create the subject that will connect the source observable to\n   * multicast consumers.\n   */\n  connector?: () => SubjectLike<T>;\n  /**\n   * If true, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"retried\" in the event of an error.\n   * If false, when an error comes from the source it will push the error into the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\n   * or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n   * {@link ReplaySubject} will also push its buffered values before pushing the error.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnError?: boolean | ((error: any) => Observable<any>);\n  /**\n   * If true, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"repeated\" after it is done.\n   * If false, when the source completes, it will push the completion through the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\n   * or resubscriptions will resubscribe to that same subject.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnComplete?: boolean | (() => Observable<any>);\n  /**\n   * If true, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\n   * internal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\n   * time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\n   * again.\n   * If false, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\n   * will remain connected to the source, and new subscriptions to the result will be connected through that same subject.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnRefCountZero?: boolean | (() => Observable<any>);\n}\n\nexport function share<T>(): MonoTypeOperatorFunction<T>;\n\nexport function share<T>(options: ShareConfig<T>): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\n * if the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\n * possible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\n * note that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\n * of the source because the error or complete will be forwarded to all subscribers and their subscription will be\n * closed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\n * source. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.\n *\n * ![](share.png)\n *\n * ## Example\n *\n * Generate new multicast Observable from the `source` Observable value\n *\n * ```ts\n * import { interval, tap, map, take, share } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   tap(x => console.log('Processing: ', x)),\n *   map(x => x * x),\n *   take(6),\n *   share()\n * );\n *\n * source.subscribe(x => console.log('subscription 1: ', x));\n * source.subscribe(x => console.log('subscription 2: ', x));\n *\n * // Logs:\n * // Processing: 0\n * // subscription 1: 0\n * // subscription 2: 0\n * // Processing: 1\n * // subscription 1: 1\n * // subscription 2: 1\n * // Processing: 2\n * // subscription 1: 4\n * // subscription 2: 4\n * // Processing: 3\n * // subscription 1: 9\n * // subscription 2: 9\n * // Processing: 4\n * // subscription 1: 16\n * // subscription 2: 16\n * // Processing: 5\n * // subscription 1: 25\n * // subscription 2: 25\n * ```\n *\n * ## Example with notifier factory: Delayed reset\n *\n * ```ts\n * import { interval, take, share, timer } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   take(3),\n *   share({\n *     resetOnRefCountZero: () => timer(1000)\n *   })\n * );\n *\n * const subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\n * setTimeout(() => subscriptionOne.unsubscribe(), 1300);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n *\n * // Logs:\n * // subscription 1:  0\n * // (subscription 1 unsubscribes here)\n * // (subscription 2 subscribes here ~400ms later, source was not reset)\n * // subscription 2:  1\n * // subscription 2:  2\n * // (subscription 2 unsubscribes here)\n * // (subscription 3 subscribes here ~2000ms later, source did reset before)\n * // subscription 3:  0\n * // subscription 3:  1\n * // subscription 3:  2\n * ```\n *\n * @see {@link shareReplay}\n *\n * @return A function that returns an Observable that mirrors the source.\n */\nexport function share<T>(options: ShareConfig<T> = {}): MonoTypeOperatorFunction<T> {\n  const { connector = () => new Subject<T>(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n  // It's necessary to use a wrapper here, as the _operator_ must be\n  // referentially transparent. Otherwise, it cannot be used in calls to the\n  // static `pipe` function - to create a partial pipeline.\n  //\n  // The _operator function_ - the function returned by the _operator_ - will\n  // not be referentially transparent - as it shares its source - but the\n  // _operator function_ is called when the complete pipeline is composed via a\n  // call to a source observable's `pipe` method - not when the static `pipe`\n  // function is called.\n  return (wrapperSource) => {\n    let connection: SafeSubscriber<T> | null = null;\n    let resetConnection: Subscription | null = null;\n    let subject: SubjectLike<T> | null = null;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection?.unsubscribe();\n      resetConnection = null;\n    };\n    // Used to reset the internal state to a \"cold\"\n    // state, as though it had never been subscribed to.\n    const reset = () => {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      // We need to capture the connection before\n      // we reset (if we need to reset).\n      const conn = connection;\n      reset();\n      conn?.unsubscribe();\n    };\n\n    return operate<T, T>((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      // Create the subject if we don't have one yet. Grab a local reference to\n      // it as well, which avoids non-null assertations when using it and, if we\n      // connect to it now, then error/complete need a reference after it was\n      // reset.\n      const dest = (subject = subject ?? connector());\n\n      // Add the finalization directly to the subscriber - instead of returning it -\n      // so that the handling of the subscriber's unsubscription will be wired\n      // up _before_ the subscription to the source occurs. This is done so that\n      // the assignment to the source connection's `closed` property will be seen\n      // by synchronous firehose sources.\n      subscriber.add(() => {\n        refCount--;\n\n        // If we're resetting on refCount === 0, and it's 0, we only want to do\n        // that on \"unsubscribe\", really. Resetting on error or completion is a different\n        // configuration.\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n\n      // The following line adds the subscription to the subscriber passed.\n      // Basically, `subscriber === dest.subscribe(subscriber)` is `true`.\n      dest.subscribe(subscriber);\n\n      if (!connection) {\n        // We need to create a subscriber here - rather than pass an observer and\n        // assign the returned subscription to connection - because it's possible\n        // for reentrant subscriptions to the shared observable to occur and in\n        // those situations we want connection to be already-assigned so that we\n        // don't create another connection to the source.\n        connection = new SafeSubscriber({\n          next: (value) => dest.next(value),\n          error: (err) => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          },\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset<T extends unknown[] = never[]>(\n  reset: () => void,\n  on: boolean | ((...args: T) => Observable<any>),\n  ...args: T\n): Subscription | null {\n  if (on === true) {\n    reset();\n\n    return null;\n  }\n\n  if (on === false) {\n    return null;\n  }\n\n  return on(...args)\n    .pipe(take(1))\n    .subscribe(() => reset());\n}\n","import { Falsy, MonoTypeOperatorFunction, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function skipWhile<T>(predicate: BooleanConstructor): OperatorFunction<T, Extract<T, Falsy> extends never ? never : T>;\nexport function skipWhile<T>(predicate: (value: T, index: number) => true): OperatorFunction<T, never>;\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * Skips all the notifications with a truthy predicate. It will not skip the notifications when the predicate is falsy.\n * It can also be skipped using index. Once the predicate is true, it will not be called again.\n *\n * ## Example\n *\n * Skip some super heroes\n *\n * ```ts\n * import { from, skipWhile } from 'rxjs';\n *\n * const source = from(['Green Arrow', 'SuperMan', 'Flash', 'SuperGirl', 'Black Canary'])\n * // Skip the heroes until SuperGirl\n * const example = source.pipe(skipWhile(hero => hero !== 'SuperGirl'));\n * // output: SuperGirl, Black Canary\n * example.subscribe(femaleHero => console.log(femaleHero));\n * ```\n *\n * Skip values from the array until index 5\n *\n * ```ts\n * import { from, skipWhile } from 'rxjs';\n *\n * const source = from([1, 2, 3, 4, 5, 6, 7, 9, 10]);\n * const example = source.pipe(skipWhile((_, i) => i !== 5));\n * // output: 6, 7, 9, 10\n * example.subscribe(value => console.log(value));\n * ```\n *\n * @see {@link last}\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return A function that returns an Observable that begins emitting items\n * emitted by the source Observable when the specified predicate becomes false.\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let taking = false;\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => (taking || (taking = !predicate(value, index++))) && subscriber.next(value))\n    );\n  });\n}\n","import { concat } from '../observable/concat';\nimport { OperatorFunction, SchedulerLike, ValueFromArray } from '../types';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function startWith<T>(value: null): OperatorFunction<T, T | null>;\nexport function startWith<T>(value: undefined): OperatorFunction<T, T | undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function startWith<T, A extends readonly unknown[] = T[]>(\n  ...valuesAndScheduler: [...A, SchedulerLike]\n): OperatorFunction<T, T | ValueFromArray<A>>;\nexport function startWith<T, A extends readonly unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\n\n/**\n * Returns an observable that, at the moment of subscription, will synchronously emit all\n * values provided to this operator, then subscribe to the source and mirror all of its emissions\n * to subscribers.\n *\n * This is a useful way to know when subscription has occurred on an existing observable.\n *\n * <span class=\"informal\">First emits its arguments in order, and then any\n * emissions from the source.</span>\n *\n * ![](startWith.png)\n *\n * ## Examples\n *\n * Emit a value when a timer starts.\n *\n * ```ts\n * import { timer, map, startWith } from 'rxjs';\n *\n * timer(1000)\n *   .pipe(\n *     map(() => 'timer emit'),\n *     startWith('timer start')\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // results:\n * // 'timer start'\n * // 'timer emit'\n * ```\n *\n * @param values Items you want the modified Observable to emit first.\n * @return A function that returns an Observable that synchronously emits\n * provided values before subscribing to the source Observable.\n *\n * @see {@link endWith}\n * @see {@link finalize}\n * @see {@link concat}\n */\nexport function startWith<T, D>(...values: D[]): OperatorFunction<T, T | D> {\n  const scheduler = popScheduler(values);\n  return operate((source, subscriber) => {\n    // Here we can't pass `undefined` as a scheduler, because if we did, the\n    // code inside of `concat` would be confused by the `undefined`, and treat it\n    // like an invalid observable. So we have to split it two different ways.\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n  });\n}\n","import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n *\n * Tick every second until the first click happens\n *\n * ```ts\n * import { interval, fromEvent, takeUntil } from 'rxjs';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return A function that returns an Observable that emits the values from the\n * source Observable until `notifier` emits its first value.\n */\nexport function takeUntil<T>(notifier: ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function takeWhile<T>(predicate: BooleanConstructor, inclusive: true): MonoTypeOperatorFunction<T>;\nexport function takeWhile<T>(predicate: BooleanConstructor, inclusive: false): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function takeWhile<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S, inclusive: false): OperatorFunction<T, S>;\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive?: boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * ![](takeWhile.png)\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * ## Example\n *\n * Emit click events only while the clientX property is greater than 200\n *\n * ```ts\n * import { fromEvent, takeWhile } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @param {boolean} inclusive When set to `true` the value that caused\n * `predicate` to return `false` will also be emitted.\n * @return A function that returns an Observable that emits values from the\n * source Observable so long as each value satisfies the condition defined by\n * the `predicate`, then completes.\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive = false): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const result = predicate(value, index++);\n        (result || inclusive) && subscriber.next(value);\n        !result && subscriber.complete();\n      })\n    );\n  });\n}\n","import { MonoTypeOperatorFunction, Observer } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\n\nexport interface TapObserver<T> extends Observer<T> {\n  subscribe: () => void;\n  unsubscribe: () => void;\n  finalize: () => void;\n}\n\nexport function tap<T>(observer?: Partial<TapObserver<T>>): MonoTypeOperatorFunction<T>;\nexport function tap<T>(next: (value: T) => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\nexport function tap<T>(\n  next?: ((value: T) => void) | null,\n  error?: ((error: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Used to perform side-effects for notifications from the source observable\n *\n * <span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span>\n *\n * ![](tap.png)\n *\n * Tap is designed to allow the developer a designated place to perform side effects. While you _could_ perform side-effects\n * inside of a `map` or a `mergeMap`, that would make their mapping functions impure, which isn't always a big deal, but will\n * make it so you can't do things like memoize those functions. The `tap` operator is designed solely for such side-effects to\n * help you remove side-effects from other operations.\n *\n * For any notification, next, error, or complete, `tap` will call the appropriate callback you have provided to it, via a function\n * reference, or a partial observer, then pass that notification down the stream.\n *\n * The observable returned by `tap` is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\n * provided to `tap` will be emitted as an error from the returned observable.\n *\n * > Be careful! You can mutate objects as they pass through the `tap` operator's handlers.\n *\n * The most common use of `tap` is actually for debugging. You can place a `tap(console.log)` anywhere\n * in your observable `pipe`, log out the notifications as they are emitted by the source returned by the previous\n * operation.\n *\n * ## Examples\n *\n * Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\n * and emit `'big'` or `'small'` depending on the size of that number. But we wanted to log what the original number\n * was, so we have added a `tap(console.log)`.\n *\n * ```ts\n * import { of, tap, map } from 'rxjs';\n *\n * of(Math.random()).pipe(\n *   tap(console.log),\n *   map(n => n > 0.5 ? 'big' : 'small')\n * ).subscribe(console.log);\n * ```\n *\n * Using `tap` to analyze a value and force an error. Below is an observable where in our system we only\n * want to emit numbers 3 or less we get from another source. We can force our observable to error\n * using `tap`.\n *\n * ```ts\n * import { of, tap } from 'rxjs';\n *\n * const source = of(1, 2, 3, 4, 5);\n *\n * source.pipe(\n *   tap(n => {\n *     if (n > 3) {\n *       throw new TypeError(`Value ${ n } is greater than 3`);\n *     }\n *   })\n * )\n * .subscribe({ next: console.log, error: err => console.log(err.message) });\n * ```\n *\n * We want to know when an observable completes before moving on to the next observable. The system\n * below will emit a random series of `'X'` characters from 3 different observables in sequence. The\n * only way we know when one observable completes and moves to the next one, in this case, is because\n * we have added a `tap` with the side effect of logging to console.\n *\n * ```ts\n * import { of, concatMap, interval, take, map, tap } from 'rxjs';\n *\n * of(1, 2, 3).pipe(\n *   concatMap(n => interval(1000).pipe(\n *     take(Math.round(Math.random() * 10)),\n *     map(() => 'X'),\n *     tap({ complete: () => console.log(`Done with ${ n }`) })\n *   ))\n * )\n * .subscribe(console.log);\n * ```\n *\n * @see {@link finalize}\n * @see {@link Observable#subscribe}\n *\n * @param observerOrNext A next handler or partial observer\n * @param error An error handler\n * @param complete A completion handler\n * @return A function that returns an Observable identical to the source, but\n * runs the specified Observer or callback(s) for each item.\n */\nexport function tap<T>(\n  observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void) | null,\n  error?: ((e: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T> {\n  // We have to check to see not only if next is a function,\n  // but if error or complete were passed. This is because someone\n  // could technically call tap like `tap(null, fn)` or `tap(null, null, fn)`.\n  const tapObserver =\n    isFunction(observerOrNext) || error || complete\n      ? // tslint:disable-next-line: no-object-literal-type-assertion\n        ({ next: observerOrNext as Exclude<typeof observerOrNext, Partial<TapObserver<T>>>, error, complete } as Partial<TapObserver<T>>)\n      : observerOrNext;\n\n  return tapObserver\n    ? operate((source, subscriber) => {\n        tapObserver.subscribe?.();\n        let isUnsub = true;\n        source.subscribe(\n          createOperatorSubscriber(\n            subscriber,\n            (value) => {\n              tapObserver.next?.(value);\n              subscriber.next(value);\n            },\n            () => {\n              isUnsub = false;\n              tapObserver.complete?.();\n              subscriber.complete();\n            },\n            (err) => {\n              isUnsub = false;\n              tapObserver.error?.(err);\n              subscriber.error(err);\n            },\n            () => {\n              if (isUnsub) {\n                tapObserver.unsubscribe?.();\n              }\n              tapObserver.finalize?.();\n            }\n          )\n        );\n      })\n    : // Tap was called with no valid tap observer or handler\n      // (e.g. `tap(null, null, null)` or `tap(null)` or `tap()`)\n      // so we're going to just mirror the source.\n      identity;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Defined, Maps} from '@scion/toolkit/util';\nimport {BehaviorSubject, firstValueFrom, noop} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n/**\n * The bean manager allows getting references to singleton objects, so-called beans.\n *\n * #### Bean\n * A bean can be any object or even a primitive like a `boolean`. A bean is registered under some symbol in the bean manager. In most\n * cases, the class of the bean is used as the symbol. You can then look up the bean under its registration symbol. A symbol is either\n * a class type, an abstract class type, or a `Symbol`.\n *\n * #### Bean Scope\n * Beans are application-scoped, sometimes also referred to as singleton objects.\n *\n * #### Bean Construction\n * By default, the bean manager constructs beans lazily when looked up for the first time. Subsequent lookups then get the same bean instance.\n * When registering a bean, however, you can instruct the bean manager to construct the bean eagerly at startup. Eager beans are constructed after\n * all initializers complete.\n *\n * #### Registering Beans\n * A bean is registered in the bean manager under some class type, abstract class type or `Symbol`. In most cases, the symbol is also the type of the bean\n * instance but does not have to be. You can then look up the bean from the bean manager using that symbol.\n *\n * When registering a bean, you must tell the bean manager how to construct the bean. Different strategies are supported, as listed below.\n *\n * |Strategy|Description|Example|\n * |-|-|-|\n * |useClass             |if to create an instance of a class                                   |```Beans.register(Logger, {useClass: ConsoleLogger});```|\n * |useClass (shorthand) |Shorthand syntax if class and lookup symbol are identical             |```Beans.register(ConsoleLogger);```|\n * |useValue             |if to use a static value as bean                                      |```Beans.register(LoggingConfig, {useValue: config});```|\n * |useFactory           |if to construct the bean with a factory function                      |```Beans.register(Logger, {useFactory: () => new ConsoleLogger()});```|\n * |useExisting          |if to create an alias for another bean registered in the bean manager |```Beans.register(Logger, {useExisting: ConsoleLogger});```|\n *\n * #### Registering multiple Beans on the same Symbol\n * Multiple beans can be registered under the same symbol by setting the multi flag to `true`. When looking them up, they are returned in an array in registration order.\n *\n * ```ts\n * Beans.register(MessageInterceptor, {useClass: MessageLoggerInterceptor, multi: true});\n * ```\n * #### Looking up Beans\n * Beans are looked up using the symbol under which they were registered. The bean manager providers different methods to look up beans, as listed below.\n *\n * |Method|Description|\n * |-|-|\n * |`Beans.get` |Returns the bean registered under the given symbol. If no or multiple beans are registered under the passed symbol, an error is thrown. |\n * |`Beans.opt` |Returns the bean registered under the given symbol, if any, or returns `undefined` otherwise. |\n * |`Beans.all` |Returns all beans registered under the given symbol. Returns an empty array if no bean is found. |\n *\n * #### Replacing Beans\n * A bean can be replaced by registering another bean under a bean's symbol. In turn, the replaced bean is disposed and unregistered.\n *\n * #### Decorating Beans\n * The bean manager allows decorating a bean to intercept invocations to its methods and properties. Multiple decorators can decorate a single bean. Decoration\n * takes place in decorator registration order.\n *\n * Decorators are registered in the bean manager using the `Beans.registerDecorator` method under the symbol of the bean to be decorated.\n * As with the registration of a bean, you must tell the bean manager how to construct the decorator. For more information, see Bean Construction Strategies.\n * Decorators must be registered before starting the bean manager.\n *\n * A decorator must implement the decorate method of the BeanDecorator interface and return the proxied bean. To proxy a bean, you can create a JavaScript proxy,\n * or create an anonymous class delegating to the actual bean.\n *\n * #### Initializers\n * Initializers help to run initialization tasks during startup. Initializers can specify a runlevel in which to execute. Initializers bound to lower\n * runlevels execute before initializers of higher runlevels. Initializers of the same runlevel may execute in parallel.\n *\n * Initializers are registered in the bean manager using the `Beans.registerInitializer` method, passing a function or an initializer object, and optionally a runlevel.\n * If not specifying a runlevel, the initializer is executed in runlevel <code>0</code>, or in the default runlevel as specified when starting the bean manager.\n *\n * @category BeanManager\n */\nexport class BeanManager {\n\n  private _beanRegistry = new Map<Type<any> | AbstractType<any> | symbol, Set<BeanInfo>>();\n  private _decoratorRegistry = new Map<Type<any> | AbstractType<any> | symbol, BeanDecorator<any>[]>();\n  private _initializers: InitializerInfo[] = [];\n\n  private _sequence = 0;\n  private _runlevel$ = new BehaviorSubject<number>(-1);\n  private _eagerBeansConstructed = false;\n  private _started = false;\n\n  /**\n   * Registers a bean under the given symbol.\n   *\n   * If not providing instructions, the given symbol is used as the constructor function to construct the bean.\n   *\n   * By default, bean construction is lazy, meaning that the bean is constructed when looked up for the first time.\n   * If another bean is registered under the same symbol, that other bean is disposed and replaced with the given bean.\n   * To register multiple beans on the same symbol, register it with the flag `multi` set to `true`.\n   *\n   * Beans can be registered, replaced or removed even after starting the bean manager.\n   *\n   * @param  symbol - Symbol under which to register the bean.\n   * @param  instructions - Control bean construction; see {@link BeanInstanceConstructInstructions} for more detail.\n   * @return handle to unregister the bean.\n   */\n  public register<T>(symbol: Type<T | any> | AbstractType<T | any> | symbol, instructions?: BeanInstanceConstructInstructions<T>): Registration {\n    if (!symbol) {\n      throw Error('[BeanRegisterError] Missing bean lookup symbol.');\n    }\n\n    if (!instructions || !containsBeansConstructStrategy(instructions)) {\n      instructions = {...instructions, useClass: symbol as Type<T>};\n    }\n    validateBeanConstructInstructions(symbol, instructions);\n\n    // Check that either 'multi' or 'non-multi' beans are registered on the same symbol.\n    const multi = Defined.orElse(instructions.multi, false);\n    if (multi && this._beanRegistry.has(symbol) && Array.from(this._beanRegistry.get(symbol)!).some(metaData => !metaData.multi)) {\n      throw Error('[BeanRegisterError] Trying to register a bean as \\'multi-bean\\' on a symbol that has already registered a \\'non-multi-bean\\'. This is probably not what was intended.');\n    }\n    if (!multi && this._beanRegistry.has(symbol) && Array.from(this._beanRegistry.get(symbol)!).some(metaData => metaData.multi)) {\n      throw Error('[BeanRegisterError] Trying to register a bean on a symbol that has already registered a \\'multi-bean\\'. This is probably not what was intended.');\n    }\n\n    // Destroy an already registered bean under the same symbol, if any, unless multi is set to `true`.\n    if (!multi && this._beanRegistry.has(symbol)) {\n      this.disposeBean(this._beanRegistry.get(symbol)!.values().next().value);\n    }\n\n    const beanInfo: BeanInfo<T> = {\n      symbol: symbol,\n      beanConstructFn: createBeanConstructFunction(instructions),\n      eager: Defined.orElse(instructions.eager || instructions.useValue !== undefined, false),\n      multi: multi,\n      instructions: instructions,\n      constructing: false,\n    };\n\n    if (multi) {\n      const beans = this._beanRegistry.get(symbol) || new Set<BeanInfo>();\n      this._beanRegistry.set(symbol, beans.add(beanInfo));\n    }\n    else {\n      this._beanRegistry.set(symbol, new Set<BeanInfo>([beanInfo]));\n    }\n\n    if (beanInfo.eager && this._eagerBeansConstructed) {\n      this.get(symbol);\n    }\n\n    return {unregister: (): void => this.disposeBean(beanInfo)};\n  }\n\n  /**\n   * Registers a bean under the given symbol, but only if no other bean is registered under that symbol yet.\n   *\n   * For detailed information about how to register a bean, see {@link register}.\n   *\n   * @param  symbol - Symbol under which to register the bean.\n   * @param  instructions - Control bean construction; see {@link BeanInstanceConstructInstructions} for more detail.\n   * @return handle to unregister the bean.\n   */\n  public registerIfAbsent<T>(symbol: Type<T | any> | AbstractType<T | any> | symbol, instructions?: BeanInstanceConstructInstructions<T>): Registration {\n    if (!symbol) {\n      throw Error('[BeanRegisterError] Missing bean lookup symbol.');\n    }\n\n    if (!this._beanRegistry.has(symbol)) {\n      return this.register(symbol, instructions);\n    }\n    return {unregister: noop};\n  }\n\n  /**\n   * Registers a decorator to proxy a bean.\n   *\n   * The decorator is invoked when the bean is constructed. Multiple decorators can be registered to decorate a bean.\n   * They are invoked in the order as registered.\n   *\n   * Decorators must be registered before starting the bean manager.\n   *\n   * @param symbol - Identifies the bean(s) which to decorate. If multiple beans are registered under that symbol, they all are decorated.\n   * @param decorator - Specifies the decorator.\n   */\n  public registerDecorator<T extends BeanDecorator<any>>(symbol: Type<any> | AbstractType<any> | symbol, decorator: {useValue: T} | {useClass?: Type<T>} | {useFactory?: () => T}): void {\n    if (this._started) {\n      throw Error('[BeanManagerLifecycleError] Decorators can only be registered before starting the bean manager.');\n    }\n\n    if (!symbol) {\n      throw Error('[BeanDecoratorRegisterError] A decorator requires a symbol.');\n    }\n\n    validateBeanConstructInstructions(symbol, decorator);\n    const constructFn = createBeanConstructFunction(decorator)();\n    Maps.addListValue(this._decoratorRegistry, symbol, constructFn);\n  }\n\n  /**\n   * Registers an initializer that is executed when the bean manager starts. The bean manager is fully started when all initializers are completed.\n   *\n   * Initializers can specify a runlevel in which to execute. Initializers bound to lower runlevels execute before initializers of higher runlevels.\n   * Initializers of the same runlevel may execute in parallel. Runlevels must be >= 0;\n   *\n   * Initializers must be registered before starting the bean manager.\n   */\n  public registerInitializer(initializer: InitializerFn | {useFunction?: InitializerFn; useClass?: Type<Initializer>; useExisting?: Type<Initializer> | AbstractType<Initializer> | symbol; runlevel?: number}): void {\n    if (this._started) {\n      throw Error('[BeanManagerLifecycleError] Initializers can only be registered before starting the bean manager.');\n    }\n\n    const initializerInfo: InitializerInfo = ((): InitializerInfo => {\n      if (typeof initializer === 'function') {\n        return {fn: initializer};\n      }\n      else if (initializer.runlevel !== undefined && initializer.runlevel < 0) {\n        throw Error(`[InitializerRegisterError] The runlevel of an initializer must be >= 0, but was ${initializer.runlevel}.`);\n      }\n      else if (initializer.useFunction) {\n        return {fn: initializer.useFunction, runlevel: initializer.runlevel};\n      }\n      else if (initializer.useClass) {\n        const useClass = initializer.useClass;\n        return {fn: (): Promise<void> => new useClass().init(), runlevel: initializer.runlevel};\n      }\n      else if (initializer.useExisting) {\n        const useExisting = initializer.useExisting;\n        return {fn: (): Promise<void> => Beans.get(useExisting).init(), runlevel: initializer.runlevel};\n      }\n      throw Error('[NullInitializerError] No initializer specified.');\n    })();\n\n    this._initializers.push(initializerInfo);\n  }\n\n  /**\n   * Returns the bean registered under the given symbol.\n   *\n   * By default, if no or multiple beans are registered under the given symbol, an error is thrown.\n   *\n   * @param  symbol - Symbol to look up the bean.\n   * @param  orElse - Controls what to do if no bean is found under the given symbol. If not set and if no bean is found, the bean manager throws an error.\n   * @throws if not finding a bean, or if multiple beans are found under the given symbol.\n   */\n  public get<T>(symbol: Type<T> | AbstractType<T> | Type<any> | AbstractType<any> | symbol, orElse?: {orElseGet?: T; orElseSupply?: () => T}): T {\n    const beans = this.all(symbol);\n    switch (beans.length) {\n      case 0: {\n        if (orElse?.orElseGet !== undefined) {\n          return orElse.orElseGet;\n        }\n        if (orElse?.orElseSupply) {\n          return orElse.orElseSupply();\n        }\n\n        throw Error(`[NullBeanError] No bean registered under the symbol '${getSymbolName(symbol)}'.`);\n      }\n      case 1: {\n        return beans[0];\n      }\n      default: {\n        throw Error(`[MultiBeanError] Multiple beans registered under the symbol '${getSymbolName(symbol)}'.`);\n      }\n    }\n  }\n\n  /**\n   * Returns the bean registered under the given symbol, if any, or returns `undefined` otherwise.\n   *\n   * @param  symbol - Symbol to look up the bean.\n   * @throws if multiple beans are found under the given symbol.\n   */\n  public opt<T>(symbol: Type<T> | AbstractType<T> | Type<any> | AbstractType<any> | symbol): T | undefined {\n    return this.get(symbol, {orElseSupply: (): undefined => undefined});\n  }\n\n  /**\n   * Returns all beans registered under the given symbol. Returns an empty array if no bean is found.\n   *\n   * @param symbol - Symbol to look up the beans.\n   */\n  public all<T>(symbol: Type<T> | AbstractType<T> | Type<any> | AbstractType<any> | symbol): T[] {\n    const beanInfos = Array.from(this._beanRegistry.get(symbol) || new Set<BeanInfo>());\n    if (!beanInfos || !beanInfos.length) {\n      return [];\n    }\n    if (beanInfos.some(beanInfo => beanInfo.constructing)) {\n      throw Error(`[BeanConstructError] Circular bean construction cycle detected [bean={${getSymbolName(symbol)}}].`);\n    }\n\n    return beanInfos.map(beanInfo => this.getOrConstructBeanInstance(beanInfo));\n  }\n\n  /**\n   * Starts the bean manager by running initializers and constructing eager beans. By default, constructs eager beans after\n   * all initializers completed.\n   *\n   * Initializers with a lower runlevel are executed before initializers with a higher runlevel. After all initializers of the\n   * same runlevel have completed, initializers of the next higher runlevel are executed, and so on. Initializers of the same\n   * runlevel may run in parallel.\n   *\n   * @param  config - Control initialization of the bean manager.\n   * @return A Promise that resolves when all initializers completed.\n   */\n  public async start(config?: BeanManagerConfig): Promise<void> {\n    if (this._started) {\n      throw Error('[BeanManagerLifecycleError] Bean manager already started.');\n    }\n\n    const initializerDefaultRunlevel = config?.initializerDefaultRunlevel ?? 0;\n    const eagerBeanConstructRunlevel = config?.eagerBeanConstructRunlevel ?? ((): number => {\n      if (this._initializers.length === 0) {\n        return initializerDefaultRunlevel + 1;\n      }\n      return Math.max(...this._initializers.map(initializer => initializer.runlevel ?? initializerDefaultRunlevel)) + 1;\n    })();\n\n    // Register initializer to construct eager beans.\n    this.registerInitializer({\n      useFunction: async () => {\n        this.constructEagerBeans();\n        this._eagerBeansConstructed = true;\n      },\n      runlevel: eagerBeanConstructRunlevel,\n    });\n\n    // Run initializers.\n    await this.runInitializers(initializerDefaultRunlevel);\n\n    this._started = true;\n  }\n\n  /**\n   * Destroys all beans managed by the bean manager.\n   *\n   * After calling this method, beans, initializers and decorators unregistered.\n   *\n   * Calling this method has no effect if the bean manager is not started, or failed to start.\n   */\n  public destroy(): void {\n    this.getBeanInfos()\n      .sort(compareByDestroyOrder)\n      .forEach(bean => this.disposeBean(bean));\n\n    this._beanRegistry.clear();\n    this._decoratorRegistry.clear();\n    this._initializers.length = 0;\n    this._runlevel$.next(-1);\n    this._eagerBeansConstructed = false;\n    this._started = false;\n  }\n\n  private disposeBean(beanInfo: BeanInfo): void {\n    // Invoke 'preDestroy' lifecycle hook, if any, but only if not an alias for another bean.\n    const alias = beanInfo.instructions.useExisting ?? false;\n    if (!alias && beanInfo.instance && typeof (beanInfo.instance as PreDestroy).preDestroy === 'function') {\n      try {\n        beanInfo.instance.preDestroy();\n      }\n      catch (error) {\n        console?.error('Bean threw an error in `preDestroy`', error);\n      }\n    }\n\n    beanInfo.instance = undefined;\n    beanInfo.constructing = false;\n    Maps.removeSetValue(this._beanRegistry, beanInfo.symbol, beanInfo);\n  }\n\n  /**\n   * Returns a Promise that resolves when the bean manager enters the specified runlevel.\n   * The Promise resolves immediately when the bean manager has already entered or completed that runlevel.\n   */\n  public async whenRunlevel(runlevel: number): Promise<void> {\n    return firstValueFrom(this._runlevel$\n      .pipe(filter(currentRunlevel => currentRunlevel >= runlevel)))\n      .then(() => Promise.resolve());\n  }\n\n  private getBeanInfos(): BeanInfo[] {\n    return Array.from(this._beanRegistry.values()).reduce((acc, beanInfos) => acc.concat(Array.from(beanInfos)), [] as BeanInfo[]);\n  }\n\n  /**\n   * Runs registered initializers, where initializers with a lower runlevel are executed before initializers with a higher runlevel.\n   * After all initializers of the same runlevel have completed, initializers of the next higher runlevel are executed, and so on.\n   * Initializers of the same runlevel may run in parallel.\n   */\n  private async runInitializers(defaultInitializerRunlevel: number): Promise<void> {\n    const initializersGroupedByRunlevel = this._initializers.reduce((grouped, initializer) => Maps.addListValue(grouped, initializer.runlevel ?? defaultInitializerRunlevel, initializer.fn), new Map<number, InitializerFn[]>());\n    const runlevels = Array\n      .from(initializersGroupedByRunlevel.keys())\n      .sort((a, b) => (a - b)); // sort numerically, not alphabetically\n\n    for (const runlevel of runlevels) {\n      this._runlevel$.next(runlevel);\n      try {\n        await Promise.all(initializersGroupedByRunlevel.get(runlevel)!.map(initializerFn => initializerFn()));\n      }\n      catch (error) {\n        throw Error(`[InitializerError] Initializer rejected with an error: ${error} [runlevel=${runlevel}]`);\n      }\n    }\n  }\n\n  /**\n   * Constructs beans with an eager construction.\n   */\n  private constructEagerBeans(): void {\n    this.getBeanInfos()\n      .filter(beanInfo => beanInfo.eager)\n      .forEach(beanInfo => this.getOrConstructBeanInstance(beanInfo));\n  }\n\n  /**\n   * Returns the bean instance if already constructed, or constructs the bean otherwise.\n   */\n  private getOrConstructBeanInstance<T>(beanInfo: BeanInfo): T {\n    // Check if the bean is already constructed.\n    if (beanInfo.instance) {\n      return beanInfo.instance;\n    }\n\n    // Construct the bean and decorate it.\n    beanInfo.constructing = true;\n    try {\n      const bean: T = beanInfo.beanConstructFn();\n      const decorators = this._decoratorRegistry.get(beanInfo.symbol) || [];\n\n      beanInfo.instance = [...decorators].reverse().reduce((decoratedBean, decorator) => decorator.decorate(decoratedBean), bean);\n      beanInfo.constructInstant = ++this._sequence;\n\n      return beanInfo.instance;\n    }\n    finally {\n      beanInfo.constructing = false;\n    }\n  }\n}\n\n/**\n * Provides access to beans registered in the bean manager.\n *\n * @category BeanManager\n */\nexport const Beans = new BeanManager();\n\n/**\n * Compares beans according to their destroy order. If the order is the same, the construction time of the beans is compared, in reverse construction order.\n *\n * @ignore\n */\nfunction compareByDestroyOrder(bean1: BeanInfo, bean2: BeanInfo): number {\n  if ((bean1.instructions.destroyOrder ?? 0) < (bean2.instructions.destroyOrder ?? 0)) {\n    return -1;\n  }\n  if ((bean1.instructions.destroyOrder ?? 0) > (bean2.instructions.destroyOrder ?? 0)) {\n    return +1;\n  }\n  return (bean2.constructInstant ?? 0) - (bean1.constructInstant ?? 0); // reverse construction order\n}\n\n/** @ignore */\nfunction createBeanConstructFunction<T>(instructions: BeanInstanceConstructInstructions<T>): () => T | null {\n  if (instructions.useValue !== undefined) {\n    const useValue = instructions.useValue;\n    return (): T | null => useValue;\n  }\n  else if (instructions.useClass) {\n    const useClassFn = instructions.useClass;\n    return (): T => new useClassFn();\n  }\n  else if (instructions.useFactory) {\n    const useFactoryFn = instructions.useFactory;\n    return (): T => useFactoryFn();\n  }\n  else if (instructions.useExisting) {\n    const useExisting = instructions.useExisting;\n    return (): T => Beans.get(useExisting);\n  }\n  throw Error(`[BeanConstructError] Missing bean construction strategy`);\n}\n\n/**\n * Validates passed instructions to construct the bean to be valid.\n *\n * @ignore\n */\nfunction validateBeanConstructInstructions(symbol: Type<any> | AbstractType<any> | symbol, instructions: BeanInstanceConstructInstructions): void {\n  switch (Object.keys(instructions).filter(instruction => instruction.startsWith('use')).length) {\n    case 0:\n      throw Error(`[BeanRegisterError] Missing bean construction strategy. Expected one of 'useValue', 'useClass', 'useFactory' or 'useExisting' [bean=${symbol.toString()}, instructions=${JSON.stringify(instructions)}]`);\n    case 1:\n      break;\n    default:\n      throw Error(`[BeanRegisterError] Multiple bean construction strategies specified. Expected one of 'useValue', 'useClass', 'useFactory' or 'useExisting' [bean=${symbol.toString()}, instructions=${JSON.stringify(instructions)}]`);\n  }\n\n  if (Object.keys(instructions).includes('useValue') && instructions.useValue === undefined) {\n    throw Error(`[BeanRegisterError] Passing \\`undefined\\` as bean value is not supported [bean=${symbol.toString()}].`);\n  }\n}\n\n/** @ignore */\nfunction containsBeansConstructStrategy(instructions: BeanInstanceConstructInstructions): boolean {\n  return Object.keys(instructions).some(property => property.startsWith('use'));\n}\n\n/**\n * Lifecycle hook will be executed before destroying this bean.\n *\n * @category BeanManager\n */\nexport interface PreDestroy {\n\n  /**\n   * Method invoked before destroying this bean, e.g., when unregistering it, or when shutting down the bean manager.\n   */\n  preDestroy(): void;\n}\n\n/**\n * Metadata about a bean.\n *\n * @ignore\n */\ninterface BeanInfo<T = any> {\n  symbol: Type<T | any> | AbstractType<T | any> | symbol;\n  instance?: T;\n  constructing: boolean;\n  beanConstructFn: () => T | null;\n  constructInstant?: number;\n  eager: boolean;\n  multi: boolean;\n  instructions: BeanInstanceConstructInstructions;\n}\n\n/**\n * @ignore\n */\ninterface InitializerInfo {\n  fn: InitializerFn;\n  runlevel?: number;\n}\n\n/**\n * Describes how a bean instance is created.\n *\n * @category BeanManager\n */\nexport interface BeanInstanceConstructInstructions<T = any> {\n  /**\n   * Set if to use a static value as bean.\n   */\n  useValue?: T | null;\n  /**\n   * Set if to create an instance of a class.\n   */\n  useClass?: Type<T>;\n  /**\n   * Set if to construct the instance with a factory function.\n   */\n  useFactory?: () => T;\n  /**\n   * Set if to create an alias for another bean.\n   */\n  useExisting?: Type<any> | AbstractType<any> | symbol;\n  /**\n   * Set if to construct the bean eagerly. By default, bean construction is lazy when the bean is looked up for the first time.\n   */\n  eager?: boolean;\n  /**\n   * Set if to provide multiple beans for a single symbol.\n   */\n  multi?: boolean;\n  /**\n   * Control when to destroy the bean when destroying the bean manager.\n   * Beans with a lower destroy order are destroyed before beans with a higher destroy order. Beans of the same destroy order\n   * are destroyed in reverse construction order.\n   */\n  destroyOrder?: number;\n}\n\n/**\n * Allows executing initialization tasks (synchronous or asynchronous) when starting the bean manager. The bean manager is fully started when all initializers are completed.\n *\n * Initializers can specify a runlevel in which to execute. Initializers bound to lower runlevels execute before initializers of higher runlevels.\n * Initializers of the same runlevel may execute in parallel.\n *\n * @see {@link BeanManager.registerInitializer Beans.registerInitializer}\n * @category BeanManager\n */\nexport interface Initializer {\n  /**\n   * Executes some work during bean manager startup.\n   *\n   * @return a Promise that resolves when this initializer completes its initialization.\n   */\n  init(): Promise<void>;\n}\n\n/**\n * Allows executing initialization tasks (synchronous or asynchronous) when starting the bean manager. The bean manager is fully started when all initializers are completed.\n *\n * Initializers can specify a runlevel in which to execute. Initializers bound to lower runlevels execute before initializers of higher runlevels.\n * Initializers of the same runlevel may execute in parallel.\n *\n * The initializer function must return a Promise that resolves when completed its initialization.\n *\n * @see {@link BeanManager.registerInitializer Beans.registerInitializer}\n * @category BeanManager\n */\nexport declare type InitializerFn = () => Promise<void>;\n\n/**\n * Allows intercepting bean method or property invocations.\n * When the bean is constructed, it is passed to the decorator in order to be proxied.\n *\n * @see {@link BeanManager.registerDecorator Beans.registerDecorator}\n * @category BeanManager\n */\nexport interface BeanDecorator<T> {\n  /**\n   * Method invoked when the bean is instantiated.\n   *\n   * @param  bean - The actual bean instance; use it to delegate invoations to the actual bean.\n   * @return proxied bean\n   */\n  decorate(bean: T): T;\n}\n\n/**\n * Represents a symbol of an abstract class.\n *\n * @category BeanManager\n */\nexport interface AbstractType<T> extends Function {\n  prototype: T;\n}\n\n/**\n * Represents a symbol of a class.\n *\n * @category BeanManager\n */\nexport interface Type<T> extends Function {\n  new(...args: any[]): T;\n}\n\n/**\n * @ignore\n */\nfunction getSymbolName(symbol: Type<any> | AbstractType<any> | symbol): string {\n  return (typeof symbol === 'function' ? symbol.name : symbol.toString());\n}\n\n/**\n * Handle to undo a registration.\n */\nexport interface Registration {\n  unregister: () => void;\n}\n\n/**\n * Control initialization of the bean manager.\n *\n * @category BeanManager\n */\nexport interface BeanManagerConfig {\n  /**\n   * Defines the runlevel in which to construct eager beans.\n   * If not set, eager beans are constructed after all registered initializers completed.\n   */\n  eagerBeanConstructRunlevel?: number;\n  /**\n   * Defines the runlevel in which initializers, that do not specify a runlevel, should be executed.\n   * If not set, initializers not specifying a runlevel are bound to the runlevel <code>0</code>.\n   */\n  initializerDefaultRunlevel?: number;\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Allows generating pseudo-random identifiers.\n */\nexport class UUID {\n\n  private constructor() {\n  }\n\n  /**\n   * Generates a 'pseudo-random' identifier.\n   */\n  public static randomUUID(): string {\n    let now = Date.now();\n    if (typeof window !== 'undefined' && typeof window.performance !== 'undefined' && typeof window.performance.now === 'function') {\n      now += performance.now(); // use high-precision timer if available\n    }\n\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, char => {\n      const random = (now + Math.random() * 16) % 16 | 0;\n      now = Math.floor(now / 16);\n      return (char === 'x' ? random : (random & 0x3 | 0x8)).toString(16);\n    });\n  }\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {map, mergeMap, mergeMapTo, share, switchMap, take} from 'rxjs/operators';\nimport {combineLatest, concat, EMPTY, from, identity, MonoTypeOperatorFunction, noop, Observable, Observer, of, OperatorFunction, pipe, SchedulerLike, Subscriber, Subscription, TeardownLogic} from 'rxjs';\nimport {Arrays} from '@scion/toolkit/util';\n\n/**\n * Filters items in the source array and emits an array with items satisfying given predicate.\n *\n * If passing `undefined` as predicate, the filter matches all items.\n */\nexport function filterArray<T, S extends T>(predicate?: (item: T) => item is S): OperatorFunction<T[], S[]>;\nexport function filterArray<T>(predicate?: (item: T) => boolean): MonoTypeOperatorFunction<T[]>;\nexport function filterArray<T>(predicate?: (item: T) => boolean): MonoTypeOperatorFunction<T[]> {\n  return map((items: T[]): T[] => items.filter(item => !predicate || predicate(item)));\n}\n\n/**\n * Maps each element in the source array to its extracted property.\n *\n * Like rxjs 'pluck' but based on an array with a function to extract the property.\n *\n * @deprecated since version 10.0.0-beta.3. Use {@link mapArray} instead.\n */\nexport function pluckArray<I, P>(extractor: (item: I) => P): OperatorFunction<I[], P[]> {\n  return map((items: I[]): P[] => items.map(item => extractor(item)));\n}\n\n/**\n * Maps each element in the source array to its mapped value.\n */\nexport function mapArray<I, P>(projectFn: (item: I) => P): OperatorFunction<I[], P[]> {\n  return map((items: I[]): P[] => items.map(item => projectFn(item)));\n}\n\n/**\n * Sorts items in the source array and emits an array with those items sorted.\n */\nexport function sortArray<T>(comparator: (item1: T, item2: T) => number): MonoTypeOperatorFunction<T[]> {\n  return map((items: T[]): T[] => [...items].sort(comparator));\n}\n\n/**\n * Combines the Observables contained in the source array by applying {@link combineLatest}, emitting an array with the latest\n * value of each Observable of the source array. Combines only the Observables of the most recently emitted array.\n *\n * <span class=“informal”>Each time the source emits an array of Observables, combines its Observables by subscribing to each\n * of them, cancelling any subscription of a previous source emission.</span>\n */\nexport function combineArray<T>(): OperatorFunction<Array<Observable<T[]>>, T[]> {\n  return pipe(\n    switchMap((items: Array<Observable<T[]>>) => items.length ? combineLatest(items) : of([])),\n    map((items: Array<T[]>) => new Array<T>().concat(...items)),\n  );\n}\n\n/**\n * Removes duplicates of elements in the source array.\n *\n * <span class=“informal”>Each time the source emits, maps the array to a new array with duplicates removed.</span>\n */\nexport function distinctArray<T>(keySelector: (item: T) => any = identity): MonoTypeOperatorFunction<T[]> {\n  return pipe(map((items: T[]): T[] => Arrays.distinct(items, keySelector)));\n}\n\n/**\n * Buffers the source Observable values until `closingNotifier$` notifier resolves, emits or completes.\n *\n * Once closed the buffer, emits its buffered values as a separate emission per buffered value, in the\n * order as collected. After that, this operator mirrors the source Observable, i.e., emits values as they\n * arrive.\n *\n * Unlike {@link bufferWhen} RxJS operator, the buffer is not re-opened once closed.\n *\n * @param closingNotifier$ Closes the buffer when the passed Promise resolves, or when the passed Observable\n *                         emits or completes.\n */\nexport function bufferUntil<T>(closingNotifier$: Observable<any> | Promise<any>): MonoTypeOperatorFunction<T> {\n  const guard$ = from(closingNotifier$)\n    .pipe(\n      take(1),\n      mergeMapTo(EMPTY),\n      share({resetOnComplete: false, resetOnError: false, resetOnRefCountZero: false}),\n    );\n  return mergeMap((item: T) => concat(guard$, of(item)));\n}\n\n/**\n * Executes a tap-function for the first percolating value.\n */\nexport function tapFirst<T>(tapFn: (value?: T) => void, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T> {\n  return map(((value: T, index: number): T => {\n    if (index === 0) {\n      scheduler ? scheduler.schedule(tapFn) : tapFn(value);\n    }\n    return value;\n  }));\n}\n\n/**\n * Mirrors the source Observable, but runs downstream operators (operators below the `observeInside` operator) and subscription handlers\n * (next, error, complete) inside the given execution context.\n *\n * This operator is particularly useful in Angular applications to run downstream operators inside or outside the Angular zone,\n * as following: `observeInside(continueFn => ngzone.run(continueFn))`.\n *\n * This operator is similar to RxJS's `observeOn` operator, but instead of a scheduler, it accepts an executor. An executor is a function to\n * create an execution context in which downstream operators are then executed. The function is called with a single argument, a function\n * to continue the execution chain.\n *\n * #### Example showing in which Angular zone operators run:\n * ```\n * // Code running outside Angular\n *\n * interval(1000) // Observable creation outside Angular\n *   .pipe(\n *     tap(() => ...), // outside Angular\n *     tap(() => ...), // outside Angular\n *     observeInside(continueFn => zone.run(continueFn)),\n *     tap(() => ...), // inside Angular\n *   )\n *   .subscribe(); // inside Angular\n * ```\n *\n * @param   executionFn - Function for setting up a context in which to continue the execution chain.\n * @return  An Observable mirroring the source, but running downstream operators in a context.\n */\nexport function observeInside<T>(executionFn: ExecutionFn): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>): Observable<T> => {\n    return new Observable((observer: Observer<T>): TeardownLogic => {\n      const subscription = source.subscribe({\n        next: next => executionFn(() => observer.next(next)),\n        error: error => executionFn(() => observer.error(error)),\n        complete: () => executionFn(() => observer.complete()),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  };\n}\n\n/**\n * Mirrors the source Observable, but uses the given execution context to subscribe/unsubscribe to the source. It further runs all operators of the\n * execution chain (operators above and below the `subscribeInside` operator) as well as subscription handlers (next, error, complete) in the given\n * context.\n *\n * Unlike `observeInside` operator, the `subscribeInside` also acts upstream. By using the {@link observeInside} operator after the\n * {@link subscribeInside}, you can change the execution context for downstream operators.\n *\n * This operator is particularly useful in Angular applications to subscribe to the source inside or outside the Angular zone, as following:\n * `subscribeInside(continueFn => ngzone.run(continueFn))`.\n *\n * This operator is similar to RxJS's `subscribeOn` operator, but instead of a scheduler, it accepts an executor. An executor is a function to\n * create an execution context in which upstream and downstream operators are then executed. The function is called with a single argument,\n * a function to continue the execution chain.\n *\n * #### Example showing in which Angular zone operators run:\n * ```\n * // Code running outside Angular\n *\n * interval(1000) // Observable creation inside Angular\n *   .pipe(\n *     tap(() => ...), // inside Angular\n *     tap(() => ...), // inside Angular\n *     subscribeInside(continueFn => zone.run(continueFn)),\n *     tap(() => ...), // inside Angular\n *   )\n *   .subscribe(); // inside Angular\n * ```\n *\n * @param   executionFn - Function for setting up a context in which to continue the execution chain.\n * @return  An Observable mirroring the source, but running upstream and downstream operators in a context.\n */\nexport function subscribeInside<T>(executionFn: ExecutionFn): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>): Observable<T> => {\n    return new Observable((observer: Observer<T>): TeardownLogic => {\n      let subscription: Subscription;\n\n      executionFn(() => {\n        subscription = source.subscribe(new class extends Subscriber<T> {\n\n          constructor() {\n            super(observer);\n          }\n\n          protected override _next(value: T): void {\n            executionFn(() => super._next(value));\n          }\n\n          protected override _error(err: any): void {\n            executionFn(() => super._error(err));\n          }\n\n          protected override _complete(): void {\n            executionFn(() => super._complete());\n          }\n\n          public override unsubscribe(): void {\n            executionFn(() => this.closed ? noop() : super.unsubscribe());\n          }\n        });\n      });\n\n      return () => {\n        executionFn(() => subscription?.unsubscribe());\n      };\n    });\n  };\n}\n\n/**\n * Function to continue the operator chain.\n *\n * @see observeInside\n * @see subscribeInside\n */\nexport type ContinueExecutionFn = () => void;\n\n/**\n * Function for setting up a context in which to continue the execution chain.\n *\n * @see observeInside\n * @see subscribeInside\n */\nexport type ExecutionFn = (fn: ContinueExecutionFn) => void;\n","// just pre-load all the stuff that index.js lazily exports\nconst internalRe = require('./internal/re')\nmodule.exports = {\n  re: internalRe.re,\n  src: internalRe.src,\n  tokens: internalRe.t,\n  SEMVER_SPEC_VERSION: require('./internal/constants').SEMVER_SPEC_VERSION,\n  SemVer: require('./classes/semver'),\n  compareIdentifiers: require('./internal/identifiers').compareIdentifiers,\n  rcompareIdentifiers: require('./internal/identifiers').rcompareIdentifiers,\n  parse: require('./functions/parse'),\n  valid: require('./functions/valid'),\n  clean: require('./functions/clean'),\n  inc: require('./functions/inc'),\n  diff: require('./functions/diff'),\n  major: require('./functions/major'),\n  minor: require('./functions/minor'),\n  patch: require('./functions/patch'),\n  prerelease: require('./functions/prerelease'),\n  compare: require('./functions/compare'),\n  rcompare: require('./functions/rcompare'),\n  compareLoose: require('./functions/compare-loose'),\n  compareBuild: require('./functions/compare-build'),\n  sort: require('./functions/sort'),\n  rsort: require('./functions/rsort'),\n  gt: require('./functions/gt'),\n  lt: require('./functions/lt'),\n  eq: require('./functions/eq'),\n  neq: require('./functions/neq'),\n  gte: require('./functions/gte'),\n  lte: require('./functions/lte'),\n  cmp: require('./functions/cmp'),\n  coerce: require('./functions/coerce'),\n  Comparator: require('./classes/comparator'),\n  Range: require('./classes/range'),\n  satisfies: require('./functions/satisfies'),\n  toComparators: require('./ranges/to-comparators'),\n  maxSatisfying: require('./ranges/max-satisfying'),\n  minSatisfying: require('./ranges/min-satisfying'),\n  minVersion: require('./ranges/min-version'),\n  validRange: require('./ranges/valid'),\n  outside: require('./ranges/outside'),\n  gtr: require('./ranges/gtr'),\n  ltr: require('./ranges/ltr'),\n  intersects: require('./ranges/intersects'),\n  simplifyRange: require('./ranges/simplify'),\n  subset: require('./ranges/subset'),\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Observable, Observer, TeardownLogic} from 'rxjs';\n\n/**\n * Allows observing the dimension of an element. Upon subscription, it emits the element's dimension, and then continuously\n * emits when the dimension of the element changes. It never completes.\n *\n * The Observable uses the native `ResizeObserver` to detect size changes of the passed element.\n *\n * @param  target - HTMLElement to observe its dimension.\n * @return Observable that emits dimension changes of the passed element.\n */\nexport function fromDimension$(target: HTMLElement): Observable<Dimension> {\n  return new Observable((observer: Observer<Dimension>): TeardownLogic => {\n    const resizeObserver = new ResizeObserver(() => observer.next(captureElementDimension(target)));\n    resizeObserver.observe(target); // emits the current dimension directly upon subscription\n\n    return (): void => {\n      resizeObserver.disconnect();\n    };\n  });\n}\n\n/**\n * Captures the dimension of the given element.\n */\nexport function captureElementDimension(element: HTMLElement): Dimension {\n  return {\n    clientWidth: element.clientWidth,\n    offsetWidth: element.offsetWidth,\n    clientHeight: element.clientHeight,\n    offsetHeight: element.offsetHeight,\n    element,\n  };\n}\n\n/**\n * Represents the dimension of an element.\n */\nexport interface Dimension {\n  offsetWidth: number;\n  offsetHeight: number;\n  clientWidth: number;\n  clientHeight: number;\n  element: HTMLElement;\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Observable, Observer, TeardownLogic} from 'rxjs';\n\n/**\n * Allows watching for changes being made to the DOM tree of an HTML element. It never completes.\n *\n * Wraps a {MutationObserver} in an Observable to watch for changes being made to the DOM tree.\n * See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver for more information.\n *\n * @param target - HTMLElement to observe.\n * @param options - describes the configuration of a mutation observer\n *        See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit\n */\nexport function fromMutation$(target: Node, options?: MutationObserverInit): Observable<MutationRecord[]> {\n  return new Observable((observer: Observer<MutationRecord[]>): TeardownLogic => {\n    const mutationObserver = new MutationObserver((mutations: MutationRecord[]): void => observer.next(mutations));\n    mutationObserver.observe(target, options);\n\n    return (): void => {\n      mutationObserver.disconnect();\n    };\n  });\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {fromEvent, merge, Observable, OperatorFunction, pipe} from 'rxjs';\nimport {auditTime, distinctUntilChanged, map, mapTo, startWith, switchMap} from 'rxjs/operators';\nimport {fromMutation$} from './mutation.observable';\nimport {fromDimension$} from './dimension.observable';\n\n/**\n * Allows observing an element's bounding box, providing information about the element's size and position relative to the\n * browser viewport. Refer to https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect for more information.\n *\n * Upon subscription, the Observable emits the element's current bounding box, and then continuously emits when its\n * bounding box changes, e.g., due to a change in the layout. The Observable never completes.\n *\n * ***\n * If you are only interested in element size changes and not position changes, consider using the {@link fromDimension$} Observable\n * as it is more efficient because natively supported by the browser.\n * ***\n *\n * ### Note on the detection of position changes:\n *\n * There is, unfortunately, no native browser API to detect position changes of an element in a performant and reliable way.\n * Our approach to detecting position changes of an element is based on the premise that it usually involves a parent or a parent's\n * direct child changing in size. Repositioning can further occur when the user scrolls a parent container or when elements are added\n * to or removed from the DOM. This covers most cases, but not all.\n *\n * We are aware that this approach can be quite expensive, mainly because potentially a large number of elements need to be monitored\n * for resizing/scrolling. Therefore, use this Observable only if you need to be informed about position changes. For pure dimension\n * changes use the {@link fromDimension$} Observable instead.\n *\n * @see fromDimension$\n */\nexport function fromBoundingClientRect$(element: HTMLElement): Observable<Readonly<DOMRect>> {\n  return fromMutation$(document.body, {childList: true, subtree: true})\n    .pipe(\n      startWith(undefined as void),\n      map(() => collectElements(element)),\n      detectLayoutChange(),\n      map(() => captureClientRect(element)),\n      distinctUntilChanged((a, b) => a.left === b.left && a.top === b.top && a.width === b.width && a.height === b.height),\n    );\n}\n\n/**\n * Collects elements that can affect the given element's size and position.\n */\nfunction collectElements(element: HTMLElement): HTMLElement[] {\n  const elements: HTMLElement[] = [];\n\n  for (let el = element.parentElement; el !== null; el = el.parentElement) {\n    elements.push(...Array.from(el.children).filter(child => child instanceof HTMLElement) as HTMLElement[]);\n  }\n  return elements;\n}\n\n/**\n * Emits whenever one of the source elements changes in size or scrolls.\n */\nfunction detectLayoutChange(): OperatorFunction<HTMLElement[], void> {\n  return pipe(\n    switchMap(elements => merge(...elements.map(element => merge(\n      fromDimension$(element),\n      fromEvent(element, 'scroll', {passive: true})),\n    ))),\n    mapTo(undefined),\n    // Debounce to a single emission as a layout change can cause multiple elements to change.\n    auditTime(25),\n  );\n}\n\nfunction captureClientRect(element: HTMLElement): Readonly<DOMRect> {\n  return element.getBoundingClientRect();\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Manifest of an application.\n *\n * The manifest is a special file that contains information about a micro application. A micro application declares\n * its intentions and capabilities in its manifest file. The manifest needs to be registered in the host application.\n *\n * @category Platform\n */\nexport interface Manifest {\n  /**\n   * The name of the application, e.g. displayed in the DevTools.\n   */\n  name: string;\n  /**\n   * URL to the application root. The URL can be fully qualified, or a path relative to the origin under\n   * which serving the manifest file. If not specified, the origin of the manifest file acts as the base\n   * URL. The platform uses the base URL to resolve microfrontends such as activator endpoints.\n   * For a Single Page Application that uses hash-based routing, you typically specify the hash symbol (`#`)\n   * as the base URL.\n   */\n  baseUrl?: string;\n  /**\n   * Functionality which this application intends to use.\n   */\n  intentions?: Intention[];\n  /**\n   * Functionality which this application provides that qualified apps can call via intent.\n   */\n  capabilities?: Capability[];\n}\n\n/**\n * Represents a dictionary of key-value pairs to qualify an intention, intent or capability.\n *\n * See {@link Intention}, {@link Capability} or {@link Intent} for the usage of wildcards\n * in qualifier properties.\n *\n * @category Platform\n */\nexport interface Qualifier {\n  [key: string]: string | number | boolean;\n}\n\n/**\n * Represents an application registered in the platform.\n *\n * @category Platform\n */\nexport interface Application {\n  /**\n   * Unique symbolic name of the application.\n   */\n  symbolicName: string;\n  /**\n   * Name of the application as specified in the manifest.\n   */\n  name: string;\n  /**\n   * URL to the application root.\n   */\n  baseUrl: string;\n  /**\n   * Specifies the origin where message from this application must originate from. Messages of a different origin will be rejected.\n   */\n  messageOrigin: string;\n  /**\n   * URL to the manifest of this application.\n   */\n  manifestUrl: string;\n  /**\n   * Maximum time (in milliseconds) that the host waits until the manifest for this application is loaded.\n   *\n   * This is the effective timeout, i.e, either the application-specific timeout as defined in {@link ApplicationConfig.manifestLoadTimeout},\n   * or the global timeout as defined in {@link MicrofrontendPlatformConfig.manifestLoadTimeout}, otherwise `undefined`.\n   */\n  manifestLoadTimeout?: number;\n  /**\n   * Maximum time (in milliseconds) that the host waits for this application to signal readiness.\n   *\n   * This is the effective timeout, i.e, either the application-specific timeout as defined in {@link ApplicationConfig.activatorLoadTimeout},\n   * or the global timeout as defined in {@link MicrofrontendPlatformConfig.activatorLoadTimeout}, otherwise `undefined`.\n   */\n  activatorLoadTimeout?: number;\n  /**\n   * Indicates whether or not capability scope check is disabled for this application.\n   */\n  scopeCheckDisabled: boolean;\n  /**\n   * Indicates whether or not this application can issue intents for which it has not declared a respective intention.\n   */\n  intentionCheckDisabled: boolean;\n  /**\n   * Indicates whether or not 'Intention Registration API' is disabled for this application.\n   */\n  intentionRegisterApiDisabled: boolean;\n}\n\n/**\n * The term capability refers to the Intention API of the SCION Microfrontend Platform.\n *\n * A capability represents some functionality of a micro application that is available to qualified micro applications through the Intention API.\n * A micro application declares its capabilities in its manifest. Qualified micro applications can then browse the capabilities, or interact with\n * provided capabilities via intent.\n *\n * A capability is formulated in an abstract way consisting of a type and optionally a qualifier. The type categorizes a capability in terms of its\n * functional semantics. A capability may also define a qualifier to differentiate different capabilities of the same type.\n *\n * A capability can have private or public visibility. If private, which is by default, the capability is not visible to other micro\n * applications; thus, it can only be invoked or browsed by the providing micro application itself.\n *\n * A capability can specify parameters which the intent issuer can/must pass along with the intent. Parameters are part of the contract between\n * the intent publisher and the capability provider. They do not affect the intent routing, unlike the qualifier.\n *\n * Metadata can be associated with a capability in its properties section. For example, if providing a microfrontend, the URL to the\n * microfrontend can be added as property, or if the capability contributes an item to a menu, its label to be displayed.\n *\n * @category Platform\n * @category Intention API\n */\nexport interface Capability {\n  /**\n   * Categorizes the capability in terms of its functional semantics (e.g., `microfrontend` if providing a microfrontend).\n   * It can be an arbitrary `string` literal and has no meaning to the platform.\n   */\n  type: string;\n  /**\n   * The qualifier is a dictionary of arbitrary key-value pairs to differentiate capabilities of the same `type` and is like\n   * an abstract description of the capability. It should include enough information to uniquely identify the capability.\n   *\n   * Intents must exactly match the qualifier of the capability, if any. The capability qualifier allows using wildcards\n   * (such as `*` or `?`) to match multiple intents simultaneously.\n   *\n   * - **Asterisk wildcard character (`*`):**\n   *   Intents must contain such a property, but any value is allowed (except `null` or `undefined`). Use it like this: `{property: '*'}`\n   * - **Optional wildcard character (?):**\\\n   *   Intents can contain such a property. Use it like this: `{property: '?'}`.\n   */\n  qualifier?: Qualifier;\n  /**\n   * Specifies parameters which the intent issuer must pass along with the intent.\n   * Parameters are part of the contract between the intent publisher and the capability provider.\n   * They do not affect the intent routing, unlike the qualifier.\n   *\n   * @deprecated This API will be removed in a future release. Instead, declare parameters via {@link Capability.params} property.\n   */\n  requiredParams?: string[];\n  /**\n   * Specifies parameters which the intent issuer optionally can pass along with the intent.\n   * Parameters are part of the contract between the intent publisher and the capability provider.\n   * They do not affect the intent routing, unlike the qualifier.\n   *\n   * @deprecated This API will be removed in a future release. Instead, declare parameters via {@link Capability.params} property.\n   */\n  optionalParams?: string[];\n  /**\n   * Specifies parameters which the intent issuer can/must pass along with the intent.\n   *\n   * Parameters are part of the contract between the intent publisher and the capability provider.\n   * They do not affect the intent routing, unlike the qualifier.\n   */\n  params?: ParamDefinition[];\n  /**\n   * Controls if this capability is visible to other micro applications. If private, which is by default, the capability is not visible\n   * to other micro applications; thus, it can only be invoked or looked up by the providing micro application.\n   */\n  private?: boolean;\n  /**\n   * A short description to explain the capability.\n   */\n  description?: string;\n  /**\n   * Arbitrary metadata to be associated with the capability.\n   */\n  properties?: {\n    [key: string]: any;\n  };\n  /**\n   * Metadata about the capability (read-only, exclusively managed by the platform).\n   * @ignore\n   */\n  metadata?: {\n    /**\n     * Unique identity of this capability.\n     */\n    id: string;\n    /**\n     * Symbolic name of the application which provides this capability.\n     */\n    appSymbolicName: string;\n  };\n}\n\n/**\n * The term intention refers to the Intention API of the SCION Microfrontend Platform.\n *\n * An intention refers to one or more capabilities that a micro application wants to interact with.\n *\n * Intentions are declared in the application’s manifest and are formulated in an abstract way, consisting of a type\n * and optionally a qualifier. The qualifier is used to differentiate capabilities of the same type.\n *\n * @category Platform\n * @category Intention API\n */\nexport interface Intention {\n  /**\n   * The type of capability to interact with.\n   */\n  type: string;\n  /**\n   * Qualifies the capability which to interact with.\n   *\n   * The qualifier is a dictionary of arbitrary key-value pairs to differentiate capabilities of the same `type`.\n   *\n   * The intention must exactly match the qualifier of the capability, if any. The intention qualifier allows using\n   * wildcards (such as `*` or `?`) to match multiple capabilities simultaneously.\n   *\n   * In the intention, the following wildcards are supported:\n   * - **Asterisk wildcard character (`*`):**\\\n   *   Matches capabilities with such a qualifier property no matter of its value (except `null` or `undefined`).\n   *   Use it like this: `{property: '*'}`.\n   * - **Optional wildcard character (?):**\\\n   *   Matches capabilities regardless of having or not having such a property. Use it like this: `{property: '?'}`.\n   * - **Partial wildcard (`**`):**\n   *   Matches capabilities even if having additional properties. Use it like this: `{'*': '*'}`.\n   */\n  qualifier?: Qualifier;\n  /**\n   * Metadata about this intention (read-only, exclusively managed by the platform).\n   * @ignore\n   */\n  metadata?: {\n    /**\n     * Unique identity of this intent declaration.\n     */\n    id: string;\n    /**\n     * Symbolic name of the application which declares this intention.\n     */\n    appSymbolicName: string;\n  };\n}\n\n/**\n * Symbol to determine if this app instance is running as the platform host.\n *\n * ```ts\n * const isPlatformHost: boolean = Beans.get(IS_PLATFORM_HOST);\n * ```\n *\n * @category Platform\n */\nexport abstract class IS_PLATFORM_HOST {\n}\n\n/**\n * Built in capability types.\n *\n * @ignore\n */\nexport enum PlatformCapabilityTypes {\n  /**\n   * Classifier to register an activator capability.\n   *\n   * @see Activator\n   */\n  Activator = 'activator'\n}\n\n/**\n * An activator allows a micro application to initialize and connect to the platform upon host application's startup,\n * i.e., when the user loads the web application into the browser.\n *\n *\n * In the broadest sense, an activator is a kind of microfrontend, i.e. an HTML page that runs in an iframe. In contrast\n * to regular microfrontends, however, at platform startup, the platform loads activator microfrontends into hidden iframes\n * for the entire platform lifecycle, thus, providing a stateful session to the micro application on the client-side.\n *\n * Some typical use cases for activators are receiving messages and intents, preloading data, or flexibly providing capabilities.\n *\n * A micro application registers an activator as public _activator_ capability in its manifest, as follows:\n *\n * ```json\n * \"capabilities\": [\n *   {\n *     \"type\": \"activator\",\n *     \"private\": false,\n *     \"properties\": {\n *       \"path\": \"path/to/the/activator\"\n *     }\n *   }\n * ]\n * ```\n *\n * #### Activation Context\n * An activator's microfrontend runs inside an activation context. The context provides access\n * to the activator capability, allowing to read properties declared on the activator capability.\n *\n * You can obtain the activation context using the {@link ContextService} as following.\n *\n * ```ts\n * // Looks up the activation context.\n * const ctx: ActivationContext = await Beans.get(ContextService).lookup(ACTIVATION_CONTEXT);\n * ```\n *\n * #### Multiple Activators\n * A micro application can register multiple activators. Note, that each activator boots the micro\n * application on its own and runs in a separate browsing context. The platform nominates one activator\n * of each micro application as its primary activator. The nomination has no relevance to the platform but\n * can help code decide whether or not to install singleton functionality.\n *\n * You can test if running in the primary activation context as following.\n * ```ts\n * // Looks up the activation context.\n * const ctx = await Beans.get(ContextService).lookup<ActivationContext>(ACTIVATION_CONTEXT);\n * // Checks if running in the context of the primary activator.\n * const isPrimary: boolean = ctx.primary;\n * ```\n *\n * #### Sharing State\n * Since an activator runs in a separate browsing context, microfrontends cannot directly access its state.\n * Instead, an activator could put data, for example, into session storage, so that microfrontends of its micro\n * application can access it. Alternatively, an activator could install a message listener, allowing microfrontends\n * to request data via client-side messaging.\n *\n * @category Platform\n */\nexport interface Activator extends Capability {\n  type: PlatformCapabilityTypes.Activator;\n  private: false;\n  properties: {\n    /**\n     * Path where the platform can load the activator microfrontend. The path is relative to the base URL\n     * of the micro application, as specified in the application manifest.\n     */\n    path: string;\n    /**\n     * Starting an activator may take some time. In order not to miss any messages or intents, you can instruct the platform host to\n     * wait to enter started state until you signal the activator to be ready. For this purpose, you can define a set of topics where\n     * to publish a ready message to signal readiness. If you specify multiple topics, the activator enters ready state after you have\n     * published a ready message to all these topics. A ready message is an event; thus, a message without payload.\n     *\n     * If not specifying a readiness topic, the platform host does not wait for this activator to become ready. However, if you specify a\n     * readiness topic, make sure that your activator has a fast startup time and signals readiness as early as possible not to delay\n     * the startup of the platform host.\n     */\n    readinessTopics?: string | string[];\n  };\n}\n\n/**\n * Describes a parameter to be passed along with an intent.\n */\nexport interface ParamDefinition {\n  /**\n   * Specifies the name of the parameter.\n   */\n  name: string;\n  /**\n   * Describes the parameter and its usage in more detail.\n   */\n  description?: string;\n  /**\n   * Specifies whether the parameter must be passed along with the intent.\n   */\n  required: boolean;\n  /**\n   * Allows deprecating the parameter.\n   *\n   * It is good practice to explain the deprecation, provide the date of removal, and how to migrate.\n   * If renaming the parameter, you can set the {@link ParamDefinition.deprecated.useInstead useInstead} property to specify\n   * which parameter to use instead. At runtime, this will map the parameter to the specified replacement, allowing for\n   * straightforward migration on the provider side.\n   */\n  deprecated?: true | {message?: string; useInstead?: string};\n\n  /**\n   * Allows the declaration of additional metadata that can be interpreted in an interceptor, for example.\n   */\n  [property: string]: any;\n}\n\n/** @internal */\nexport const ɵAPP_CONFIG = Symbol('ɵAPP_CONFIG');\n\n/**\n * Symbol to get the application's symbolic name from the bean manager.\n */\nexport const APP_IDENTITY = Symbol('APP_IDENTITY');\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Capability, Qualifier} from './platform.model';\nimport {MonoTypeOperatorFunction, Observable, of, OperatorFunction, pipe, throwError} from 'rxjs';\nimport {filter, map, mergeMap, takeWhile} from 'rxjs/operators';\n\n/**\n * Represents a message with headers to transport additional information with a message.\n *\n * @category Messaging\n */\nexport interface Message {\n  /**\n   * Additional information attached to this message.\n   *\n   * Header values must be JSON serializable. If no headers are set, the `Map` is empty.\n   */\n  headers: Map<string, any>;\n}\n\n/**\n * Represents an intent issued by an application.\n *\n * The intent is transported to all clients that provide a satisfying capability visible to the issuing application.\n *\n * @category Messaging\n */\nexport interface IntentMessage<BODY = any> extends Message {\n  /**\n   * Intent that represents this message.\n   */\n  intent: Intent;\n  /**\n   * Optional data passed along with the intent.\n   */\n  body?: BODY;\n  /**\n   * Capability that fulfills the intent.\n   */\n  capability: Capability;\n}\n\n/**\n * The term intention refers to the Intention API of the SCION Microfrontend Platform.\n *\n * The intent is the message that a micro application sends to interact with functionality that is available in the form of a capability.\n *\n * The platform transports the intent to the micro applications that provide the requested capability. A micro application can issue an\n * intent only if having declared an intention in its manifest. Otherwise, the platform rejects the intent.\n *\n * An intent is formulated in an abstract way, having assigned a type, and optionally a qualifier. This information is used for resolving\n * the capability; thus, it can be thought of as a form of capability addressing. See the definition of a capability for more information.\n *\n * @category Messaging\n * @category Intention API\n */\nexport interface Intent {\n  /**\n   * Type of functionality to intend.\n   */\n  type: string;\n  /**\n   * The qualifier is an abstract description of the intent and is expressed in the form of a dictionary.\n   *\n   * When issuing an intent, the qualifier must be exact, i.e. not contain wildcards.\n   */\n  qualifier?: Qualifier;\n  /**\n   * Parameters allow additional data to be passed along with the intent.\n   *\n   * They are part of the contract between the intent publisher and the capability provider. The capability provider\n   * can declare mandatory and optional parameters. No additional parameters may be included.\n   *\n   * Parameters have no effect on the intent routing, unlike the qualifier. If mandatory parameters\n   * are missing or non-specified parameters are included, the intent is rejected.\n   */\n  params?: Map<string, any>;\n}\n\n/**\n * Represents a message published to a topic.\n *\n * The message is transported to all consumers subscribed to the topic.\n *\n * @category Messaging\n */\nexport interface TopicMessage<BODY = any> extends Message {\n  /**\n   * The topic where to publish this message to.\n   */\n  topic: string;\n  /**\n   * Optional message.\n   */\n  body?: BODY;\n  /**\n   * Instructs the broker to store this message as retained message for the topic. With the retained flag set to `true`,\n   * a client receives this message immediately upon subscription. The broker stores only one retained message per topic.\n   */\n  retain?: boolean;\n  /**\n   * Contains the resolved values of the wildcard segments as specified in the topic.\n   * For example: If subscribed to the topic `person/:id` and a message is published to the topic `person/5`,\n   * the resolved id with the value `5` is contained in the params map.\n   */\n  params?: Map<string, string>;\n}\n\n/**\n * Declares headers set by the platform when sending a message.\n *\n * Clients are allowed to read platform-defined headers from a message.\n *\n * @category Messaging\n */\nexport enum MessageHeaders {\n  /**\n   * Identifies the sending client instance of a message.\n   * This header is set by the platform when publishing a message or intent.\n   */\n  ClientId = 'ɵCLIENT_ID',\n  /**\n   * Identifies the sending application of a message.\n   * This header is set by the platform when publishing a message or intent.\n   */\n  AppSymbolicName = 'ɵAPP_SYMBOLIC_NAME',\n  /**\n   * Unique identity of the message.\n   * This header is set by the platform when publishing a message or intent.\n   */\n  MessageId = 'ɵMESSAGE_ID',\n  /**\n   * Destination to which to send a response to this message.\n   * This header is set by the platform when sending a request.\n   */\n  ReplyTo = 'ɵREPLY_TO',\n  /**\n   * The time the message was sent.\n   * This header is set by the platform when publishing a message or intent.\n   */\n  Timestamp = 'ɵTIMESTAMP',\n  /**\n   * The version of the client.\n   */\n  Version = 'ɵVERSION',\n  /**\n   * Use this header to set the request method to indicate the desired action to be performed for a given resource.\n   * @see RequestMethods\n   */\n  Method = 'ɵMETHOD',\n  /**\n   * Use this header to set the response status code to indicate whether a request has been successfully completed.\n   * See {@link ResponseStatusCodes} for available status codes. Other codes are also allowed.\n   *\n   * Status codes are primarily used in request-reply communication. In request-response communication, by default,\n   * the requestor’s Observable never completes. However, the replier can include a response status code in the reply’s\n   * headers, allowing to control the lifecycle of the requestor’s Observable.\n   *\n   * For example, the status code {@link ResponseStatusCodes.TERMINAL 250} allows completing the requestor’s Observable\n   * after emitted the reply, or the status code {@link ResponseStatusCodes.ERROR 500} to error the Observable.\n   *\n   * Note that the platform evaluates status codes only in request-response communication. They are ignored when observing\n   * topics or intents in pub/sub communication but can still be used; however, they must be handled by the application,\n   * e.g., by using the {@link throwOnErrorStatus} SCION RxJS operator.\n   *\n   * @see ResponseStatusCodes\n   */\n  Status = 'ɵSTATUS',\n  /**\n   * Unique identity of a topic subscriber.\n   *\n   * @internal\n   */\n  ɵTopicSubscriberId = 'ɵTOPIC_SUBSCRIBER_ID',\n}\n\n/**\n * Defines a set of request methods to indicate the desired action to be performed for a given resource.\n *\n * @category Messaging\n */\nexport enum RequestMethods {\n  /**\n   * The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.\n   */\n  GET = 'GET',\n  /**\n   * The DELETE method deletes the specified resource.\n   */\n  DELETE = 'DELETE',\n  /**\n   * The PUT method replaces all current representations of the target resource with the request payload.\n   */\n  PUT = 'PUT',\n  /**\n   * The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.\n   */\n  POST = 'POST',\n  /**\n   * The OBSERVE method is used to observe the specified resource.\n   */\n  OBSERVE = 'OBSERVE'\n}\n\n/**\n * Defines a set of response status codes to indicate whether a request has been successfully completed.\n *\n * @see throwOnErrorStatus\n * @see MessageClient.request$\n * @see IntentClient.request$\n *\n * @category Messaging\n */\nexport enum ResponseStatusCodes {\n  /**\n   * The request has succeeded.\n   */\n  OK = 200,\n  /**\n   * The request has succeeded. No further response to be expected.\n   *\n   * In request-reply communication, setting this status code will complete the requestor's Observable\n   * after emitted the reply. The reply is only emitted if not `undefined`.\n   */\n  TERMINAL = 250,\n  /**\n   * The receiver could not understand the request due to invalid syntax.\n   *\n   * In request-reply communication, setting this status code will error the requestor's Observable.\n   */\n  BAD_REQUEST = 400,\n  /**\n   * The receiver could not find the requested resource.\n   *\n   * In request-reply communication, setting this status code will error the requestor's Observable.\n   */\n  NOT_FOUND = 404,\n  /**\n   * The receiver encountered an internal error. Optionally, set the error as message payload.\n   *\n   * In request-reply communication, setting this status code will error the requestor's Observable.\n   */\n  ERROR = 500,\n}\n\n/**\n * Returns an Observable that mirrors the source Observable unless receiving a message with\n * a response status code greater than or equal to 400. Then, the stream will end with an\n * {@link RequestError error} and the source Observable unsubscribed.\n *\n * When receiving a message with the response status code {@link ResponseStatusCodes.TERMINAL},\n * the Observable emits this message and completes.\n *\n * If a message does not include a response status code, the message is emitted as is.\n *\n * Note that this operator is installed in {@link MessageClient.request$} and {@link IntentClient.request$}.\n *\n * @category Messaging\n */\nexport function throwOnErrorStatus<BODY>(): MonoTypeOperatorFunction<TopicMessage<BODY>> {\n  return pipe(\n    mergeMap((message: TopicMessage<BODY>): Observable<TopicMessage<BODY>> => {\n      const status = message.headers.get(MessageHeaders.Status) ?? ResponseStatusCodes.OK;\n      if (status < 400) {\n        return of(message); // 1xx: informational responses, 2xx: successful responses, 4xx: client errors, 5xx: server errors\n      }\n\n      if (typeof message.body === 'string') {\n        const messageBody: string = message.body;\n        return throwError(() => new RequestError(messageBody, status, message));\n      }\n\n      switch (status) {\n        case ResponseStatusCodes.BAD_REQUEST: {\n          return throwError(() => new RequestError('The receiver could not understand the request due to invalid syntax.', status, message));\n        }\n        case ResponseStatusCodes.NOT_FOUND: {\n          return throwError(() => new RequestError('The receiver could not find the requested resource.', status, message));\n        }\n        case ResponseStatusCodes.ERROR: {\n          return throwError(() => new RequestError('The receiver encountered an internal error.', status, message));\n        }\n        default: {\n          return throwError(() => new RequestError('Request error.', status, message));\n        }\n      }\n    }),\n    takeWhile((message: TopicMessage<BODY>) => {\n      return message.headers.get(MessageHeaders.Status) !== ResponseStatusCodes.TERMINAL;\n    }, true),\n    filter((message: TopicMessage<BODY>) => {\n      const isTerminalMessage = message.headers.get(MessageHeaders.Status) === ResponseStatusCodes.TERMINAL;\n      return (!isTerminalMessage || message.body !== undefined);\n    }),\n  );\n}\n\n/**\n * Maps each message to its body.\n *\n * @category Messaging\n */\nexport function mapToBody<T>(): OperatorFunction<TopicMessage<T> | IntentMessage<T>, T> {\n  return map(message => message.body!);\n}\n\n/**\n * Indicates that the request handler responded with an error response.\n *\n * @ignore\n */\nexport class RequestError extends Error {\n\n  constructor(error: string, public status: number, public msg: Message) {\n    super(error);\n    this.name = 'RequestError';\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Message} from './messaging.model';\n\n/**\n * Declares the message transports.\n */\nexport enum MessagingTransport {\n  /**\n   * Transport used by clients to communicate with the broker.\n   */\n  ClientToBroker = 'sci://microfrontend-platform/client-to-broker',\n  /**\n   * Transport used by the broker to communicate with its clients.\n   */\n  BrokerToClient = 'sci://microfrontend-platform/broker-to-client',\n  /**\n   * Transport used by a microfrontend to communicate with its embedding outlet.\n   */\n  MicrofrontendToOutlet = 'sci://microfrontend-platform/microfrontend-to-outlet',\n}\n\n/**\n * Defines the channels to which messages can be sent.\n */\nexport enum MessagingChannel {\n  /**\n   * Channel for clients to subscribe to a topic destination.\n   */\n  TopicSubscribe = 'topic-subscribe',\n  /**\n   * Channel for clients to unsubscribe from a topic destination.\n   */\n  TopicUnsubscribe = 'topic-unsubscribe',\n  /**\n   * Channel to publish and dispatch topic-related messages.\n   */\n  Topic = 'topic',\n  /**\n   * Channel to publish and dispatch intents.\n   */\n  Intent = 'intent',\n  /**\n   * Channel for clients to send a connect request.\n   */\n  ClientConnect = 'client-connect',\n  /**\n   * Channel for clients to send a disconnect request.\n   */\n  ClientDisconnect = 'client-disconnect'\n}\n\n/**\n * Envelope for all messages.\n */\nexport interface MessageEnvelope<MSG extends Message = Message> {\n  transport: MessagingTransport;\n  channel: MessagingChannel;\n  message: MSG;\n}\n\n/**\n * Declares internal platform topics.\n */\nexport namespace PlatformTopics {\n  /**\n   * Allows requesting the subscription count on a topic.\n   */\n  export const RequestSubscriberCount = 'ɵREQUEST_SUBSCRIBER_COUNT';\n  /**\n   * When a client gains the focus it publishes a retained event to this topic.\n   */\n  export const FocusIn = 'ɵFOCUS_IN';\n  /**\n   * Allows testing whether the requester has received focus or contains embedded web content that has received focus.\n   */\n  export const IsFocusWithin = 'ɵIS_FOCUS_WITHIN';\n  /**\n   * Allows reading the platform properties from this retained topic.\n   */\n  export const PlatformProperties = 'ɵPLATFORM_PROPERTIES';\n  /**\n   * Allows reading the registered applications from this retained topic.\n   */\n  export const Applications = 'ɵAPPLICATIONS';\n  /**\n   * Computes the topic where a client can publish its heartbeat.\n   */\n  export function heartbeat(clientId: string): string {\n    return `ɵclient/${clientId}/heartbeat`;\n  }\n}\n\n/**\n * Sent by the broker in response to a connect request from a client gateway.\n */\nexport interface ConnackMessage {\n  returnCode: 'accepted' | 'refused:bad-request' | 'refused:rejected' | 'refused:blocked';\n  returnMessage?: string;\n  /**\n   * Unique id assigned to the client by the broker. Is only set on success.\n   */\n  clientId?: string;\n  /**\n   * Specifies the interval (in seconds) at which the client must send a heartbeat to indicate to be connected to the host.\n   */\n  heartbeatInterval?: number;\n}\n\nexport interface TopicSubscribeCommand extends Message {\n  /**\n   * Unique identify of the subscriber.\n   */\n  subscriberId: string;\n  /**\n   * Topic to which to subscribe.\n   */\n  topic: string;\n}\n\nexport interface TopicUnsubscribeCommand extends Message {\n  /**\n   * Unique identify of the subscriber.\n   */\n  subscriberId: string;\n}\n\nexport interface MessageDeliveryStatus {\n  ok: boolean;\n  details?: string;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MonoTypeOperatorFunction, Observable, Subscription} from 'rxjs';\nimport {TopicMessage} from '../../messaging.model';\nimport {first, takeUntil} from 'rxjs/operators';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Message client for sending and receiving messages between microfrontends across origins.\n *\n * This client implements the topic-based pub/sub (publish/subscribe) messaging model, allowing for one message to be delivered to\n * multiple subscribers using topic addressing.\n *\n * The communication is built on top of the native `postMessage` mechanism. The host app acts as message broker.\n *\n * ### Topic Addressing\n * A publisher publishes a message to a topic, which then is transported to consumers subscribed to the topic. Topics are case-sensitive\n * and consist of one or more segments, each separated by a forward slash. When publishing a message to a topic, the topic must be exact,\n * thus not contain wildcards. Messages published to a topic are transported to all consumers subscribed to the topic. Consumers, on the\n * other hand, can subscribe to multiple topics simultaneously by using wildcard segments in the topic.\n *\n * ### Retained Message\n * You can publish a message as a retained message for helping newly-subscribed clients to get the last message published to a topic\n * immediately upon subscription. The broker stores one retained message per topic. To delete a retained message, send a retained message\n * without a body to the topic. Deletion messages are not transported to subscribers.\n *\n * ### Request-Response Messaging\n * Sometimes it is useful to initiate a request-response communication to wait for a response. Unlike with fire-and-forget messaging, a temporary\n * inbox is created for the sender to receive replies. If there is no consumer subscribed on the topic, the platform throws an error.\n *\n * @see {@link TopicMessage}\n * @see {@link takeUntilUnsubscribe}\n *\n * @category Messaging\n */\nexport abstract class MessageClient {\n\n  /**\n   * Publishes a message to the given topic. The message is transported to all consumers subscribed to the topic.\n   *\n   * A message can be sent as a retained message by setting the {@link PublishOptions.retain} flag to `true`. It instructs the broker to store this\n   * message as a retained message for the topic; thus, clients receive this message immediately upon subscription. The broker stores only the latest\n   * retained message on a topic. To delete a retained message, send a retained message without a body to the topic - deletion messages are not\n   * transported to subscribers.\n   *\n   * @param  topic - Specifies the topic to which the message should be sent.\n   *         Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n   *         The topic is required and must be exact, thus not contain wildcards.\n   * @param  message - Specifies optional transfer data to be carried along with this message.\n   *         It can be any object which is serializable with the structured clone algorithm.\n   * @param  options - Controls how to publish the message and allows setting message headers.\n   * @return A Promise that resolves when dispatched the message, or that rejects if the message could not be dispatched.\n   */\n  public abstract publish<T = any>(topic: string, message?: T, options?: PublishOptions): Promise<void>;\n\n  /**\n   * Sends a request to the given topic and receives one or more replies. To publish a request, at least one subscriber must be subscribed to the topic.\n   * Otherwise, the request is rejected.\n   *\n   * @param  topic - Specifies the topic to which the request should be sent.\n   *         Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n   *         The topic is required and must be exact, thus not contain wildcards.\n   * @param  request - Specifies optional transfer data to be carried along with the request.\n   *         It can be any object which is serializable with the structured clone algorithm.\n   * @param  options - Controls how to send the request and allows setting request headers.\n   * @return An Observable that emits when receiving a reply. It never completes unless the replier sets the status code {@link ResponseStatusCodes.TERMINAL}\n   *         in the {@link MessageHeaders.Status} message header. Then, the Observable completes immediately after emitted the reply.\n   *         The Observable errors if the message could not be dispatched or if no replier is currently subscribed to the topic. It will also error if the\n   *         replier sets a status code greater than or equal to 400, e.g., {@link ResponseStatusCodes.ERROR}.\n   */\n  public abstract request$<T>(topic: string, request?: any, options?: RequestOptions): Observable<TopicMessage<T>>;\n\n  /**\n   * Receives messages published to the given topic.\n   *\n   * You can subscribe to multiple topics simultaneously by using wildcard segments in the topic. If a segment begins with a colon (`:`),\n   * then the segment acts as a placeholder for any segment value. Substituted segment values are then available via the params property\n   * of the received message.\n   *\n   * ```ts\n   * const topic: string = 'myhome/:room/temperature';\n   *\n   * Beans.get(MessageClient).observe$(topic).subscribe((message: TopicMessage) => {\n   *   console.log(message.params);\n   * });\n   * ```\n   *\n   * If the received message has the {@link MessageHeaders.ReplyTo} header field set, the publisher expects the receiver to send one or more\n   * replies to that {@link MessageHeaders.ReplyTo ReplyTo} topic. If streaming responses, you can use the {@link takeUntilUnsubscribe}\n   * operator to stop replying when the requestor unsubscribes.\n   *\n   * ```ts\n   * const topic: string = 'myhome/livingroom/temperature';\n   *\n   * Beans.get(MessageClient).observe$(topic).subscribe((request: TopicMessage) => {\n   *   const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n   *   sensor$\n   *     .pipe(takeUntilUnsubscribe(replyTo))\n   *     .subscribe(temperature => {\n   *       Beans.get(MessageClient).publish(replyTo, `${temperature} °C`);\n   *     });\n   * });\n   * ```\n   *\n   * @param  topic - Specifies the topic which to observe.\n   *         Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n   *         You can subscribe to the exact topic of a published message, or use wildcards to subscribe to multiple\n   *         topics simultaneously. If a segment begins with a colon (`:`), then the segment acts as a placeholder for any\n   *         string value. Substituted segment values are available in the {@link TopicMessage.params} on the received message.\n   * @return An Observable that emits messages sent to the given topic. It never completes.\n   */\n  public abstract observe$<T>(topic: string): Observable<TopicMessage<T>>;\n\n  /**\n   * Convenience API for handling messages.\n   *\n   * Unlike `observe$`, messages are passed to a callback function rather than emitted from an Observable. Response(s) can be returned directly\n   * from the callback. It supports error propagation and request termination. Using this method over `observe$` significantly reduces the code\n   * required to respond to requests.\n   *\n   * For each message received, the specified callback function is called. When used in request-response communication,\n   * the callback function can return the response either directly or in the form of a Promise or Observable. Returning a Promise\n   * allows the response to be computed asynchronously, and an Observable allows to return one or more responses, e.g., for\n   * streaming data. In either case, when the final response is produced, the handler terminates the communication, completing\n   * the requestor's Observable. If the callback throws an error, or the returned Promise or Observable errors, the error is\n   * transported to the requestor, erroring the requestor's Observable.\n   *\n   * @param  topic - Specifies the topic which to observe.\n   *         For more information, see the API description of {@link observe$}.\n   * @param  callback - Specifies the callback to be called for each message. When used in request-response communication,\n   *         the callback function can return the response either directly or in the form of a Promise or Observable. If returning\n   *         a response in fire-and-forget communication, it is ignored. Throwing an error in the callback does not unregister the callback.\n   * @return Subscription to unregister the callback. Calling {@link Subscription.unsubscribe} will complete the Observable of all\n   *         requestors, if any.\n   */\n  public abstract onMessage<IN = any, OUT = any>(topic: string, callback: (message: TopicMessage<IN>) => Observable<OUT> | Promise<OUT> | OUT | void): Subscription;\n\n  /**\n   * Allows observing the number of subscriptions on a topic. The Observable never completes.\n   *\n   * @param  topic - Specifies the topic to observe. The topic must be exact, thus not contain wildcards.\n   * @return An Observable that, when subscribed, emits the current number of subscribers on it. It never completes and\n   *         emits continuously when the number of subscribers changes.\n   */\n  public abstract subscriberCount$(topic: string): Observable<number>;\n}\n\n/**\n * Returns an Observable that mirrors the source Observable as long as there is at least one subscriber subscribed to the\n * given topic. When the subscription count on the given topic drops to zero, the returned Observable completes. If there\n * is no topic subscription present at the time when subscribing to the Observable, then it completes immediately.\n *\n * This operator is similar to the RxJS {@link takeUntil} operator, but accepts a topic instead of a notifier Observable.\n *\n * @category Messaging\n */\nexport function takeUntilUnsubscribe<T>(topic: string): MonoTypeOperatorFunction<T> {\n  return takeUntil(Beans.get(MessageClient).subscriberCount$(topic).pipe(first(count => count === 0)));\n}\n\n/**\n * Control how to publish the message.\n *\n * @category Messaging\n */\nexport interface PublishOptions {\n  /**\n   * Sets headers to pass additional information with a message.\n   */\n  headers?: Map<string, any>;\n  /**\n   * Instructs the broker to store this message as a retained message for the topic. With the retained flag set to `true`,\n   * a client receives this message immediately upon subscription. The broker stores only one retained message per topic.\n   * To delete the retained message, send a retained message without a body to the topic.\n   */\n  retain?: boolean;\n}\n\n/**\n * Control how to publish a message in request-response communication.\n *\n * @category Messaging\n */\nexport interface RequestOptions {\n  /**\n   * Sets headers to pass additional information with a message.\n   */\n  headers?: Map<string, any>;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Arrays} from '@scion/toolkit/util';\n\n/**\n * Allows testing whether an exact topic matches a pattern topic. The pattern topic may contain wildcard segments.\n *\n * Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n */\nexport class TopicMatcher {\n\n  private readonly _patternSegments: string[];\n\n  /**\n   * Constructs a matcher that will match given topics against this pattern.\n   *\n   * @param pattern - Pattern to match topics. The pattern is a topic, not a regular expression; thus, it must consist of one or more segments,\n   *                  each separated by a forward slash. The pattern supports wildcard segments beginning with a colon (`:`). Wildcard segments\n   *                  act as a placeholder for any segment value.\n   */\n  constructor(pattern: string) {\n    this._patternSegments = toPathSegments(pattern || '');\n    if (!this._patternSegments.length) {\n      throw Error('[TopicMatcherError] Invalid pattern syntax. The pattern must consist of one or more topic segments, each separated by a forward slash.');\n    }\n  }\n\n  /**\n   * Attempts to match the given topic against the pattern which was passed to the constructor.\n   *\n   * If the match succeeds, then {@link MatcherResult.matches} evaluates to `true`. If the pattern contains wildcard segments,\n   * the matched segments can be read using the property {@link TopicMessage.params} property.\n   *\n   * @param topic - The topic to match against the configured pattern; must be an exact topic, thus not contain wildcard segments.\n   * @return The result of the topic matcher test.\n   */\n  public match(topic: string): MatcherResult {\n    const inputTopicSegments = toPathSegments(topic || '');\n    const patternSegments = this._patternSegments;\n\n    if (!inputTopicSegments.length) {\n      throw Error('[TopicMatcherError] Invalid topic. The topic must consist of one or more segments, each separated by a forward slash.');\n    }\n    if (inputTopicSegments.some(isWildcardSegment)) {\n      throw Error('[TopicMatcherError] Invalid topic. Wildcard segments not allowed in an exact topic.');\n    }\n    if (patternSegments.length !== inputTopicSegments.length) {\n      return {matches: false};\n    }\n    if (Arrays.isEqual(inputTopicSegments, patternSegments, {exactOrder: true})) {\n      return {matches: true, params: new Map()};\n    }\n    if (!patternSegments.some(isWildcardSegment)) {\n      return {matches: false};\n    }\n    if (!patternSegments.every((patternSegment, i) => patternSegment === inputTopicSegments[i] || isWildcardSegment(patternSegment))) {\n      return {matches: false};\n    }\n\n    return {\n      matches: true,\n      params: patternSegments.reduce((params, segment, i) => {\n        if (isWildcardSegment(segment)) {\n          return params.set(segment.substring(1), inputTopicSegments[i]);\n        }\n        return params;\n      }, new Map()),\n    };\n  }\n\n  /**\n   * Checks if the given topic contains wildcard segments (colon syntax) to match any string value.\n   */\n  public static containsWildcardSegments(topic: string): boolean {\n    // As of ng-packagr 8.x, the prod build fails if directly invoking a non-exported function from inside a static function.\n    // To workaround this build issue, we first assign the function to a local variable.\n    const toPathSegmentsFn = toPathSegments;\n    return toPathSegmentsFn(topic).some(isWildcardSegment);\n  }\n}\n\n/** @ignore */\nfunction isWildcardSegment(segment: string): boolean {\n  return segment.startsWith(':') && segment.length > 1;\n}\n\n/** @ignore */\nfunction toPathSegments(topic: string): string[] {\n  return topic.split('/').filter(Boolean);\n}\n\n/**\n * Represents the result of a topic matcher test.\n */\nexport interface MatcherResult {\n  /**\n   * Indicates if the topic matches the pattern topic.\n   */\n  matches: boolean;\n  /**\n   * Contains the actual values for the wildcard segments as defined in the pattern topic; is only set if the match is successful.\n   */\n  params?: Map<string, string>;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MonoTypeOperatorFunction, OperatorFunction, pipe} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {MessageEnvelope, MessagingChannel, MessagingTransport} from './ɵmessaging.model';\nimport {Message, TopicMessage} from './messaging.model';\nimport {TopicMatcher} from './topic-matcher.util';\nimport {Arrays} from '@scion/toolkit/util';\n\n/** @ignore */\nexport function filterByTransport(transport: MessagingTransport): OperatorFunction<MessageEvent, MessageEvent<MessageEnvelope>> {\n  return filter((event: MessageEvent): event is MessageEvent<MessageEnvelope> => {\n    const envelope: MessageEnvelope | undefined = event.data;\n    return envelope?.transport === transport && !!envelope.channel && !!envelope.message?.headers;\n  });\n}\n\n/** @ignore */\nexport function filterByChannel<T extends Message>(...channel: MessagingChannel[]): OperatorFunction<MessageEvent<MessageEnvelope>, MessageEvent<MessageEnvelope<T>>> {\n  const channels = new Set(Arrays.coerce(channel));\n  return filter((event: MessageEvent<MessageEnvelope>): event is MessageEvent<MessageEnvelope<T>> => {\n    return channels.has(event.data.channel);\n  });\n}\n\n/** @ignore */\nexport function filterByTopicChannel<T>(topic: string): OperatorFunction<MessageEvent<MessageEnvelope>, MessageEvent<MessageEnvelope<TopicMessage<T>>>> {\n  return pipe(\n    filterByChannel<TopicMessage<T>>(MessagingChannel.Topic),\n    filter((event: MessageEvent<MessageEnvelope<TopicMessage<T>>>): boolean => {\n      const messageTopic = event.data.message.topic;\n      return !!messageTopic && new TopicMatcher(topic).match(messageTopic).matches;\n    }),\n  );\n}\n\n/** @ignore */\nexport function filterByOrigin(origin: string): MonoTypeOperatorFunction<MessageEvent> {\n  return filter((event: MessageEvent): boolean => {\n    return event.origin === origin;\n  });\n}\n\n/** @ignore */\nexport function filterByMessageHeader<T extends Message>(header: {key: string; value: any}): MonoTypeOperatorFunction<MessageEvent<MessageEnvelope<T>>> {\n  return filter((event: MessageEvent<MessageEnvelope<T>>): boolean => {\n    const messageHeaders = event.data.message.headers;\n    return messageHeaders.has(header.key) && messageHeaders.get(header.key) === header.value;\n  });\n}\n\n/** @ignore */\nexport function pluckMessage<T extends Message>(): OperatorFunction<MessageEvent<MessageEnvelope<T>>, T> {\n  return map((messageEvent: MessageEvent<MessageEnvelope<T>>): T => {\n    return messageEvent.data.message;\n  });\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Symbol to get the current version of the SCION Microfrontend Platform.\n */\nexport const VERSION = Symbol('VERSION');\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {APP_IDENTITY} from './platform.model';\nimport {VERSION} from './version';\n\n/**\n * Logger used by the platform to log to the console.\n *\n * Replace this bean to capture the log output.\n *\n * @category Platform\n */\nexport abstract class Logger {\n\n  /**\n   * Logs with severity debug.\n   */\n  public abstract debug(message?: any, ...args: any[]): void;\n\n  /**\n   * Logs with severity info.\n   */\n  public abstract info(message?: any, ...args: any[]): void;\n\n  /**\n   * Logs with severity warn.\n   */\n  public abstract warn(message?: any, ...args: any[]): void;\n\n  /**\n   * Logs with severity error.\n   */\n  public abstract error(message?: any, ...args: any[]): void;\n}\n\n/**\n * Logger used by the platform to log to the console.\n *\n * Replace this bean to capture the log output.\n *\n * @internal\n */\nexport class ConsoleLogger implements Logger {\n\n  public debug(message?: any, ...args: any[]): void {\n    this.log('debug', message, args);\n  }\n\n  public info(message?: any, ...args: any[]): void {\n    this.log('info', message, args);\n  }\n\n  public warn(message?: any, ...args: any[]): void {\n    this.log('warn', message, args);\n  }\n\n  public error(message?: any, ...args: any[]): void {\n    this.log('error', message, args);\n  }\n\n  private log(severity: 'debug' | 'info' | 'warn' | 'error', message: any, args: any[]): void {\n    const loggingContext: LoggingContext = args[0] instanceof LoggingContext ? args.shift() : {appSymbolicName: Beans.get(APP_IDENTITY), version: Beans.get(VERSION)};\n    const prefix = new Array<string>()\n      .concat(loggingContext.version ? `[@scion/microfrontend-platform@${loggingContext.version}]` : '[@scion/microfrontend-platform]')\n      .concat(`[${loggingContext.appSymbolicName}]`)\n      .join('');\n\n    if (console && typeof console[severity] === 'function') {\n      const consoleFn = console[severity];\n      args?.length ? consoleFn(`${prefix} ${message}`, ...args) : consoleFn(`${prefix} ${message}`);\n    }\n  }\n}\n\n/**\n * Logger that does nothing.\n *\n * @ignore\n */\nexport const NULL_LOGGER = new class extends Logger {\n\n  public debug(message?: any, ...args: any[]): void {\n    // NOOP\n  }\n\n  public info(message?: any, ...args: any[]): void {\n    // NOOP\n  }\n\n  public warn(message?: any, ...args: any[]): void {\n    // NOOP\n  }\n\n  public error(message?: any, ...args: any[]): void {\n    // NOOP\n  }\n};\n\n/**\n * Contextual information to add to the log message.\n *\n * Pass an instance of this class as the first argument to the logger when logging a message.\n */\nexport class LoggingContext {\n\n  constructor(public appSymbolicName: string, public version?: string) {\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Lifecycle states of the microfrontend platform.\n *\n * @category Platform\n */\nexport enum PlatformState {\n  /**\n   * Indicates that the platform is about to start.\n   */\n  Starting = 1,\n  /**\n   * Indicates that the platform started.\n   */\n  Started = 2,\n  /**\n   * Indicates that the platform is about to stop.\n   */\n  Stopping = 3,\n  /**\n   * Indicates that the platform is not yet started.\n   */\n  Stopped = 4,\n}\n\n/**\n * Runlevels are used to control in which startup phase to execute initializers when starting the platform.\n *\n * The platform reports that it has started after all initializers have completed successfully.\n */\nexport enum Runlevel {\n  /**\n   * In runlevel 0, the platform host fetches manifests of registered micro applications.\n   */\n  Zero = 0,\n  /**\n   * In runlevel 1, the platform constructs eager beans.\n   */\n  One = 1,\n  /**\n   * From runlevel 2 and above, messaging is enabled. This is the default runlevel at which initializers execute if not specifying any runlevel.\n   */\n  Two = 2,\n  /**\n   * In runlevel 3, the platform host installs activator microfrontends.\n   */\n  Three = 3,\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {PlatformState} from './platform-state';\nimport {Observable} from 'rxjs';\n\n/**\n * Provides access to {@link MicrofrontendPlatform}.\n *\n * Use this bean from within a class which is itself referenced in the {@link MicrofrontendPlatform}, in order to avoid ES2015 import cycles.\n *\n * @ignore\n */\nexport abstract class MicrofrontendPlatformRef {\n\n  /**\n   * @see {@link MicrofrontendPlatform#whenState}\n   */\n  public abstract whenState(state: PlatformState): Promise<void>;\n\n  /**\n   * @see {@link MicrofrontendPlatform#state}\n   */\n  public abstract state: PlatformState;\n\n  /**\n   * @see {@link MicrofrontendPlatform#state$}\n   */\n  public abstract state$: Observable<PlatformState>;\n\n  /**\n   * @see {@link MicrofrontendPlatform#destroy}\n   */\n  public abstract destroy(): void;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Logger} from './logger';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Runs the given function. Errors are caught and logged.\n *\n * If producing a Promise, returns that Promise, but with a catch handler installed.\n *\n * @ignore\n */\nexport function runSafe<T = void>(runnable: () => T): T {\n  let result: T;\n  try {\n    result = runnable();\n  }\n  catch (error) {\n    Beans.get(Logger).error('[UnexpectedError] An unexpected error occurred.', error);\n    return undefined!;\n  }\n\n  if (result instanceof Promise) {\n    return result.catch(error => {\n      Beans.get(Logger).error('[UnexpectedError] An unexpected error occurred.', error);\n      return undefined;\n    }) as any;\n  }\n  return result;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Returns the error message if given an error object, or the `toString` representation otherwise.\n */\nexport function stringifyError(error: any): string {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return error?.toString();\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {AsyncSubject, EMPTY, firstValueFrom, fromEvent, interval, lastValueFrom, merge, MonoTypeOperatorFunction, NEVER, noop, Observable, Observer, of, ReplaySubject, Subject, TeardownLogic, throwError, timeout, timer} from 'rxjs';\nimport {ConnackMessage, MessageDeliveryStatus, MessageEnvelope, MessagingChannel, MessagingTransport, PlatformTopics, TopicSubscribeCommand, TopicUnsubscribeCommand} from '../../ɵmessaging.model';\nimport {finalize, map, mergeMap, take, takeUntil, tap} from 'rxjs/operators';\nimport {filterByChannel, filterByMessageHeader, filterByOrigin, filterByTopicChannel, filterByTransport, pluckMessage} from '../../operators';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {IntentMessage, Message, MessageHeaders, TopicMessage} from '../../messaging.model';\nimport {Logger, NULL_LOGGER} from '../../logger';\nimport {Dictionaries} from '@scion/toolkit/util';\nimport {Beans, Initializer, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {APP_IDENTITY, IS_PLATFORM_HOST} from '../../platform.model';\nimport {PlatformState} from '../../platform-state';\nimport {ConnectOptions} from '../connect-options';\nimport {MicrofrontendPlatformRef} from '../../microfrontend-platform-ref';\nimport {MessageClient} from '../../client/messaging/message-client';\nimport {runSafe} from '../../safe-runner';\nimport {VERSION} from '../../version';\nimport {stringifyError} from '../../error.util';\n\n/**\n * The gateway is responsible for dispatching messages between the client and the broker.\n *\n * To initiate a connection, the gateway sends a CONNECT message to the current and all parent windows. When the broker window\n * receives the CONNECT message, the broker responds with a CONNACK message. If no CONNACK message is received within the discovery\n * timeout, the gateway errors. When the gateway is being disposed, it sends a DISCONNECT message to the broker.\n *\n * @ignore\n */\nexport abstract class BrokerGateway {\n\n  /**\n   * Returns whether this gateway is connected to the message broker. It never throws a broker discovery timeout error.\n   */\n  public abstract isConnected(): Promise<boolean>;\n\n  /**\n   * Posts a message to the message broker. If not connected to the broker yet, waits posting the message\n   * until established the connection to the broker.\n   *\n   * @return a Promise that resolves when successfully posted the message to the broker, or that rejects otherwise.\n   */\n  public abstract postMessage(channel: MessagingChannel, message: Message): Promise<void>;\n\n  /**\n   * Posts a message to the message broker and receives replies. The Observable never completes.\n   */\n  public abstract requestReply$<T = any>(channel: MessagingChannel, message: IntentMessage | TopicMessage): Observable<TopicMessage<T>>;\n\n  /**\n   * Subscribes to messages published to the given topic. The Observable never completes.\n   */\n  public abstract subscribeToTopic$<T>(topic: string): Observable<TopicMessage<T>>;\n\n  /**\n   * An Observable that emits when a message from the message broker is received.\n   */\n  public abstract get message$(): Observable<MessageEvent<MessageEnvelope>>;\n}\n\n/**\n * Broker gateway that does nothing.\n *\n * Use this gateway in tests to not connect to the platform host.\n *\n * @ignore\n */\nexport class NullBrokerGateway implements BrokerGateway {\n\n  constructor() {\n    console.log('[NullBrokerGateway] Using \\'NullBrokerGateway\\'. Messages cannot be sent or received.');\n  }\n\n  public isConnected(): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n\n  public get message$(): Observable<MessageEvent<MessageEnvelope>> {\n    return NEVER;\n  }\n\n  public async postMessage(channel: MessagingChannel, message: Message): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public requestReply$<T = any>(channel: MessagingChannel, message: IntentMessage | TopicMessage): Observable<TopicMessage<T>> {\n    return NEVER;\n  }\n\n  public subscribeToTopic$<T>(topic: string): Observable<TopicMessage<T>> {\n    return NEVER;\n  }\n}\n\n/**\n * Specifies the interval for sending connect requests to parent windows. If not receiving acknowledgment within the\n * specified interval, the gateway will try to connect anew.\n *\n * A single connect request may not be sufficient if, for example, the microfrontends are to be integrated into a rich client.\n * For example, an integrator may want to bridge messages to a remote host. If the integrator cannot hook into the message bus\n * in time, the client's connect request may be lost. Therefore, the gateway initiates the connect request at regular\n * intervals until it receives an acknowledgement.\n */\nconst CONNECT_INTERVAL = 25;\n\n/**\n * @ignore\n */\nexport class ɵBrokerGateway implements BrokerGateway, PreDestroy, Initializer {\n\n  /*\n   * This Observable is primarily used as a notifier for the `takeUntil` operator to complete Observable subscriptions when the platform is shutting down.\n   * Since some subscriptions trigger subsequent broker interactions, e.g., unsubscribing from a topic subscription, the notifier must \"replay\" its state\n   * to avoid waiting for broker responses, which would never arrive and otherwise cause timeout errors.\n   */\n  private _platformStopping$ = new ReplaySubject<void>(1);\n  private _appSymbolicName: string;\n  private _brokerDiscoverTimeout: number;\n  private _messageDeliveryTimeout: number;\n  private _brokerInfo: BrokerInfo | null = null;\n  private _brokerInfo$ = new AsyncSubject<BrokerInfo>();\n\n  public readonly message$ = new Subject<MessageEvent<MessageEnvelope>>();\n\n  constructor(connectOptions?: ConnectOptions) {\n    this._appSymbolicName = Beans.get<string>(APP_IDENTITY);\n    this._brokerDiscoverTimeout = connectOptions?.brokerDiscoverTimeout ?? 10_000;\n    this._messageDeliveryTimeout = connectOptions?.messageDeliveryTimeout ?? 10_000;\n  }\n\n  public async init(): Promise<void> {\n    try {\n      const brokerInfo = await this.connectToBroker();\n      this.installBrokerMessageListener(brokerInfo);\n      this.installHeartbeatPublisher(brokerInfo);\n      this._brokerInfo = brokerInfo;\n      this._brokerInfo$.next(brokerInfo);\n      this._brokerInfo$.complete();\n    }\n    catch (error) {\n      this._brokerInfo$.error(error);\n      throw error;\n    }\n  }\n\n  public isConnected(): Promise<boolean> {\n    return lastValueFrom(this._brokerInfo$).then(() => true).catch(() => false);\n  }\n\n  public get brokerInfo(): BrokerInfo | null {\n    return this._brokerInfo;\n  }\n\n  public async postMessage(channel: MessagingChannel, message: Message): Promise<void> {\n    if (isPlatformStopped()) {\n      throw GatewayErrors.PLATFORM_STOPPED_ERROR;\n    }\n\n    // If not connected to the broker, wait until connected. If connected, continue execution immediately\n    // without spawning a microtask. Otherwise, messages cannot be published during platform shutdown.\n    const brokerInfo = this._brokerInfo || await lastValueFrom(this._brokerInfo$);\n\n    const messageId = UUID.randomUUID();\n    const envelope: MessageEnvelope = {\n      transport: MessagingTransport.ClientToBroker,\n      channel: channel,\n      message: message,\n    };\n    envelope.message.headers\n      .set(MessageHeaders.MessageId, messageId)\n      .set(MessageHeaders.Timestamp, Date.now())\n      .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n      .set(MessageHeaders.ClientId, brokerInfo.clientId);\n\n    // Install Promise that resolves once the broker has acknowledged the message, or that rejects otherwise.\n    const postError$ = new Subject<never>();\n    const whenPosted = new Promise<void>((resolve, reject) => {\n      merge(this.message$, postError$)\n        .pipe(\n          filterByTopicChannel<MessageDeliveryStatus>(messageId),\n          take(1),\n          pluckMessage(),\n          timeout({first: this._messageDeliveryTimeout, with: () => throwError(() => GatewayErrors.MESSAGE_DISPATCH_ERROR(this._messageDeliveryTimeout, envelope))}),\n          mergeMap(statusMessage => statusMessage.body!.ok ? EMPTY : throwError(() => statusMessage.body!.details)),\n          takeUntil(this._platformStopping$),\n        )\n        .subscribe({\n          error: reject,\n          complete: resolve,\n        });\n    });\n\n    try {\n      brokerInfo.window.postMessage(envelope, brokerInfo.origin);\n    }\n    catch (error) {\n      postError$.error(error);\n    }\n\n    await whenPosted;\n  }\n\n  public requestReply$<T = any>(channel: MessagingChannel, message: IntentMessage | TopicMessage): Observable<TopicMessage<T>> {\n    return new Observable((observer: Observer<TopicMessage>): TeardownLogic => {\n      if (isPlatformStopped()) {\n        observer.error(GatewayErrors.PLATFORM_STOPPED_ERROR);\n        return noop;\n      }\n\n      const replyTo = UUID.randomUUID();\n      const unsubscribe$ = new Subject<void>();\n      const requestError$ = new Subject<never>();\n\n      // Add 'ReplyTo' topic to the message headers where to receive the response(s).\n      message.headers.set(MessageHeaders.ReplyTo, replyTo);\n\n      // Receive replies sent to the reply topic.\n      merge(this.subscribeToTopic$<T>(replyTo), requestError$)\n        .pipe(takeUntil(merge(this._platformStopping$, unsubscribe$)))\n        .subscribe({\n          next: reply => observer.next(reply),\n          error: error => observer.error(error),\n          complete: noop, // As per the API, the Observable never completes.\n        });\n\n      // Post the request to the broker.\n      this.postMessage(channel, message)\n        .catch(error => requestError$.error(error));\n\n      return (): void => unsubscribe$.next();\n    });\n  }\n\n  public subscribeToTopic$<T>(topic: string): Observable<TopicMessage<T>> {\n    return new Observable((observer: Observer<TopicMessage>): TeardownLogic => {\n      if (isPlatformStopped()) {\n        observer.error(GatewayErrors.PLATFORM_STOPPED_ERROR);\n        return noop;\n      }\n\n      const subscriberId = UUID.randomUUID();\n      const unsubscribe$ = new Subject<void>();\n      const subscribeError$ = new Subject<never>();\n\n      // Receive messages sent to the given topic.\n      merge(this.message$, subscribeError$)\n        .pipe(\n          filterByChannel<TopicMessage>(MessagingChannel.Topic),\n          filterByMessageHeader({key: MessageHeaders.ɵTopicSubscriberId, value: subscriberId}),\n          pluckMessage(),\n          takeUntil(merge(this._platformStopping$, unsubscribe$)),\n          finalize(() => this.unsubscribeFromTopic(topic, subscriberId)),\n        )\n        .subscribe({\n          next: reply => observer.next(reply),\n          error: error => observer.error(error),\n          complete: noop, // As per the API, the Observable never completes.\n        });\n\n      // Post the topic subscription to the broker.\n      const topicSubscribeMessage: TopicSubscribeCommand = {subscriberId, topic, headers: new Map()};\n      this.postMessage(MessagingChannel.TopicSubscribe, topicSubscribeMessage)\n        .catch(error => subscribeError$.error(error));\n\n      return (): void => unsubscribe$.next();\n    });\n  }\n\n  /**\n   * Unsubscribes given topic subscription. Does nothing if the platform is stopped.\n   */\n  private async unsubscribeFromTopic(topic: string, subscriberId: string): Promise<void> {\n    if (isPlatformStopped()) {\n      return;\n    }\n\n    const topicUnsubscribeCommand: TopicUnsubscribeCommand = {subscriberId, headers: new Map()};\n    try {\n      await this.postMessage(MessagingChannel.TopicUnsubscribe, topicUnsubscribeCommand);\n    }\n    catch (error) {\n      Beans.get(Logger, {orElseGet: NULL_LOGGER}).error(`[TopicUnsubscribeError] Failed to unsubscribe from topic '${topic}'. Caused by: ${error}`);  // Fall back using NULL_LOGGER, e.g., when the platform is stopping.\n    }\n  }\n\n  /**\n   * Subscribes to messages sent to this client.\n   * Messages are dispatched to {@link message$}.\n   */\n  private installBrokerMessageListener(brokerInfo: BrokerInfo): void {\n    fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByOrigin(brokerInfo.origin),\n        filterByTransport(MessagingTransport.BrokerToClient),\n        fixMapObjects(),\n        takeUntil(this._platformStopping$),\n      )\n      .subscribe(this.message$);\n  }\n\n  /**\n   * Installs a scheduler that periodically sends a heartbeat to indicate that this client is connected to the host.\n   *\n   * Note that no heartbeat scheduler is installed if running in the context of the host application.\n   */\n  private installHeartbeatPublisher(brokerInfo: BrokerInfo): void {\n    if (Beans.get(IS_PLATFORM_HOST)) {\n      return; // The host app client does not send a heartbeat.\n    }\n    interval(brokerInfo.heartbeatInterval)\n      .pipe(takeUntil(this._platformStopping$))\n      .subscribe(() => runSafe(() => {\n        Beans.get(MessageClient).publish(PlatformTopics.heartbeat(brokerInfo.clientId)).then();\n      }));\n  }\n\n  /**\n   * Connects this client to the broker by sending a CONNECT message to the current and all parent windows.\n   *\n   * When the broker receives the CONNECT message and trusts this client, the broker responds with a CONNACK message,\n   * or rejects the connect attempt otherwise.\n   *\n   * @return A Promise that, when connected, resolves to information about the broker, or that rejects if the connect attempt\n   * failed, either because the broker could not be found or because the application is not allowed to connect.\n   */\n  public connectToBroker(): Promise<BrokerInfo> {\n    const replyTo = UUID.randomUUID();\n    const connectPromise = firstValueFrom(fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByTransport(MessagingTransport.BrokerToClient),\n        filterByTopicChannel<ConnackMessage>(replyTo),\n        mergeMap((messageEvent: MessageEvent<MessageEnvelope<TopicMessage<ConnackMessage>>>) => {\n          const response: ConnackMessage | undefined = messageEvent.data.message.body;\n          if (response?.returnCode !== 'accepted') {\n            return throwError(() => `${response?.returnMessage ?? 'UNEXPECTED: Empty broker discovery response'} [code: '${response?.returnCode ?? 'n/a'}']`);\n          }\n          return of<BrokerInfo>({\n            clientId: response.clientId!,\n            heartbeatInterval: response.heartbeatInterval!,\n            window: messageEvent.source as Window,\n            origin: messageEvent.origin,\n          });\n        }),\n        timeout({first: this._brokerDiscoverTimeout, with: () => throwError(() => GatewayErrors.BROKER_DISCOVER_ERROR(this._brokerDiscoverTimeout))}),\n        tap({error: error => Beans.get(Logger, {orElseGet: NULL_LOGGER}).error(stringifyError(error))}), // Fall back using NULL_LOGGER, e.g., when the platform is stopping.\n        takeUntil(this._platformStopping$),\n      ));\n\n    const connectMessage: MessageEnvelope = {\n      transport: MessagingTransport.ClientToBroker,\n      channel: MessagingChannel.ClientConnect,\n      message: {\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.Timestamp, Date.now())\n          .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n          .set(MessageHeaders.ReplyTo, replyTo)\n          .set(MessageHeaders.Version, Beans.get(VERSION)),\n      },\n    };\n\n    const windowHierarchy = this.collectWindowHierarchy();\n    timer(0, CONNECT_INTERVAL)\n      .pipe(takeUntil(connectPromise.catch(() => null)))\n      .subscribe(() => {\n        windowHierarchy.forEach(window => window.postMessage(connectMessage, '*'));\n      });\n\n    return connectPromise;\n  }\n\n  /**\n   * Disconnects this client from the broker by sending a DISCONNECT message.\n   * Has no effect if not connected to the broker. If this operation fails, the error is logged as\n   * a warning, but not thrown.\n   */\n  private disconnectFromBroker(): void {\n    if (!this._brokerInfo) {\n      return;\n    }\n\n    const disconnectMessage: MessageEnvelope = {\n      transport: MessagingTransport.ClientToBroker,\n      channel: MessagingChannel.ClientDisconnect,\n      message: {\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.Timestamp, Date.now())\n          .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n          .set(MessageHeaders.ClientId, this._brokerInfo.clientId),\n      },\n    };\n\n    try {\n      this._brokerInfo.window.postMessage(disconnectMessage, this._brokerInfo.origin);\n    }\n    catch (error) {\n      Beans.get(Logger, {orElseGet: NULL_LOGGER}).warn(`[ClientDisconnectError] Failed to disconnect from the broker. Caused by: ${error}`);\n    }\n  }\n\n  /**\n   * Returns an array of the current `Window` hierarchy.\n   * Windows are sorted in top-down order, i.e., parent windows precede child windows.\n   */\n  private collectWindowHierarchy(): Window[] {\n    const candidates: Window[] = [];\n\n    for (let candidate = window as Window; candidate !== window.top; candidate = candidate.parent) {\n      candidates.unshift(candidate);\n    }\n\n    candidates.unshift(window.top);\n    return candidates;\n  }\n\n  /**\n   * Method invoked when the platform enters state {@link PlatformState.Stopping}.\n   *\n   * Since this gateway is registered in the bean manager with the maximum destruction order `{destroyOrder: Number.MAX_SAFE_INTEGER}`,\n   * the platform will destroy this bean after destroying other beans, which is important so that other beans can send messages\n   * when the platform shuts down.\n   */\n  public preDestroy(): void {\n    this.disconnectFromBroker();\n    this._platformStopping$.next();\n  }\n}\n\n/**\n * Replaces `Map` objects contained in the message with a `Map` object of the current JavaScript realm.\n *\n * Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n * Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n * This is most likely because the serialization takes place in a different realm.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n * @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n * @internal\n */\nfunction fixMapObjects<T extends Message>(): MonoTypeOperatorFunction<MessageEvent<MessageEnvelope<T>>> {\n  return map((event: MessageEvent<MessageEnvelope<T>>): MessageEvent<MessageEnvelope<T>> => {\n    const envelope: MessageEnvelope = event.data;\n    envelope.message.headers = new Map(envelope.message.headers || []);\n\n    if (envelope.channel === MessagingChannel.Intent) {\n      const intentMessage = envelope.message as IntentMessage;\n      intentMessage.intent.params = new Map(intentMessage.intent.params || []);\n    }\n    if (envelope.channel === MessagingChannel.Topic) {\n      const topicMessage = envelope.message as TopicMessage;\n      topicMessage.params = new Map(topicMessage.params || []);\n    }\n    return event;\n  });\n}\n\n/**\n * Creates a string representation of the given {@link MessageEnvelope}.\n */\nfunction stringifyEnvelope(envelope: MessageEnvelope): string {\n  return JSON.stringify(envelope, (key, value) => (value instanceof Map) ? Dictionaries.coerce(value) : value);\n}\n\nfunction isPlatformStopped(): boolean {\n  const platformState = Beans.opt(MicrofrontendPlatformRef);\n  if (!platformState) {\n    return true; // platform is destroyed\n  }\n  return platformState.state >= PlatformState.Stopped;\n}\n\n/**\n * Information about the broker.\n *\n * @ignore\n */\ninterface BrokerInfo {\n  clientId: string;\n  heartbeatInterval: number;\n  origin: string;\n  window: Window;\n}\n\n/** @ignore*/\nnamespace GatewayErrors {\n\n  export const PLATFORM_STOPPED_ERROR = Error('[GatewayError] Platform is stopped. Messages cannot be published or received.');\n\n  export function MESSAGE_DISPATCH_ERROR(timeout: number, message: MessageEnvelope): Error {\n    return Error(`[GatewayError] No acknowledgement received within ${timeout}ms for a message sent to the broker. [msg=${stringifyEnvelope(message)}]`);\n  }\n\n  export function BROKER_DISCOVER_ERROR(timeout: number): Error {\n    return Error(`[GatewayError] Message broker not discovered within ${timeout}ms. Messages cannot be published or received.`);\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {MessageClient} from './client/messaging/message-client';\nimport {PlatformTopics} from './ɵmessaging.model';\nimport {map} from 'rxjs/operators';\nimport {Dictionary, Maps} from '@scion/toolkit/util';\nimport {firstValueFrom} from 'rxjs';\nimport {mapToBody} from './messaging.model';\nimport {Beans, Initializer} from '@scion/toolkit/bean-manager';\nimport {BrokerGateway, NullBrokerGateway} from './client/messaging/broker-gateway';\n\n/**\n * Allows looking up properties defined in the platform host.\n *\n * @category Platform\n */\nexport class PlatformPropertyService implements Initializer {\n\n  private _properties = new Map<string, any>();\n\n  public async init(): Promise<void> {\n    const messagingDisabled = Beans.get(BrokerGateway) instanceof NullBrokerGateway;\n    if (messagingDisabled) {\n      return;\n    }\n\n    // Wait until obtained platform properties so that they can be accessed synchronously by the application via `PlatformPropertyService#properties`.\n    const properties$ = Beans.get(MessageClient).observe$<Dictionary>(PlatformTopics.PlatformProperties);\n    this._properties = await firstValueFrom(properties$.pipe(mapToBody(), map(properties => Maps.coerce(properties))));\n  }\n\n  /**\n   * Indicates whether a property with the specified key exists or not.\n   */\n  public contains(key: string): boolean {\n    return this._properties.has(key);\n  }\n\n  /**\n   * Returns the property of the given key, or `defaultValue` if the property does not exist.\n   *\n   * Throws an error if `defaultValue` is not specified and the property does not exist.\n   */\n  public get<T>(key: string, defaultValue?: T): T {\n    if (this._properties.has(key)) {\n      return this._properties.get(key);\n    }\n    if (defaultValue !== undefined) {\n      return defaultValue;\n    }\n    throw Error(`[PropertyNotFoundError] No property of given name found [prop=${key}]`);\n  }\n\n  /**\n   * Returns the properties map.\n   */\n  public properties(): ReadonlyMap<string, any> {\n    return this._properties;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Observable, Subscription} from 'rxjs';\nimport {Intent, IntentMessage, TopicMessage} from '../../messaging.model';\nimport {Qualifier} from '../../platform.model';\n\n/**\n * Allows sending and receiving intents between microfrontends across origins.\n * This client is part of the Intention API of the SCION Microfrontend Platform.\n *\n * Intent-based messaging enables controlled collaboration between micro applications, a mechanism known from Android development\n * where an application can start an activity via an intent (such as sending an email).\n *\n * Like topic-based communication, intent-based communication implements the pub/sub (publish/subscribe) messaging pattern, but is,\n * in contrast, more restrictive when sending messages. Sending messages is also referred to as issuing intents. It requires the sending\n * application to declare an intention in its manifest. Intents can only be issued if there is at least one fulfilling capability\n * present in the platform to handle the intent. The platform transports intents exclusively to micro applications that provide a\n * fulfilling capability via their manifest.\n *\n * The communication is built on top of the native `postMessage` mechanism. The host app acts as message broker.\n *\n * #### Intent Addressing\n * In intent-based communication, the destination are capabilities, formulated in an abstract way, consisting of a a type, and optionally\n * a qualifier. The type categorizes a capability in terms of its functional semantics. A capability may also define a qualifier to\n * differentiate the different capabilities of the same type. The type is a string literal and the qualifier a dictionary of key-value pairs.\n *\n * ### Request-Response Messaging\n * Sometimes it is useful to initiate a request-response communication to wait for a response. Unlike with fire-and-forget intents, a temporary\n * inbox is created for the intent issuer to receive replies.\n *\n * @see {@link IntentMessage}\n * @see {@link Intent}\n * @see {@link MessageHeaders}\n *\n * @category Messaging\n * @category Intention API\n */\nexport abstract class IntentClient {\n\n  /**\n   * Issues an intent.\n   *\n   * A micro application can issue intents for intentions declared in its manifest. The platform transports the intent to micro applications\n   * that provide a fulfilling capability. Along with the intent, you can pass transfer data, either as payload, message headers or parameters.\n   * Passed data must be serializable with the Structured Clone Algorithm.\n   *\n   * A micro application is implicitly qualified to interact with capabilities that it provides; thus, it must not declare an intention.\n   *\n   * @param  intent - Describes the intent. The qualifier, if any, must be exact, thus not contain wildcards.\n   * @param  body - Specifies optional transfer data to be carried along with the intent.\n   *         It can be any object which is serializable with the structured clone algorithm.\n   * @param  options - Controls how to issue the intent and allows setting message headers.\n   * @return A Promise that resolves when dispatched the intent, or that rejects if the intent could not be dispatched,\n   *         e.g., if missing the intention declaration, or because no application is registered to handle the intent.\n   */\n  public abstract publish<T = any>(intent: Intent, body?: T, options?: IntentOptions): Promise<void>;\n\n  /**\n   * Issues an intent and receives one or more replies.\n   *\n   * A micro application can issue intents for intentions declared in its manifest. The platform transports the intent to micro applications\n   * that provide a fulfilling capability. Along with the intent, you can pass transfer data, either as payload, message headers or parameters.\n   * Passed data must be serializable with the Structured Clone Algorithm.\n   *\n   * A micro application is implicitly qualified to interact with capabilities that it provides; thus, it must not declare an intention.\n   *\n   * @param  intent - Describes the intent. The qualifier, if any, must be exact, thus not contain wildcards.\n   * @param  body - Specifies optional transfer data to be carried along with the intent.\n   *         It can be any object which is serializable with the structured clone algorithm.\n   * @param  options - Controls how to send the request and allows setting request headers.\n   * @return An Observable that emits when receiving a reply. It never completes unless the intent handler sets the status code {@link ResponseStatusCodes.TERMINAL}\n   *         in the {@link MessageHeaders.Status} message header. Then, the Observable completes immediately after emitted the reply.\n   *         The Observable errors if the intent could not be dispatched or if no replier is currently available to handle the intent. It will also error if the\n   *         intent handler sets a status code greater than or equal to 400, e.g., {@link ResponseStatusCodes.ERROR}.\n   */\n  public abstract request$<T>(intent: Intent, body?: any, options?: IntentOptions): Observable<TopicMessage<T>>;\n\n  /**\n   * Receives an intent when some micro application wants to collaborate with this micro application.\n   *\n   * Intents are typically handled in an activator. Refer to {@link Activator} for more information.\n   *\n   * The micro application receives only intents for which it provides a fulfilling capability through its manifest.\n   * You can filter received intents by passing a selector. The selector supports the use of wildcards.\n   *\n   * If the received intent has the {@link MessageHeaders.ReplyTo} header field set, the publisher expects the receiver to send one or more\n   * replies to that {@link MessageHeaders.ReplyTo ReplyTo} topic. If streaming responses, you can use the {@link takeUntilUnsubscribe}\n   * operator to stop replying when the requestor unsubscribes.\n   *\n   * ```typescript\n   *  const selector: IntentSelector = {\n   *    type: 'auth',\n   *    qualifier: {entity: 'user-access-token'},\n   *  };\n   *\n   *  Beans.get(IntentClient).observe$(selector).subscribe((request: IntentMessage) => {\n   *    const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n   *    authService.userAccessToken$\n   *      .pipe(takeUntilUnsubscribe(replyTo))\n   *      .subscribe(token => {\n   *        Beans.get(MessageClient).publish(replyTo, token);\n   *      });\n   *  });\n   * ```\n   *\n   * @param  selector - Allows filtering intents. The qualifier allows using wildcards (such as `*` or `?`) to match multiple intents simultaneously.\\\n   *         <p>\n   *         <ul>\n   *           <li>**Asterisk wildcard character (`*`):**\\\n   *             <ul>\n   *               <li>If used as qualifier property key, matches intents even if having additional properties. Use it like this: `{'*': '*'}`.</li>\n   *               <li>If used as qualifier property value, requires intents to contain that property, but with any value allowed (except for `null` or `undefined` values).</li>\n   *             </ul>\n   *           </li>\n   *           <li>**Optional wildcard character (`?`):**\\\n   *               Is allowed as qualifier property value only and matches intents regardless of having or not having that property.\n   *           </li>\n   *         </ul>\n   *\n   * @return An Observable that emits intents for which this application provides a satisfying capability. It never completes.\n   */\n  public abstract observe$<T>(selector?: IntentSelector): Observable<IntentMessage<T>>;\n\n  /**\n   * Convenience API for handling intents.\n   *\n   * Unlike `observe$`, intents are passed to a callback function rather than emitted from an Observable. Response(s) can be returned directly\n   * from the callback. It supports error propagation and request termination. Using this method over `observe$` significantly reduces the code\n   * required to respond to requests.\n   *\n   * For each intent received, the specified callback function is called. When used in request-response communication,\n   * the callback function can return the response either directly or in the form of a Promise or Observable. Returning a Promise\n   * allows the response to be computed asynchronously, and an Observable allows to return one or more responses, e.g., for\n   * streaming data. In either case, when the final response is produced, the handler terminates the communication, completing\n   * the requestor's Observable. If the callback throws an error, or the returned Promise or Observable errors, the error is\n   * transported to the requestor, erroring the requestor's Observable.\n   *\n   * @param  selector - Allows filtering intents.\n   *         For more information, see the API description of {@link observe$}.\n   * @param  callback - Specifies the callback to be called for each intent. When used in request-response communication,\n   *         the callback function can return the response either directly or in the form of a Promise or Observable. If returning\n   *         a response in fire-and-forget communication, it is ignored. Throwing an error in the callback does not unregister the callback.\n   * @return Subscription to unregister the callback. Calling {@link Subscription.unsubscribe} will complete the Observable of all\n   *         requestors, if any.\n   */\n  public abstract onIntent<IN = any, OUT = any>(selector: IntentSelector, callback: (intentMessage: IntentMessage<IN>) => Observable<OUT> | Promise<OUT> | OUT | void): Subscription;\n}\n\n/**\n * Control how to publish an intent.\n *\n * @category Messaging\n */\nexport interface IntentOptions {\n  /**\n   * Sets headers to pass additional information with an intent.\n   */\n  headers?: Map<string, any>;\n}\n\n/**\n * Allows filtering intents.\n *\n * @ignore\n */\nexport interface IntentSelector {\n  /**\n   * If specified, filters intents of the given type.\n   */\n  type?: string;\n  /**\n   * If specified, filters intents matching the given qualifier. You can use the asterisk wildcard (`*`)\n   * or optional wildcard character (`?`) to match multiple intents.\n   */\n  qualifier?: Qualifier;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Capability, Intention} from '../../platform.model';\nimport {Intent} from '../../messaging.model';\n\n/**\n * Central point for looking up or managing capabilities or intentions available in the platform.\n *\n * @ignore\n */\nexport abstract class ManifestRegistry {\n\n  /**\n   * Returns capabilities which are visible to the given application and which satisfy the given intent.\n   * The intent is not allowed to contain wildcards in its qualifier.\n   */\n  public abstract resolveCapabilitiesByIntent(intent: Intent, appSymbolicName: string): Capability[];\n\n  /**\n   * Tests whether the given app has declared an intention for the given intent, or is providing a capability fulfilling the given intent.\n   */\n  public abstract hasIntention(intent: Intent, appSymbolicName: string): boolean;\n\n  /**\n   * Registers the given capability for the given application.\n   */\n  public abstract registerCapability(capability: Capability, appSymbolicName: string): string;\n\n  /**\n   * Registers the given intention for the given application.\n   */\n  public abstract registerIntention(intention: Intention, appSymbolicName: string): string;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/** @ignore */\nconst ABSOLUTE_URL_REGEX = /^http[s]?:\\/\\//;\n\n/**\n * @ignore\n */\nexport namespace Urls {\n\n  /**\n   * Returns `true` if the given URL is an absolute URL or the 'about:blank' page.\n   */\n  export function isAbsoluteUrl(url: string): boolean {\n    return url === 'about:blank' || ABSOLUTE_URL_REGEX.test(url);\n  }\n\n  /**\n   * Constructs the {@link URL} for the given url and optional base, applying relative navigational symbols if contained in the url.\n   *\n   * Following rules apply:\n   * - base is required if providing a relative url\n   * - search and fragment parts of the base are ignored\n   * - relative navigational symbols are only applied if passing a base (native support)\n   *\n   * This function is similar to `new URL(url, base)` except that it works for bases that do not have a trailing slash.\n   * If you use `new URL(url, base)` without a trailing slash in the base, the last segment is discarded.\n   *\n   * // new URL('x/y', 'http://localhost:4200/a/b/').toString() -> \"http://localhost:4200/a/b/x/y\" // what we expect\n   * // new URL('x/y', 'http://localhost:4200/a/b').toString() -> \"http://localhost:4200/a/x/y\" // not what we expect\n   *\n   * We observed this behavior in Chromium and Firefox browsers.\n   */\n  export function newUrl(url: string, base?: string): URL {\n    if (base) {\n      const baseUrl = new URL(base);\n      if (baseUrl.pathname && !baseUrl.pathname.endsWith('/')) {\n        baseUrl.pathname += '/';\n      }\n      return new URL(url, baseUrl);\n    }\n\n    return new URL(url);\n  }\n\n  /**\n   * Adds a trailing slash to the given URL, if not already present.\n   */\n  export function ensureTrailingSlash(url: string): string {\n    if (!url.endsWith('/')) {\n      return url + '/';\n    }\n    return url;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {ApplicationConfig} from './application-config';\nimport {HostConfig} from './host-config';\n\n/**\n * Configures the platform and defines the micro applications running in the platform.\n *\n * @category Platform\n */\nexport abstract class MicrofrontendPlatformConfig {\n  /**\n   * Lists the micro applications able to connect to the platform to interact with other micro applications.\n   */\n  public abstract readonly applications: ApplicationConfig[];\n  /**\n   * Configures the interaction of the host application with the platform.\n   *\n   * As with micro applications, you can provide a manifest for the host, allowing the host to contribute capabilities and declare intentions.\n   */\n  public abstract readonly host?: HostConfig;\n  /**\n   * Controls whether the Activator API is enabled.\n   *\n   * Activating the Activator API enables micro applications to contribute `activator` microfrontends. Activator microfrontends are loaded\n   * at platform startup for the entire lifecycle of the platform. An activator is a startup hook for micro applications to initialize\n   * or register message or intent handlers to provide functionality.\n   *\n   * By default, this API is enabled.\n   *\n   * @see {@link Activator}\n   */\n  public abstract readonly activatorApiDisabled?: boolean;\n  /**\n   * Maximum time (in milliseconds) that the platform waits until the manifest of an application is loaded.\n   * You can set a different timeout per application via {@link ApplicationConfig.manifestLoadTimeout}.\n   * If not set, by default, the browser's HTTP fetch timeout applies.\n   *\n   * Consider setting this timeout if, for example, a web application firewall delays the responses of unavailable\n   * applications.\n   */\n  public abstract readonly manifestLoadTimeout?: number;\n  /**\n   * Maximum time (in milliseconds) for each application to signal readiness.\n   *\n   * If specified and activating an application takes longer, the host logs an error and continues startup.\n   * Has no effect for applications which provide no activator(s) or are not configured to signal readiness.\n   * You can set a different timeout per application via {@link ApplicationConfig.activatorLoadTimeout}.\n   *\n   * By default, no timeout is set, meaning that if an app fails to signal readiness, e.g., due to an error,\n   * that app would block the host startup process indefinitely. It is therefore recommended to specify a\n   * timeout accordingly.\n   */\n  public abstract readonly activatorLoadTimeout?: number;\n  /**\n   * Interval (in seconds) at which connected clients must send a heartbeat to indicate connectivity to the host.\n   *\n   * By default, if not set, a heartbeat interval of 60s is used.\n   */\n  public abstract readonly heartbeatInterval?: number;\n  /**\n   * Defines user-defined properties which can be read by micro applications via {@link PlatformPropertyService}.\n   */\n  public abstract readonly properties?: {\n    [key: string]: any;\n  };\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Application, Manifest} from '../platform.model';\nimport {Defined} from '@scion/toolkit/util';\nimport {Urls} from '../url.util';\nimport {MicrofrontendPlatformConfig} from './microfrontend-platform-config';\nimport {ManifestRegistry} from './manifest-registry/manifest-registry';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {Logger} from '../logger';\nimport {ApplicationConfig} from './application-config';\n\n/**\n * Registry with all registered applications.\n *\n * @ignore\n */\nexport class ApplicationRegistry {\n\n  private static readonly SYMBOLIC_NAME_REGEXP = /^[a-z0-9-]+$/;\n\n  private readonly _applications = new Map<string, Application>();\n\n  /**\n   * Registers the given application.\n   *\n   * Throws an error if the application's symbolic name is not unique or contains illegal characters.\n   */\n  public registerApplication(applicationConfig: ApplicationConfig, manifest: Manifest): void {\n    Defined.orElseThrow(applicationConfig.symbolicName, () => Error('[ApplicationRegistrationError] Missing symbolic name'));\n    Defined.orElseThrow(applicationConfig.manifestUrl, () => Error('[ApplicationRegistrationError] Missing manifest URL'));\n\n    if (!ApplicationRegistry.SYMBOLIC_NAME_REGEXP.test(applicationConfig.symbolicName)) {\n      throw Error(`[ApplicationRegistrationError] Symbolic name must be lowercase and contain alphanumeric and dash characters [symbolicName='${applicationConfig.symbolicName}'].`);\n    }\n\n    const notUniqueSymbolicName = Array.from(this._applications.values()).some(application => application.symbolicName === applicationConfig.symbolicName);\n    if (notUniqueSymbolicName) {\n      throw Error(`[ApplicationRegistrationError] Symbolic name must be unique [symbolicName='${applicationConfig.symbolicName}'].`);\n    }\n\n    this._applications.set(applicationConfig.symbolicName, {\n      symbolicName: applicationConfig.symbolicName,\n      name: manifest.name,\n      baseUrl: this.computeBaseUrl(applicationConfig, manifest),\n      manifestUrl: Urls.newUrl(applicationConfig.manifestUrl, Urls.isAbsoluteUrl(applicationConfig.manifestUrl) ? applicationConfig.manifestUrl : window.origin).toString(),\n      manifestLoadTimeout: applicationConfig.manifestLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).manifestLoadTimeout,\n      activatorLoadTimeout: applicationConfig.activatorLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).activatorLoadTimeout,\n      messageOrigin: applicationConfig.messageOrigin ?? Urls.newUrl(this.computeBaseUrl(applicationConfig, manifest)).origin,\n      scopeCheckDisabled: Defined.orElse(applicationConfig.scopeCheckDisabled, false),\n      intentionCheckDisabled: Defined.orElse(applicationConfig.intentionCheckDisabled, false),\n      intentionRegisterApiDisabled: Defined.orElse(applicationConfig.intentionRegisterApiDisabled, true),\n    });\n\n    manifest.capabilities?.forEach(capability => {\n      try {\n        Beans.get(ManifestRegistry).registerCapability(capability, applicationConfig.symbolicName);\n      }\n      catch (error) {\n        Beans.get(Logger).error(`[CapabilityRegisterError] Failed to register capability for application '${applicationConfig.symbolicName}'.`, error);\n      }\n    });\n\n    manifest.intentions?.forEach(intention => {\n      try {\n        Beans.get(ManifestRegistry).registerIntention(intention, applicationConfig.symbolicName);\n      }\n      catch (error) {\n        Beans.get(Logger).error(`[IntentionRegisterError] Failed to register intention for application '${applicationConfig.symbolicName}'.`, error);\n      }\n    });\n  }\n\n  public getApplication(symbolicName: string): Application | undefined {\n    return this._applications.get(symbolicName);\n  }\n\n  public getApplications(): Application[] {\n    return Array.from(this._applications.values());\n  }\n\n  /**\n   * Returns whether or not capability 'scope check' is disabled for the given application.\n   */\n  public isScopeCheckDisabled(appSymbolicName: string): boolean {\n    return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).scopeCheckDisabled;\n  }\n\n  /**\n   * Returns whether or not the 'Intention Registration API' is disabled for the given application.\n   */\n  public isIntentionRegisterApiDisabled(appSymbolicName: string): boolean {\n    return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).intentionRegisterApiDisabled;\n  }\n\n  /**\n   * Returns whether or not 'intention check' is disabled for the given application.\n   */\n  public isIntentionCheckDisabled(appSymbolicName: string): boolean {\n    return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).intentionCheckDisabled;\n  }\n\n  /**\n   * Computes the base URL as following:\n   *\n   * - if base URL is specified in the manifest, that URL is used (either as an absolute URL, or relative to the origin of 'manifestUrl')\n   * - if base URL is not specified in the manifest, the origin from 'manifestUrl' is used as the base URL, or the origin from the current window if the 'manifestUrl' is relative\n   * - if base URL has no trailing slash, adds a trailing slash\n   */\n  private computeBaseUrl(applicationConfig: ApplicationConfig, manifest: Manifest): string {\n    const manifestURL = Urls.isAbsoluteUrl(applicationConfig.manifestUrl) ? Urls.newUrl(applicationConfig.manifestUrl) : Urls.newUrl(applicationConfig.manifestUrl, window.origin);\n\n    if (!manifest.baseUrl) {\n      return Urls.ensureTrailingSlash(manifestURL.origin);\n    }\n\n    if (Urls.isAbsoluteUrl(manifest.baseUrl)) {\n      return Urls.ensureTrailingSlash(manifest.baseUrl);\n    }\n    else {\n      return Urls.ensureTrailingSlash(Urls.newUrl(manifest.baseUrl, manifestURL.origin).toString());\n    }\n  }\n}\n\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Uses the native Web Fetch API to fetch a resource from the network.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n * @ignore\n */\nexport class HttpClient {\n\n  /**\n   * Allows fetching a resource from the network, returning a promise which is fulfilled once the response is available. The promise resolves\n   * to the Response object representing the response to your request. The promise does not reject on HTTP errors — instead it only rejects on\n   * network errors; then handlers must check for HTTP errors.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n   *\n   * @param  input - Defines the resource that you wish to fetch.\n   * @param  init - Options object containing any custom settings that you want to apply to the request.\n   * @return A Promise that resolves to a Response object.\n   */\n  public fetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n    return fetch(input, init); // native call\n  }\n}\n","/*\n * Copyright (c) 2018-2021 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, combineLatest, OperatorFunction, Subject} from 'rxjs';\nimport {distinctUntilChanged, map, takeUntil, takeWhile} from 'rxjs/operators';\n\n/**\n * Represents a monitor to track the progress of some work.\n *\n * A monitor can be split into child monitors, allowing the work to be broken down into smaller units,\n * with each child monitor contributing to the overall progress of the parent monitor.\n *\n * @ignore\n */\nexport class ProgressMonitor {\n\n  private _progress$ = new BehaviorSubject<number>(0);\n  private _done$ = new Subject<void>();\n  private _hasSubMonitors = false;\n\n  /**\n   * Reports the current progress of this monitor in percent.\n   *\n   * Upon subscription, emits the current progress, and then continuously as the progress advances.\n   * At 100%, the Observable completes.\n   */\n  public readonly progress$ = this._progress$.pipe(\n    distinctUntilChanged(),\n    map(progress => Math.round(progress * 10000) / 100),\n    takeWhile(progress => progress < 100, true),\n  );\n\n  /**\n   * Splits this monitor into separate child monitors for breaking down this monitor's work into smaller units.\n   *\n   * Each child monitor contributes to the overall progress of this monitor. The ratio allows child monitors to be\n   * weighted differently, for example, one child monitor can contribute twice as much as another to the overall progress.\n   * After all child monitors reported \"done\", this monitor will also enter \"done\".\n   */\n  public split(...ratio: number[]): ProgressMonitor[] {\n    if (this._hasSubMonitors) {\n      throw Error('[IllegalMonitorStateError] Monitor cannot be split multiple times.');\n    }\n    this._hasSubMonitors = true;\n\n    const subMonitors = ratio.map(() => new ProgressMonitor());\n    combineLatest(subMonitors.map(subMonitor => subMonitor._progress$))\n      .pipe(\n        computeProgress(ratio),\n        takeWhile(progress => progress < 1, true),\n        takeUntil(this._done$),\n      )\n      .subscribe(progress => {\n        this._progress$.next(progress);\n      });\n\n    return subMonitors;\n  }\n\n  /**\n   * Like {@link split}, but creates `n` child monitors with the same weight.\n   */\n  public splitEven(n: number): ProgressMonitor[] {\n    if (n <= 0) {\n      throw Error(`[IllegalMonitorArgumentError] Monitor split count must be greater than 0, but was ${n}.`);\n    }\n    return this.split(...new Array(n).fill(1));\n  }\n\n  /**\n   * Completes this monitor, setting its progress to '100%'.\n   * Has no effect if this monitor is already \"done\".\n   */\n  public done(): void {\n    this._progress$.next(1);\n    this._done$.next();\n  }\n}\n\nfunction computeProgress(ratio: number[]): OperatorFunction<number[], number> {\n  const ratioSum = ratio.reduce((sum, weight) => sum + weight, 0);\n  return map((subMonitorsProgress: number[]) => {\n    return ratio.reduce((totalProgress, subMonitorWeight, subMonitorIndex) => {\n      return totalProgress + subMonitorsProgress[subMonitorIndex] * (subMonitorWeight / ratioSum);\n    }, 0);\n  });\n}\n","/*\n * Copyright (c) 2018-2021 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {ProgressMonitor} from './progress-monitor';\n\n/**\n * Tracks the progress of loading application manifests.\n *\n * @ignore\n */\nexport abstract class ManifestLoadProgressMonitor extends ProgressMonitor {\n}\n\n/**\n * Tracks the progress of loading application activators.\n *\n * @ignore\n */\nexport abstract class ActivatorLoadProgressMonitor extends ProgressMonitor {\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Intention, Manifest, PlatformCapabilityTypes} from '../platform.model';\nimport {MicrofrontendPlatformConfig} from './microfrontend-platform-config';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Hook to intercept the host manifest before it is registered in the platform.\n *\n * If integrating the platform in a library, you may need to intercept the manifest of the host in order to introduce library-specific behavior.\n *\n * You can register the interceptor in the bean manager, as follows:\n *\n * ```ts\n * Beans.register(HostManifestInterceptor, {useClass: YourInterceptor, multi: true});\n * ```\n *\n * The interceptor may look as following:\n * ```ts\n *  class YourInterceptor implements HostManifestInterceptor {\n *\n *   public intercept(hostManifest: Manifest): void {\n *     hostManifest.intentions = [\n *       ...hostManifest.intentions || [],\n *       provideMicrofrontendIntention(),\n *     ];\n *     hostManifest.capabilities = [\n *       ...hostManifest.capabilities || [],\n *       provideMessageBoxCapability(),\n *     ];\n *   }\n * }\n *\n * function provideMicrofrontendIntention(): Intention {\n *    return {\n *      type: 'microfrontend',\n *      qualifier: {'*': '*'},\n *    };\n *  }\n *\n * function provideMessageBoxCapability(): Capability {\n *    return {\n *      type: 'messagebox',\n *      qualifier: {},\n *      private: false,\n *      description: 'Allows displaying a simple message to the user.',\n *    };\n *  }\n *\n * ```\n */\nexport abstract class HostManifestInterceptor {\n\n  /**\n   * Allows modifying the host manifest before it is registered in the platform, e.g., to register capabilities or intentions.\n   */\n  public abstract intercept(hostManifest: Manifest): void;\n}\n\n/**\n * Intercepts the host manifest, registering platform-specific intentions and capabilities.\n *\n * @internal\n */\nexport class ɵHostManifestInterceptor implements HostManifestInterceptor {\n\n  public intercept(hostManifest: Manifest): void {\n    hostManifest.intentions = [\n      ...hostManifest.intentions || [],\n      ...provideActivatorIntentionIfEnabled(),\n    ];\n  }\n}\n\n/**\n * Provides a wildcard activator intention for the platform to read activator capabilities for installing activator microfrontends.\n */\nfunction provideActivatorIntentionIfEnabled(): Intention[] {\n  const activatorApiDisabled = Beans.get(MicrofrontendPlatformConfig).activatorApiDisabled ?? false;\n  if (activatorApiDisabled) {\n    return [];\n  }\n  return [{\n    type: PlatformCapabilityTypes.Activator,\n    qualifier: {'*': '*'},\n  }];\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {MicrofrontendPlatformConfig} from './microfrontend-platform-config';\nimport {ApplicationRegistry} from './application-registry';\nimport {HttpClient} from './http-client';\nimport {Logger} from '../logger';\nimport {Beans, Initializer} from '@scion/toolkit/bean-manager';\nimport {ProgressMonitor} from './progress-monitor/progress-monitor';\nimport {ManifestLoadProgressMonitor} from './progress-monitor/progress-monitors';\nimport {firstValueFrom, from, identity, Observable, throwError, timeout} from 'rxjs';\nimport {APP_IDENTITY, Manifest, ɵAPP_CONFIG} from '../platform.model';\nimport {HostManifestInterceptor} from './host-manifest-interceptor';\nimport {ApplicationConfig} from './application-config';\n\n/**\n * Collects manifests of registered applications.\n *\n * This collector is registered as {@link Initializer}. The platform waits to initialize until manifests are collected.\n * @ignore\n */\nexport class ManifestCollector implements Initializer {\n\n  public async init(): Promise<void> {\n    await Promise.all(this.fetchAndRegisterManifests());\n  }\n\n  private fetchAndRegisterManifests(): Promise<void>[] {\n    const appConfigs = Beans.all<ApplicationConfig>(ɵAPP_CONFIG);\n    const monitor = Beans.get(ManifestLoadProgressMonitor);\n    if (!appConfigs.length) {\n      monitor.done();\n      return [];\n    }\n\n    const subMonitors = monitor.splitEven(appConfigs.length);\n    return appConfigs.map((appConfig, index) => this.fetchAndRegisterManifest(appConfig, subMonitors[index]));\n  }\n\n  private async fetchAndRegisterManifest(appConfig: ApplicationConfig, monitor: ProgressMonitor): Promise<void> {\n    try {\n      if (!appConfig.manifestUrl) {\n        Beans.get(Logger).error(`[AppConfigError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Manifest URL must not be empty.`);\n        return;\n      }\n\n      const fetchManifest$ = from(Beans.get(HttpClient).fetch(appConfig.manifestUrl));\n      const manifestFetchTimeout = appConfig.manifestLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).manifestLoadTimeout;\n      const onManifestFetchTimeout = (): Observable<never> => throwError(() => `Timeout of ${manifestFetchTimeout}ms elapsed.`);\n      const manifestFetchResponse = await firstValueFrom(fetchManifest$.pipe(manifestFetchTimeout ? timeout({first: manifestFetchTimeout, with: onManifestFetchTimeout}) : identity));\n\n      if (!manifestFetchResponse.ok) {\n        Beans.get(Logger).error(`[ManifestFetchError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Maybe the application is currently unavailable. [httpStatusCode=${manifestFetchResponse.status}, httpStatusText=${manifestFetchResponse.statusText}]`, appConfig, manifestFetchResponse.status);\n        return;\n      }\n\n      const manifest: Manifest = await manifestFetchResponse.json();\n\n      // Let the host manifest be intercepted before registering it in the platform, for example by libraries integrating the SCION Microfrontend Platform, e.g., to allow the programmatic registration of capabilities or intentions.\n      if (appConfig.symbolicName === Beans.get<string>(APP_IDENTITY)) {\n        Beans.all(HostManifestInterceptor).forEach(interceptor => interceptor.intercept(manifest));\n      }\n\n      Beans.get(ApplicationRegistry).registerApplication(appConfig, manifest);\n      Beans.get(Logger).info(`Registered application '${appConfig.symbolicName}' in the SCION Microfrontend Platform.`);\n    }\n    catch (error) {\n      // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500.\n      // It will only reject on network failure or if anything prevented the request from completing.\n      // See https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful\n      Beans.get(Logger).error(`[ManifestFetchError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Maybe the application is currently unavailable.`, error);\n    }\n    finally {\n      monitor.done();\n    }\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Observable} from 'rxjs';\nimport {Client} from './client';\n\n/**\n * Central point for managing client registrations.\n *\n * @ignore\n */\nexport abstract class ClientRegistry {\n\n  /**\n   * Emits when unregistering a client.\n   */\n  public abstract readonly unregister$: Observable<Client>;\n\n  /**\n   * Registers given client.\n   *\n   * If another client is already registered under the same window,\n   * a warning is logged and the \"stale\" client removed.\n   */\n  public abstract registerClient(client: Client): void;\n\n  /**\n   * Unregisters given client.\n   */\n  public abstract unregisterClient(client: Client): void;\n\n  /**\n   * Returns the client associated with the given id, or `undefined` if not found.\n   */\n  public abstract getByClientId(clientId: string): Client | undefined;\n\n  /**\n   * Returns the client associated with the given {@link Window}, or `undefined` if not found.\n   */\n  public abstract getByWindow(window: Window): Client | undefined;\n\n  /**\n   * Returns the clients associated with the given application.\n   */\n  public abstract getByApplication(appSymbolicName: string): Client[];\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Defined} from '@scion/toolkit/util';\nimport {TopicMatcher} from '../../topic-matcher.util';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, map, startWith, takeUntil} from 'rxjs/operators';\nimport {ClientRegistry} from '../client-registry/client.registry';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {runSafe} from '../../safe-runner';\nimport {Client} from '../client-registry/client';\n\n/**\n * Central point for managing topic subscriptions.\n *\n * @ignore\n */\nexport class TopicSubscriptionRegistry implements PreDestroy {\n\n  private readonly _destroy$ = new Subject<void>();\n  private readonly _subscriptionRegistry = new Map<string, TopicSubscription>();\n  private readonly _subscriptionChange$ = new Subject<SubscriptionChangeEvent>();\n\n  constructor() {\n    Beans.get(ClientRegistry).unregister$\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((client: Client) => runSafe(() => {\n        this.unsubscribeClient(client.id);\n      }));\n  }\n\n  /**\n   * Subscribes the subscriber of given identity to receive messages sent to the given topic.\n   *\n   * After calling this method, messages that are published on that topic are transported to the\n   * subscribing client until {@link unsubscribe} or {@link unsubscribeClient} is called.\n   *\n   * @param topic - The topic which to observe; it allows using wildcard segments, e.g., `person/:id`.\n   * @param client - The client which subscribes to the topic.\n   * @param subscriberId - Unique identify of the subscriber.\n   */\n  public subscribe(topic: string, client: Client, subscriberId: string): void {\n    Defined.orElseThrow(subscriberId, () => Error('[TopicSubscribeError] SubscriberId required'));\n    Defined.orElseThrow(topic, () => Error('[TopicSubscribeError] Topic required'));\n    Defined.orElseThrow(client, () => Error('[TopicSubscribeError] Client required'));\n\n    this._subscriptionRegistry.set(subscriberId, {subscriberId, topic, client});\n    this._subscriptionChange$.next({topic});\n  }\n\n  /**\n   * Unsubscribes a subscriber; has no effect if not registered.\n   *\n   * @param subscriberId - Unique identify of the subscriber.\n   */\n  public unsubscribe(subscriberId: string): void {\n    Defined.orElseThrow(subscriberId, () => Error('[TopicUnsubscribeError] SubscriberId required'));\n\n    const subscription = this._subscriptionRegistry.get(subscriberId);\n    if (subscription) {\n      this._subscriptionRegistry.delete(subscriberId);\n      this._subscriptionChange$.next({topic: subscription.topic});\n    }\n  }\n\n  /**\n   * Unregisters all subscriptions of a client.\n   *\n   * @param clientId - Identifies the client which should be unsubscribed from all its topics.\n   */\n  private unsubscribeClient(clientId: string): void {\n    Defined.orElseThrow(clientId, () => Error('[TopicUnsubscribeError] ClientId required'));\n\n    const subscriptions = this.subscriptions.filter(subscription => subscription.client.id === clientId);\n    // First, remove all subscriptions, then, notify about topic subscription change. This order is relevant if\n    // the client has subscribed to a topic multiple times, allowing {@link TopicSubscriptionRegistry#subscriptionCount$}\n    // to emit only once.\n    subscriptions.forEach(subscription => this._subscriptionRegistry.delete(subscription.subscriberId));\n    subscriptions.forEach(subscription => this._subscriptionChange$.next({topic: subscription.topic}));\n  }\n\n  /**\n   * Allows observing the number of subscriptions on a topic. It is not allowed to use wildcards in the topic to observe.\n   *\n   * @param  topic - Specifies the topic to observe.\n   * @return An Observable that, when subscribed, emits the current number of subscribers on it. It never completes and\n   *         emits continuously when the number of subscribers changes.\n   */\n  public subscriptionCount$(topic: string): Observable<number> {\n    if (TopicMatcher.containsWildcardSegments(topic)) {\n      throw Error(`[TopicObserveError] Observing the number of subscribers is only allowed on exact topics. Exact topics must not contain wildcard segments. [topic='${topic}']`);\n    }\n\n    return this._subscriptionChange$\n      .pipe(\n        startWith({topic}),\n        filter(subscriptionChange => new TopicMatcher(subscriptionChange.topic).match(topic).matches),\n        map(() => this.resolveTopicDestinations(topic).length),\n        distinctUntilChanged(),\n      );\n  }\n\n  /**\n   * Resolves the destinations to which to transport a message published to the given topic.\n   *\n   * A client can have multiple subscriptions that match the topic; in this case, multiple destinations are returned, one\n   * per subscription. Use the subscription id to map the destination to the subscription.\n   */\n  public resolveTopicDestinations(publishTopic: string): ResolvedTopicDestination[] {\n    return this.subscriptions.reduce((resolvedTopicDestinations: ResolvedTopicDestination[], subscription: TopicSubscription) => {\n      const match = new TopicMatcher(subscription.topic).match(publishTopic);\n      if (match.matches) {\n        return resolvedTopicDestinations.concat({subscription, topic: publishTopic, params: match.params!});\n      }\n      return resolvedTopicDestinations;\n    }, [] as ResolvedTopicDestination[]);\n  }\n\n  private get subscriptions(): TopicSubscription[] {\n    return Array.from(this._subscriptionRegistry.values());\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Represents a subscription on a topic. The topic may contain wildcard segments.\n * @ignore\n */\nexport interface TopicSubscription {\n  /**\n   * Unique identify of the subscriber.\n   */\n  subscriberId: string;\n  /**\n   * Topic subscribed by the subscriber; if subscribed to multiple topics (using the colon syntax),\n   * the resolved segment values are contained in the params map.\n   */\n  topic: string;\n  /**\n   * The client which subscribed to the topic.\n   */\n  client: Client;\n}\n\n/**\n * Represents the actual destination to which to transport a topic message.\n * @ignore\n */\nexport interface ResolvedTopicDestination {\n  /**\n   * Exact topic to which the message was published.\n   */\n  topic: string;\n  /**\n   * Contains the resolved values of the wildcard segments as specified in the subscription topic.\n   * For example: If subscribed to the topic `person/:id` and a message is published to the topic `person/5`,\n   * the resolved id with the value `5` is contained in the params map.\n   */\n  params: Map<string, string>;\n  /**\n   * The actual subscription to which to transport the message.\n   */\n  subscription: TopicSubscription;\n}\n\n/**\n * Event emitted when some subscriber subscribes or unsubscribes on a topic.\n * @ignore\n */\ninterface SubscriptionChangeEvent {\n  topic: string;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {MessageHeaders, TopicMessage} from '../../messaging.model';\nimport {TopicMatcher} from '../../topic-matcher.util';\nimport {Defined} from '@scion/toolkit/util';\n\n/**\n * Central point for persisting and looking up retained messages sent to a topic.\n *\n * @ignore\n */\nexport class RetainedMessageStore {\n\n  private readonly _retainedMessagesByTopic = new Map<string, TopicMessage>();\n\n  /**\n   * Persists the given message unless it has no body. In that case, the message is deleted.\n   *\n   * @return the status of whether the message was persisted or deleted.\n   */\n  public persistOrDelete(message: TopicMessage): 'deleted' | 'persisted' {\n    if (message.body === undefined) {\n      this._retainedMessagesByTopic.delete(message.topic);\n      return 'deleted';\n    }\n\n    this._retainedMessagesByTopic.set(message.topic, message);\n    return 'persisted';\n  }\n\n  /**\n   * Finds the retained message which was most recently published to a topic matching the given subscription topic.\n   * If no message is retained on that topic, this method returns `null`.\n   */\n  public findMostRecentRetainedMessage(subscriptionTopic: string): TopicMessage | null {\n    if (!TopicMatcher.containsWildcardSegments(subscriptionTopic)) {\n      return this._retainedMessagesByTopic.get(subscriptionTopic) || null;\n    }\n\n    const retainedMessages = Array.from(this._retainedMessagesByTopic.values());\n    return retainedMessages.reduce((mostRecentMessage, message) => {\n      const lastMessageTimestamp = Defined.orElse(mostRecentMessage && mostRecentMessage.headers.get(MessageHeaders.Timestamp), 0);\n\n      const match = new TopicMatcher(subscriptionTopic).match(message.topic);\n      if (match.matches && message.headers.get(MessageHeaders.Timestamp) > lastMessageTimestamp) {\n        return message;\n      }\n      return mostRecentMessage;\n    }, null! as TopicMessage);\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {IntentMessage, TopicMessage} from '../../messaging.model';\n\n/**\n * Allows intercepting messages before their publication.\n *\n * An interceptor can reject or modify messages. Multiple interceptors can be registered, forming a chain in which each interceptor\n * is called one by one in registration order.\n *\n * For each message, the platform invokes the intercept method of the first registered interceptor, passing the message and the next\n * handler as arguments. By calling the next handler in the intercept method, message dispatching is continued. If there is no more\n * interceptor in the chain, the message is transported to the receivers, if any. But, if throwing an error in the intercept method,\n * message dispatching is aborted, and the error transported back to the sender.\n *\n * #### Registering Interceptors\n * You register interceptors with the bean manager when the host application starts. Interceptors can be registered only in the host\n * application. They are invoked in registration order.\n *\n * ```ts\n * Beans.register(MessageInterceptor, {useClass: MessageLoggerInterceptor, multi: true});\n * ```\n *\n * #### Filtering Messages for Interception\n * The platform passes all messages to the interceptors, including platform messages vital for its operation.\n * You can use the TopicMatcher to filter messages, allowing you to test whether a topic matches a pattern. The pattern must be a topic,\n * not a regular expression; thus, it must consist of one or more segments, each separated by a forward slash. The pattern can contain\n * wildcard segments. Wildcard segments start with a colon (:), acting act as a placeholder for any segment value.\n *\n * ```ts\n * class ProductValidatorInterceptor implements MessageInterceptor {\n *\n *   private topicMatcher = new TopicMatcher('product/:id');\n *\n *   public intercept(message: TopicMessage, next: Handler<TopicMessage>): void {\n *     // Pass messages sent to other topics.\n *     if (!this.topicMatcher.match(message.topic).matches) {\n *       next.handle(message);\n *       return;\n *     }\n *\n *     // Validate the payload of the message.\n *     if (isValid(message.body)) {\n *       next.handle(message);\n *       return;\n *     }\n *\n *     throw Error('Message failed schema validation');\n *   }\n * }\n * ```\n *\n * @category Messaging\n */\nexport abstract class MessageInterceptor implements Interceptor<TopicMessage, Handler<TopicMessage>> {\n\n  /**\n   * Intercepts a message before being published to its topic.\n   *\n   * Decide if to continue publishing by passing the message to the next handler, or to reject publishing by throwing an error,\n   * or to swallow the message by not calling the next handler at all. If rejecting publishing, the error is transported to the\n   * message publisher.\n   *\n   * @param  message - the message to be published to its topic\n   * @param  next - the next handler in the chain; invoke its {@link Handler.handle} method to continue publishing.\n   * @throws throw an error to reject publishing; the error is transported to the message publisher.\n   */\n  public abstract intercept(message: TopicMessage, next: Handler<TopicMessage>): void;\n}\n\n/**\n * Allows intercepting intents before their publication.\n *\n * An interceptor can reject or modify intents. Multiple interceptors can be registered, forming a chain in which each interceptor\n * is called one by one in registration order.\n *\n * For each intent, the platform invokes the intercept method of the first registered interceptor, passing the intent and the next\n * handler as arguments. By calling the next handler in the intercept method, intent dispatching is continued. If there is no more\n * interceptor in the chain, the intent is transported to the receivers, if any. But, if throwing an error in the intercept method,\n * intent dispatching is aborted, and the error transported back to the sender.\n *\n * #### Registering Interceptors\n * You register interceptors with the bean manager when the host application starts. Interceptors can be registered only in the host\n * application. They are invoked in registration order.\n *\n * ```ts\n * Beans.register(IntentInterceptor, {useClass: IntentLoggerInterceptor, multi: true});\n * ```\n *\n * #### Filtering intents for Interception\n * The platform passes all intents to the interceptors. The interceptor must filter intents of interest.\n *\n * @category Messaging\n */\nexport abstract class IntentInterceptor implements Interceptor<IntentMessage, Handler<IntentMessage>> {\n\n  /**\n   * Intercepts an intent before being published.\n   *\n   * Decide if to continue publishing by passing the intent to the next handler, or to reject publishing by throwing an error,\n   * or to swallow the intent by not calling the next handler at all. If rejecting publishing, the error is transported to\n   * the intent issuer.\n   *\n   * @param  intent - the intent to be published\n   * @param  next - the next handler in the chain; invoke its {@link Handler.handle} method to continue publishing.\n   * @throws throw an error to reject publishing; the error is transported to the intent issuer.\n   */\n  public abstract intercept(intent: IntentMessage, next: Handler<IntentMessage>): void;\n}\n\n/**\n * Chain to intercept messages before they are published. The chain is implemented according to the 'Chain of Responsibility' design pattern.\n *\n * A message travels along the chain of interceptors. If all interceptors let the message pass, it is published.\n *\n * @internal\n */\nexport interface PublishInterceptorChain<T> {\n\n  /**\n   * Passes a message along the chain of interceptors, if any, and publishes it.\n   *\n   * Each interceptor in the chain can reject publishing by throwing an error, ignore the message by not calling the next handler,\n   * or continue the chain by calling the next handler.\n   *\n   * @throws throws an error if an interceptor rejected publishing.\n   */\n  publish(message: T): void;\n}\n\n/**\n * Assembles the given interceptors to a chain of handlers which are called one after another. The publisher is added as terminal handler.\n *\n * @param interceptors - interceptors to be assembled to a chain\n * @param publisher - terminal handler to publish messages\n * @internal\n */\nexport function chainInterceptors<T>(interceptors: Interceptor<T, Handler<T>>[], publisher: (message: T) => void): PublishInterceptorChain<T> {\n  const terminalHandler = new class extends Handler<T> {\n    public handle(message: T): void {\n      publisher(message);\n    }\n  };\n\n  const handlerChain = interceptors.reduceRight((next, interceptor) => new class extends Handler<T> {\n    public handle(element: T): void {\n      interceptor.intercept(element, next);\n    }\n  }, terminalHandler);\n\n  return new class implements PublishInterceptorChain<T> {\n    public publish(element: T): void {\n      handlerChain.handle(element);\n    }\n  };\n}\n\n/**\n * Allows the interception of messages or intents before their publication.\n *\n * @see {@link MessageInterceptor}\n * @see {@link IntentInterceptor}\n *\n * @ignore\n */\nexport interface Interceptor<T, H extends Handler<T>> {\n\n  intercept(message: T, next: H): void;\n}\n\n/**\n * Represents a handler in the chain of interceptors.\n *\n * @category Messaging\n */\nexport abstract class Handler<T> {\n  /**\n   * Invoke to continue the chain with the given message.\n   */\n  public abstract handle(message: T): void;\n}\n\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {ParamDefinition} from '../../platform.model';\n\n/**\n * Allows testing whether params match the param definitions.\n * @ignore\n */\nexport class ParamMatcher {\n\n  private readonly _requiredParamDefs = new Array<ParamDefinition>();\n  private readonly _optionalParamDefs = new Array<ParamDefinition>();\n  private readonly _deprecatedParamDefs = new Array<ParamDefinition>();\n\n  constructor(definitions: ParamDefinition[]) {\n    definitions.forEach(paramDef => {\n      if (paramDef.required ?? true) {\n        this._requiredParamDefs.push(paramDef);\n      }\n      else {\n        this._optionalParamDefs.push(paramDef);\n      }\n\n      if (paramDef.deprecated) {\n        this._deprecatedParamDefs.push(paramDef);\n      }\n    });\n  }\n\n  /**\n   * Tests if the given params match the param definitions.\n   */\n  public match(parameters: Map<string, any> | undefined): ParamsMatcherResult {\n    const params = new Map(parameters || []);\n\n    const matcherResult: ParamsMatcherResult = {\n      matches: true,\n      params,\n      missingParams: [],\n      unexpectedParams: [],\n      deprecatedParams: [],\n    };\n\n    // Remove params with `undefined` as value.\n    params.forEach((value, key) => {\n      if (value === undefined) {\n        params.delete(key);\n      }\n    });\n\n    // Test if deprecated params are passed and map them to their substitute, if any.\n    this._deprecatedParamDefs\n      .filter(paramDef => params.has(paramDef.name))\n      .forEach(paramDef => {\n        matcherResult.deprecatedParams.push(paramDef);\n\n        // Try mapping the deprecated param to its substitute.\n        const deprecation = paramDef.deprecated;\n        if (typeof deprecation === 'object' && deprecation.useInstead) {\n          params.set(deprecation.useInstead, params.get(paramDef.name));\n          params.delete(paramDef.name);\n        }\n      });\n\n    // Test if required params are passed.\n    this._requiredParamDefs\n      .filter(paramDef => !params.has(paramDef.name))\n      .filter(paramDef => !this._deprecatedParamDefs.includes(paramDef))\n      .forEach(paramDef => {\n        matcherResult.matches = false;\n        matcherResult.missingParams.push(paramDef);\n      });\n\n    // Test if no additional params are passed.\n    Array.from(params.keys())\n      .filter(param => !this._requiredParamDefs.some(paramDef => paramDef.name === param) && !this._optionalParamDefs.some(paramDef => paramDef.name === param))\n      .forEach(param => {\n        matcherResult.matches = false;\n        matcherResult.unexpectedParams.push(param);\n      });\n\n    if (!matcherResult.matches) {\n      matcherResult.params = undefined;\n    }\n\n    return matcherResult;\n  }\n}\n\n/**\n * Represents the result of a params matcher test.\n * @ignore\n */\nexport interface ParamsMatcherResult {\n  /**\n   * Indicates whether the params match the param definitions.\n   */\n  matches: boolean;\n  /**\n   * Params as passed to the matcher, but with deprecated params mapped to their substitute,\n   * or `undefined` if the match is not successful.\n   */\n  params: Map<string, any> | undefined;\n  /**\n   * Required params that are missing.\n   */\n  missingParams: ParamDefinition[];\n  /**\n   * Params that are not expected.\n   */\n  unexpectedParams: string[];\n  /**\n   * Params that are deprecated.\n   */\n  deprecatedParams: ParamDefinition[];\n}\n","/**\n * Specifies the interval (in milliseconds) at which connected clients must send a heartbeat to indicate connectivity to the host.\n *\n * By default, if not set, a heartbeat interval of 60s is used.\n */\nexport const CLIENT_HEARTBEAT_INTERVAL = Symbol('CLIENT_HEARTBEAT_INTERVAL');\n\n/**\n * Specifies the delay (in milliseconds) for unregistering a stale client.\n *\n * By default, if not set, stale clients are unregistered after 2 seconds.\n */\nexport const STALE_CLIENT_UNREGISTER_DELAY = Symbol('STALE_CLIENT_UNREGISTER_DELAY');\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Subscription, timer} from 'rxjs';\nimport {APP_IDENTITY, Application} from '../../platform.model';\nimport semver from 'semver';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {MessageClient} from '../../client/messaging/message-client';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {debounceTime, filter, startWith} from 'rxjs/operators';\nimport {MessageHeaders} from '../../messaging.model';\nimport {Logger, LoggingContext} from '../../logger';\nimport {ClientRegistry} from './client.registry';\nimport {CLIENT_HEARTBEAT_INTERVAL, STALE_CLIENT_UNREGISTER_DELAY} from './client.constants';\nimport {VERSION} from '../../version';\nimport {Client} from './client';\n\nexport class ɵClient implements Client {\n\n  public readonly version: string;\n  private _heartbeat: Subscription | undefined;\n  private _heartbeatInterval: number;\n  private _staleClientUnregisterTimer: Subscription | undefined;\n  private _staleClientUnregisterDelay: number;\n\n  constructor(public readonly id: string,\n              public readonly window: Window,\n              public readonly application: Application,\n              version: string) {\n    this.version = version ?? '0.0.0';\n    this._heartbeatInterval = Beans.get(CLIENT_HEARTBEAT_INTERVAL);\n    this._staleClientUnregisterDelay = Beans.get(STALE_CLIENT_UNREGISTER_DELAY);\n    this.installHeartbeatMonitor();\n  }\n\n  /**\n   * Monitors the heartbeat of this client to detect when this client is no longer connected to the host.\n   * When not receiving any more heartbeat, this client will be marked as stale and queued for removal.\n   *\n   * A client may fail to disconnect from the broker for a number of reasons:\n   * - The client was disposed without notice, i.e., without receiving the browser's \"unload\" event.\n   * - The browser discarded the \"DISCONNECT\" message because the client window became stale.\n   *   Typically, the browser discards messages for windows that are already closed or if another page\n   *   has been loaded into the window, both indicating a high load on the client during unloading.\n   */\n  private installHeartbeatMonitor(): void {\n    // The host app client does not send a heartbeat.\n    if (this.application.symbolicName === Beans.get(APP_IDENTITY)) {\n      return;\n    }\n\n    // Only clients of version 1.0.0-rc.1 or greater send a heartbeat.\n    if (semver.lt(this.version, '1.0.0-rc.1')) {\n      Beans.get(Logger).warn(`[VersionMismatch] Since '@scion/microfrontend-platform@1.0.0-rc.1', connected clients must send a heartbeat to indicate liveness. Please upgrade @scion/microfrontend-platform of application '${this.application.symbolicName}' from version '${this.version}' to version '${Beans.get(VERSION)}'.`, new LoggingContext(this.application.symbolicName, this.version));\n      return;\n    }\n\n    this._heartbeat = Beans.get(MessageClient).observe$(PlatformTopics.heartbeat(this.id))\n      .pipe(\n        filter(message => message.headers.get(MessageHeaders.ClientId) === this.id),\n        startWith(undefined as void),\n        debounceTime(2 * this._heartbeatInterval),\n      )\n      .subscribe(() => {\n        this.logStaleClientWarning();\n        Beans.get(ClientRegistry).unregisterClient(this);\n      });\n  }\n\n  public markStaleAndQueueForRemoval(): void {\n    if (this._staleClientUnregisterTimer) {\n      return;\n    }\n\n    this._staleClientUnregisterTimer = timer(this._staleClientUnregisterDelay).subscribe(() => {\n      this.logStaleClientWarning();\n      Beans.get(ClientRegistry).unregisterClient(this);\n    });\n    this._heartbeat?.unsubscribe();\n  }\n\n  public get stale(): boolean {\n    return !!this._staleClientUnregisterTimer || window.closed;\n  }\n\n  public dispose(): void {\n    this._heartbeat?.unsubscribe();\n    this._staleClientUnregisterTimer?.unsubscribe();\n  }\n\n  private logStaleClientWarning(): void {\n    Beans.get(Logger).warn(\n      `[StaleClient] Stale client registration of application '${this.application.symbolicName}' detected.\n       Removing stale registration. Most likely, the client could not disconnect from the broker, for example, because the client was\n       disposed without notice, i.e., without receiving the browser's \"unload\" event, or because the browser discarded the 'DISCONNECT'\n       message. Typically, the browser discards messages for windows that are already closed or if another page has been loaded into the\n       window, both indicating a high load on the client during unloading.`.replace(/\\s+/g, ' '),\n      new LoggingContext(this.application.symbolicName, this.version),\n    );\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {EMPTY, fromEvent, MonoTypeOperatorFunction, Observable, of, Subject} from 'rxjs';\nimport {catchError, filter, mergeMap, share, takeUntil} from 'rxjs/operators';\nimport {IntentMessage, Message, MessageHeaders, TopicMessage} from '../../messaging.model';\nimport {ConnackMessage, MessageDeliveryStatus, MessageEnvelope, MessagingChannel, MessagingTransport, PlatformTopics, TopicSubscribeCommand, TopicUnsubscribeCommand} from '../../ɵmessaging.model';\nimport {ApplicationRegistry} from '../application-registry';\nimport {ManifestRegistry} from '../manifest-registry/manifest-registry';\nimport {Defined} from '@scion/toolkit/util';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {Logger, LoggingContext} from '../../logger';\nimport {runSafe} from '../../safe-runner';\nimport {TopicSubscriptionRegistry} from './topic-subscription.registry';\nimport {ClientRegistry} from '../client-registry/client.registry';\nimport {RetainedMessageStore} from './retained-message-store';\nimport {TopicMatcher} from '../../topic-matcher.util';\nimport {chainInterceptors, IntentInterceptor, MessageInterceptor, PublishInterceptorChain} from './message-interception';\nimport {Beans, Initializer, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {Runlevel} from '../../platform-state';\nimport {APP_IDENTITY, Capability, ParamDefinition} from '../../platform.model';\nimport {bufferUntil} from '@scion/toolkit/operators';\nimport {ParamMatcher} from './param-matcher';\nimport {filterByChannel, filterByTopicChannel, filterByTransport} from '../../operators';\nimport {Client} from '../client-registry/client';\nimport semver from 'semver';\nimport {VERSION} from '../../version';\nimport {CLIENT_HEARTBEAT_INTERVAL} from '../client-registry/client.constants';\nimport {ɵClient} from '../client-registry/ɵclient';\nimport {stringifyError} from '../../error.util';\n\n/**\n * The broker is responsible for receiving all messages, filtering the messages, determining who is\n * subscribed to each message, and sending the message to these subscribed clients.\n *\n * The broker allows topic-based and intent-based messaging and supports retained messages.\n *\n * When the broker receives a message from a client, the broker identifies the sending client using the {@Window}\n * contained in the {@link MessageEvent}. The user agent sets the window, which cannot be tampered by the client.\n * However, when the client unloads, the window is not set because already been destroyed. Then, the broker identifies\n * the client using the unique client id. In both cases, the broker checks the origin of the message to match the\n * origin of the registered application.\n *\n * The broker processes client connect requests in runlevel 1 or higher. Message dispatching is enabled in runlevel 2.\n * Prior requests are buffered until entering the respective runlevel.\n *\n * @ignore\n */\nexport class MessageBroker implements Initializer, PreDestroy {\n\n  private readonly _destroy$ = new Subject<void>();\n  private readonly _clientMessage$: Observable<MessageEvent<MessageEnvelope>>;\n\n  private readonly _clientRegistry = Beans.get(ClientRegistry);\n  private readonly _topicSubscriptionRegistry = Beans.get(TopicSubscriptionRegistry);\n  private readonly _retainedMessageRegistry = new RetainedMessageStore();\n\n  private readonly _applicationRegistry: ApplicationRegistry;\n  private readonly _manifestRegistry: ManifestRegistry;\n\n  private readonly _messagePublisher: PublishInterceptorChain<TopicMessage>;\n  private readonly _intentPublisher: PublishInterceptorChain<IntentMessage>;\n  private readonly _heartbeatInterval: number;\n\n  constructor() {\n    this._applicationRegistry = Beans.get(ApplicationRegistry);\n    this._manifestRegistry = Beans.get(ManifestRegistry);\n    this._heartbeatInterval = Beans.get(CLIENT_HEARTBEAT_INTERVAL);\n\n    // Construct a stream of messages sent by clients.\n    this._clientMessage$ = fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByTransport(MessagingTransport.ClientToBroker),\n        filterByChannel(MessagingChannel.Intent, MessagingChannel.Topic, MessagingChannel.TopicSubscribe, MessagingChannel.TopicUnsubscribe),\n        bufferUntil(Beans.whenRunlevel(Runlevel.Two)),\n        checkOriginTrusted(),\n        catchErrorAndRetry(),\n        share(),\n      );\n\n    // Install client connect listeners.\n    this.installClientConnectListener();\n    this.installClientDisconnectListener();\n\n    // Install message dispatchers.\n    this.installTopicMessageDispatcher();\n    this.installIntentMessageDispatcher();\n\n    // Install topic subscriptions listeners.\n    this.installTopicSubscribeListener();\n    this.installTopicUnsubscribeListener();\n    this.installTopicSubscriberCountObserver();\n\n    // Assemble message interceptors to a chain of handlers which are called one after another. The publisher is added as terminal handler.\n    this._messagePublisher = this.createMessagePublisher();\n    this._intentPublisher = this.createIntentPublisher();\n  }\n\n  public init(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  private installClientConnectListener(): void {\n    fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByTransport(MessagingTransport.ClientToBroker),\n        filterByChannel(MessagingChannel.ClientConnect),\n        bufferUntil(Beans.whenRunlevel(Runlevel.One)),\n        catchErrorAndRetry(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent) => runSafe(() => {\n        // Ignore stale CONNECT request, e.g. if the origin window has been closed or a page with a different origin has been loaded.\n        if (!event.source) {\n          Beans.get(Logger).debug(`[CONNECT] Ignoring stale connect request from \"${event.origin}\".`);\n          return;\n        }\n\n        const eventSource: Window = event.source as Window;\n        const envelope: MessageEnvelope<TopicMessage<void>> = event.data;\n        const clientAppName = envelope.message.headers.get(MessageHeaders.AppSymbolicName);\n        const clientMessageTarget = new MessageTarget(event);\n        const replyTo = envelope.message.headers.get(MessageHeaders.ReplyTo);\n\n        if (!clientAppName) {\n          const warning = `Client connect attempt rejected by the message broker: Bad request. [origin='${event.origin}']`;\n          Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n          sendTopicMessage<ConnackMessage>(clientMessageTarget, {\n            topic: replyTo,\n            body: {returnCode: 'refused:bad-request', returnMessage: `[MessageClientConnectError] ${warning}`},\n            headers: new Map(),\n          });\n          return;\n        }\n\n        const application = this._applicationRegistry.getApplication(clientAppName);\n        if (!application) {\n          const warning = `Client connect attempt rejected by the message broker: Unknown client. [app='${clientAppName}']`;\n          Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n          sendTopicMessage<ConnackMessage>(clientMessageTarget, {\n            topic: replyTo,\n            body: {returnCode: 'refused:rejected', returnMessage: `[MessageClientConnectError] ${warning}`},\n            headers: new Map(),\n          });\n          return;\n        }\n\n        if (event.origin !== application.messageOrigin) {\n          const warning = `Client connect attempt blocked by the message broker: Wrong origin [actual='${event.origin}', expected='${application.messageOrigin}', app='${application.symbolicName}']`;\n          Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n\n          sendTopicMessage<ConnackMessage>(clientMessageTarget, {\n            topic: replyTo,\n            body: {returnCode: 'refused:blocked', returnMessage: `[MessageClientConnectError] ${warning}`},\n            headers: new Map(),\n          });\n          return;\n        }\n\n        // Check if the client is already connected. If already connected, do nothing. A client can potentially initiate multiple connect requests, for example,\n        // when not receiving connect confirmation in time.\n        const currentClient = this._clientRegistry.getByWindow(eventSource);\n        if (currentClient && currentClient.application.messageOrigin === event.origin && currentClient.application.symbolicName === application.symbolicName) {\n          sendTopicMessage<ConnackMessage>(currentClient, {\n            topic: replyTo,\n            body: {returnCode: 'accepted', clientId: currentClient.id, heartbeatInterval: this._heartbeatInterval},\n            headers: new Map(),\n          });\n          return;\n        }\n\n        const client = new ɵClient(UUID.randomUUID(), eventSource, application, envelope.message.headers.get(MessageHeaders.Version));\n        this._clientRegistry.registerClient(client);\n\n        // Check if the client is compatible with the platform version of the host.\n        if (semver.major(client.version) !== semver.major(Beans.get<string>(VERSION))) {\n          Beans.get(Logger).warn(`[VersionMismatch] Application '${application.symbolicName}' uses a different major version of the @scion/microfrontend-platform than the host application, which may not be compatible. Please upgrade @scion/microfrontend-platform of application '${application.symbolicName}' from version '${(client.version)}' to version '${(Beans.get<string>(VERSION))}'.`, new LoggingContext(application.symbolicName, client.version));\n        }\n\n        sendTopicMessage<ConnackMessage>(client, {\n          topic: replyTo,\n          body: {returnCode: 'accepted', clientId: client.id, heartbeatInterval: this._heartbeatInterval},\n          headers: new Map(),\n        });\n      }));\n  }\n\n  /**\n   * Listens for client disconnect requests.\n   */\n  private installClientDisconnectListener(): void {\n    fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByTransport(MessagingTransport.ClientToBroker),\n        filterByChannel(MessagingChannel.ClientDisconnect),\n        bufferUntil(Beans.whenRunlevel(Runlevel.One)),\n        checkOriginTrusted(),\n        catchErrorAndRetry(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope>) => runSafe(() => {\n        const client = getSendingClient(event);\n        this._clientRegistry.unregisterClient(client);\n      }));\n  }\n\n  /**\n   * Listens for topic subscribe commands.\n   */\n  private installTopicSubscribeListener(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<TopicSubscribeCommand>(MessagingChannel.TopicSubscribe),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<TopicSubscribeCommand>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const envelope = event.data;\n        const topic = envelope.message.topic;\n        const subscriberId = envelope.message.subscriberId;\n        const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n\n        if (!topic) {\n          sendDeliveryStatusError(client, messageId, '[TopicSubscribeError] Missing required property on message: topic');\n          return;\n        }\n        if (!subscriberId) {\n          sendDeliveryStatusError(client, messageId, '[TopicSubscribeError] Missing required property on message: subscriberId');\n          return;\n        }\n\n        this._topicSubscriptionRegistry.subscribe(topic, client, subscriberId);\n        sendDeliveryStatusSuccess(client, messageId);\n\n        // Dispatch a retained message, if any.\n        const retainedMessage = this._retainedMessageRegistry.findMostRecentRetainedMessage(topic);\n        if (retainedMessage) {\n          const retainedMessageWorkingCopy = {\n            ...retainedMessage,\n            headers: new Map(retainedMessage.headers).set(MessageHeaders.ɵTopicSubscriberId, subscriberId),\n            params: new TopicMatcher(topic).match(retainedMessage.topic).params,\n          };\n          sendTopicMessage(client, retainedMessageWorkingCopy);\n        }\n      }));\n  }\n\n  /**\n   * Listens for topic unsubscribe commands.\n   */\n  private installTopicUnsubscribeListener(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<TopicUnsubscribeCommand>(MessagingChannel.TopicUnsubscribe),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<TopicUnsubscribeCommand>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const envelope = event.data;\n        const subscriberId = envelope.message.subscriberId;\n        const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n\n        if (!subscriberId) {\n          sendDeliveryStatusError(client, messageId, '[TopicUnsubscribeError] Missing required property on message: subscriberId');\n          return;\n        }\n\n        this._topicSubscriptionRegistry.unsubscribe(subscriberId);\n        sendDeliveryStatusSuccess(client, messageId);\n      }));\n  }\n\n  /**\n   * Replies to requests to observe the number of subscribers on a topic.\n   */\n  private installTopicSubscriberCountObserver(): void {\n    this._clientMessage$\n      .pipe(\n        filterByTopicChannel<string>(PlatformTopics.RequestSubscriberCount),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<TopicMessage<string>>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const request = event.data.message;\n        const topic = request.body!;\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const messageId = request.headers.get(MessageHeaders.MessageId);\n        sendDeliveryStatusSuccess(client, messageId);\n\n        this._topicSubscriptionRegistry.subscriptionCount$(topic)\n          .pipe(takeUntil(this._topicSubscriptionRegistry.subscriptionCount$(replyTo).pipe(filter(count => count === 0))))\n          .subscribe((count: number) => runSafe(() => { // eslint-disable-line rxjs/no-nested-subscribe\n            this.dispatchTopicMessage({\n              topic: replyTo,\n              body: count,\n              headers: new Map()\n                .set(MessageHeaders.MessageId, UUID.randomUUID())\n                .set(MessageHeaders.AppSymbolicName, Beans.get<string>(APP_IDENTITY)),\n            });\n          }));\n      }));\n  }\n\n  /**\n   * Dispatches topic messages to subscribed clients.\n   */\n  private installTopicMessageDispatcher(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<TopicMessage>(MessagingChannel.Topic),\n        filter(message => message.data.message.topic !== PlatformTopics.RequestSubscriberCount), // do not dispatch messages sent to the `RequestSubscriberCount` topic as handled separately\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<TopicMessage>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const topicMessage = event.data.message;\n        const messageId = topicMessage.headers.get(MessageHeaders.MessageId);\n\n        try {\n          this._messagePublisher.publish(topicMessage);\n          sendDeliveryStatusSuccess(client, messageId);\n        }\n        catch (error) {\n          sendDeliveryStatusError(client, messageId, stringifyError(error));\n        }\n      }));\n  }\n\n  /**\n   * Dispatches intents to qualified clients.\n   */\n  private installIntentMessageDispatcher(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<IntentMessage>(MessagingChannel.Intent),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<IntentMessage>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const intentMessage = event.data.message;\n        const messageId = intentMessage.headers.get(MessageHeaders.MessageId);\n\n        if (!intentMessage.intent) {\n          const error = '[IntentDispatchError] Missing required property on message: intent';\n          sendDeliveryStatusError(client, messageId, error);\n          return;\n        }\n\n        if (!intentMessage.intent.type) {\n          const error = '[IntentDispatchError] Missing required property on intent: type';\n          sendDeliveryStatusError(client, messageId, error);\n          return;\n        }\n\n        if (!this._manifestRegistry.hasIntention(intentMessage.intent, client.application.symbolicName)) {\n          const error = `[NotQualifiedError] Application '${client.application.symbolicName}' is not qualified to publish intents of the type '${intentMessage.intent.type}' and qualifier '${JSON.stringify(intentMessage.intent.qualifier || {})}'. Ensure to have listed the intention in the application manifest.`;\n          sendDeliveryStatusError(client, messageId, error);\n          return;\n        }\n\n        // Find capabilities fulfilling the intent, or send an error otherwise.\n        const capabilities = this._manifestRegistry.resolveCapabilitiesByIntent(intentMessage.intent, client.application.symbolicName);\n        if (capabilities.length === 0) {\n          const error = `[NullProviderError] No application found to provide a capability of the type '${intentMessage.intent.type}' and qualifiers '${JSON.stringify(intentMessage.intent.qualifier || {})}'. Maybe, the capability is not public API or the providing application not available.`;\n          sendDeliveryStatusError(client, messageId, error);\n          return;\n        }\n\n        // If the params of the intent do not match the params of every fulfilling capability, send an error.\n        for (const capability of capabilities) {\n          // Test params passed with the intent.\n          const paramMatchResult = new ParamMatcher(capability.params!).match(intentMessage.intent.params);\n          if (!paramMatchResult.matches) {\n            const intentStringified = JSON.stringify(intentMessage.intent, (key, value) => (key === 'params') ? undefined : value);\n            const error = `[ParamMismatchError] Params of the intent do not match expected params of the resolved capability. Ensure to pass required params and not to include additional params. [intent=${intentStringified}, missingParams=[${paramMatchResult.missingParams.map(param => param.name)}], unexpectedParams=[${paramMatchResult.unexpectedParams}]].`;\n            sendDeliveryStatusError(client, messageId, error);\n            return;\n          }\n\n          // Warn about the usage of deprecated params.\n          if (paramMatchResult.deprecatedParams.length) {\n            paramMatchResult.deprecatedParams.forEach(deprecatedParam => {\n              const warning = constructDeprecatedParamWarning(deprecatedParam, {appSymbolicName: client.application.symbolicName});\n              Beans.get(Logger).warn(`[DEPRECATION] ${warning}`, new LoggingContext(client.application.symbolicName, client.version), intentMessage.intent);\n            });\n            // Continue with params of the matcher with deprecated params mapped to their replacement.\n            intentMessage.intent.params = paramMatchResult.params!;\n          }\n        }\n\n        try {\n          capabilities.forEach(capability => this._intentPublisher.publish({...intentMessage, capability}));\n          sendDeliveryStatusSuccess(client, messageId);\n        }\n        catch (error) {\n          sendDeliveryStatusError(client, messageId, stringifyError(error));\n        }\n      }));\n  }\n\n  /**\n   * Creates the interceptor chain to intercept message publishing. The publisher is added as terminal handler.\n   */\n  private createMessagePublisher(): PublishInterceptorChain<TopicMessage> {\n    return chainInterceptors(Beans.all(MessageInterceptor), (message: TopicMessage): void => {\n      // If the message is marked as 'retained', store it, or if without a body, delete it.\n      if (message.retain && this._retainedMessageRegistry.persistOrDelete(message) === 'deleted') {\n        return; // Deletion events for retained messages are swallowed.\n      }\n\n      // Dispatch the message.\n      const dispatched = this.dispatchTopicMessage(message);\n\n      // If request-reply communication, throw an error if no replier is found to reply to the topic.\n      if (!dispatched && message.headers.has(MessageHeaders.ReplyTo)) {\n        throw Error(`[RequestReplyError] No client is currently running which could answer the request sent to the topic '${message.topic}'.`);\n      }\n    });\n  }\n\n  /**\n   * Creates the interceptor chain to intercept intent publishing. The publisher is added as terminal handler.\n   */\n  private createIntentPublisher(): PublishInterceptorChain<IntentMessage> {\n    return chainInterceptors(Beans.all(IntentInterceptor), (message: IntentMessage): void => {\n      const capability = Defined.orElseThrow(message.capability, () => Error(`[IllegalStateError] Missing target capability on intent message: ${JSON.stringify(message)}`));\n      const clients = this._clientRegistry.getByApplication(capability.metadata!.appSymbolicName);\n\n      // If request-reply communication, send an error if no replier is running to reply to the intent.\n      if (message.headers.has(MessageHeaders.ReplyTo) && !this.existsClient(capability)) {\n        throw Error(`[RequestReplyError] No client is currently running which could answer the intent '{type=${message.intent.type}, qualifier=${JSON.stringify(message.intent.qualifier)}}'.`);\n      }\n\n      clients\n        .filter(client => !client.stale)\n        .forEach(client => runSafe(() => {\n          const envelope: MessageEnvelope<IntentMessage> = {\n            transport: MessagingTransport.BrokerToClient,\n            channel: MessagingChannel.Intent,\n            message: message,\n          };\n          client.window.postMessage(envelope, client.application.messageOrigin);\n        }));\n    });\n  }\n\n  /**\n   * Dispatches the given topic message to subscribed clients on the transport {@link MessagingTransport.BrokerToClient}.\n   *\n   * @return `true` if dispatched the message to at minimum one subscriber, or `false` if no subscriber is subscribed to the given message topic.\n   */\n  private dispatchTopicMessage<BODY>(topicMessage: TopicMessage<BODY>): boolean {\n    const destinations = this._topicSubscriptionRegistry.resolveTopicDestinations(topicMessage.topic);\n    if (!destinations.length) {\n      return false;\n    }\n\n    destinations.forEach(resolvedTopicDestination => runSafe(() => {\n      const client: Client = resolvedTopicDestination.subscription.client;\n      sendTopicMessage(client, {\n        ...topicMessage,\n        topic: resolvedTopicDestination.topic,\n        params: resolvedTopicDestination.params,\n        headers: new Map(topicMessage.headers).set(MessageHeaders.ɵTopicSubscriberId, resolvedTopicDestination.subscription.subscriberId),\n      });\n    }));\n\n    return true;\n  }\n\n  /**\n   * Tests if at least one client is running that can handle the specified capability.\n   */\n  private existsClient(capability: Capability): boolean {\n    return this._clientRegistry.getByApplication(capability.metadata!.appSymbolicName).length > 0;\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Resolves to the client that sent the passed message.\n *\n * Throws an error if the client could not be resolved.\n *\n * @ignore\n */\nfunction getSendingClient(event: MessageEvent<MessageEnvelope>): Client {\n  const clientId = event.data.message.headers.get(MessageHeaders.ClientId);\n  const client = Beans.get(ClientRegistry).getByClientId(clientId)!;\n  if (!client) {\n    throw Error(`[NullClientError] Client not found in client registry. [clientId=${clientId}]`);\n  }\n  return client;\n}\n\n/**\n * Passes only messages originating from trusted and registered clients.\n *\n * @ignore\n */\nfunction checkOriginTrusted<T extends Message>(): MonoTypeOperatorFunction<MessageEvent<MessageEnvelope<T>>> {\n  return mergeMap((event: MessageEvent<MessageEnvelope<T>>): Observable<MessageEvent<MessageEnvelope<T>>> => {\n    const envelope: MessageEnvelope = event.data;\n    const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n    const clientId = envelope.message.headers.get(MessageHeaders.ClientId);\n    const client = Beans.get(ClientRegistry).getByClientId(clientId)!;\n\n    // Assert client registration.\n    if (!client) {\n      if (event.source !== null) {\n        const sender = new MessageTarget(event);\n        const error = `[MessagingError] Message rejected: Client not registered [origin=${event.origin}]`;\n        sendDeliveryStatusError(sender, messageId, error);\n      }\n      return EMPTY;\n    }\n\n    // Assert source origin.\n    if (event.origin !== client.application.messageOrigin) {\n      if (event.source !== null) {\n        const sender = new MessageTarget(event);\n        const error = `[MessagingError] Message rejected: Wrong origin [actual=${event.origin}, expected=${client.application.messageOrigin}, application=${client.application.symbolicName}]`;\n        sendDeliveryStatusError(sender, messageId, error);\n      }\n      return EMPTY;\n    }\n\n    // Assert source window unless the request is stale, i.e., if the origin window has been closed or a site with a different origin has been loaded.\n    // We still process stale requests to enable proper disconnection of the client, such as delivery of messages published by the client during shutdown,\n    // but mark the client as stale and queue it for later removal.\n    if (event.source === null) {\n      client.markStaleAndQueueForRemoval();\n    }\n    else if (event.source !== client.window) {\n      const sender = new MessageTarget(event);\n      const error = `[MessagingError] Message rejected: Wrong window [origin=${event.origin}]`;\n      sendDeliveryStatusError(sender, messageId, error);\n      return EMPTY;\n    }\n\n    return of(event);\n  });\n}\n\n/** @ignore */\nfunction sendDeliveryStatusSuccess(target: MessageTarget | Client, topic: string): void {\n  sendTopicMessage<MessageDeliveryStatus>(target, {\n    topic: topic,\n    body: {ok: true},\n    headers: new Map(),\n  });\n}\n\n/** @ignore */\nfunction sendDeliveryStatusError(target: MessageTarget | Client, topic: string, error: string): void {\n  sendTopicMessage<MessageDeliveryStatus>(target, {\n    topic: topic,\n    body: {ok: false, details: error},\n    headers: new Map(),\n  });\n}\n\n/** @ignore */\nfunction sendTopicMessage<T>(target: MessageTarget | Client, message: TopicMessage<T>): void {\n  const envelope: MessageEnvelope<TopicMessage<T>> = {\n    transport: MessagingTransport.BrokerToClient,\n    channel: MessagingChannel.Topic,\n    message: {...message},\n  };\n\n  envelope.message.params = new Map(envelope.message.params || new Map());\n  envelope.message.headers = new Map(envelope.message.headers || new Map());\n\n  const headers = envelope.message.headers;\n  if (!headers.has(MessageHeaders.MessageId)) {\n    headers.set(MessageHeaders.MessageId, UUID.randomUUID());\n  }\n  if (!headers.has(MessageHeaders.AppSymbolicName)) {\n    headers.set(MessageHeaders.AppSymbolicName, Beans.get<string>(APP_IDENTITY));\n  }\n\n  if (target instanceof MessageTarget) {\n    !target.window.closed && target.window.postMessage(envelope, target.origin);\n  }\n  else {\n    !target.stale && target.window.postMessage(envelope, target.application.messageOrigin);\n  }\n}\n\n/**\n * Catches and logs errors, and resubscribes to the source observable.\n *\n * @ignore\n */\nfunction catchErrorAndRetry<T>(): MonoTypeOperatorFunction<T> {\n  return catchError((error, caught) => {\n    Beans.get(Logger).error('[UnexpectedError] An unexpected error occurred.', error);\n    return caught;\n  });\n}\n\n/**\n * @ignore\n */\nfunction constructDeprecatedParamWarning(param: ParamDefinition, metadata: {appSymbolicName: string}): string {\n  const deprecation = param.deprecated!;\n  const useInstead = typeof deprecation === 'object' && deprecation.useInstead || undefined;\n  const message = typeof deprecation === 'object' && deprecation.message || undefined;\n\n  return new Array<string>()\n    .concat(`Application '${metadata.appSymbolicName}' passes a deprecated parameter in the intent: '${param.name}'.`)\n    .concat(useInstead ? `Pass parameter '${useInstead}' instead.` : [])\n    .concat(message || [])\n    .join(' ');\n}\n\n/**\n * Represents the target where to send a message.\n *\n * @ignore\n */\nclass MessageTarget {\n\n  public readonly window: Window;\n  public readonly origin: string;\n\n  constructor(event: MessageEvent) {\n    this.window = event.source as Window;\n    this.origin = event.origin;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MessageEnvelope, MessagingChannel, MessagingTransport} from '../../ɵmessaging.model';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {MessageHeaders, TopicMessage} from '../../messaging.model';\n\n/**\n * Context lookup options header to control if values should be collected.\n *\n * @ignore\n */\nexport const CONTEXT_LOOKUP_OPTIONS = 'ɵCONTEXT_LOOKUP_OPTIONS';\n\n/**\n * Instructs how to look up context values.\n *\n * @category Context\n */\nexport interface ContextLookupOptions {\n  /**\n   * Controls whether to collect the most specific context value or to collect all values in the context\n   * hierarchy that are associated with a context name. Defaults to `false` if not specified.\n   *\n   * If `true`, collects all values in the context hierarchy that are associated with the context name.\n   * Collected values are returned as an array in context-descending order, i.e., values of parent contexts\n   * come after values of child contexts.\n   *\n   * If `false`, the most specific context value is returned, i.e., the value of the closest context\n   * that has a value associated with that name.\n   */\n  collect?: boolean;\n}\n\n/**\n * Provides the API to lookup context related information.\n *\n * @ignore\n */\nexport namespace Contexts {\n\n  /**\n   * Returns the request-reply topic to lookup the names of associated context values in the context tree.\n   */\n  export function contextTreeNamesLookupTopic(): string {\n    return 'contexttree/names';\n  }\n\n  /**\n   * Returns the request-reply topic to get notified when some context changes at any level in the context tree.\n   */\n  export function contextTreeChangeTopic(): string {\n    return 'contexttree/change';\n  }\n\n  /**\n   * Computes the request-reply topic to lookup a context value from embedded router outlet web content.\n   */\n  export function contextValueLookupTopic(name: string): string {\n    return `context/${name}`;\n  }\n\n  /**\n   * Creates a message envelope to request the context value associated with the given name.\n   *\n   * @param name - The name of the value to lookup.\n   * @param replyTo - The 'replyTo' topic where to send the reply.\n   * @param options - Options to control context lookup.\n   * @param values - The collected values passed to the parent context during a context lookup.\n   *                 Used to collect all values associated with the context name in the context hierarchy.\n   */\n  export function newContextValueLookupRequest(name: string, replyTo: string, options?: ContextLookupOptions, values?: any[]): MessageEnvelope<TopicMessage<any[]>> {\n    return {\n      transport: MessagingTransport.MicrofrontendToOutlet,\n      channel: MessagingChannel.Topic,\n      message: {\n        topic: contextValueLookupTopic(encodeURIComponent(name)), // Encode in order to support names containing forward slashes or starting with a colon.\n        body: values || [],\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.ReplyTo, replyTo)\n          .set(CONTEXT_LOOKUP_OPTIONS, options),\n      },\n    };\n  }\n\n  /**\n   * Creates a message envelope to lookup the names of associated context values in the context tree.\n   *\n   * @param replyTo - The 'replyTo' topic where to send the reply.\n   * @param names - The names of the current context to be combined with the names of the parent contexts.\n   */\n  export function newContextTreeNamesLookupRequest(replyTo: string, names?: Set<string>): MessageEnvelope<TopicMessage<Set<string>>> {\n    return {\n      transport: MessagingTransport.MicrofrontendToOutlet,\n      channel: MessagingChannel.Topic,\n      message: {\n        topic: Contexts.contextTreeNamesLookupTopic(),\n        body: names || new Set<string>(),\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.ReplyTo, replyTo),\n      },\n    };\n  }\n\n  /**\n   * Creates a message envelope to get notified when some context changes at any level in the context tree.\n   *\n   * @param replyTo - The 'replyTo' topic where to send the reply.\n   */\n  export function newContextTreeObserveRequest(replyTo: string): MessageEnvelope<TopicMessage<void>> {\n    return {\n      transport: MessagingTransport.MicrofrontendToOutlet,\n      channel: MessagingChannel.Topic,\n      message: {\n        topic: Contexts.contextTreeChangeTopic(),\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.ReplyTo, replyTo),\n      },\n    };\n  }\n\n  /**\n   * Event emitted when a context value changed.\n   */\n  export interface ContextTreeChangeEvent {\n    type: 'set' | 'remove';\n    name: string;\n    value?: any;\n  }\n\n  /**\n   * Event emitted by the root context when subscribed to it.\n   */\n  export const RootContextSubscribeEvent = 'RootContextSubscribeEvent';\n  export type RootContextSubscribeEventType = 'RootContextSubscribeEvent';\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, fromEvent, Observable, Subject} from 'rxjs';\nimport {filter, share, takeUntil} from 'rxjs/operators';\nimport {filterByChannel, filterByTopicChannel, filterByTransport, pluckMessage} from '../../operators';\nimport {MessageEnvelope, MessagingChannel, MessagingTransport} from '../../ɵmessaging.model';\nimport {TopicMatcher} from '../../topic-matcher.util';\nimport {MessageHeaders, ResponseStatusCodes, TopicMessage} from '../../messaging.model';\nimport {MessageClient, takeUntilUnsubscribe} from '../messaging/message-client';\nimport {CONTEXT_LOOKUP_OPTIONS, Contexts} from './context.model';\nimport {runSafe} from '../../safe-runner';\nimport {IS_PLATFORM_HOST} from '../../platform.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Provides a context to the {@link SciRouterOutletElement} allowing the outlet to associate values with that context.\n * For embedded outlet web content, it allows looking up context names and values.\n *\n * A context is a hierarchical key-value map which are linked together to form a tree structure. When a key is not found\n * in a context, the lookup is retried on the parent, repeating until either a value is found or the root of the tree has\n * been reached.\n *\n * @ignore\n */\nexport class RouterOutletContextProvider {\n\n  private _microfrontendRequest$: Observable<MessageEvent<MessageEnvelope<TopicMessage>>>;\n\n  private _entries$ = new BehaviorSubject<Map<string, any>>(new Map());\n  private _entryChange$ = new Subject<Contexts.ContextTreeChangeEvent>();\n  private _outletDisconnect$ = new Subject<void>();\n\n  constructor(iframe: HTMLIFrameElement) {\n    // Listen for requests from embedded web content of the outlet.\n    this._microfrontendRequest$ = fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filter(event => event.source === iframe.contentWindow),\n        filterByTransport(MessagingTransport.MicrofrontendToOutlet),\n        filterByChannel<TopicMessage>(MessagingChannel.Topic),\n        share(),\n      );\n  }\n\n  /**\n   * Sets a value to be associated with a given name in this context.\n   *\n   * @param name - Specifies the name to store a value for.\n   * @param value - Specifies the value to be stored. It can be any object which\n   *        is serializable with the structured clone algorithm.\n   */\n  public set(name: string, value: any): void {\n    this._entries$.next(new Map(this._entries$.getValue()).set(name, value));\n    this._entryChange$.next({name, value, type: 'set'});\n  }\n\n  /**\n   * Removes the given name and any corresponding value from this context.\n   *\n   * Removal does not affect parent contexts, so it is possible that a subsequent call to {@link ContextService#observe$} with the same name\n   * will return a non-null result, due to a value being stored in a parent context.\n   *\n   * @param  name - Specifies the name to remove.\n   * @return `true` if the value in the outlet context has been removed successfully; otherwise `false`.\n   */\n  public remove(name: string): boolean {\n    const entries = new Map(this._entries$.getValue());\n    if (entries.delete(name)) {\n      this._entries$.next(entries);\n      this._entryChange$.next({name, type: 'remove'});\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns an Observable that emits the values registered in this outlet. Values inherited from parent contexts are not returned.\n   * The Observable never completes, and emits when a context value is added or removed.\n   */\n  public get entries$(): Observable<Map<string, any>> {\n    return this._entries$;\n  }\n\n  /**\n   * Method invoked when the outlet is mounted to the DOM.\n   */\n  public onOutletMount(): void {\n    this.installContextValueLookupListener();\n    this.installContextTreeNamesLookupListener();\n    this.installContextTreeObserveListener();\n  }\n\n  /**\n   * Method invoked when the outlet is removed from the DOM.\n   */\n  public onOutletUnmount(): void {\n    this._outletDisconnect$.next();\n  }\n\n  /**\n   * Installs a listener to reply to context value lookup requests from embedded content.\n   * When a key is not found in this context, the lookup is passed on to the parent context.\n   */\n  private installContextValueLookupListener(): void {\n    this._microfrontendRequest$\n      .pipe(\n        filterByTopicChannel<any[]>(Contexts.contextValueLookupTopic(':name')),\n        pluckMessage(),\n        takeUntil(this._outletDisconnect$),\n      )\n      .subscribe((lookupRequest: TopicMessage<any[]>) => runSafe(() => {\n        const encodedName = new TopicMatcher(Contexts.contextValueLookupTopic(':name')).match(lookupRequest.topic).params!.get('name')!;\n\n        // The name has to be decoded here because it was encoded in `newContextValueLookupRequest` where the topic was created.\n        const name = decodeURIComponent(encodedName);\n        const replyTo = lookupRequest.headers.get(MessageHeaders.ReplyTo);\n        const options = lookupRequest.headers.get(CONTEXT_LOOKUP_OPTIONS);\n        const entries = this._entries$.getValue();\n\n        if (options?.collect) {\n          const collectedValues = lookupRequest.body || [];\n          if (entries.has(name) && entries.get(name) !== undefined) {\n            collectedValues.push(entries.get(name));\n          }\n\n          if (Beans.get(IS_PLATFORM_HOST)) {\n            // Reply with the collected context values.\n            Beans.get(MessageClient).publish(replyTo, collectedValues, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK)});\n          }\n          else {\n            // Pass on the lookup request to the parent context.\n            window.parent.postMessage(Contexts.newContextValueLookupRequest(name, replyTo, options, collectedValues), '*');\n          }\n        }\n        else {\n          if (entries.has(name) && entries.get(name) !== undefined) {\n            // Reply with the found context value.\n            Beans.get(MessageClient).publish(replyTo, entries.get(name), {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK)});\n          }\n          else if (Beans.get(IS_PLATFORM_HOST)) {\n            // No context value found; the root of the context tree has been reached; reply with `NOT_FOUND` status code.\n            Beans.get(MessageClient).publish(replyTo, undefined, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.NOT_FOUND)});\n          }\n          else {\n            // Pass on the lookup request to the parent context.\n            window.parent.postMessage(Contexts.newContextValueLookupRequest(name, replyTo, options), '*');\n          }\n        }\n      }));\n  }\n\n  /**\n   * Installs a listener to reply to context names lookup requests from embedded content.\n   *\n   * The context names are accumulated in the lookup request and passed on to the parent context.\n   * When the root context is reached, the request is finally answered with all collected context names.\n   */\n  private installContextTreeNamesLookupListener(): void {\n    this._microfrontendRequest$\n      .pipe(\n        filterByTopicChannel<Set<string>>(Contexts.contextTreeNamesLookupTopic()),\n        pluckMessage(),\n        takeUntil(this._outletDisconnect$),\n      )\n      .subscribe((lookupRequest: TopicMessage<Set<string>>) => runSafe(() => {\n        const replyTo = lookupRequest.headers.get(MessageHeaders.ReplyTo);\n        const entries = this._entries$.getValue();\n        const collectedNames = new Set<string>([...entries.keys(), ...(lookupRequest.body || [])]);\n        if (Beans.get(IS_PLATFORM_HOST)) {\n          // Answer the request when reaching the root of the context tree.\n          Beans.get(MessageClient).publish(replyTo, collectedNames, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK)});\n        }\n        else {\n          // Pass on the lookup request to the parent context.\n          window.parent.postMessage(Contexts.newContextTreeNamesLookupRequest(replyTo, collectedNames), '*');\n        }\n      }));\n  }\n\n  /**\n   * Installs a listener to publish a context change event when this context changes.\n   *\n   * For every request a replier is installed which emits when this context changes. It stops replying\n   * when the requestor unsubscribes. The request is also passed on to the parent context.\n   */\n  private installContextTreeObserveListener(): void {\n    this._microfrontendRequest$\n      .pipe(\n        filterByTopicChannel<void>(Contexts.contextTreeChangeTopic()),\n        pluckMessage(),\n        takeUntil(this._outletDisconnect$),\n      )\n      .subscribe((observeRequest: TopicMessage<void>) => runSafe(() => {\n        const replyTo = observeRequest.headers.get(MessageHeaders.ReplyTo);\n\n        this._entryChange$\n          .pipe(\n            takeUntilUnsubscribe(replyTo),\n            takeUntil(this._outletDisconnect$),\n          )\n          .subscribe((event: Contexts.ContextTreeChangeEvent) => { // eslint-disable-line rxjs/no-nested-subscribe\n            Beans.get(MessageClient).publish<Contexts.ContextTreeChangeEvent>(replyTo, event);\n          });\n\n        if (Beans.get(IS_PLATFORM_HOST)) {\n          // Notify that the subscriber subscribed to the root context.\n          Beans.get(MessageClient).publish<Contexts.RootContextSubscribeEventType>(replyTo, Contexts.RootContextSubscribeEvent);\n        }\n        else {\n          // Pass on the registration request to the parent context.\n          window.parent.postMessage(Contexts.newContextTreeObserveRequest(replyTo), '*');\n        }\n      }));\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {runSafe} from '../../safe-runner';\nimport {Navigation} from './metadata';\nimport {Urls} from '../../url.util';\n\n/** @ignore */\nconst BLANK_URL = Urls.newUrl('about:blank');\n\n/**\n * Assigns a URL to the iframe of a {@link SciRouterOutletElement `<sci-router-outlet>`}.\n *\n * @category Routing\n */\nexport class RouterOutletUrlAssigner {\n\n  /**\n   * Assigns a URL to the iframe of a {@link SciRouterOutletElement `<sci-router-outlet>`}.\n   *\n   * @param iframe - Iframe for which to set the URL.\n   * @param currNavigation - Current navigation.\n   * @param prevNavigation - Previous navigation, if any.\n   */\n  public assign(iframe: HTMLIFrameElement, currNavigation: Navigation, prevNavigation?: Navigation): void {\n    // Patch the URL to force Chrome to load the content of specified URL.\n    const patchedUrl = this.patchUrl(currNavigation.url, prevNavigation && prevNavigation.url);\n\n    if (currNavigation.pushStateToSessionHistoryStack) {\n      iframe.contentWindow!.location.assign(patchedUrl);\n    }\n    else {\n      iframe.contentWindow!.location.replace(patchedUrl);\n    }\n  }\n\n  /**\n   * Patches the URL to force Chrome to load the content of the given URL into an iframe.\n   *\n   * #### Problem:\n   * Chrome browser does not load the content of a nested iframe if already loaded a document from the same origin and path in a parent iframe.\n   * The problem does not occur if the URL contains query parameters. Also, the hash fragment of the URL does not matter.\n   *\n   * This problem could not be observed in Firefox and Edge.\n   *\n   * #### Motivation:\n   * If using hash-based routing, the microfrontends of an application are served under the same origin and path, and routing is based on the URL hash fragment only.\n   * This Chrome issue would prevent a microfrontend from embedding other microfrontends of its application.\n   *\n   * #### Fix:\n   * If the URL does not contain a query parameter, an arbitrary query parameter is appended to the URL to force Chrome to load the content.\n   * The name and value of the query param do not matter. However, it is crucial always to use the same param to allow the browser to cache the request.\n   *\n   * The only exception to appending a query param is when replacing an outlet's content with content from the same app. Then, the browser already loaded\n   * the application. Otherwise, if appending a query param, the application would load anew.\n   *\n   * #### Alternative fix:\n   * An alternative (but partial) fix would be to initialize the iframe with a `null` source. This fix is partial because only working when setting the initial URL\n   * of the iframe and not when changing it. Also, it has the drawback of temporarily loading the main entry point of the outlet host.\n   *\n   * @param currUrl - Specifies the URL to be patched.\n   * @param prevUrl - Specifies the previous URL, if any.\n   *\n   * @see https://stackoverflow.com/q/36985731\n   */\n  protected patchUrl(currUrl: string, prevUrl?: string): string {\n    const prevURL = prevUrl && runSafe((): URL => Urls.newUrl(prevUrl)) || BLANK_URL;\n    const currURL = currUrl && runSafe((): URL => Urls.newUrl(currUrl)) || BLANK_URL;\n\n    // Do not apply the fix for top-level iframes.\n    if (window === window.top) {\n      return currUrl;\n    }\n\n    // Do not apply the fix if the URL already contains query params.\n    if (currURL.search) {\n      return currUrl;\n    }\n\n    // Do not apply the fix when navigating within the same application using hash-based routing.\n    if (prevUrl && prevURL.origin === currURL.origin && prevURL.pathname === currURL.pathname) {\n      return currUrl;\n    }\n\n    // Do not apply the fix when navigating to a blank page.\n    if (currURL.toString() === BLANK_URL.toString()) {\n      return currUrl;\n    }\n\n    // Add an arbitrary but fixed query param to the URL.\n    const patchedURL = Urls.newUrl(currUrl);\n    patchedURL.searchParams.set('_', '');\n    return patchedURL.toString();\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {Logger} from '../../logger';\n\n/**\n * Describes a user interaction with the keyboard.\n *\n * @ignore\n */\nexport class Keystroke {\n\n  /**\n   * Represents this keystroke as a string with its parts separated by a dot.\n   */\n  public readonly parts: string;\n\n  /**\n   * Flags to control keystroke handling.\n   */\n  public flags?: KeystrokeFlags;\n\n  constructor(public readonly eventType: string, key: string, modifiers?: {control?: boolean; shift?: boolean; alt?: boolean; meta?: boolean}, flags?: KeystrokeFlags) {\n    const parts = [];\n    parts.push(eventType);\n    if (modifiers) {\n      modifiers.control && parts.push('control');\n      modifiers.shift && parts.push('shift');\n      modifiers.alt && parts.push('alt');\n      modifiers.meta && parts.push('meta');\n    }\n    parts.push(key.toLowerCase());\n    this.parts = parts.join('.');\n    this.flags = flags;\n  }\n\n  public withFlags(flags: KeystrokeFlags): this {\n    this.flags = flags;\n    return this;\n  }\n\n  /**\n   * Creates a {@link Keystroke} from the given keyboard event.\n   */\n  public static fromEvent(event: KeyboardEvent): Keystroke {\n    if (!event) {\n      throw Error('[KeystrokeParseError] Cannot create the keystroke from `null` or `undefined`.');\n    }\n    return new Keystroke(event.type, escapeKeyboardEventKey(event.key), {control: event.ctrlKey, shift: event.shiftKey, alt: event.altKey, meta: event.metaKey});\n  }\n\n  /**\n   * Parses the textual representation of a keystroke into a {@link Keystroke} object.\n   *\n   * keydown.control.alt.enter{preventDefault=true}\n   * |<--1->|<----2---->|<-3->|<--------4--------->|\n   *\n   * 1: Event type\n   * 2: Modifier part(s) (optional)\n   * 3. Key as defined in https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\n   *    Two keys are an exception to the value of the {@link KeyboardEvent#key} property: dot and space.\n   * 4. flags (optional)\n   */\n  public static fromString(value: string): Keystroke {\n    if (!value) {\n      throw Error('[KeystrokeParseError] Cannot parse the keystroke from \\'null\\' or \\'undefined\\'.');\n    }\n\n    const flags = parseFlags(value);\n    if (flags !== undefined) {\n      value = value.substring(0, value.indexOf('{'));\n    }\n\n    const parts = value.split('.');\n    if (parts.length < 2) {\n      throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Requires at least the event type and keyboard key, and optionally some modifiers. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n    }\n\n    const eventType = parts[0];\n    if (eventType !== 'keydown' && eventType !== 'keyup') {\n      throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Unsupported event type. Supported event types are: 'keydown' or 'keyup'. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n    }\n\n    const key = parts[parts.length - 1];\n    if (!key || new Set().add('alt').add('shift').add('control').add('meta').has(key.toLowerCase())) {\n      throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. The keyboard key must be the last part. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n    }\n\n    const modifiers = new Set(parts.slice(1, -1));\n    const keystroke = new Keystroke(eventType, key, {control: modifiers.delete('control'), shift: modifiers.delete('shift'), alt: modifiers.delete('alt'), meta: modifiers.delete('meta')}, flags);\n    if (modifiers.size > 0) {\n      throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Illegal modifier found. Supported modifiers are: 'alt', 'shift', 'control' or 'meta'. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n    }\n\n    return keystroke;\n  }\n}\n\n/** @ignore */\nfunction escapeKeyboardEventKey(key: string): string {\n  switch (key) {\n    case '.':\n      return 'dot';\n    case ' ':\n      return 'space';\n    default:\n      return key;\n  }\n}\n\n/** @ignore */\nfunction parseFlags(keystroke: string): KeystrokeFlags | undefined {\n  const flagsStr = keystroke.match(/{(?<flagsDictionary>.*)}/)?.groups!['flagsDictionary'] ?? null;\n  if (flagsStr === null) {\n    return undefined;\n  }\n  if (flagsStr === '') {\n    return {};\n  }\n\n  return flagsStr\n    .split(';')\n    .map(flag => flag.split('='))\n    .reduce((flags, [flagName, flagValue]) => {\n      switch (flagName) {\n        case 'preventDefault':\n          return {...flags, preventDefault: flagValue === 'true'};\n        default: {\n          Beans.get(Logger).warn(`[KeystrokeParseError] Ignore unkown flag \\'${keystroke}\\'. Supported flags are: \\'preventDefault\\'.`);\n          return flags;\n        }\n      }\n    }, {} as KeystrokeFlags);\n}\n\n/**\n * Flags to control keystroke handling.\n *\n * @ignore\n */\nexport interface KeystrokeFlags {\n  /**\n   * If set to `true`, the default action of the keystroke is prevented.\n   */\n  preventDefault?: boolean;\n}\n","import {Dictionary} from '@scion/toolkit/util';\n\n/**\n * Options to control outlet navigation.\n *\n * @category Routing\n */\nexport interface NavigationOptions {\n  /**\n   * Specifies the routing target. If not specifying an outlet, then the navigation refers to the outlet of the current\n   * outlet context, if any, or to the {@link PRIMARY_OUTLET primary} outlet otherwise.\n   */\n  outlet?: string;\n  /**\n   * Specifies the base URL to resolve a relative url. If not specified, the current window location is used to resolve a relative path.\n   */\n  relativeTo?: string;\n  /**\n   * Specifies parameters which will be used for the substitution of named URL parameters.\n   */\n  params?: Map<string, any> | Dictionary;\n  /**\n   * Instructs the router to push a state to the browser's session history stack, allowing the user to use the back button to navigate back in the outlet.\n   * By default, this behavior is disabled.\n   */\n  pushStateToSessionHistoryStack?: boolean;\n}\n\n/**\n * Routing message header to control if to push a state to the browser's session history stack.\n *\n * @ignore\n */\nexport const PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER = 'ɵPUSH_STATE_TO_SESSION_HISTORY_STACK';\n\n/**\n * Represents a navigation.\n */\nexport interface Navigation {\n  /**\n   * The URL where to navigate to.\n   */\n  url: string;\n  /**\n   * If `true`, adds a state to the browser's session history stack.\n   */\n  pushStateToSessionHistoryStack: boolean;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {RouterOutletContextProvider} from '../context/router-outlet-context-provider';\nimport {runSafe} from '../../safe-runner';\nimport {distinctUntilChanged, map, pairwise, skipWhile, startWith, switchMap, takeUntil, tap} from 'rxjs/operators';\nimport {RouterOutletUrlAssigner} from './router-outlet-url-assigner';\nimport {MessageClient} from '../messaging/message-client';\nimport {Defined} from '@scion/toolkit/util';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {mapToBody, TopicMessage} from '../../messaging.model';\nimport {Keystroke} from '../keyboard-event/keystroke';\nimport {PreferredSize} from '../preferred-size/preferred-size';\nimport {Navigation, PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER} from './metadata';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/** @ignore */\nconst ELEMENT_NAME = 'sci-router-outlet';\n/** @ignore */\nconst ATTR_NAME = 'name';\n/** @ignore */\nconst ATTR_SCROLLABLE = 'scrollable';\n/** @ignore */\nconst ATTR_KEYSTROKES = 'keystrokes';\n/** @ignore */\nconst HTML_TEMPLATE = `\n  <style>\n    :host {\n      display: block;\n      overflow: hidden;\n    }\n\n    iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n      margin: 0;\n    }\n  </style>\n  <iframe src=\"about:blank\" scrolling=\"yes\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n`;\n\n/**\n * Web component that allows embedding web content using the {@link OutletRouter}. The content is displayed inside\n * an iframe to achieve the highest possible level of isolation between the microfrontends via a separate browsing context.\n *\n * To embed a microfrontend, place this custom HMTL element `<sci-router-outlet></sci-router-outlet>` in an HTML\n * template, give it a name via its `name` attribute and navigate via {@link OutletRouter} to instruct the outlet to\n * load the microfrontend.\n *\n * 1. Place the web component in an HTML template:\n * ```html\n * <sci-router-outlet name=\"detail\"></sci-router-outlet>\n * ```\n *\n * 2. Control the outlet's content:\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {outlet: 'detail'});\n * ```\n *\n * Outlets can be nested, allowing a microfrontend to embed another microfrontend. There is no limit to the number of\n * nested outlets. However, be aware that nested content is loaded cascaded, that is, only loaded once its parent content\n * finished loading.\n *\n * When adding the outlet to the DOM, the outlet displays the last URL routed for it, if any. When repeating routing for\n * an outlet, its content is replaced.\n *\n * ***\n *\n * #### Outlet Context\n * The router outlet allows associating contextual data, which then is available to embedded content at any nesting level.\n * Data must be serializable with the structured clone algorithm. Embedded content can look up contextual data using the\n * {@link ContextService}. Typically, contextual data is  used to provide microfrontends with information about their embedding\n * environment. Looking up contextual data requires the embedded microfrontend to be a registered micro application.\n *\n * Each outlet spans a new context. A context is like a `Map` with key-value entries. Contexts form a hierarchical tree structure.\n * When looking up a value and if the value is not found in the current context, the lookup is retried on the parent context,\n * repeating until either a value is found, or the root of the context tree has been reached.\n *\n * You can set contextual data as following:\n * ```ts\n *  const outlet: SciRouterOutletElement = document.querySelector('sci-router-outlet');\n *  outlet.setContextValue('key', 'value');\n * ```\n *\n * Embedded content can look up contextual data as following:\n * ```ts\n * Beans.get(ContextService).observe$('key').subscribe(value => {\n *   ...\n * });\n * ```\n *\n * #### Outlet size\n * The router outlet can adapt its size to the preferred size of its embedded content. The preferred size is set by the microfrontend embedded\n * in the router outlet, which, therefore, requires the embedded microfrontend to be connected to the platform.\n *\n * Embedded content can report its preferred size using the {@link PreferredSizeService}, causing the outlet to adapt its size.\n *\n * #### Keystroke Bubbling\n * The router outlet allows the registration of keystrokes, instructing embedded content at any nesting level to propagate corresponding keyboard events\n * to this outlet. The outlet dispatches keyboard events for registered keystrokes as synthetic keyboard events via its event dispatcher. They bubble up\n * the DOM tree like regular events. Propagated events are of the original type, meaning that when the user presses a key on the keyboard, a `keydown`\n * keyboard event is dispatched, or a `keyup` event when releasing a key, respectively. Keystroke bubbling requires the embedded microfrontend to be a\n * registered micro application.\n *\n * A keystroke is a `string` that has several parts, each separated with a dot. The first part specifies the event type (`keydown` or `keyup`), followed\n * by optional modifier part(s) (`alt`, `shift`, `control`, `meta`, or a combination thereof) and with the keyboard key as the last part. The key is a\n * case-insensitive value of the `KeyboardEvent.key` property. Two keys are an exception to the value of the `KeyboardEvent.key` property: `dot` and `space`.\n * For a complete list of valid key values, see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\n *\n * You can register keystrokes via the `keystrokes` attribute in the HTML template, or via the `keystrokes` property on the DOM\n * element. If setting keystrokes via the HTML template, multiple keystrokes are separated by a comma.\n *\n * If you want to prevent the default action of a keystroke, add the `preventDefault` flag. If not specifying the flag, the default action won't be prevented.\n *\n * HTML template:\n * ```html\n * <sci-router-outlet keystrokes=\"keydown.control.alt.enter{preventDefault=true},keydown.escape,keydown.control.space\"></sci-router-outlet>\n * ```\n *\n * Alternatively, you can register keystrokes on the DOM element as shown below.\n *\n * TypeScript:\n * ```ts\n *  const outlet: SciRouterOutletElement = document.querySelector('sci-router-outlet');\n *  outlet.keystrokes = [\n *      'keydown.control.alt.enter{preventDefault=true}',\n *      'keydown.escape',\n *      'keydown.control.space'\n *  ];\n * ```\n *\n * #### Scrollable Content\n * By default, page scrolling is enabled for the embedded content, displaying a scrollbar when it overflows. If disabled, overflowing content is clipped,\n * unless the embedded content uses a viewport, or reports its preferred size to the outlet.\n *\n * The below code snippet illustrates how to disable page scrolling for the embedded content.\n * ```html\n * <sci-router-outlet scrollable=\"false\"></sci-router-outlet>\n * ```\n *\n * #### Router Outlet Events\n *\n * The router outlet emits the following events as custom DOM events. You can attach an event listener declaratively in the HTML template using the `onevent`\n * handler syntax, or programmatically using the `addEventListener` method.\n *\n * - `activate`\n *   The `activate` custom DOM event is fired when a microfrontend is mounted. It contains the URL of the mounted microfrontend in its `details` property as `string`\n *   value. The microfrontend may not be fully loaded yet.\n * - `deactivate`\n *   The `deactivate` custom DOM event is fired when a microfrontend is about to be unmounted. It contains the URL of the unmounted microfrontend in its `details`\n *   property as `string` value.\n * - `focuswithin`\n *   The `focuswithin` custom DOM event is fired when the microfrontend loaded into the outlet, or any of its child microfrontends, has gained or lost focus.\n *   It contains the current focus-within state in its `details` property as a `boolean` value: `true` if focus was gained, or `false` if focus was lost.\n *   The event does not bubble up through the DOM. After gaining focus, the event is not triggered again until embedded content loses focus completely, i.e.,\n *   when focus does not remain in the embedded content at any nesting level. This event behaves like the `:focus-within` CSS pseudo-class but operates across iframe\n *   boundaries. For example, it can be useful when implementing overlays that close upon focus loss.\n *\n *   Note that SCION can only monitor microfrontends of registered micro apps that are connected to the platform.\n *\n * Usage:\n *\n * ```html\n * <sci-router-outlet onfocuswithin=\"onFocusWithin()\"></sci-router-outlet>\n * ````\n *\n * For an Angular application, it would look as follows:\n * ```html\n * <sci-router-outlet (focuswithin)=\"onFocusWithin($event)\"></sci-router-outlet>\n * ````\n *\n * #### Web component\n * The outlet is registered as a custom element in the browser's custom element registry as defined by the Web Components standard.\n * See https://developer.mozilla.org/en-US/docs/Web/Web_Components for more information.\n *\n * #### Miscellaneous\n * If no content is routed for display in the router outlet, the CSS class `sci-empty` is added to the outlet. An outlet will not display content if\n * either there has not yet been any navigation for the outlet or the outlet content has been cleared.\n *\n * @see {@link OutletRouter}\n * @see {@link PreferredSizeService}\n * @see {@link ContextService}\n *\n * @category Routing\n */\nexport class SciRouterOutletElement extends HTMLElement {\n\n  private _shadowRoot: ShadowRoot;\n  private _disconnect$ = new Subject<void>();\n\n  private _uid = UUID.randomUUID();\n  private _iframe: HTMLIFrameElement;\n  private _outletName$: BehaviorSubject<string>;\n  private _contextProvider: RouterOutletContextProvider;\n  private _empty$ = new BehaviorSubject<boolean>(true);\n\n  /**\n   * Emits whether or not content is routed for display in this router outlet.\n   * Upon subscription, the Observable emits the current empty state, and then continuously emits when it changes. It never completes.\n   *\n   * An outlet does not display content if no navigation has taken place yet, or if the outlet content has been cleared.\n   */\n  public readonly empty$: Observable<boolean>;\n\n  constructor() {\n    super();\n    this._outletName$ = new BehaviorSubject<string>(PRIMARY_OUTLET);\n    this._shadowRoot = this.attachShadow({mode: 'open'});\n    this._shadowRoot.innerHTML = HTML_TEMPLATE.trim();\n    this._iframe = this._shadowRoot.querySelector('iframe')!;\n    this._contextProvider = new RouterOutletContextProvider(this._iframe);\n    this.empty$ = this._empty$.pipe(distinctUntilChanged());\n  }\n\n  /**\n   * Sets the name of this outlet.\n   *\n   * By giving the outlet a name, you can reference the outlet when navigating. The name is optional;\n   * if not set, it defaults to {@link PRIMARY_OUTLET primary}\n   */\n  public set name(name: string | undefined) {\n    if (name) {\n      this.setAttribute(ATTR_NAME, name);\n    }\n    else {\n      this.removeAttribute(ATTR_NAME);\n    }\n  }\n\n  /**\n   * Returns the name of this outlet.\n   */\n  public get name(): string | undefined {\n    return this.getAttribute(ATTR_NAME) ?? undefined;\n  }\n\n  /**\n   * Specifies whether to enable or disable native page scrolling in the embedded document.\n   *\n   * By default, page scrolling is enabled for the embedded content, displaying a scrollbar when it overflows.\n   * If disabled, overflowing content is clipped, unless the embedded content uses a viewport, or reports\n   * its preferred size to the outlet.\n   */\n  public set scrollable(scrollable: boolean) {\n    if (scrollable) {\n      this.setAttribute(ATTR_SCROLLABLE, 'true');\n    }\n    else {\n      this.removeAttribute(ATTR_SCROLLABLE);\n    }\n  }\n\n  /**\n   * Returns whether the embedded document is natively page scrollable.\n   */\n  public get scrollable(): boolean {\n    return this.getAttribute(ATTR_SCROLLABLE) === 'true';\n  }\n\n  /**\n   * Instructs embedded content at any nesting level to propagate keyboard events to this outlet. The outlet dispatches keyboard events for registered\n   * keystrokes as synthetic keyboard events via its event dispatcher. They bubble up the DOM tree like regular events. Propagated events are of the\n   * original type, meaning that when the user presses a key on the keyboard, a `keydown` keyboard event is dispatched, or a `keyup` event when releasing\n   * a key, respectively.\n   *\n   * @param keystrokes - A keystroke is specified as a string that has several parts, each separated with a dot. The first part specifies the event type\n   *                   (`keydown` or `keyup`), followed by optional modifier part(s) (`alt`, `shift`, `control`, `meta`, or a combination thereof) and\n   *                   with the keyboard key as the last part. The key is a case-insensitive value of the `KeyboardEvent#key` property. For a complete\n   *                   list of valid key values, see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values. Two keys are an\n   *                   exception to the value of the `KeyboardEvent#key` property: `dot` and `space`.\n   *                   <br>\n   *                   To prevent the default action of a keystroke, the `preventDefault` flag can be added.\n   *                   <br>\n   *                   Examples: `keydown.control.z{preventDefault=true}`, `keydown.escape`, `keyup.enter`, `keydown.control.alt.enter`, `keydown.control.space`.\n   */\n  public set keystrokes(keystrokes: string[]) {\n    if (keystrokes && keystrokes.length) {\n      this.setAttribute(ATTR_KEYSTROKES, KeystrokesAttributeUtil.join(keystrokes));\n    }\n    else {\n      this.removeAttribute(ATTR_KEYSTROKES);\n    }\n  }\n\n  /**\n   * Returns the keystrokes which to bubble across the iframe boundaries.\n   */\n  public get keystrokes(): string[] {\n    return KeystrokesAttributeUtil.split(this.getAttribute(ATTR_KEYSTROKES));\n  }\n\n  /**\n   * Makes contextual data available to embedded content. Embedded content can lookup contextual data using the {@link ContextService}.\n   * Contextual data must be serializable with the structured clone algorithm.\n   */\n  public setContextValue<T = any>(name: string, value: T): void {\n    this._contextProvider.set(name, value);\n  }\n\n  /**\n   * Removes data registered under the given key from the context.\n   *\n   * Removal does not affect parent contexts, so it is possible that a subsequent call to {@link ContextService.observe$} with the same name\n   * will return a non-null result, due to a value being stored in a parent context.\n   *\n   * @return `true` if removed the value from the outlet context; otherwise `false`.\n   */\n  public removeContextValue(name: string): boolean {\n    return this._contextProvider.remove(name);\n  }\n\n  /**\n   * Returns an Observable that emits the context of this outlet. Context values inherited from parent contexts are not returned.\n   * The Observable never completes, and emits when a context value is added to or removed from the outlet context.\n   */\n  public get contextValues$(): Observable<Map<string, any>> {\n    return this._contextProvider.entries$;\n  }\n\n  /**\n   * Resets the preferred size which may have been set by the embedded content.\n   */\n  public resetPreferredSize(): void {\n    Beans.get(MessageClient).publish(RouterOutlets.preferredSizeTopic(this._uid), null);\n  }\n\n  /**\n   * Returns the preferred size, if any, or `undefined` otherwise.\n   */\n  public get preferredSize(): PreferredSize | undefined {\n    const preferredSize: PreferredSize = {\n      minWidth: this.style.minWidth || undefined,\n      width: this.style.width || undefined,\n      maxWidth: this.style.maxWidth || undefined,\n      minHeight: this.style.minHeight || undefined,\n      height: this.style.height || undefined,\n      maxHeight: this.style.maxHeight || undefined,\n    };\n    if (Object.values(preferredSize).some(Boolean)) {\n      return preferredSize;\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the reference to the iframe of this outlet.\n   */\n  public get iframe(): HTMLIFrameElement {\n    return this._iframe;\n  }\n\n  private installOutletContext(): void {\n    this._outletName$\n      .pipe(takeUntil(this._disconnect$))\n      .subscribe((name: string) => {\n        const outletContext: OutletContext = {name: name, uid: this._uid};\n        this.setContextValue(OUTLET_CONTEXT, outletContext);\n      });\n  }\n\n  private installOutletUrlListener(): void {\n    this._outletName$\n      .pipe(\n        switchMap(outlet => outletNavigate$(outlet).pipe(startWith(null! as Navigation))), // start with a `null` navigation in case no navigation took place yet\n        tap(navigation => this._empty$.next(!navigation || navigation.url === 'about:blank')),\n        distinctUntilChanged((url1, url2) => url1 === url2, navigation => navigation?.url),\n        pairwise(),\n        takeUntil(this._disconnect$),\n      )\n      .subscribe(([prevNavigation, currNavigation]: [Navigation, Navigation]) => runSafe(() => {\n        // Emit a page deactivate event, unless not having a previous navigation\n        prevNavigation && this.dispatchEvent(new CustomEvent('deactivate', {detail: prevNavigation.url}));\n        // Change the outlet URL\n        Beans.get(RouterOutletUrlAssigner).assign(this._iframe, currNavigation || {url: 'about:blank', pushStateToSessionHistoryStack: false}, prevNavigation);\n        // Emit a page activate event, unless not having a current navigation\n        currNavigation && this.dispatchEvent(new CustomEvent('activate', {detail: currNavigation.url}));\n      }));\n  }\n\n  private installPreferredSizeListener(): void {\n    Beans.get(MessageClient).observe$<PreferredSize>(RouterOutlets.preferredSizeTopic(this._uid))\n      .pipe(\n        mapToBody(),\n        takeUntil(this._disconnect$),\n      )\n      .subscribe((preferredSize: PreferredSize | undefined) => {\n        setStyle(this, {\n          'min-width': preferredSize?.minWidth ?? null,\n          'width': preferredSize?.width ?? null,\n          'max-width': preferredSize?.maxWidth ?? null,\n          'min-height': preferredSize?.minHeight ?? null,\n          'height': preferredSize?.height ?? null,\n          'max-height': preferredSize?.maxHeight ?? null,\n        });\n      });\n  }\n\n  /**\n   * Dispatches synthetic keyboard events that bubble up the DOM like regular events.\n   * Note that synthetic events have the `isTrusted` flag set to `false`, preventing them of triggering default actions.\n   *\n   * Therefore, if default actions should be prevented, it has to be done where the original event is listened to.\n   * @see KeyboardEventDispatcher\n   *\n   * For more information about trusted events\n   * @see https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events\n   * @see https://www.chromestatus.com/features#istrusted\n   *\n   * @internal\n   */\n  private installKeyboardEventDispatcher(): void {\n    Beans.get(MessageClient).observe$<KeyboardEventInit>(RouterOutlets.keyboardEventTopic(this._uid, ':eventType'))\n      .pipe(takeUntil(this._disconnect$))\n      .subscribe((event: TopicMessage<KeyboardEventInit>) => {\n        const type = event.params!.get('eventType')!;\n        this.dispatchEvent(new KeyboardEvent(type, event.body));\n      });\n  }\n\n  private installFocusWithinEventDispatcher(): void {\n    Beans.get(MessageClient).observe$<boolean>(RouterOutlets.focusWithinOutletTopic(this._uid))\n      .pipe(\n        mapToBody(),\n        skipWhile(focusWithin => focusWithin === false), // wait until first receiving the focus, otherwise, it would emit immediately.\n        takeUntil(this._disconnect$),\n      )\n      .subscribe((focusWithin: boolean) => {\n        this.dispatchEvent(new CustomEvent('focuswithin', {\n          detail: focusWithin,\n          bubbles: false,\n          cancelable: false,\n        }));\n      });\n  }\n\n  private installHostElementDecorator(): void {\n    this._empty$\n      .pipe(takeUntil(this._disconnect$))\n      .subscribe((empty: boolean) => {\n        if (empty) {\n          this._shadowRoot.host.classList.add('sci-empty');\n        }\n        else {\n          this._shadowRoot.host.classList.remove('sci-empty');\n        }\n      });\n  }\n\n  /**\n   * Lifecycle callback of the 'Custom element' Web Component standard.\n   *\n   * Invoked each time the custom element is appended into a document-connected element.\n   * This will happen each time the node is moved, and may happen before the element's contents have been fully parsed.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n   * @internal\n   */\n  public connectedCallback(): void {\n    this.installOutletUrlListener();\n    this.installOutletContext();\n    this.installPreferredSizeListener();\n    this.installFocusWithinEventDispatcher();\n    this.installKeyboardEventDispatcher();\n    this.installHostElementDecorator();\n    this._contextProvider.onOutletMount();\n  }\n\n  /**\n   * Lifecycle callback of the 'Custom element' Web Component standard.\n   *\n   * Invoked each time the custom element is disconnected from the document's DOM.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n   * @internal\n   */\n  public disconnectedCallback(): void {\n    this._disconnect$.next();\n    this._contextProvider.onOutletUnmount();\n  }\n\n  /**\n   * Lifecycle callback of the 'Custom element' Web Component standard.\n   *\n   * Specifies the attributes which to observe in {@link attributeChangedCallback} method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n   * @internal\n   */\n  public static observedAttributes = [ATTR_NAME, ATTR_SCROLLABLE, ATTR_KEYSTROKES]; // eslint-disable-line @typescript-eslint/member-ordering\n\n  /**\n   * Lifecycle callback of the 'Custom element' Web Component standard.\n   *\n   * Invoked each time one of the custom element's attributes is added, removed, or changed.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n   * @internal\n   */\n  public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\n    switch (name) {\n      case ATTR_NAME: {\n        this._outletName$.next(newValue || PRIMARY_OUTLET);\n        break;\n      }\n      case ATTR_SCROLLABLE: {\n        this._iframe.setAttribute('scrolling', coerceBooleanProperty(newValue) ? 'yes' : 'no');\n        break;\n      }\n      case ATTR_KEYSTROKES: {\n        KeystrokesAttributeUtil.split(oldValue).forEach(keystroke => this.removeContextValue(KEYSTROKE_CONTEXT_NAME_PREFIX + Keystroke.fromString(keystroke).parts));\n        KeystrokesAttributeUtil.split(newValue).forEach(keystrokeStr => {\n          const keystroke = Keystroke.fromString(keystrokeStr);\n          this.setContextValue(KEYSTROKE_CONTEXT_NAME_PREFIX + keystroke.parts, keystroke.flags);\n        });\n        break;\n      }\n    }\n  }\n\n  /**\n   * Defines this outlet as custom element in the browser custom element registry; has no effect if the element was already defined.\n   *\n   * @return A Promise that resolves once this custom element is defined.\n   * @internal\n   */\n  public static define(): Promise<void> {\n    if (customElements.get(ELEMENT_NAME)) {\n      return Promise.resolve();\n    }\n    else {\n      customElements.define(ELEMENT_NAME, SciRouterOutletElement);\n      return customElements.whenDefined(ELEMENT_NAME).then(() => Promise.resolve());\n    }\n  }\n}\n\n/**\n * Information about the outlet which embeds a microfrontend.\n *\n * This object can be obtained from the {@link ContextService} using the name {@link OUTLET_CONTEXT}.\n *\n * ```ts\n * Beans.get(ContextService).observe$(OUTLET_CONTEXT).subscribe((outletContext: OutletContext) => {\n *   ...\n * });\n * ```\n *\n * @see {@link OUTLET_CONTEXT}\n * @see {@link ContextService}\n * @category Routing\n */\nexport interface OutletContext {\n  name: string;\n  uid: string;\n}\n\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n *\n * @ignore\n */\nfunction coerceBooleanProperty(value: any): boolean {\n  return value !== null && value !== undefined && `${value}` !== 'false';\n}\n\n/**\n * Key for obtaining the current outlet context using {@link ContextService}.\n *\n * @see {@link OutletContext}\n * @see {@link ContextService}\n */\nexport const OUTLET_CONTEXT = 'ɵOUTLET';\n\n/**\n * Default name for an outlet if no explicit name is specified.\n */\nexport const PRIMARY_OUTLET = 'primary';\n\n/**\n * Defines constants for {@link SciRouterOutletElement} and {@link OutletRouter}.\n *\n * @category Routing\n */\nexport namespace RouterOutlets {\n\n  /**\n   * Computes the topic via which the URL for an outlet is exchanged as retained message.\n   *\n   * @internal\n   */\n  export function urlTopic(outletName: string): string {\n    return `sci-router-outlets/${outletName}/url`;\n  }\n\n  /**\n   * Computes the topic where to post keyboard events to be dispatched.\n   *\n   * @internal\n   */\n  export function keyboardEventTopic(outletUid: string, eventType: string): string {\n    return `sci-router-outlets/${outletUid}/keyboard-events/${eventType}`;\n  }\n\n  /**\n   * Computes the topic to which the preferred outlet size can be published to.\n   *\n   * @internal\n   */\n  export function preferredSizeTopic(outletUid: string): string {\n    return `sci-router-outlets/${outletUid}/preferred-size`;\n  }\n\n  /**\n   * Computes the topic to which the focus-within event can be published to.\n   *\n   * @internal\n   */\n  export function focusWithinOutletTopic(outletUid: string): string {\n    return `sci-router-outlets/${outletUid}/focus-within`;\n  }\n}\n\n/**\n * @ignore\n */\nnamespace KeystrokesAttributeUtil {\n\n  const delimiter = ',';\n\n  export function split(attributeValue: string | null): string[] {\n    return attributeValue ? attributeValue.split(delimiter) : [];\n  }\n\n  export function join(keystrokes: string[]): string {\n    return keystrokes.join(delimiter);\n  }\n}\n\n/**\n * Keystroke bindings are prefixed with `keystroke:` when registered in the outlet context.\n * @internal\n */\nexport const KEYSTROKE_CONTEXT_NAME_PREFIX = 'keystroke:';\n\n/**\n * Emits when a navigation for the given outlet occurs.\n * @ignore\n */\nfunction outletNavigate$(outlet: string): Observable<Navigation> {\n  const outletNavigationTopic = RouterOutlets.urlTopic(outlet);\n  return Beans.get(MessageClient).observe$<string>(outletNavigationTopic)\n    .pipe(map((navigateMessage: TopicMessage<string>): Navigation => {\n      return {\n        url: navigateMessage.body || 'about:blank',\n        pushStateToSessionHistoryStack: Defined.orElse(navigateMessage.headers.get(PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER), false),\n      };\n    }));\n}\n\n/**\n * Applies the given style(s) to the given element.\n *\n * Specify styles to be modified by passing a dictionary containing CSS property names (hyphen case).\n * To remove a style, set its value to `null`.\n *\n * @ignore\n */\nfunction setStyle(element: HTMLElement, style: {[style: string]: any | null}): void {\n  Object.keys(style).forEach(key => element.style.setProperty(key, style[key]));\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {concat, firstValueFrom, NEVER, Observable, Observer, of, Subject, switchMap, TeardownLogic} from 'rxjs';\nimport {filter, first, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {MessageClient} from '../messaging/message-client';\nimport {mapToBody, MessageHeaders, ResponseStatusCodes} from '../../messaging.model';\nimport {ContextLookupOptions, Contexts} from './context.model';\nimport {IS_PLATFORM_HOST} from '../../platform.model';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\n\n/**\n * Allows looking up contextual data set on a {@link SciRouterOutletElement `<sci-router-outlet>`} at any parent level.\n *\n * The platform allows associating contextual data with an outlet, which then is available in embedded content using {@link ContextService}.\n * Contextual data must be serializable with the structured clone algorithm.\n *\n * Each outlet spans a new context. A context is similar to a `Map`, but is linked to its parent outlet context, if any, thus forming a hierarchical tree structure.\n * When looking up a value and if the value is not found in the outlet context, the lookup is retried on the parent context, repeating until either a value\n * is found or the root of the context tree has been reached.\n *\n * The platform sets the following context values by default:\n *\n * | Key | Value type | Description |\n * |-----|------------|-------------|\n * | {@link OUTLET_CONTEXT ɵOUTLET} | {@link OutletContext} | Information about the outlet which embeds the microfrontend. |\n * | {@link ACTIVATION_CONTEXT ɵACTIVATION_CONTEXT} | {@link ActivationContext} | Information about the activation context if loaded by an activator. See {@link Activator} for more information about activators. |\n *\n *\n * @category Context\n */\nexport class ContextService implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _contextTreeChange$ = new Subject<Contexts.ContextTreeChangeEvent>();\n  private _whenContextTreeChangeListenerInstalled: Promise<void>;\n\n  constructor() {\n    this._whenContextTreeChangeListenerInstalled = this.installContextTreeChangeListener(changeEvent => this._contextTreeChange$.next(changeEvent));\n  }\n\n  /**\n   * Observes the context value associated with the given name.\n   *\n   * The Observable emits the most specific value, i.e., the value of the closest context that has a value associated with that name.\n   * To collect all values in the context hierarchy associated with that name, set {@link ContextLookupOptions#collect} to `true`.\n   *\n   * If not finding a value associated with the given name in the current context, the lookup is retried on the parent context, repeating\n   * until either a value is found or the root of the context tree has been reached. If not finding a value in any context, the Observable\n   * emits `null`.\n   *\n   * @param  name - The name of the context value to observe.\n   * @param  options - Instructs how to look up the context value.\n   * @return An Observable that emits the value associated with the given name, or `null` if not finding a value.\n   *         Upon subscription, the Observable emits the currently associated value, and then continuously when it changes, at any level\n   *         in the context tree. It never completes.\n   */\n  public observe$<T>(name: string, options?: ContextLookupOptions & {collect: false}): Observable<T | null>;\n  /**\n   * Observes the context values associated with the given name.\n   *\n   * The Observable emits all associated values in the context tree as array in context-descending order,\n   * i.e., more specific context values precede others, in other words, values of child contexts precede values of parent contexts.\n   * If not finding a value in any context, the Observable emits an empty array.\n   *\n   * To only obtain the most specific value, i.e., the value of the closest context that has a value associated with that name,\n   * set {@link ContextLookupOptions#collect} to `false`.\n   *\n   * @param  name - The name of the context values to observe.\n   * @param  options - Instructs how to look up context values.\n   * @return An Observable that emits the values associated with the given name, or an empty array if not finding a value.\n   *         Upon subscription, the Observable emits currently associated values, and then continuously when they change.\n   *         It never completes. Collected values are emitted as array in context-descending order, i.e., more specific\n   *         context values precede others, in other words, values of child contexts precede values of parent contexts.\n   */\n  public observe$<T>(name: string, options: ContextLookupOptions & {collect: true}): Observable<T[]>;\n\n  public observe$<T>(name: string, options?: ContextLookupOptions): Observable<T | T[] | null>;\n  public observe$<T>(name: string, options?: ContextLookupOptions): Observable<T | T[] | null> {\n    if (Beans.get(IS_PLATFORM_HOST)) {\n      return concat(of(options?.collect ? [] : null), NEVER);\n    }\n\n    return this._contextTreeChange$\n      .pipe(\n        filter(event => event.name === name),\n        startWith(undefined as void),\n        switchMap(() => this.lookupContextValue$<T>(name, options)),\n      );\n  }\n\n  /**\n   * Looks up the context value associated with the given name.\n   *\n   * The Promise resolves to the most specific value, i.e., the value of the closest context that has a value associated with that name.\n   * To collect all values in the context hierarchy associated with that name, set {@link ContextLookupOptions#collect} to `true`.\n   *\n   * If not finding a value associated with the given name in the current context, the lookup is retried on the parent context, repeating\n   * until either a value is found or the root of the context tree has been reached. If not finding a value in any context, the returned\n   * Promise resolves to `null`.\n   *\n   * @param  name - The name of the context value to look up.\n   * @param  options - Instructs how to look up the context value.\n   * @return A Promise that resolves to the value associated with the given name, or `null` if not finding a value.\n   */\n  public lookup<T>(name: string, options?: ContextLookupOptions & {collect: false}): Promise<T | null>;\n  /**\n   * Looks up context values associated with the given name.\n   *\n   * The Promise resolves to all associated values in the context tree as array in context-descending order,\n   * i.e., more specific context values precede others, in other words, values of child contexts precede values of parent contexts.\n   * If not finding a value in any context, the Promise resolves to an empty array.\n   *\n   * To only obtain the most specific value, i.e., the value of the closest context that has a value associated with that name,\n   * set {@link ContextLookupOptions#collect} to `false`.\n   *\n   * @param  name - The name of the context values to look up.\n   * @param  options - Instructs how to look up context values.\n   * @return A Promise that resolves to the values associated with the given name, or an empty array if not finding a value.\n   *         Collected values are sorted in context-descending order, i.e., more specific context values precede others, in\n   *         other words, values of child contexts precede values of parent contexts.\n   */\n  public lookup<T>(name: string, options: ContextLookupOptions & {collect: true}): Promise<T[]>;\n\n  public lookup<T>(name: string, options?: ContextLookupOptions): Promise<T | T[] | null> {\n    return firstValueFrom(this.observe$<T>(name, options));\n  }\n\n  /**\n   * Checks if a context value is associated with the given name at any level in the context tree.\n   *\n   * @param name - The name of the context value to check if present.\n   * @return A Promise that resolves to `true` if a context value is associated with the given name, or that resolves to `false` otherwise.\n   */\n  public isPresent(name: string): Promise<boolean> {\n    return this.lookup(name).then(value => value !== null);\n  }\n\n  /**\n   * Observes the names of context values registered at any level in the context tree.\n   *\n   * @return An Observable that emits the names of context values registered at any level in the context tree.\n   *         Upon subscription, it emits the names of context values currently registered, and then it emits whenever\n   *         some value is registered or unregistered from a context. The Observable never completes.\n   */\n  public names$(): Observable<Set<string>> {\n    if (Beans.get(IS_PLATFORM_HOST)) {\n      return concat(of(new Set<string>()), NEVER);\n    }\n\n    return this._contextTreeChange$\n      .pipe(\n        startWith(undefined as void),\n        switchMap(() => this.lookupContextNames$()),\n      );\n  }\n\n  /**\n   * Looks up the context tree for a value associated with the given name.\n   *\n   * @param  name - The name of the value to return.\n   * @param  options - Options to control context lookup.\n   * @return An Observable that emits the context value associated with the given key and then completes.\n   *         When the requested value is not found in a context, the Observable emits `null` and then completes.\n   */\n  private lookupContextValue$<T>(name: string, options?: ContextLookupOptions): Observable<T | T[] | null> {\n    return new Observable((observer: Observer<T | T[] | null>): TeardownLogic => {\n      const replyTo = UUID.randomUUID();\n      const unsubscribe$ = new Subject<void>();\n      const contextValueLookupRequest = Contexts.newContextValueLookupRequest(name, replyTo, options);\n\n      // Wait until the reply is received.\n      Beans.get(MessageClient).observe$<T | T[] | null | undefined>(replyTo)\n        .pipe(\n          take(1),\n          map(reply => reply.headers.get(MessageHeaders.Status) === ResponseStatusCodes.OK ? (reply.body ?? null) : null),\n          takeUntil(unsubscribe$),\n        )\n        .subscribe(observer);\n\n      // Send the request.\n      Promise.all([whenSubscribedToReplyTopic(replyTo), this._whenContextTreeChangeListenerInstalled])\n        .then(() => window.parent.postMessage(contextValueLookupRequest, '*'))\n        .catch(error => observer.error(error));\n\n      return (): void => unsubscribe$.next();\n    });\n  }\n\n  /**\n   * Looks up the context names of all values registered in the current and parent contexts.\n   *\n   * @return An Observable that emits the names of all values registered in the current and parent contexts and then completes.\n   */\n  private lookupContextNames$(): Observable<Set<string>> {\n    return new Observable((observer: Observer<Set<string>>): TeardownLogic => {\n      const replyTo = UUID.randomUUID();\n      const unsubscribe$ = new Subject<void>();\n      const contextNamesLookupRequest = Contexts.newContextTreeNamesLookupRequest(replyTo);\n\n      // Wait until the reply is received.\n      Beans.get(MessageClient).observe$<Set<string>>(replyTo)\n        .pipe(\n          take(1),\n          map(reply => reply.headers.get(MessageHeaders.Status) === ResponseStatusCodes.OK ? reply.body! : new Set<string>()),\n          takeUntil(unsubscribe$),\n        )\n        .subscribe(observer);\n\n      // Send the request.\n      Promise.all([whenSubscribedToReplyTopic(replyTo), this._whenContextTreeChangeListenerInstalled])\n        .then(() => window.parent.postMessage(contextNamesLookupRequest, '*'))\n        .catch(error => observer.error(error));\n      return (): void => unsubscribe$.next();\n    });\n  }\n\n  /**\n   * Installs a listener to get notified about context changes at any level in the context tree.\n   *\n   * @return A Promise that resolves when installed the listener.\n   */\n  private installContextTreeChangeListener(listener: (changeEvent: Contexts.ContextTreeChangeEvent) => void): Promise<void> {\n    const replyTo = UUID.randomUUID();\n    const contextObserveRequest = Contexts.newContextTreeObserveRequest(replyTo);\n\n    return new Promise<void>((resolve, reject) => {\n      // Receive change notifications.\n      Beans.get(MessageClient).observe$<Contexts.ContextTreeChangeEvent | Contexts.RootContextSubscribeEventType>(replyTo)\n        .pipe(\n          mapToBody(),\n          takeUntil(this._destroy$),\n        )\n        .subscribe({\n          next: (event: Contexts.ContextTreeChangeEvent | Contexts.RootContextSubscribeEventType) => {\n            if (event === Contexts.RootContextSubscribeEvent) {\n              resolve(); // resolve the promise as subscribed to all parent contexts.\n            }\n            else {\n              listener(event);\n            }\n          },\n          error: reject,\n        });\n\n      // Send the observe request.\n      whenSubscribedToReplyTopic(replyTo)\n        .then(() => window.parent.postMessage(contextObserveRequest, '*'))\n        .catch(error => reject(error));\n    });\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Resolves when subscribed to the given reply topic.\n *\n * @ignore\n */\nfunction whenSubscribedToReplyTopic(topic: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    Beans.get(MessageClient).subscriberCount$(topic)\n      .pipe(first(count => count === 1))\n      .subscribe({\n        error: reject,\n        complete: resolve,\n      });\n  });\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Urls} from '../../url.util';\n\n/**\n * Used by {@link OutletRouter} to convert relative paths to absolute paths.\n *\n * Replace this bean to use a different relative path resolution strategy.\n *\n * @see {@link OutletRouter}\n * @category Routing\n */\nexport class RelativePathResolver {\n\n  /**\n   * Converts the given relative path into a navigable URL with relative navigational symbols like `/`, `./`, or `../` resolved.\n   *\n   * @param  path - Specifies the path which to convert into an absolute path.\n   * @param  options - Specifies to which url the given path is relative to.\n   * @return the absolute path.\n   */\n  public resolve(path: string, options: {relativeTo: string}): string {\n    const relativeTo = Urls.newUrl(options.relativeTo);\n\n    // Check if hash-based routing is used\n    if (relativeTo.hash?.startsWith('#/')) {\n      // Apply navigational symbols only to the path of the hash-based route, and not to the context path before the hash, if any.\n      // For that reason, we temporarily remove the context path when constructing the URL.\n      const {pathname, search, hash} = Urls.newUrl(path, `${relativeTo.origin}${relativeTo.hash.substring(1)}`);\n      return relativeTo.origin + relativeTo.pathname + '#' + pathname + search + hash;\n    }\n    else {\n      return Urls.newUrl(path, options.relativeTo).toString();\n    }\n  }\n}\n\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MessageClient} from '../messaging/message-client';\nimport {OUTLET_CONTEXT, OutletContext, PRIMARY_OUTLET, RouterOutlets} from './router-outlet.element';\nimport {ContextService} from '../context/context-service';\nimport {Urls} from '../../url.util';\nimport {RelativePathResolver} from './relative-path-resolver';\nimport {Maps} from '@scion/toolkit/util';\nimport {NavigationOptions, PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER} from './metadata';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Allows navigating to a site in a {@link SciRouterOutletElement `<sci-router-outlet>`} element.\n *\n * In SCION Microfrontend Platform, routing means instructing a `<sci-router-outlet>` to display the content of a URL. Routing works\n * across microfrontend and micro application boundaries, allowing the URL of an outlet to be set from anywhere in the application. The\n * web content displayed in an outlet can be any HTML document that has not set the HTTP header 'X-Frame-Options'. Routing is sometimes\n * also referred to as navigating.\n *\n * The router supports multiple outlets in the same application to co-exist. By giving an outlet a name, you can reference it as the\n * routing target. If not naming an outlet, its name defaults to {@link PRIMARY_OUTLET primary}. If multiple outlets have the same name,\n * they all show the same content. If routing in the context of a router outlet, that is inside a microfrontend, and not specifying a\n * routing target, the content of the current outlet is replaced.\n *\n * An outlet does not necessarily have to exist at the time of routing. When adding the outlet to the DOM, the outlet displays the last URL\n * routed for it. When repeating routing for an outlet, its content is replaced.\n *\n * The following code snippet illustrates how to instruct the router outlet named aside to show the content of https://micro-frontends.org.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {outlet: 'aside'});\n * ```\n * The outlet is defined as follows.\n *\n *  ```html\n * <sci-router-outlet name=\"aside\"></sci-router-outlet>\n * ```\n *\n * #### Relative Navigation\n * The router allows to use both absolute and relative paths. A relative path begins with a navigational symbol `/`, `./`, or `../`. By default,\n * relative navigation is relative to the current window location of the navigating application, unless specifying a base path for the navigation.\n *\n * ```ts\n * // Navigation relative to the root path segment\n * Beans.get(OutletRouter).navigate('/products/:id', {outlet: PRIMARY_OUTLET});\n *\n * // Navigation relative to the parent path segment\n * Beans.get(OutletRouter).navigate('../products/:id', {outlet: PRIMARY_OUTLET});\n * ```\n *\n * #### Persistent Navigation\n * Persistent navigation refers to the mechanism for restoring the navigational state after an application reload.\n *\n * The router does not provide an implementation for persistent navigation out-of-the-box, mostly because many persistence strategies are imaginable.\n * For example, the navigational state could be added to the top-level URL, stored in local storage, or persisted in the backend.\n * However, you can easily implement persistent navigation yourself. The router publishes navigations to the topic `sci-router-outlets/:outlet/url`;\n * thus, they can be captured and persisted. When starting the application, you can then replay persisted navigations using the router.\n *\n * #### Named URL Parameters\n * The URL being passed to the router can contain named parameters which the router replaces with values of the provided params object.\n * A named parameter begins with a colon (`:`) and is allowed in path segments, query parameters, matrix parameters and the fragment part,\n * e.g., `product/:id` or `product;id=:id` or `products?id=:id`.\n *\n * Parameter substitution is useful if reading the URL from a capability to display a microfrontend. You can then pass the params of the intent as the params\n * object to replace named path segments with actual values from the intent params.\n *\n * See chapter https://scion-microfrontend-platform-developer-guide.vercel.app/#chapter:activator:routing-in-the-activator for an example.\n *\n * #### Unloading Outlet Content\n * To unload an outlet’s content, use null as the URL when routing, as follows:\n *\n * ```ts\n * Beans.get(OutletRouter).navigate(null, {outlet: 'aside'});\n * ```\n *\n * #### Browsing History and Session History\n * Routing does not add an entry to the browsing history, and, by default, not push a navigational state to the browser’s session history stack.\n *\n * You can instruct the router to add a navigational state to the browser’s session history stack, allowing the user to use the back button of the browser to\n * navigate back in an outlet.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {\n *   outlet: 'aside',\n *   pushStateToSessionHistoryStack: true,\n * });\n * ```\n *\n * @see {@link SciRouterOutletElement}\n *\n * @category Routing\n */\nexport class OutletRouter {\n\n  /**\n   * Navigates to the given URL in the given outlet. If not specifying an outlet, then the navigation refers to the outlet of the current outlet\n   * context, if any, or resolves to the {@link PRIMARY_OUTLET primary} outlet otherwise.\n   *\n   * @param  url - Specifies the URL which to display in the outlet. To clear the outlet's content, use `null` as the URL.\n   *         The URL allows the use of navigational symbols and named parameters. A named parameter begins with a colon (`:`)\n   *         and is allowed in path segments, query parameters, matrix parameters and the fragment part,\n   *         e.g., `product/:id` or `product;id=:id` or `products?id=:id`.\n   * @param  options - Controls the navigation.\n   * @return a Promise that resolves when navigated.\n   */\n  public async navigate(url: string | null, options?: NavigationOptions): Promise<void> {\n    const outlet = await this.resolveOutlet(options);\n    const outletUrlTopic = RouterOutlets.urlTopic(outlet);\n    const navigationUrl = this.computeNavigationUrl(url, options);\n\n    return Beans.get(MessageClient).publish(outletUrlTopic, navigationUrl, {\n      retain: true,\n      headers: new Map<string, any>().set(PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER, options?.pushStateToSessionHistoryStack ?? false),\n    });\n  }\n\n  private computeNavigationUrl(url: string | null | undefined, options?: NavigationOptions): string {\n    if (url === undefined || url === null) { // empty path is a valid url\n      return 'about:blank';\n    }\n\n    const params = Maps.coerce(options?.params);\n    if (params.size) {\n      url = this.substituteNamedParameters(url, params);\n    }\n    if (Urls.isAbsoluteUrl(url)) {\n      return url;\n    }\n    else {\n      const relativeTo = options?.relativeTo ?? window.location.href;\n      return Beans.get(RelativePathResolver).resolve(url, {relativeTo});\n    }\n  }\n\n  private async resolveOutlet(options?: NavigationOptions): Promise<string> {\n    const outlet = options?.outlet;\n    if (outlet) {\n      return outlet;\n    }\n\n    // If no outlet is specified, navigate in the current outlet, if any.\n    const outletContext = await Beans.get(ContextService).lookup<OutletContext>(OUTLET_CONTEXT);\n    if (outletContext) {\n      return outletContext.name;\n    }\n\n    // Otherwise, navigate in the primary outlet.\n    return PRIMARY_OUTLET;\n  }\n\n  /**\n   * Replaces named parameters in the given path with values contained in the given {@link Map}.\n   * Named parameters begin with a colon (`:`) and are allowed in path segments, query parameters, matrix parameters\n   * and the fragment part.\n   *\n   * Some examples about the usage of named parameters:\n   * /segment/:param1/segment/:param2 // path params\n   * /segment/segment;matrixParam1=:param1;matrixParam2=:param2 // matrix params\n   * /segment/segment?queryParam1=:param1&queryParam2=:param2 // query params\n   */\n  private substituteNamedParameters(path: string, params: Map<string, any>): string {\n    // A named parameter can be followed by another path segment (`/`), by a query param (`?` or `&`), by a matrix param (`;`)\n    // or by the fragment part (`#`).\n    return path.replace(/:([^/;&?#]+)/g, (match, $1) => params.has($1) ? params.get($1) : match);\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Observable} from 'rxjs';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {MessageClient} from '../messaging/message-client';\nimport {mapToBody} from '../../messaging.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Allows observing if the current microfrontend has received focus or contains embedded web content that has received focus.\n *\n * @category Focus\n */\nexport class FocusMonitor {\n\n  /**\n   * Observable that emits when the current microfrontend or any of its child microfrontends has gained or lost focus.\n   * The Observable does not emit while the focus remains within this microfrontend or any of its child microfrontends.\n   * Upon subscription, the Observable emits the current focus-within state, and then continuously emits when it changes.\n   * It never completes.\n   *\n   * This Observable is like the `:focus-within` CSS pseudo-class but operates across iframe boundaries.\n   * For example, it can be useful when implementing overlays that close upon focus loss.\n   *\n   * Note that this Observable emits only for microfrontends that are connected to the platform as registered micro app.\n   *\n   * See also the `onfocuswithin` event triggered by `<sci-router-outlet>` when embedded content has gained or lost focus.\n   */\n  public readonly focusWithin$: Observable<boolean> = Beans.get(MessageClient).request$<boolean>(PlatformTopics.IsFocusWithin).pipe(mapToBody());\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {fromEvent, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MessageClient} from '../messaging/message-client';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {FocusMonitor} from './focus-monitor';\nimport {OUTLET_CONTEXT, OutletContext, RouterOutlets} from '../router-outlet/router-outlet.element';\nimport {ContextService} from '../context/context-service';\n\n/**\n * Sends a 'focusin' event to the topic {@link PlatformTopics.FocusIn} when this document gains focus.\n *\n * @see FocusTracker\n * @ignore\n */\nexport class FocusInEventDispatcher implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n\n  constructor() {\n    // IMPORTANT: In Angular applications, the platform should be started outside of the Angular zone in order to avoid excessive change detection cycles\n    // of platform-internal subscriptions to global DOM events. For that reason, we subscribe to `window.focus` events in the dispatcher's constructor.\n    this.makeWindowFocusable();\n    this.dispatchDocumentFocusInEvent();\n    this.reportFocusWithinEventToParentOutlet();\n  }\n\n  /**\n   * Installs a listener for `focusin` events.\n   */\n  private dispatchDocumentFocusInEvent(): void {\n    fromEvent<FocusEvent>(window, 'focusin')\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(event => {\n        // Do not dispatch the event if the focusing occurs within this document.\n        // In this case, the related target is set, unless the focus owner is disposed.\n        if (!event.relatedTarget) {\n          Beans.get(MessageClient).publish(PlatformTopics.FocusIn, null, {retain: true}); // do not set `undefined` as payload as this would delete the retained message\n        }\n      });\n  }\n\n  /**\n   * Reports the embedding outlet when the current microfrontend or any of its child microfrontends has gained or lost focus.\n   * It does not report while the focus remains within this microfrontend or any of its child microfrontends.\n   */\n  private async reportFocusWithinEventToParentOutlet(): Promise<void> {\n    const outletContext = await Beans.get(ContextService).lookup<OutletContext>(OUTLET_CONTEXT);\n    if (!outletContext) {\n      return;\n    }\n\n    Beans.get(FocusMonitor).focusWithin$\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(focusWithin => {\n        const publishTo = RouterOutlets.focusWithinOutletTopic(outletContext.uid);\n        Beans.get(MessageClient).publish<boolean>(publishTo, focusWithin);\n      });\n  }\n\n  /**\n   * Makes this Window focusable in order to receive 'focusin' events.\n   */\n  private makeWindowFocusable(): void {\n    const body = window.document.body;\n    body.setAttribute('tabindex', '0');\n    body.style.outline = 'none';\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, Subject} from 'rxjs';\nimport {distinctUntilChanged, map, takeUntil} from 'rxjs/operators';\nimport {MessageClient, takeUntilUnsubscribe} from '../../client/messaging/message-client';\nimport {MessageHeaders, TopicMessage} from '../../messaging.model';\nimport {runSafe} from '../../safe-runner';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {ClientRegistry} from '../client-registry/client.registry';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {Client} from '../client-registry/client';\n\n/**\n * Tracks the focus across microfrontends and answers {@link PlatformTopics.IsFocusWithin} requests.\n *\n * @see FocusInEventDispatcher\n * @see FocusMonitor\n * @ignore\n */\nexport class FocusTracker implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _focusOwner$ = new BehaviorSubject<Client | undefined>(undefined);\n\n  constructor() {\n    this.monitorFocusInEvents();\n    this.replyToIsFocusWithinRequests();\n  }\n\n  /**\n   * Monitors when a client gains the focus.\n   */\n  private monitorFocusInEvents(): void {\n    Beans.get(MessageClient).observe$<void>(PlatformTopics.FocusIn)\n      .pipe(\n        map(event => event.headers.get(MessageHeaders.ClientId)),\n        distinctUntilChanged(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(clientId => runSafe(() => {\n        this._focusOwner$.next(Beans.get(ClientRegistry).getByClientId(clientId) || undefined);\n      }));\n  }\n\n  /**\n   * Replies to 'focus-within' requests.\n   */\n  private replyToIsFocusWithinRequests(): void {\n    Beans.get(MessageClient).observe$<void>(PlatformTopics.IsFocusWithin)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((request: TopicMessage<void>) => runSafe(() => {\n        const clientId = request.headers.get(MessageHeaders.ClientId);\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n\n        this._focusOwner$\n          .pipe(\n            map(focusOwner => this.isFocusWithin(clientId, focusOwner)),\n            distinctUntilChanged(),\n            takeUntilUnsubscribe(replyTo),\n            takeUntil(this._destroy$),\n          )\n          .subscribe((isFocusWithin: boolean) => { // eslint-disable-line rxjs/no-nested-subscribe\n            Beans.get(MessageClient).publish(replyTo, isFocusWithin);\n          });\n      }));\n  }\n\n  /**\n   * Tests whether the given client has received focus or contains embedded web content that has received focus.\n   */\n  private isFocusWithin(clientId: string, focusOwner: Client | undefined): boolean {\n    for (let client = focusOwner; client !== undefined; client = this.getParentClient(client)) {\n      if (client.id === clientId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private getParentClient(client: Client): Client | undefined {\n    if (client.window.parent === client.window) {\n      return undefined; // window has no parent as it is the top-level window\n    }\n    return Beans.get(ClientRegistry).getByWindow(client.window.parent);\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {fromDimension$} from '@scion/toolkit/observable';\nimport {takeUntil} from 'rxjs/operators';\nimport {filter, merge, Subject, withLatestFrom} from 'rxjs';\nimport {ContextService} from '../context/context-service';\nimport {OUTLET_CONTEXT, OutletContext, RouterOutlets} from '../router-outlet/router-outlet.element';\nimport {MessageClient} from '../messaging/message-client';\nimport {PreferredSize} from './preferred-size';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {runSafe} from '../../safe-runner';\n\n/**\n * Allows web content displayed in a {@link SciRouterOutletElement `<sci-router-outlet>`} to define its preferred size.\n *\n * The preferred size of an element is the minimum size that will allow it to display normally.\n * Setting a preferred size is useful if the outlet is displayed in a layout that aligns its items based on the items's content size.\n *\n * When setting a preferred size, the outlet containing this microfrontend will adapt its size to the reported preferred size.\n *\n * @category Preferred Size\n */\nexport class PreferredSizeService implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _fromDimensionElementChange$ = new Subject<void>();\n  private _publishPreferredSize: PreferredSizePublisher;\n\n  constructor() {\n    this._publishPreferredSize = this.createPreferredSizePublisher();\n  }\n\n  /**\n   * Sets the preferred size of this web content.\n   * The size is reported to the router outlet embedding this web content and is used as the outlet's size.\n   */\n  public setPreferredSize(preferredSize: PreferredSize): void {\n    this._publishPreferredSize(preferredSize);\n  }\n\n  /**\n   * Determines the preferred size from the given element's dimension and reports it to the router outlet embedding this web content.\n   * As the value for the preferred size, the `offset-width` and `offset-height` of the element are used, which is the total amount of space\n   * the element occupies, including the width of the visible content, scrollbars (if any), padding, and border.\n   *\n   * When the size of the element changes, the changed size is reported to the outlet, which then adaps its size accordingly.\n   * To stop the notifying of the preferred size to the outlet, pass `undefined` as the value, which also unsets the preferred size.\n   *\n   * If the element is removed from the DOM, the preferred size is reset and reporting suspended until it is attached again.\n   * If a new element is set as dimension observer, then the previous one is unsubscribed.\n   *\n   * *Prerequisites*\n   * - The element to be observed must behave as block-level box and not as inline-level box. So, if you want to observe an inline element,\n   *   set its display type to either `block` or `inline-block`.\n   * - If the element to be observed should not fill the remaining space and may change in size, we recommend taking it out of the document\n   *   element flow, i.e., position it absolutely without defining a width and height. Otherwise, once the element has reported a preferred\n   *   size, it could not shrink below that size.\n   *\n   * @param element - The element of which the preferred size is to be observed and used as the outlet's size.\n   */\n  public fromDimension(element: HTMLElement | undefined): void {\n    this._fromDimensionElementChange$.next();\n\n    if (!element) {\n      this.resetPreferredSize();\n      return;\n    }\n\n    fromDimension$(element)\n      .pipe(takeUntil(merge(this._fromDimensionElementChange$, this._destroy$)))\n      .subscribe(dimension => {\n        // If the element is removed from the DOM, the preferred size is reset and reporting suspended until it is attached again.\n        if (!document.body.contains(dimension.element)) {\n          this.resetPreferredSize();\n        }\n        else {\n          this.setPreferredSize({\n            minWidth: `${dimension.offsetWidth}px`,\n            width: `${dimension.offsetWidth}px`,\n            maxWidth: `${dimension.offsetWidth}px`,\n            minHeight: `${dimension.offsetHeight}px`,\n            height: `${dimension.offsetHeight}px`,\n            maxHeight: `${dimension.offsetHeight}px`,\n          });\n        }\n      });\n  }\n\n  /**\n   * Resets the preferred size. Has no effect if no preferred size is set.\n   */\n  public resetPreferredSize(): void {\n    this._publishPreferredSize(null);\n  }\n\n  /**\n   * Constructs a function to publish the preferred size to the outlet.\n   */\n  private createPreferredSizePublisher(): PreferredSizePublisher {\n    const publish$ = new Subject<PreferredSize | null>();\n    publish$\n      .pipe(\n        withLatestFrom(Beans.get(ContextService).observe$<OutletContext>(OUTLET_CONTEXT).pipe(filter(Boolean))),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(([preferredSize, outletContext]) => runSafe(() => {\n        const topic = RouterOutlets.preferredSizeTopic(outletContext.uid);\n        Beans.get(MessageClient).publish(topic, preferredSize);\n      }));\n\n    return preferredSize => publish$.next(preferredSize);\n  }\n\n  /** @ignore */\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\ninterface PreferredSizePublisher {\n  (preferredSize: PreferredSize | null): void;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {fromEvent, Subject} from 'rxjs';\nimport {auditTime, filter, takeUntil} from 'rxjs/operators';\nimport {MessageClient} from '../messaging/message-client';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {mapToBody} from '../../messaging.model';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\n\n/**\n * Dispatches 'mousemove' events originating from other documents as synthetic 'sci-mousemove' events on the document event bus.\n * The events are only propagated when the primary mouse button is pressed down.\n *\n * Mouse event dispatching is important when using custom scrollbars which are positioned at the iframe border. It allows the user\n * to scroll seamlessly even when the mouse cursor leaves the iframe, which is because by default, mouse events are only received\n * by the currently hovering document.\n *\n * @ignore\n */\nexport class MouseMoveEventDispatcher implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _dispatcherId = UUID.randomUUID();\n\n  constructor() {\n    // IMPORTANT: In Angular applications, the platform should be started outside of the Angular zone in order to avoid excessive change detection cycles\n    // of platform-internal subscriptions to global DOM events. For that reason, we subscribe to `document.mousemove` events in the dispatcher's constructor.\n    this.produceSynthEvents();\n    this.consumeSynthEvents();\n  }\n\n  /**\n   * Produces synth events from native 'mousemove' events and publishes them on the message bus.\n   * It allows event dispatchers in other documents to consume these events and publish them on the document's event bus.\n   */\n  private produceSynthEvents(): void {\n    fromEvent<MouseEvent>(document, 'mousemove')\n      .pipe(\n        filter(event => event.buttons === PRIMARY_MOUSE_BUTTON),\n        auditTime(20),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MouseEvent) => {\n        const options = {headers: new Map().set(DISPATCHER_ID_HEADER, this._dispatcherId)};\n        Beans.get(MessageClient).publish(MOUSEMOVE_EVENT_TOPIC, [event.screenX, event.screenY], options);\n      });\n  }\n\n  /**\n   * Consumes synth events produced by dispatchers from other documents and dispatches them on the event bus of the current document.\n   */\n  private consumeSynthEvents(): void {\n    Beans.get(MessageClient).observe$<[number, number]>(MOUSEMOVE_EVENT_TOPIC)\n      .pipe(\n        filter(msg => msg.headers.get(DISPATCHER_ID_HEADER) !== this._dispatcherId),\n        mapToBody(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(([screenX, screenY]: [number, number]) => {\n        const sciMouseEvent: any = new Event('sci-mousemove');\n        sciMouseEvent.screenX = screenX;\n        sciMouseEvent.screenY = screenY;\n        document.dispatchEvent(sciMouseEvent);\n      });\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Indicates that the primary mouse button is pressed (usually left).\n *\n * @ignore\n */\nconst PRIMARY_MOUSE_BUTTON = 1;\n/**\n * Message header to pass the dispatcher's identity.\n *\n * @ignore\n */\nconst DISPATCHER_ID_HEADER = 'ɵDISPATCHER_ID';\n/**\n * Topic to publish 'mousemove' events so that they can be consumed by dispatchers of other documents.\n *\n * @ignore\n */\nconst MOUSEMOVE_EVENT_TOPIC = 'ɵMOUSEMOVE';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {fromEvent, Subject} from 'rxjs';\nimport {filter, takeUntil} from 'rxjs/operators';\nimport {MessageClient} from '../messaging/message-client';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {mapToBody} from '../../messaging.model';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\n\n/**\n * Dispatches 'mouseup' events originating from other documents as synthetic 'sci-mouseup' events on the document event bus.\n *\n * Mouse event dispatching is important when using custom scrollbars which are positioned at the iframe border. It allows the user\n * to scroll seamlessly even when the mouse cursor leaves the iframe, which is because by default, mouse events are only received\n * by the currently hovering document.\n *\n * @ignore\n */\nexport class MouseUpEventDispatcher implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _dispatcherId = UUID.randomUUID();\n\n  constructor() {\n    // IMPORTANT: In Angular applications, the platform should be started outside of the Angular zone in order to avoid excessive change detection cycles\n    // of platform-internal subscriptions to global DOM events. For that reason, we subscribe to `document.mouseup` events in the dispatcher's constructor.\n    this.produceSynthEvents();\n    this.consumeSynthEvents();\n  }\n\n  /**\n   * Produces synth events from native 'mouseup' events and publishes them on the message bus.\n   * It allows event dispatchers in other documents to consume these events and publish them on the document's event bus.\n   */\n  private produceSynthEvents(): void {\n    fromEvent<MouseEvent>(document, 'mouseup')\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(() => {\n        const options = {headers: new Map().set(DISPATCHER_ID_HEADER, this._dispatcherId)};\n        Beans.get(MessageClient).publish(MOUSEUP_EVENT_TOPIC, undefined, options);\n      });\n  }\n\n  /**\n   * Consumes synth events produced by dispatchers from other documents and dispatches them on the event bus of the current document.\n   */\n  private consumeSynthEvents(): void {\n    Beans.get(MessageClient).observe$<void>(MOUSEUP_EVENT_TOPIC)\n      .pipe(\n        filter(msg => msg.headers.get(DISPATCHER_ID_HEADER) !== this._dispatcherId),\n        mapToBody(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        document.dispatchEvent(new Event('sci-mouseup'));\n      });\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Message header to pass the dispatcher's identity.\n *\n * @ignore\n */\nconst DISPATCHER_ID_HEADER = 'ɵDISPATCHER_ID';\n/**\n * Topic to publish 'mouseup' events so that they can be consumed by dispatchers of other documents.\n *\n * @ignore\n */\nconst MOUSEUP_EVENT_TOPIC = 'ɵMOUSEUP';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {fromEvent, merge, MonoTypeOperatorFunction, Observable, OperatorFunction, Subject, withLatestFrom} from 'rxjs';\nimport {filter, map, switchMap, takeUntil, tap} from 'rxjs/operators';\nimport {MessageClient} from '../messaging/message-client';\nimport {ContextService} from '../context/context-service';\nimport {KEYSTROKE_CONTEXT_NAME_PREFIX, OUTLET_CONTEXT, OutletContext, RouterOutlets} from '../router-outlet/router-outlet.element';\nimport {Keystroke, KeystrokeFlags} from './keystroke';\nimport {runSafe} from '../../safe-runner';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {filterArray, mapArray} from '@scion/toolkit/operators';\n\n/**\n * Propagates keyboard events for keystrokes registered in the current context or any parent contexts.\n *\n * This dispatcher listens to keyboard events for keystrokes registered in parent contexts and publishes\n * them as {@link KeyboardEventInit} events to the topic {@link RouterOutlets.keyboardEventTopic}.\n *\n * @ignore\n */\nexport class KeyboardEventDispatcher implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _keyboardEvents$ = new Subject<KeyboardEvent>();\n\n  constructor() {\n    this.installKeyboardEventListener();\n    this.installKeystrokeListener();\n  }\n\n  /**\n   * Subscribes to keyboard events on document-level and emits them on the {@link _keyboardEvents$} Observable.\n   *\n   * IMPORTANT NOTE FOR ANGULAR APPLICATIONS:\n   * Always subscribe to top-level DOM events during event dispatcher construction. Event dispatchers are eagerly constructed on platform startup.\n   * Typically, Angular applications connect to the platform outside of the Angular zone to avoid excessive change detection cycles for irrelevant DOM events.\n   */\n  private installKeyboardEventListener(): void {\n    merge(fromEvent<KeyboardEvent>(document, 'keydown'), fromEvent<KeyboardEvent>(document, 'keyup'))\n      .pipe(\n        filter(event => event.bubbles && !!event.key),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(event => this._keyboardEvents$.next(event));\n  }\n\n  private installKeystrokeListener(): void {\n    Beans.get(ContextService).names$()\n      .pipe(\n        map(contextNames => Array.from(contextNames)),\n        filterArray(contextName => contextName.startsWith(KEYSTROKE_CONTEXT_NAME_PREFIX)),\n        mapArray(keystrokeContextName => keystrokeContextName.substring(KEYSTROKE_CONTEXT_NAME_PREFIX.length)),\n        mapArray(keystroke => this.observeKeyboardEvent$(keystroke)),\n        switchMap(keyboardEvents => merge(...keyboardEvents)),\n        withLatestFrom(Beans.get(ContextService).observe$<OutletContext>(OUTLET_CONTEXT).pipe(filter(Boolean))),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(([event, outletContext]) => runSafe(() => this.onKeyboardEventToPropagate(event, outletContext.uid)));\n  }\n\n  /**\n   * Method invoked for each keyboard events to be propagated to the parent router outlet across the iframe boundary.\n   */\n  private onKeyboardEventToPropagate(event: KeyboardEvent, outletIdentity: string): void {\n    const eventInit: KeyboardEventInit = {\n      key: event.key,\n      ctrlKey: event.ctrlKey,\n      shiftKey: event.shiftKey,\n      altKey: event.altKey,\n      metaKey: event.metaKey,\n      bubbles: event.bubbles,\n    };\n\n    const publishTo = RouterOutlets.keyboardEventTopic(outletIdentity, event.type);\n    Beans.get(MessageClient).publish<KeyboardEventInit>(publishTo, eventInit);\n  }\n\n  /**\n   * Observes keyboard events matching the given keystroke, applying flags as declared on the keystroke.\n   */\n  private observeKeyboardEvent$(keystroke: string): Observable<KeyboardEvent> {\n    return Beans.get(ContextService).observe$<KeystrokeFlags>(KEYSTROKE_CONTEXT_NAME_PREFIX + keystroke, {collect: true})\n      .pipe(\n        map(collectedFlags => Keystroke\n          .fromString(keystroke)\n          .withFlags(collectedFlags.reduceRight((acc, flags) => ({...acc, ...flags}), {} as KeystrokeFlags)),\n        ),\n        this.switchToKeyboardEvents(),\n      );\n  }\n\n  private switchToKeyboardEvents(): OperatorFunction<Keystroke, KeyboardEvent> {\n    return switchMap(keystroke => this._keyboardEvents$\n      .pipe(\n        filter(event => event.type === keystroke.eventType),\n        filter(event => Keystroke.fromEvent(event).parts === keystroke.parts),\n        applyKeystrokeFlags(keystroke.flags),\n      ),\n    );\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Applies keystroke flags on each keyboard event emitted by the source Observable.\n *\n * Note that `preventDefault()` has to be invoked on the original event, which has its `isTrusted` flag set to `true`.\n *\n * For more information about trusted events\n * @see https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events\n * @see https://www.chromestatus.com/features#istrusted\n *\n * @internal\n */\nfunction applyKeystrokeFlags(flags: KeystrokeFlags | undefined): MonoTypeOperatorFunction<KeyboardEvent> {\n  return tap(keystrokeEvent => {\n    if (flags?.preventDefault) {\n      keystrokeEvent.preventDefault();\n    }\n  });\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Qualifier} from './platform.model';\n\n/**\n * Allows testing whether a qualifier matches a qualifier pattern.\n */\nexport class QualifierMatcher {\n\n  private readonly _pattern: Qualifier;\n  private readonly _patternKeys: string[];\n  private readonly _flags: Flags;\n\n  /**\n   * Constructs a matcher that will match given qualifiers against a pattern.\n   *\n   * @param pattern - Pattern to match qualifiers. If `null` or `undefined`, uses an empty qualifier pattern.\n   * @param flags   - Controls how to match qualifiers.\n   */\n  constructor(pattern: Qualifier | null | undefined, flags: Flags) {\n    this._pattern = pattern || {};\n    this._patternKeys = Object.keys(this._pattern);\n    this._flags = flags;\n  }\n\n  /**\n   * Attempts to match the given qualifier against the pattern which was passed to the constructor.\n   */\n  public matches(qualifier: Qualifier | null | undefined): boolean {\n    const testee = qualifier || {};\n    const testeeKeys = Object.keys(testee);\n    const {_patternKeys: patternKeys, _pattern: pattern, _flags: flags} = this;\n\n    // Test if the testee has no additional entries\n    if (!patternKeys.includes('*') && testeeKeys.some(key => !patternKeys.includes(key))) {\n      return false;\n    }\n\n    return patternKeys\n      .filter(key => key !== '*')\n      .every(key => {\n        if (pattern[key] === testee[key]) {\n          return true;\n        }\n        if (flags.evalOptional && pattern[key] === '?') {\n          return true;\n        }\n        if (flags.evalAsterisk && pattern[key] === '*' && testee[key] !== undefined && testee[key] !== null) {\n          return true;\n        }\n        return false;\n      });\n  }\n}\n\n/**\n * Asserts the given qualifier not to contain wildcards.\n *\n * For example, the qualifier of an intent must be exact. The qualifier of an intention, on the other hand, allows wildcards.\n *\n * @internal\n */\nexport function assertExactQualifier(qualifier: Qualifier | null | undefined): void {\n  if (!qualifier || Object.keys(qualifier).length === 0) {\n    return;\n  }\n\n  if (Object.entries(qualifier).some(([key, value]) => key === '*' || value === '*' || value === '?')) {\n    throw Error(`[IllegalQualifierError] Intent qualifier must not contain wildcards. [qualifier='${JSON.stringify(qualifier)}']`);\n  }\n}\n\n/**\n * Controls how to match qualifiers.\n */\nexport interface Flags {\n  /**\n   * Flag to enable wildcard matching. If `false`, the asterisk wildcard character (`*`) is interpreted as value.\n   */\n  evalAsterisk: boolean;\n  /**\n   * Flag to enable optional qualifier entry matching. If `false`, the question mark wildcard character (`?`) is interpreted as value.\n   */\n  evalOptional: boolean;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {QualifierMatcher} from '../../qualifier-matcher';\nimport {Observable, Subject} from 'rxjs';\nimport {Arrays, Maps} from '@scion/toolkit/util';\nimport {Qualifier} from '../../platform.model';\n\n/**\n * Provides an in-memory store for provided capabilities and registered intentions.\n *\n * @ignore\n */\nexport class ManifestObjectStore<T extends ManifestObject> {\n\n  private readonly _objectById = new Map<string, T>();\n  private readonly _objectsByType = new Map<string, T[]>();\n  private readonly _objectsByApplication = new Map<string, T[]>();\n  private readonly _change$ = new Subject<void>();\n\n  /**\n   * Adds the given {@link ManifestObject} to this store.\n   */\n  public add(object: T): void {\n    this._objectById.set(object.metadata!.id, object);\n    Maps.addListValue(this._objectsByType, object.type, object);\n    Maps.addListValue(this._objectsByApplication, object.metadata!.appSymbolicName, object);\n    this._change$.next();\n  }\n\n  /**\n   * Removes manifest objects from this store that match the given filter.\n   *\n   * @param filter - Control which manifest objects to remove by specifying filter criteria which are \"AND\"ed together.\n   *        Wildcards in the qualifier criterion, if any, are not interpreted as wildcards, but as exact values instead.\n   */\n  public remove(filter: ManifestObjectFilter): void {\n    const objectsToRemove = this.find(filter);\n    this._remove(objectsToRemove);\n  }\n\n  /**\n   * Finds manifest objects that match the given filter.\n   *\n   * @param filter - Control which manifest objects to return.\n   *        Specified filter criteria are \"AND\"ed together. If no filter criteria are specified, all objects will be returned.\n   * @param qualifierPredicate - Predicate for testing qualifiers; is used in combination with a qualifier filter.\n   *        If not specifying a predicate, qualifiers will be matched against the specified qualifier filter, supporting\n   *        the asterisk wildcard, but not the optional wildcard character.\n   */\n  public find(filter: ManifestObjectFilter, qualifierPredicate?: (testee: Qualifier) => boolean): T[] {\n    const filterById = filter.id !== undefined;\n    const filterByType = filter.type !== undefined;\n    const filterByApp = filter.appSymbolicName !== undefined;\n\n    return Arrays\n      .intersect(\n        filterById ? Arrays.coerce(this._objectById.get(filter.id!)) : undefined,\n        filterByType ? Arrays.coerce(this._objectsByType.get(filter.type!)) : undefined,\n        filterByApp ? Arrays.coerce(this._objectsByApplication.get(filter.appSymbolicName!)) : undefined,\n        (filterById || filterByType || filterByApp) ? undefined : Array.from(this._objectById.values()),\n      )\n      .filter(object => {\n        if (filter.qualifier === undefined) {\n          return true;\n        }\n        if (qualifierPredicate) {\n          return qualifierPredicate(object.qualifier || {});\n        }\n\n        return new QualifierMatcher(filter.qualifier, {evalAsterisk: true, evalOptional: false}).matches(object.qualifier);\n      });\n  }\n\n  /**\n   * Emits when an object is added to or removed from this store.\n   */\n  public get change$(): Observable<void> {\n    return this._change$.asObservable();\n  }\n\n  /**\n   * Removes the given objects from all internal maps.\n   */\n  private _remove(objects: T[]): void {\n    let deleted = false;\n    objects.forEach(object => {\n      const objectId = object.metadata!.id;\n      deleted = this._objectById.delete(objectId) || deleted;\n      deleted = Maps.removeListValue(this._objectsByType, object.type, candidate => candidate.metadata?.id === objectId) || deleted;\n      deleted = Maps.removeListValue(this._objectsByApplication, object.metadata!.appSymbolicName, candidate => candidate.metadata?.id === objectId) || deleted;\n    });\n    deleted && this._change$.next();\n  }\n}\n\n/**\n * Represents an object in the manifest registry like a capability or an intention.\n *\n * @ignore\n */\nexport interface ManifestObject {\n  type: string;\n  qualifier?: Qualifier;\n  metadata?: {\n    id: string;\n    appSymbolicName: string;\n  };\n}\n\n/**\n * Allows filtering manifest objects like capabilities or intentions.\n *\n * All specified filter criteria are \"AND\"ed together. Unspecified filter criteria are ignored.\n * If no filter criterion is specified, no filtering takes place, thus all available objects are returned.\n *\n * @category Manifest\n */\nexport interface ManifestObjectFilter {\n  /**\n   * Manifest objects of the given identity.\n   */\n  id?: string;\n  /**\n   * Manifest objects of the given function type.\n   */\n  type?: string;\n  /**\n   * Manifest objects matching the given qualifier.\n   */\n  qualifier?: Qualifier;\n  /**\n   * Manifest objects provided by the given app.\n   */\n  appSymbolicName?: string;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Capability, Intention, ParamDefinition} from '../../platform.model';\nimport {sha256} from 'js-sha256';\nimport {ManifestObjectFilter, ManifestObjectStore} from './manifest-object-store';\nimport {defer, merge, of, Subject} from 'rxjs';\nimport {distinctUntilChanged, expand, mergeMap, take, takeUntil} from 'rxjs/operators';\nimport {Intent, MessageHeaders, ResponseStatusCodes, TopicMessage} from '../../messaging.model';\nimport {MessageClient, takeUntilUnsubscribe} from '../../client/messaging/message-client';\nimport {ApplicationRegistry} from '../application-registry';\nimport {runSafe} from '../../safe-runner';\nimport {filterArray} from '@scion/toolkit/operators';\nimport {ManifestRegistry} from './manifest-registry';\nimport {assertExactQualifier, QualifierMatcher} from '../../qualifier-matcher';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {stringifyError} from '../../error.util';\nimport {LoggingContext, Logger} from '../../logger';\n\nexport class ɵManifestRegistry implements ManifestRegistry, PreDestroy {\n\n  private _capabilityStore: ManifestObjectStore<Capability>;\n  private _intentionStore: ManifestObjectStore<Intention>;\n  private _destroy$ = new Subject<void>();\n\n  constructor() {\n    this._capabilityStore = new ManifestObjectStore<Capability>();\n    this._intentionStore = new ManifestObjectStore<Intention>();\n\n    this.installCapabilityRegisterRequestHandler();\n    this.installCapabilityUnregisterRequestHandler();\n\n    this.installIntentionRegisterRequestHandler();\n    this.installIntentionUnregisterRequestHandler();\n\n    this.installCapabilitiesLookupRequestHandler();\n    this.installIntentionsLookupRequestHandler();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public resolveCapabilitiesByIntent(intent: Intent, appSymbolicName: string): Capability[] {\n    assertExactQualifier(intent.qualifier);\n    const filter: ManifestObjectFilter = {type: intent.type, qualifier: intent.qualifier || {}};\n    return this._capabilityStore.find(filter, capabilityQualifier => new QualifierMatcher(capabilityQualifier, {evalAsterisk: true, evalOptional: true}).matches(intent.qualifier))\n      .filter(capability => this.isApplicationQualifiedForCapability(appSymbolicName, capability));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public hasIntention(intent: Intent, appSymbolicName: string): boolean {\n    assertExactQualifier(intent.qualifier);\n    const filter: ManifestObjectFilter = {appSymbolicName, type: intent.type, qualifier: intent.qualifier || {}};\n    return (\n      Beans.get(ApplicationRegistry).isIntentionCheckDisabled(appSymbolicName) ||\n      this._intentionStore.find(filter, intentionQualifier => new QualifierMatcher(intentionQualifier, {evalAsterisk: true, evalOptional: true}).matches(intent.qualifier)).length > 0 ||\n      this._capabilityStore.find(filter, capabilityQualifier => new QualifierMatcher(capabilityQualifier, {evalAsterisk: true, evalOptional: true}).matches(intent.qualifier)).length > 0\n    );\n  }\n\n  /**\n   * Tests whether the given micro app is qualified for the given capability. This is true in two cases:\n   *   - The micro app provides the capability itself.\n   *   - The capability has public visibility and the micro app has declared an intention for it.\n   *     If 'scope check' is disabled for the given micro app, it also qualifies for capabilities with private visibility.\n   *     If 'intention check' is disabled for the given micro app, it also qualifies for capabilities for which it has not declared a respective intention.\n   */\n  private isApplicationQualifiedForCapability(appSymbolicName: string, capability: Capability): boolean {\n    if (capability.metadata!.appSymbolicName === appSymbolicName) {\n      return true;\n    }\n    const isCapabilityPublic = !capability.private;\n    const isScopeCheckDisabled = Beans.get(ApplicationRegistry).isScopeCheckDisabled(appSymbolicName);\n    const isIntentionCheckDisabled = Beans.get(ApplicationRegistry).isIntentionCheckDisabled(appSymbolicName);\n    return (isScopeCheckDisabled || isCapabilityPublic) && (isIntentionCheckDisabled || this.hasIntentionForCapability(appSymbolicName, capability));\n  }\n\n  /**\n   * Tests whether the given app has declared a satisfying intention for the given capability.\n   */\n  private hasIntentionForCapability(appSymbolicName: string, capability: Capability): boolean {\n    const filter: ManifestObjectFilter = {appSymbolicName, type: capability.type, qualifier: capability.qualifier};\n    return this._intentionStore.find(filter, intentionQualifier => new QualifierMatcher(intentionQualifier, {evalAsterisk: true, evalOptional: true}).matches(capability.qualifier)).length > 0;\n  }\n\n  public registerCapability(capability: Capability, appSymbolicName: string): string {\n    if (!capability) {\n      throw Error('[CapabilityRegisterError] Missing required capability.');\n    }\n    if (capability.qualifier && capability.qualifier.hasOwnProperty('*')) {\n      throw Error('[CapabilityRegisterError] Asterisk wildcard (\\'*\\') not allowed in the qualifier key.');\n    }\n\n    // use the first 7 digits of the capability hash as capability id\n    const capabilityId = sha256(JSON.stringify({application: appSymbolicName, type: capability.type, ...capability.qualifier})).substring(0, 7);\n    const capabilityToRegister: Capability = {\n      ...capability,\n      qualifier: capability.qualifier ?? {},\n      params: coerceCapabilityParamDefinitions(capability, appSymbolicName),\n      requiredParams: undefined,\n      optionalParams: undefined,\n      private: capability.private ?? true,\n      metadata: {\n        id: capabilityId,\n        appSymbolicName: appSymbolicName,\n      },\n    };\n\n    // Register the capability.\n    this._capabilityStore.add(capabilityToRegister);\n    return capabilityId;\n  }\n\n  private unregisterCapabilities(appSymbolicName: string, filter: ManifestObjectFilter): void {\n    this._capabilityStore.remove({...filter, appSymbolicName});\n  }\n\n  public registerIntention(intention: Intention, appSymbolicName: string): string {\n    if (!intention) {\n      throw Error(`[IntentionRegisterError] Missing required intention.`);\n    }\n\n    // use the first 7 digits of the intention hash as intention id\n    const intentionId = sha256(JSON.stringify({application: appSymbolicName, type: intention.type, ...intention.qualifier})).substring(0, 7);\n    const intentionToRegister: Intention = {\n      ...intention,\n      metadata: {\n        id: intentionId,\n        appSymbolicName: appSymbolicName,\n      },\n    };\n\n    // Register the intention.\n    this._intentionStore.add(intentionToRegister);\n    return intentionId;\n  }\n\n  private unregisterIntention(appSymbolicName: string, filter: ManifestObjectFilter): void {\n    this._intentionStore.remove({...filter, appSymbolicName});\n  }\n\n  private installCapabilityRegisterRequestHandler(): void {\n    Beans.get(MessageClient).observe$<Capability>(ManifestRegistryTopics.RegisterCapability)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((request: TopicMessage<Capability>) => runSafe(() => {\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const capability = request.body!;\n        const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n\n        try {\n          const capabilityId = this.registerCapability(capability, appSymbolicName);\n          Beans.get(MessageClient).publish(replyTo, capabilityId, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL)});\n        }\n        catch (error) {\n          Beans.get(MessageClient).publish(replyTo, stringifyError(error), {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR)});\n        }\n      }));\n  }\n\n  private installCapabilityUnregisterRequestHandler(): void {\n    Beans.get(MessageClient).observe$<ManifestObjectFilter>(ManifestRegistryTopics.UnregisterCapabilities)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((request: TopicMessage<ManifestObjectFilter>) => runSafe(() => {\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const capabilityFilter = request.body || {};\n        const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n\n        try {\n          this.unregisterCapabilities(appSymbolicName, capabilityFilter);\n          Beans.get(MessageClient).publish(replyTo, undefined, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL)});\n        }\n        catch (error) {\n          Beans.get(MessageClient).publish(replyTo, stringifyError(error), {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR)});\n        }\n      }));\n  }\n\n  private installIntentionRegisterRequestHandler(): void {\n    Beans.get(MessageClient).observe$<Intention>(ManifestRegistryTopics.RegisterIntention)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((request: TopicMessage<Intention>) => runSafe(() => {\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const intention = request.body!;\n        const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n\n        try {\n          assertIntentionRegisterApiEnabled(appSymbolicName);\n          const intentionId = this.registerIntention(intention, appSymbolicName);\n          Beans.get(MessageClient).publish(replyTo, intentionId, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL)});\n        }\n        catch (error) {\n          Beans.get(MessageClient).publish(replyTo, stringifyError(error), {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR)});\n        }\n      }));\n  }\n\n  private installIntentionUnregisterRequestHandler(): void {\n    Beans.get(MessageClient).observe$<ManifestObjectFilter>(ManifestRegistryTopics.UnregisterIntentions)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((request: TopicMessage<ManifestObjectFilter>) => runSafe(() => {\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const intentFilter = request.body || {};\n        const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n\n        try {\n          assertIntentionRegisterApiEnabled(appSymbolicName);\n          this.unregisterIntention(appSymbolicName, intentFilter);\n          Beans.get(MessageClient).publish(replyTo, undefined, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL)});\n        }\n        catch (error) {\n          Beans.get(MessageClient).publish(replyTo, stringifyError(error), {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR)});\n        }\n      }));\n  }\n\n  private installCapabilitiesLookupRequestHandler(): void {\n    Beans.get(MessageClient).observe$<ManifestObjectFilter>(ManifestRegistryTopics.LookupCapabilities)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((request: TopicMessage<ManifestObjectFilter>) => runSafe(() => {\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n        const lookupFilter = request.body || {};\n\n        // The queried capabilities may change on both, capability or intention change, because the computation\n        // of visible and qualified capabilities depends on registered capabilities and manifested intentions.\n        const registryChange$ = merge(this._capabilityStore.change$, this._intentionStore.change$);\n        const finder$ = defer(() => of(this._capabilityStore.find(lookupFilter)));\n        return finder$\n          .pipe(\n            expand(() => registryChange$.pipe(take(1), mergeMap(() => finder$))),\n            filterArray(capability => this.isApplicationQualifiedForCapability(appSymbolicName, capability)),\n            distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),\n            takeUntilUnsubscribe(replyTo),\n          )\n          .subscribe(capabilities => { // eslint-disable-line rxjs/no-nested-subscribe\n            Beans.get(MessageClient).publish<Capability[]>(replyTo, capabilities, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK)});\n          });\n      }));\n  }\n\n  private installIntentionsLookupRequestHandler(): void {\n    Beans.get(MessageClient).observe$<ManifestObjectFilter>(ManifestRegistryTopics.LookupIntentions)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((request: TopicMessage<ManifestObjectFilter>) => runSafe(() => {\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const lookupFilter = request.body || {};\n\n        const finder$ = defer(() => of(this._intentionStore.find(lookupFilter)));\n        return finder$\n          .pipe(\n            expand(() => this._intentionStore.change$.pipe(take(1), mergeMap(() => finder$))),\n            distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),\n            takeUntilUnsubscribe(replyTo),\n          )\n          .subscribe(intentions => { // eslint-disable-line rxjs/no-nested-subscribe\n            Beans.get(MessageClient).publish<Intention[]>(replyTo, intentions, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK)});\n          });\n      }));\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Defines the topics to interact with the manifest registry from {@link ManifestService}.\n */\nexport enum ManifestRegistryTopics {\n  LookupCapabilities = 'ɵLOOKUP_CAPABILITIES',\n  LookupIntentions = 'ɵLOOKUP_INTENTIONS',\n  RegisterCapability = 'ɵREGISTER_CAPABILITY',\n  UnregisterCapabilities = 'ɵUNREGISTER_CAPABILITIES',\n  RegisterIntention = 'ɵREGISTER_INTENTION',\n  UnregisterIntentions = 'ɵUNREGISTER_INTENTIONS',\n}\n\n/**\n * Checks if the 'Intention Registration API' is enabled for the given app. If not, an error is thrown.\n */\nfunction assertIntentionRegisterApiEnabled(appSymbolicName: string): void {\n  if (Beans.get(ApplicationRegistry).isIntentionRegisterApiDisabled(appSymbolicName)) {\n    throw Error(`[IntentionRegisterError] The 'Intention Registration API' is disabled for the application '${appSymbolicName}'. Contact the platform administrator to enable this API.`);\n  }\n}\n\nfunction coerceCapabilityParamDefinitions(capability: Capability, appSymbolicName: string): ParamDefinition[] {\n  const params: ParamDefinition[] = [];\n\n  capability.requiredParams?.forEach(name => { // eslint-disable-line deprecation/deprecation\n    params.push({name, required: true});\n    const migration = `{ params: [{name: '${name}', required: true}] }`;\n    Beans.get(Logger).warn(`[DEPRECATION] The '${appSymbolicName}' application uses a deprecated API for declaring required parameters of a capability. The API will be removed in a future release. To migrate, declare parameters by using the 'Capability#params' property, as follows: ${migration}`, new LoggingContext(appSymbolicName), capability);\n  });\n  capability.optionalParams?.forEach(name => { // eslint-disable-line deprecation/deprecation\n    params.push({name, required: false});\n    const migration = `{ params: [{name: '${name}', required: false}] }`;\n    Beans.get(Logger).warn(`[DEPRECATION] The '${appSymbolicName}' application uses a deprecated API for declaring optional parameters of a capability. The API will be removed in a future release. To migrate, declare parameters by using the 'Capability#params' property, as follows: ${migration}`, new LoggingContext(appSymbolicName), capability);\n  });\n  capability.params?.forEach(param => {\n    params.push(param);\n  });\n\n  assertCapabilityParamDefinitions(params);\n  return params;\n}\n\n/**\n * Asserts given parameter definitions to be valid.\n */\nfunction assertCapabilityParamDefinitions(params: ParamDefinition[]): void {\n  const validSubstitutes = params.filter(param => !param.deprecated).map(param => param.name);\n\n  params.forEach(param => {\n    if (param.required === undefined) {\n      throw Error(`[CapabilityParamError] Parameter '${param.name}' must be explicitly defined as required or optional.`);\n    }\n\n    if (param.deprecated !== undefined) {\n      // Ensure deprecated param to be optional\n      if (param.required) {\n        throw Error(`[CapabilityParamError] Deprecated parameters must be optional, not required. Alternatively, deprecated parameters can define a mapping to a required parameter via the 'useInstead' property. [param='${param.name}']`);\n      }\n\n      // Ensure existing substitute\n      if (typeof param.deprecated === 'object' && param.deprecated.useInstead && !validSubstitutes.includes(param.deprecated.useInstead)) {\n        throw Error(`[CapabilityParamError] The deprecated parameter '${param.name}' defines an invalid substitute '${param.deprecated.useInstead}'. Valid substitutes are: [${validSubstitutes}]`);\n      }\n    }\n    return param;\n  });\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {firstValueFrom, lastValueFrom, Observable} from 'rxjs';\nimport {MessageClient} from '../messaging/message-client';\nimport {Application, Capability, Intention} from '../../platform.model';\nimport {take} from 'rxjs/operators';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {ManifestRegistryTopics} from '../../host/manifest-registry/ɵmanifest-registry';\nimport {ManifestObjectFilter} from '../../host/manifest-registry/manifest-object-store';\nimport {mapToBody} from '../../messaging.model';\nimport {Beans, Initializer} from '@scion/toolkit/bean-manager';\nimport {BrokerGateway, NullBrokerGateway} from '../messaging/broker-gateway';\n\n/**\n * Allows browsing the catalog of capabilities and managing the capabilities of the application.\n *\n * The app can browse only capabilities which are visible to it, i.e., for which the app has declared an intention and\n * which are also publicly available. Capabilities that the app provides itself are always visible to the app.\n *\n * The app can also provide new capabilities or remove existing ones. If the *Intention Registration API* is enabled\n * for the app, the app can also manage its intentions, which, however, is strongly discouraged. Instead, apps should\n * declare the required functionality in their manifests using wildcard intentions.\n *\n * @category Manifest\n * @category Intention API\n */\nexport class ManifestService implements Initializer {\n\n  private _applications: Application[] = [];\n\n  public async init(): Promise<void> {\n    const messagingDisabled = Beans.get(BrokerGateway) instanceof NullBrokerGateway;\n    if (messagingDisabled) {\n      return;\n    }\n\n    // Wait until obtained registered applications so that they can be accessed synchronously by the application via `ManifestService#applications`.\n    const applications$ = Beans.get(MessageClient).observe$<Application[]>(PlatformTopics.Applications);\n    this._applications = await firstValueFrom(applications$.pipe(mapToBody()));\n  }\n\n  /**\n   * Applications installed in the platform.\n   */\n  public get applications(): ReadonlyArray<Application> {\n    return this._applications;\n  }\n\n  /**\n   * Allows to lookup the applications installed in the platform.\n   *\n   * @return an Observable that emits the applications in the platform and then completes.\n   * @deprecated since version 1.0.0-beta.8. Use {@link applications} instead.\n   */\n  public lookupApplications$(): Observable<Application[]> {\n    return Beans.get(MessageClient).observe$<Application[]>(PlatformTopics.Applications)\n      .pipe(\n        take(1),\n        mapToBody(),\n      );\n  }\n\n  /**\n   * Allows browsing the catalog of capabilities that match the given filter.\n   *\n   * <strong>\n   * You can only browse capabilities that are visible to your application, that is, capabilities that you provide yourself or that are\n   * publicly available and for which you have declared an intention in your manifest.\n   * </strong>\n   *\n   * @param  filter - Control which capabilities to browse. If no or an empty filter is given, all capabilities visible to the requesting\n   *         app are returned. Specified filter criteria are \"AND\"ed together.\\\n   *         <p>\n   *         If specifying a qualifier filter, the capabilities must match that filter exactly. The filter supports the asterisk wildcard\n   *         to match any value, e.g., `{property: '*'}`, or partial matching to find capabilities with at least the specified qualifier\n   *         properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n   * @return An Observable that, when subscribed, emits the requested capabilities.\n   *         It never completes and emits continuously when satisfying capabilities are registered or unregistered.\n   */\n  public lookupCapabilities$<T extends Capability>(filter?: ManifestObjectFilter): Observable<T[]> {\n    return Beans.get(MessageClient).request$<T[]>(ManifestRegistryTopics.LookupCapabilities, filter)\n      .pipe(mapToBody());\n  }\n\n  /**\n   * Allows browsing the catalog of intentions that match the given filter.\n   *\n   * @param  filter - Control which intentions to return. If no or an empty filter is given, no filtering takes place. Specified filter\n   *         criteria are \"AND\"ed together.\\\n   *         <p>\n   *         If specifying a qualifier filter, the intentions must match that filter exactly. The filter supports the asterisk wildcard\n   *         to match any value, e.g., `{property: '*'}`, or partial matching to find intentions with at least the specified qualifier\n   *         properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n   * @return An Observable that, when subscribed, emits the requested intentions.\n   *         It never completes and emits continuously when satisfying intentions are registered or unregistered.\n   */\n  public lookupIntentions$(filter?: ManifestObjectFilter): Observable<Intention[]> {\n    return Beans.get(MessageClient).request$<Intention[]>(ManifestRegistryTopics.LookupIntentions, filter)\n      .pipe(mapToBody());\n  }\n\n  /**\n   * Registers given capability. If the capability has public visibility, other applications can browse the capability and interact with it.\n   *\n   * @return A Promise that resolves to the identity of the registered capability,\n   *         or that rejects if the registration failed.\n   */\n  public registerCapability<T extends Capability>(capability: T): Promise<string> {\n    const register$ = Beans.get(MessageClient).request$<string>(ManifestRegistryTopics.RegisterCapability, capability);\n    return lastValueFrom(register$.pipe(mapToBody()));\n  }\n\n  /**\n   * Unregisters capabilities matching the given filter.\n   *\n   * <strong>You can only unregister capabilities of your application.</strong>\n   *\n   * @param  filter - Control which capabilities to unregister by specifying filter criteria which are \"AND\"ed together. If not passing a filter,\n   *         all capabilities of the requesting app are unregistered.\\\n   *         <p>\n   *         If specifying a qualifier filter, the capabilities to unregister must match that filter exactly. The filter supports the asterisk\n   *         wildcard to match any value, e.g., `{property: '*'}`, or partial matching to unregister capabilities with at least the specified\n   *         qualifier properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n   *         Note that specifying a symbolic app name in the filter has no effect.\n   * @return A Promise that resolves when unregistered the capability,\n   *         or that rejects if the unregistration failed.\n   */\n  public unregisterCapabilities(filter?: ManifestObjectFilter): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      Beans.get(MessageClient).request$<void>(ManifestRegistryTopics.UnregisterCapabilities, filter).subscribe({\n        error: reject,\n        complete: resolve,\n      });\n    });\n  }\n\n  /**\n   * Registers the given intention, allowing the application to interact with public capabilities matching the intention.\n   *\n   * The intention can match multiple capabilities by using wildcards (such as `*` or `?`) in the qualifier.\n   *\n   * <strong>This operation requires that the 'Intention Registration API' is enabled for your application.</strong>\n   *\n   * @return A Promise that resolves to the identity of the registered intention,\n   *         or that rejects if the registration failed.\n   */\n  public registerIntention(intention: Intention): Promise<string> {\n    const register$ = Beans.get(MessageClient).request$<string>(ManifestRegistryTopics.RegisterIntention, intention);\n    return lastValueFrom(register$.pipe(mapToBody()));\n  }\n\n  /**\n   * Unregisters intentions matching the given filter.\n   *\n   * <strong>You can only unregister intentions of your application.</strong>\n   * <strong>This operation requires that the 'Intention Registration API' is enabled for your application.</strong>\n   *\n   * @param  filter - Control which intentions to unregister by specifying filter criteria which are \"AND\"ed together. If not passing a filter,\n   *         all intentions of the requesting app are unregistered.\\\n   *         <p>\n   *         If specifying a qualifier filter, the intentions to unregister must match that filter exactly. The filter supports the asterisk\n   *         wildcard to match any value, e.g., `{property: '*'}`, or partial matching to unregister intentions with at least the specified\n   *         qualifier properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n   *         Note that specifying a symbolic app name in the filter has no effect.\n   * @return A Promise that resolves when unregistered the intention,\n   *         or that rejects if the unregistration failed.\n   */\n  public unregisterIntentions(filter?: ManifestObjectFilter): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      Beans.get(MessageClient).request$<void>(ManifestRegistryTopics.UnregisterIntentions, filter).subscribe({\n        error: reject,\n        complete: resolve,\n      });\n    });\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Activator, PlatformCapabilityTypes} from '../../platform.model';\nimport {first} from 'rxjs/operators';\nimport {ApplicationRegistry} from '../application-registry';\nimport {OutletRouter} from '../../client/router-outlet/outlet-router';\nimport {SciRouterOutletElement} from '../../client/router-outlet/router-outlet.element';\nimport {Arrays, Maps} from '@scion/toolkit/util';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {Logger} from '../../logger';\nimport {MessageHeaders} from '../../messaging.model';\nimport {EMPTY, firstValueFrom, identity, Observable, timeout} from 'rxjs';\nimport {PlatformState} from '../../platform-state';\nimport {Beans, Initializer} from '@scion/toolkit/bean-manager';\nimport {MicrofrontendPlatformRef} from '../../microfrontend-platform-ref';\nimport {ProgressMonitor} from '../progress-monitor/progress-monitor';\nimport {ActivatorLoadProgressMonitor} from '../progress-monitor/progress-monitors';\nimport {ManifestService} from '../../client/manifest-registry/manifest-service';\nimport {MessageClient} from '../../client/messaging/message-client';\n\n/**\n * Activates micro applications which provide an activator capability.\n *\n * Activators enable micro applications to interact with the platform for the entire platform lifecycle.\n * Activators can signal when ready for operation, causing this initializer to wait until received respective readiness messages.\n *\n * @ignore\n */\nexport class ActivatorInstaller implements Initializer {\n\n  public async init(): Promise<void> {\n    // Lookup activators.\n    const activators: Activator[] = await firstValueFrom(Beans.get(ManifestService).lookupCapabilities$<Activator>({type: PlatformCapabilityTypes.Activator}));\n\n    const monitor = Beans.get(ActivatorLoadProgressMonitor);\n    if (!activators.length) {\n      monitor.done();\n      return;\n    }\n\n    // Group activators by their providing application.\n    const activatorsGroupedByApp: Map<string, Activator[]> = activators\n      .filter(this.skipInvalidActivators())\n      .reduce((grouped, activator) => Maps.addListValue(grouped, activator.metadata!.appSymbolicName, activator), new Map<string, Activator[]>());\n\n    // Create Promises that wait for activators to signal ready.\n    const subMonitors = monitor.splitEven(activatorsGroupedByApp.size);\n    const activatorReadyPromises: Promise<void>[] = Array\n      .from(activatorsGroupedByApp.entries())\n      .reduce((acc, [appSymbolicName, appActivators], index) => {\n        return acc.concat(this.waitForActivatorsToSignalReady(appSymbolicName, appActivators, subMonitors[index]));\n      }, [] as Promise<void>[]);\n\n    // Mount activators in hidden iframes\n    activatorsGroupedByApp.forEach((sameAppActivators: Activator[]) => {\n      // Nominate one activator of each app as primary activator.\n      const primaryActivator = sameAppActivators[0];\n      sameAppActivators.forEach(activator => this.mountActivator(activator, activator === primaryActivator));\n    });\n\n    // Wait until activators signal ready.\n    await Promise.all(activatorReadyPromises);\n  }\n\n  private skipInvalidActivators(): (activator: Activator) => boolean {\n    return (activator: Activator): boolean => {\n      if (!activator.properties || !activator.properties.path) {\n        Beans.get(Logger).error(`[ActivatorError] Failed to activate the application '${activator.metadata!.appSymbolicName}'. Missing required 'path' property in the provided activator capability.`, activator);\n        return false;\n      }\n      return true;\n    };\n  }\n\n  /**\n   * Creates a Promise that resolves when given activators signal ready.\n   */\n  private async waitForActivatorsToSignalReady(appSymbolicName: string, activators: Activator[], monitor: ProgressMonitor): Promise<void> {\n    const t0 = Date.now();\n    const activatorLoadTimeout = Beans.get(ApplicationRegistry).getApplication(appSymbolicName)!.activatorLoadTimeout;\n    const readinessPromises: Promise<void>[] = activators\n      .reduce((acc, activator) => acc.concat(Arrays.coerce(activator.properties.readinessTopics)), new Array<string>()) // concat readiness topics\n      .map(readinessTopic => {\n          const onReadinessTimeout = (): Observable<never> => {\n            Beans.get(Logger).error(`[ActivatorLoadTimeoutError] Timeout elapsed while waiting for application to signal readiness [app=${appSymbolicName}, timeout=${activatorLoadTimeout}ms, readinessTopic=${readinessTopic}].`);\n            return EMPTY;\n          };\n          return new Promise((resolve, reject) => {\n            return Beans.get(MessageClient).observe$<void>(readinessTopic)\n              .pipe(\n                first(msg => msg.headers.get(MessageHeaders.AppSymbolicName) === appSymbolicName),\n                activatorLoadTimeout ? timeout({first: activatorLoadTimeout, with: onReadinessTimeout}) : identity,\n              )\n              .subscribe({\n                error: reject,\n                complete: resolve,\n              });\n          });\n        },\n      );\n\n    if (!readinessPromises.length) {\n      monitor.done();\n      return;\n    }\n\n    await Promise.all(readinessPromises);\n    monitor.done();\n    Beans.get(Logger).info(`Activator startup of '${appSymbolicName}' took ${Date.now() - t0}ms.`);\n  }\n\n  /**\n   * Mounts a hidden <sci-router-outlet> and loads the activator endpoint.\n   */\n  private mountActivator(activator: Activator, primary: boolean): void {\n    const application = Beans.get(ApplicationRegistry).getApplication(activator.metadata!.appSymbolicName)!;\n\n    // Create the router outlet and navigate to the activator endpoint.\n    const routerOutlet = document.createElement('sci-router-outlet') as SciRouterOutletElement;\n    routerOutlet.name = UUID.randomUUID();\n    Beans.get(OutletRouter).navigate(activator.properties.path, {\n      outlet: routerOutlet.name,\n      relativeTo: application.baseUrl,\n    }).then();\n\n    // Provide the activation context\n    routerOutlet.setContextValue<ActivationContext>(ACTIVATION_CONTEXT, {primary, activator});\n    // Add CSS classes for debugging purposes\n    routerOutlet.classList.add('sci-activator', application.symbolicName);\n    // Make the router outlet invisible\n    routerOutlet.style.display = 'none';\n    // Take the router outlet out of the document flow\n    routerOutlet.style.position = 'absolute';\n    // Add the router outlet to the DOM\n    document.body.appendChild(routerOutlet);\n    // Unmount the router outlet on platform shutdown\n    Beans.get(MicrofrontendPlatformRef).whenState(PlatformState.Stopped).then(() => document.body.removeChild(routerOutlet));\n  }\n}\n\n/**\n * Key for obtaining the current activation context using {@link ContextService}.\n *\n * The activation context is only available to microfrontends loaded by an activator.\n *\n * @see {@link ActivationContext}\n * @see {@link ContextService}\n * @category Platform\n */\nexport const ACTIVATION_CONTEXT = 'ɵACTIVATION_CONTEXT';\n\n/**\n * Information about the activator that loaded a microfrontend.\n *\n * This context is available to a microfrontend if loaded by an application activator.\n * This object can be obtained from the {@link ContextService} using the name {@link ACTIVATION_CONTEXT}.\n *\n * ```ts\n * const ctx = await Beans.get(ContextService).lookup<ActivationContext>(ACTIVATION_CONTEXT);\n * ```\n *\n * @see {@link ACTIVATION_CONTEXT}\n * @see {@link ContextService}\n * @category Platform\n */\nexport interface ActivationContext {\n  /**\n   * Indicates whether running in the context of the primary activator.\n   * The platform nominates one activator of each app as primary activator.\n   */\n  primary: boolean;\n  /**\n   * Metadata about the activator that activated the microfrontend.\n   */\n  activator: Activator;\n}\n","import {MessageClient, takeUntilUnsubscribe} from './message-client';\nimport {Message, MessageHeaders, ResponseStatusCodes} from '../../messaging.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {Observable, Subscription, throwError} from 'rxjs';\nimport {Observables} from '@scion/toolkit/util';\nimport {runSafe} from '../../safe-runner';\nimport {stringifyError} from '../../error.util';\nimport {filter, finalize, takeUntil} from 'rxjs/operators';\nimport {MicrofrontendPlatformRef} from '../../microfrontend-platform-ref';\nimport {PlatformState} from '../../platform-state';\n\n/**\n * Subscribes to messages, passing each message to the callback.\n *\n * The callback can return a response to be transported to the requestor, if any. When the final response is produced,\n * the handler terminates the communication, completing the requestor's Observable. If the callback errors, the error is\n * transported to the requestor, erroring the requestor's Observable.\n *\n * @ignore\n */\nexport class MessageHandler<MSG extends Message, REPLY> {\n\n  private _messageClient = Beans.get(MessageClient);\n\n  /**\n   * Represents this handler's subscription for receiving messages. Calling {@link Subscription.unsubscribe} will also complete\n   * the Observable of all requestors, if any.\n   */\n  public readonly subscription = new Subscription();\n\n  constructor(message$: Observable<MSG>, private _callback: (message: MSG) => Observable<REPLY> | Promise<REPLY> | REPLY | void) {\n    this.subscription.add(message$.subscribe(message => {\n      if (message.headers.has(MessageHeaders.ReplyTo)) {\n        this.handleMessage(message);\n      }\n      else {\n        this.consumeMessage(message);\n      }\n    }));\n  }\n\n  /**\n   * The requestor has initiated a fire-and-forget communication, thus we simply pass the message to the callback and ignore response(s).\n   */\n  private consumeMessage(message: MSG): void {\n    runSafe(() => this._callback(message));\n  }\n\n  /**\n   * The requestor has initiated a request-response communication, thus we pass the request to the callback and send response(s)\n   * or a potential completion or error to the requestor.\n   */\n  private handleMessage(request: MSG): void {\n    const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n    const platformStopping$ = Beans.get(MicrofrontendPlatformRef).state$.pipe(filter(state => state === PlatformState.Stopping));\n\n    // Invoke the callback to produce value(s).\n    let reply: Observable<REPLY> | Promise<REPLY> | REPLY | void;\n    try {\n      reply = this._callback(request);\n    }\n    catch (error) {\n      reply = throwError(() => error);\n    }\n\n    // Send response(s) or a potential completion or error back to the requestor.\n    let observableStatus: 'alive' | 'completed' | 'errored' = 'alive';\n    this.subscription.add(Observables.coerce(reply)\n      .pipe(\n        filter(next => next !== undefined), // filter `undefined` responses, e.g., returned by void callbacks.\n        takeUntilUnsubscribe(replyTo), // unsubscribe once the requestor terminates the communication\n        takeUntil(platformStopping$), // terminate the communication when the platform is shutting down.\n        finalize(() => {\n          // Note that the `finalize` operator is also called when unsubscribing from the observable, e.g. when unsubscribing\n          // from the handler. If the observable errors or completes, the `finalize` operator is guaranteed to be called after\n          // the observer's `complete` or `error` methods; thus, the variable `observableStatus` is only `alive` when\n          // unsubscribing from the observable.\n          if (observableStatus === 'alive') {\n            // Terminate the communication when the handler is being unsubscribed.\n            const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL);\n            this._messageClient.publish(replyTo, undefined, {headers: replyHeaders}).then();\n          }\n        }),\n      )\n      .subscribe({\n        next: next => {\n          // Transport the value to the requestor.\n          const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK);\n          this._messageClient.publish(replyTo, next, {headers: replyHeaders}).then();\n        },\n        error: error => {\n          observableStatus = 'errored';\n          // Transport the error to the requestor.\n          const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR);\n          this._messageClient.publish(replyTo, stringifyError(error), {headers: replyHeaders}).then();\n        },\n        complete: () => {\n          observableStatus = 'completed';\n          // Terminate the communication when finished producing responses.\n          const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL);\n          this._messageClient.publish(replyTo, undefined, {headers: replyHeaders}).then();\n        },\n      }));\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {defer, Observable, Subscription} from 'rxjs';\nimport {Intent, IntentMessage, throwOnErrorStatus, TopicMessage} from '../../messaging.model';\nimport {BrokerGateway} from './broker-gateway';\nimport {MessagingChannel} from '../../ɵmessaging.model';\nimport {filterByChannel, pluckMessage} from '../../operators';\nimport {filter} from 'rxjs/operators';\nimport {assertExactQualifier, QualifierMatcher} from '../../qualifier-matcher';\nimport {IntentClient, IntentOptions, IntentSelector} from './intent-client';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {MessageHandler} from './message-handler';\n\nexport class ɵIntentClient implements IntentClient {\n\n  private readonly _brokerGateway = Beans.get(BrokerGateway);\n\n  public publish<T = any>(intent: Intent, body?: T, options?: IntentOptions): Promise<void> {\n    assertExactQualifier(intent.qualifier);\n    const intentMessage: IntentMessage = {\n      intent,\n      headers: new Map(options?.headers || []),\n      capability: undefined!, /* set by the broker when dispatching the intent */\n    };\n    setBodyIfDefined(intentMessage, body);\n    return this._brokerGateway.postMessage(MessagingChannel.Intent, intentMessage);\n  }\n\n  public request$<T>(intent: Intent, body?: any, options?: IntentOptions): Observable<TopicMessage<T>> {\n    assertExactQualifier(intent.qualifier);\n    // IMPORTANT:\n    // When sending a request, the platform adds various headers to the message. Therefore, to support multiple subscriptions\n    // to the returned Observable, each subscription must have its individual message instance and headers map.\n    // In addition, the headers are copied to prevent modifications before the effective subscription.\n    const headers = new Map(options?.headers || []);\n    return defer(() => {\n      const intentMessage: IntentMessage = {\n        intent,\n        headers: new Map(headers) /* make a copy for each subscription to support multiple subscriptions */,\n        capability: undefined!, /* set by the broker when dispatching the intent */\n      };\n      setBodyIfDefined(intentMessage, body);\n      return this._brokerGateway.requestReply$(MessagingChannel.Intent, intentMessage).pipe(throwOnErrorStatus());\n    });\n  }\n\n  public observe$<T>(selector?: IntentSelector): Observable<IntentMessage<T>> {\n    return this._brokerGateway.message$\n      .pipe(\n        filterByChannel<IntentMessage<T>>(MessagingChannel.Intent),\n        pluckMessage(),\n        filter(message => !selector || !selector.type || selector.type === message.intent.type),\n        filter(message => !selector || !selector.qualifier || new QualifierMatcher(selector.qualifier, {evalAsterisk: true, evalOptional: true}).matches(message.intent.qualifier)),\n      );\n  }\n\n  public onIntent<IN = any, OUT = any>(selector: IntentSelector, callback: (intentMessage: IntentMessage<IN>) => Observable<OUT> | Promise<OUT> | OUT | void): Subscription {\n    return new MessageHandler(Beans.get(IntentClient).observe$<IN>(selector), callback).subscription;\n  }\n}\n\nfunction setBodyIfDefined<T>(message: TopicMessage<T> | IntentMessage<T>, body?: T): void {\n  if (body !== undefined) {\n    message.body = body;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {defer, noop, Observable, Subject, Subscription} from 'rxjs';\nimport {IntentMessage, mapToBody, throwOnErrorStatus, TopicMessage} from '../../messaging.model';\nimport {BrokerGateway} from './broker-gateway';\nimport {MessagingChannel, PlatformTopics} from '../../ɵmessaging.model';\nimport {TopicMatcher} from '../../topic-matcher.util';\nimport {MessageClient, PublishOptions, RequestOptions} from './message-client';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {MessageHandler} from './message-handler';\nimport {takeUntil} from 'rxjs/operators';\n\nexport class ɵMessageClient implements MessageClient {\n\n  private readonly _brokerGateway = Beans.get(BrokerGateway);\n\n  public publish<T = any>(topic: string, message?: T, options?: PublishOptions): Promise<void> {\n    assertTopic(topic, {allowWildcardSegments: false});\n    const topicMessage: TopicMessage = {\n      topic,\n      retain: options?.retain ?? false,\n      headers: new Map(options?.headers || []),\n    };\n    setBodyIfDefined(topicMessage, message);\n    return this._brokerGateway.postMessage(MessagingChannel.Topic, topicMessage);\n  }\n\n  public request$<T>(topic: string, request?: any, options?: RequestOptions): Observable<TopicMessage<T>> {\n    assertTopic(topic, {allowWildcardSegments: false});\n    // IMPORTANT:\n    // When sending a request, the platform adds various headers to the message. Therefore, to support multiple subscriptions\n    // to the returned Observable, each subscription must have its individual message instance and headers map.\n    // In addition, the headers are copied to prevent modifications before the effective subscription.\n    const headers = new Map(options?.headers || []);\n    return defer(() => {\n      const topicMessage: TopicMessage = {topic, retain: false, headers: new Map(headers) /* make a copy for each subscription to support multiple subscriptions */};\n      setBodyIfDefined(topicMessage, request);\n      return this._brokerGateway.requestReply$(MessagingChannel.Topic, topicMessage).pipe(throwOnErrorStatus());\n    });\n  }\n\n  public observe$<T>(topic: string): Observable<TopicMessage<T>> {\n    assertTopic(topic, {allowWildcardSegments: true});\n    return this._brokerGateway.subscribeToTopic$<T>(topic);\n  }\n\n  public onMessage<IN = any, OUT = any>(topic: string, callback: (message: TopicMessage<IN>) => Observable<OUT> | Promise<OUT> | OUT | void): Subscription {\n    return new MessageHandler(Beans.get(MessageClient).observe$<IN>(topic), callback).subscription;\n  }\n\n  public subscriberCount$(topic: string): Observable<number> {\n    assertTopic(topic, {allowWildcardSegments: false});\n    return new Observable<number>(observer => {\n      const unsubscribe$ = new Subject<void>();\n      this.request$<number>(PlatformTopics.RequestSubscriberCount, topic)\n        .pipe(\n          mapToBody(),\n          takeUntil(unsubscribe$),\n        )\n        .subscribe({\n          next: reply => observer.next(reply),\n          error: error => observer.error(error),\n          complete: noop, // As per the API, the Observable never completes, even if receiving a TERMINAL signal.\n        });\n      return (): void => unsubscribe$.next();\n    });\n  }\n}\n\nfunction assertTopic(topic: string, options: {allowWildcardSegments: boolean}): void {\n  if (topic === undefined || topic === null || topic.length === 0) {\n    throw Error('[IllegalTopicError] Topic must not be `null`, `undefined` or empty');\n  }\n\n  if (!options.allowWildcardSegments && TopicMatcher.containsWildcardSegments(topic)) {\n    throw Error(`[IllegalTopicError] Topic not allowed to contain wildcard segments. [topic='${topic}']`);\n  }\n}\n\nfunction setBodyIfDefined<T>(message: TopicMessage<T> | IntentMessage<T>, body?: T): void {\n  if (body !== undefined) {\n    message.body = body;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {APP_IDENTITY, Manifest} from '../platform.model';\nimport {PlatformState} from '../platform-state';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {MicrofrontendPlatformRef} from '../microfrontend-platform-ref';\nimport {ApplicationConfig} from './application-config';\nimport {HostConfig} from './host-config';\n\n/**\n * Creates the {@link ApplicationConfig} for the host app.\n */\nexport function createHostApplicationConfig(hostConfig: HostConfig | undefined): ApplicationConfig {\n  return {\n    symbolicName: Beans.get(APP_IDENTITY),\n    manifestUrl: provideHostManifestUrl(hostConfig?.manifest),\n    scopeCheckDisabled: hostConfig?.scopeCheckDisabled,\n    intentionCheckDisabled: hostConfig?.intentionCheckDisabled,\n    intentionRegisterApiDisabled: hostConfig?.intentionRegisterApiDisabled,\n  };\n}\n\nfunction provideHostManifestUrl(hostManifest: string | Manifest | undefined): string {\n  if (typeof hostManifest === 'string') {\n    return hostManifest; // URL specified\n  }\n\n  return serveHostManifest(hostManifest || {name: 'Host Application'});\n}\n\nfunction serveHostManifest(manifest: Manifest): string {\n  const url = URL.createObjectURL(new Blob([JSON.stringify(manifest)], {type: 'application/json'}));\n  Beans.get(MicrofrontendPlatformRef).whenState(PlatformState.Stopped).then(() => URL.revokeObjectURL(url));\n  return url;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {MicrofrontendPlatformRef} from './microfrontend-platform-ref';\n\n/**\n * Stops the platform and disconnect this client from the host when the document is being unloaded.\n *\n * For this purpose, this class binds to the browser's `unload` event. It does not bind to the `beforeunload`\n * event since the browser fires that event only when navigating to another page, but not when removing the iframe.\n */\nexport abstract class MicrofrontendPlatformStopper {\n}\n\n/**\n * @internal\n */\nexport class ɵMicrofrontendPlatformStopper implements MicrofrontendPlatformStopper, PreDestroy {\n\n  private onUnload = (): void => Beans.get(MicrofrontendPlatformRef).destroy();\n\n  constructor() { // eslint-disable-line @typescript-eslint/member-ordering\n    window.addEventListener('unload', this.onUnload, {once: true});\n  }\n\n  public preDestroy(): void {\n    window.removeEventListener('unload', this.onUnload);\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {Subject} from 'rxjs';\nimport {Client} from './client';\nimport {Logger, LoggingContext} from '../../logger';\nimport {ClientRegistry} from './client.registry';\n\nexport class ɵClientRegistry implements ClientRegistry, PreDestroy {\n\n  private readonly _clientsById = new Map<string, Client>();\n  private readonly _clientsByWindow = new Map<Window, Client>();\n  public readonly unregister$ = new Subject<Client>();\n\n  public registerClient(client: Client): void {\n    const staleClient = this._clientsByWindow.get(client.window);\n    if (staleClient) {\n      Beans.get(Logger).warn(\n        `[StaleClient] Stale client registration detected when loading application '${client.application.symbolicName}'\n        into the window of '${staleClient.application.symbolicName}'. Removing stale registration. Most likely, the client could not disconnect\n        from the broker, for example, because the client was disposed without notice, i.e., without receiving the browser's \"unload\" event, or\n        because the browser discarded the 'DISCONNECT' message, maybe due to a high load on the client during unloading.`.replace(/\\s+/g, ' '),\n        new LoggingContext(staleClient.application.symbolicName, staleClient.version),\n      );\n      this.unregisterClient(staleClient);\n    }\n    this._clientsById.set(client.id, client);\n    this._clientsByWindow.set(client.window, client);\n  }\n\n  public unregisterClient(client: Client): void {\n    this._clientsById.delete(client.id);\n    this._clientsByWindow.delete(client.window);\n    this.unregister$.next(client);\n    client.dispose();\n  }\n\n  public getByClientId(clientId: string): Client | undefined {\n    return this._clientsById.get(clientId);\n  }\n\n  public getByWindow(window: Window): Client | undefined {\n    return this._clientsByWindow.get(window);\n  }\n\n  public getByApplication(appSymbolicName: string): Client[] {\n    return Array.from(this._clientsById.values()).filter(client => client.application.symbolicName === appSymbolicName);\n  }\n\n  public preDestroy(): void {\n    this._clientsById.forEach(client => this.unregisterClient(client));\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MessageClient} from './client/messaging/message-client';\nimport {IntentClient} from './client/messaging/intent-client';\nimport {ManifestRegistry} from './host/manifest-registry/manifest-registry';\nimport {ApplicationRegistry} from './host/application-registry';\nimport {BehaviorSubject, from, Observable, Subject} from 'rxjs';\nimport {ConnectOptions} from './client/connect-options';\nimport {MicrofrontendPlatformConfig} from './host/microfrontend-platform-config';\nimport {PlatformPropertyService} from './platform-property-service';\nimport {ConsoleLogger, Logger} from './logger';\nimport {HttpClient} from './host/http-client';\nimport {ManifestCollector} from './host/manifest-collector';\nimport {MessageBroker} from './host/message-broker/message-broker';\nimport {first, takeUntil} from 'rxjs/operators';\nimport {OutletRouter} from './client/router-outlet/outlet-router';\nimport {SciRouterOutletElement} from './client/router-outlet/router-outlet.element';\nimport {FocusInEventDispatcher} from './client/focus/focus-in-event-dispatcher';\nimport {FocusMonitor} from './client/focus/focus-monitor';\nimport {ContextService} from './client/context/context-service';\nimport {RouterOutletUrlAssigner} from './client/router-outlet/router-outlet-url-assigner';\nimport {APP_IDENTITY, IS_PLATFORM_HOST, ɵAPP_CONFIG} from './platform.model';\nimport {RelativePathResolver} from './client/router-outlet/relative-path-resolver';\nimport {ClientRegistry} from './host/client-registry/client.registry';\nimport {FocusTracker} from './host/focus/focus-tracker';\nimport {PreferredSizeService} from './client/preferred-size/preferred-size-service';\nimport {MouseMoveEventDispatcher} from './client/mouse-event/mouse-move-event-dispatcher';\nimport {MouseUpEventDispatcher} from './client/mouse-event/mouse-up-event-dispatcher';\nimport {KeyboardEventDispatcher} from './client/keyboard-event/keyboard-event-dispatcher';\nimport {ManifestService} from './client/manifest-registry/manifest-service';\nimport {ɵManifestRegistry} from './host/manifest-registry/ɵmanifest-registry';\nimport {ActivatorInstaller} from './host/activator/activator-installer';\nimport {BrokerGateway, NullBrokerGateway, ɵBrokerGateway} from './client/messaging/broker-gateway';\nimport {PlatformState, Runlevel} from './platform-state';\nimport {BeanInstanceConstructInstructions, Beans} from '@scion/toolkit/bean-manager';\nimport {ɵIntentClient} from './client/messaging/ɵintent-client';\nimport {ɵMessageClient} from './client/messaging/ɵmessage-client';\nimport {MicrofrontendPlatformRef} from './microfrontend-platform-ref';\nimport {ProgressMonitor} from './host/progress-monitor/progress-monitor';\nimport {ActivatorLoadProgressMonitor, ManifestLoadProgressMonitor} from './host/progress-monitor/progress-monitors';\nimport {PlatformTopics} from './ɵmessaging.model';\nimport {createHostApplicationConfig} from './host/host-application-config-provider';\nimport {HostManifestInterceptor, ɵHostManifestInterceptor} from './host/host-manifest-interceptor';\nimport {ApplicationConfig} from './host/application-config';\nimport {TopicSubscriptionRegistry} from './host/message-broker/topic-subscription.registry';\nimport {CLIENT_HEARTBEAT_INTERVAL, STALE_CLIENT_UNREGISTER_DELAY} from './host/client-registry/client.constants';\nimport {MicrofrontendPlatformStopper, ɵMicrofrontendPlatformStopper} from './microfrontend-platform-stopper';\nimport {VERSION} from './version';\nimport {ɵClientRegistry} from './host/client-registry/ɵclient.registry';\n\n/**\n * Current version of the SCION Microfrontend Platform.\n */\nconst version = '1.0.0-rc.3';\n\n/**\n * **SCION Microfrontend Platform is a TypeScript-based open-source library that helps to implement a microfrontend architecture.**\n *\n * SCION Microfrontend Platform enables you to successfully implement a framework-agnostic microfrontend architecture using iframes.\n * It provides you fundamental APIs for microfrontends to communicate with each other across origin, allows embedding microfrontends\n * using a web component and enables routing between microfrontends. SCION Microfrontend Platform is a lightweight, web stack agnostic\n * library that has no user-facing components and does not dictate any form of application structure.\n *\n * You can continue using the frameworks you love since the platform integrates microfrontends via iframes. Iframes by nature provide\n * maximum isolation and allow the integration of any web application without complex adaptation. The platform aims to shield developers\n * from iframe specifics and the low-level messaging mechanism to focus instead on integrating microfrontends.\n *\n * #### Cross-microfrontend communication\n * The platform adds a pub/sub layer on top of the native `postMessage` mechanism to allow microfrontends to communicate with each other\n * easily across origins. Communication comes in two flavors: topic-based and intent-based. Both models feature the request-response message\n * exchange pattern, let you include message headers, and support message interception to implement cross-cutting messaging concerns.\n *\n * Topic-based messaging enables you to publish messages to multiple subscribers via a common topic. Intent-based communication focuses on\n * controlled collaboration between applications. To collaborate, an application must express an intention. Manifesting intentions allows\n * us to see dependencies between applications down to the functional level.\n *\n * #### Microfrontend Integration and Routing\n * The platform makes it easy to integrate microfrontends through its router-outlet. The router-outlet is a web component that wraps an iframe.\n * It solves many of the cumbersome quirks of iframes and helps to overcome iframe restrictions. For example, it can adapt its size to the\n * preferred size of embedded content, supports keyboard event propagation and allows you to pass contextual data to embedded content.\n * Using the router, you control which web content to display in an outlet. Multiple outlets can display different content, determined by\n * different outlet names, all at the same time. Routing works across application boundaries and enables features such as persistent navigation.\n *\n * ***\n *\n * A microfrontend architecture can be achieved in many different ways, each with its pros and cons. The SCION Microfrontend Platform uses\n * the iframe approach primarily since iframes by nature provide the highest possible level of isolation through a separate browsing context.\n * The microfrontend design approach is very tempting and has obvious advantages, especially for large-scale and long-lasting projects, most\n * notably because we are observing an enormous dynamic in web frameworks. The SCION Microfrontend Platform provides you with the necessary\n * tools to best support you in implementing such an architecture.\n *\n * @see {@link MessageClient}\n * @see {@link IntentClient}\n * @see {@link SciRouterOutletElement}\n * @see {@link OutletRouter}\n * @see {@link ContextService}\n * @see {@link PreferredSizeService}\n * @see {@link ManifestService}\n * @see {@link FocusMonitor}\n * @see {@link Activator}\n *\n * @category Platform\n */\n// @dynamic `ng-packagr` does not support lambdas in statics if `strictMetaDataEmit` is enabled. `ng-packagr` is used to build this library. See https://github.com/ng-packagr/ng-packagr/issues/696#issuecomment-373487183.\nexport class MicrofrontendPlatform {\n\n  private static _state$ = new BehaviorSubject<PlatformState>(PlatformState.Stopped);\n  private static _startupProgress$ = new Subject<number>();\n\n  /**\n   * Starts the platform in the host application.\n   *\n   * The host application, sometimes also called the container application, provides the top-level integration container for microfrontends. Typically, it is the web\n   * application which the user loads into his browser that provides the main application shell, defining areas to embed microfrontends.\n   *\n   * The platform should be started during bootstrapping of the host application. In Angular, for example, the platform is typically started in an app initializer.\n   *\n   * In the host, the web applications are registered as micro applications. Registered micro applications can interact with the platform and other micro applications.\n   * As with micro applications, the host can provide a manifest to contribute behavior. For more information, see {@link MicrofrontendPlatformConfig.host.manifest}.\n   * If you are integrating the platform in a library, you may want to add behavior to the host's manifest, which you can do with a {@link HostManifestInterceptor}.\n   *\n   * During platform startup, the platform loads the manifests of registered micro applications. Because starting the platform is an asynchronous operation, you should\n   * wait for the startup Promise to resolve before interacting with the platform. Optionally, you can subscribe to the platform’s startup progress to provide feedback\n   * to the user about the progress of the platform startup. See {@link MicrofrontendPlatform.startupProgress$} for more information.\n   *\n   * In the lifecycle of the platform, it traverses different lifecycle states that you can hook into by registering a callback to {@link MicrofrontendPlatform.whenState}.\n   * To hook into the startup of the platform, you can register an initializer using {@link Beans.registerInitializer}, optionally passing a runlevel to control when the initializer\n   * will execute. The platform supports following runlevels:\n   *\n   * - In runlevel `0`, the platform fetches manifests of registered micro applications.\n   * - In runlevel `1`, the platform constructs eager beans and connects to the broker.\n   * - From runlevel `2` and above, messaging is enabled. This is the default runlevel at which initializers execute if not specifying any runlevel.\n   * - In runlevel `3`, the platform installs activator microfrontends. See https://scion-microfrontend-platform-developer-guide.vercel.app/#chapter:activator to learn more about activators.\n   *\n   * @param  config - Configures the platform and defines the micro applications running in the platform.\n   * @return A Promise that resolves once platform startup completed.\n   */\n  public static startHost(config: MicrofrontendPlatformConfig): Promise<void> {\n    return MicrofrontendPlatform.startPlatform(async () => {\n        MicrofrontendPlatform.installHostStartupProgressMonitor();\n\n        // Register platform beans.\n        Beans.register(VERSION, {useValue: version, destroyOrder: BeanDestroyOrders.CORE});\n        Beans.register(APP_IDENTITY, {useValue: config.host?.symbolicName || 'host'});\n        Beans.register(MicrofrontendPlatformConfig, {useValue: config});\n        Beans.registerIfAbsent(MicrofrontendPlatformStopper, {useClass: ɵMicrofrontendPlatformStopper, eager: true});\n        Beans.register(IS_PLATFORM_HOST, {useValue: true});\n        Beans.register(HostManifestInterceptor, {useClass: ɵHostManifestInterceptor, multi: true});\n        Beans.register(ClientRegistry, {useClass: ɵClientRegistry, destroyOrder: BeanDestroyOrders.CORE});\n        Beans.registerIfAbsent(CLIENT_HEARTBEAT_INTERVAL, {useValue: (config.heartbeatInterval ?? 60) * 10_000});\n        Beans.registerIfAbsent(STALE_CLIENT_UNREGISTER_DELAY, {useValue: 2_000});\n        Beans.registerIfAbsent(Logger, {useClass: ConsoleLogger, destroyOrder: BeanDestroyOrders.CORE});\n        Beans.register(PlatformPropertyService);\n        Beans.registerIfAbsent(HttpClient);\n        Beans.register(ManifestRegistry, {useClass: ɵManifestRegistry, eager: true});\n        Beans.register(ApplicationRegistry, {eager: true});\n        Beans.register(ContextService);\n        Beans.register(FocusTracker, {eager: true});\n        Beans.register(FocusInEventDispatcher, {eager: true});\n        Beans.register(MouseMoveEventDispatcher, {eager: true});\n        Beans.register(MouseUpEventDispatcher, {eager: true});\n        Beans.register(MessageBroker, {destroyOrder: BeanDestroyOrders.BROKER});\n        Beans.register(TopicSubscriptionRegistry, {destroyOrder: BeanDestroyOrders.BROKER});\n        Beans.registerIfAbsent(OutletRouter);\n        Beans.registerIfAbsent(RelativePathResolver);\n        Beans.registerIfAbsent(RouterOutletUrlAssigner);\n        Beans.register(MicrofrontendPlatformRef, {useValue: MicrofrontendPlatform, destroyOrder: BeanDestroyOrders.CORE});\n        Beans.registerIfAbsent(MessageClient, provideMessageClient());\n        Beans.registerIfAbsent(IntentClient, provideIntentClient());\n        Beans.register(FocusMonitor);\n        Beans.register(PreferredSizeService);\n        Beans.register(ManifestService);\n        Beans.register(KeyboardEventDispatcher, {eager: true});\n\n        // Register broker gateway.\n        registerBrokerGateway({\n          messageDeliveryTimeout: config.host?.messageDeliveryTimeout,\n          brokerDiscoverTimeout: config.host?.brokerDiscoverTimeout,\n          connectRunlevel: Runlevel.One, // Connect to the broker in runlevel 1, that is, after registration of the applications.\n        });\n\n        // Register initializers.\n        registerRunlevel0Initializers();\n        registerRunlevel2Initializers();\n        registerRunlevel3Initializers();\n\n        // Register app configs under the symbol `ɵAPP_CONFIG` in the bean manager.\n        new Array<ApplicationConfig>()\n          .concat(createHostApplicationConfig(config.host))\n          .concat(config.applications)\n          .filter(application => !application.exclude)\n          .forEach(application => Beans.register(ɵAPP_CONFIG, {useValue: application, multi: true}));\n      },\n    );\n\n    /**\n     * Registers initializers to run in runlevel 0.\n     */\n    function registerRunlevel0Initializers(): void {\n      // Construct the message broker to buffer connect requests of micro applications.\n      Beans.registerInitializer({useExisting: MessageBroker, runlevel: Runlevel.Zero});\n      // Fetch manifests.\n      Beans.registerInitializer({useClass: ManifestCollector, runlevel: Runlevel.Zero});\n    }\n\n    /**\n     * Registers initializers to run in runlevel 2.\n     */\n    function registerRunlevel2Initializers(): void {\n      // Make platform properties available to micro applications.\n      Beans.registerInitializer({\n        useFunction: () => Beans.get(MessageClient).publish(PlatformTopics.PlatformProperties, config.properties || {}, {retain: true}),\n        runlevel: Runlevel.Two,\n      });\n      // Make applications available to micro applications.\n      Beans.registerInitializer({\n        useFunction: () => Beans.get(MessageClient).publish(PlatformTopics.Applications, Beans.get(ApplicationRegistry).getApplications(), {retain: true}),\n        runlevel: Runlevel.Two,\n      });\n      // Register the router outlet after beans have been registered and messaging is enabled.\n      Beans.registerInitializer({\n        useFunction: () => SciRouterOutletElement.define(),\n        runlevel: Runlevel.Two,\n      });\n    }\n\n    /**\n     * Registers initializers to run in runlevel 3.\n     */\n    function registerRunlevel3Initializers(): void {\n      // Wait until obtained platform properties so that they can be accessed synchronously by the application via `PlatformPropertyService#properties`.\n      Beans.registerInitializer({\n        useExisting: PlatformPropertyService,\n        runlevel: Runlevel.Three,\n      });\n      // Wait until obtained registered applications so that they can be accessed synchronously by the application via `ManifestService#applications`.\n      Beans.registerInitializer({\n        useExisting: ManifestService,\n        runlevel: Runlevel.Three,\n      });\n      // Install activator microfrontends.\n      Beans.registerInitializer({useClass: ActivatorInstaller, runlevel: Runlevel.Three});\n    }\n  }\n\n  /**\n   * Connects a micro application to the platform host.\n   *\n   * The platform host checks whether the connecting micro application is qualified to connect, i.e., is registered in the host application under that origin;\n   * otherwise, the host will reject the connection attempt. Note that the micro application needs to be embedded as a direct or indirect child window of the\n   * host application window.\n   *\n   * After the connection with the platform host is established, the micro application can interact with the host and other micro applications. Typically, the\n   * micro application connects to the platform host during bootstrapping. In Angular, for example, this can be done in an app initializer.\n   *\n   * In the lifecycle of the platform, it traverses different lifecycle states that you can hook into by registering a callback to {@link MicrofrontendPlatform.whenState}.\n   *\n   * @param  symbolicName - Specifies the symbolic name of this micro application. The micro application must be registered in the platform host under this symbol.\n   * @param  connectOptions - Controls how to connect to the platform host.\n   * @return A Promise that resolves once connected to the platform host, or that rejects otherwise.\n   */\n  public static connectToHost(symbolicName: string, connectOptions?: ConnectOptions): Promise<void> {\n    return MicrofrontendPlatform.startPlatform(async () => {\n        this.installClientStartupProgressMonitor();\n\n        // Register platform beans.\n        Beans.register(IS_PLATFORM_HOST, {useValue: false});\n        Beans.register(APP_IDENTITY, {useValue: symbolicName});\n        Beans.register(VERSION, {useValue: version, destroyOrder: BeanDestroyOrders.CORE});\n        Beans.registerIfAbsent(MicrofrontendPlatformStopper, {useClass: ɵMicrofrontendPlatformStopper, eager: true});\n        Beans.register(PlatformPropertyService);\n        Beans.registerIfAbsent(Logger, {useClass: ConsoleLogger, destroyOrder: BeanDestroyOrders.CORE});\n        Beans.registerIfAbsent(HttpClient);\n        Beans.registerIfAbsent(MessageClient, provideMessageClient());\n        Beans.registerIfAbsent(IntentClient, provideIntentClient());\n        Beans.registerIfAbsent(OutletRouter);\n        Beans.registerIfAbsent(RelativePathResolver);\n        Beans.registerIfAbsent(RouterOutletUrlAssigner);\n        Beans.register(FocusInEventDispatcher, {eager: true});\n        Beans.register(FocusMonitor);\n        Beans.register(MouseMoveEventDispatcher, {eager: true});\n        Beans.register(MouseUpEventDispatcher, {eager: true});\n        Beans.register(PreferredSizeService);\n        Beans.register(ContextService);\n        Beans.register(ManifestService);\n        Beans.register(KeyboardEventDispatcher, {eager: true});\n        Beans.register(MicrofrontendPlatformRef, {useValue: MicrofrontendPlatform, destroyOrder: BeanDestroyOrders.CORE});\n\n        // Register broker gateway.\n        registerBrokerGateway({...connectOptions, connectRunlevel: Runlevel.Zero});\n\n        // Register initializers.\n        registerRunlevel2Initializers();\n      },\n    );\n\n    /**\n     * Registers initializers to run in runlevel 2.\n     */\n    function registerRunlevel2Initializers(): void {\n      // Wait until obtained platform properties so that they can be accessed synchronously by the application via `PlatformPropertyService#properties`.\n      Beans.registerInitializer({\n        useExisting: PlatformPropertyService,\n        runlevel: Runlevel.Two,\n      });\n      // Wait until obtained registered applications so that they can be accessed synchronously by the application via `ManifestService#applications`.\n      Beans.registerInitializer({\n        useExisting: ManifestService,\n        runlevel: Runlevel.Two,\n      });\n      // Ensure the SciRouterOutlet to be instantiated after initialization of the platform.\n      // Otherwise, the router outlet construction may fail or result in unexpected behavior, for example, because beans are not yet registered.\n      Beans.registerInitializer({\n        useFunction: () => SciRouterOutletElement.define(),\n        runlevel: Runlevel.Two,\n      });\n    }\n  }\n\n  /**\n   * Checks whether this micro application is connected to the platform host.\n   */\n  public static async isConnectedToHost(): Promise<boolean> {\n    if (MicrofrontendPlatform.state === PlatformState.Stopped) {\n      return false;\n    }\n    const brokerGateway = Beans.opt(BrokerGateway);\n    if (!brokerGateway) {\n      return false;\n    }\n    return brokerGateway.isConnected();\n  }\n\n  /**\n   * Destroys this platform and releases resources allocated.\n   *\n   * @return a Promise that resolves once the platformed stopped.\n   */\n  public static async destroy(): Promise<void> {\n    await MicrofrontendPlatform.enterState(PlatformState.Stopping);\n    Beans.destroy();\n    await MicrofrontendPlatform.enterState(PlatformState.Stopped);\n  }\n\n  /** @internal */\n  public static async startPlatform(startupFn?: () => Promise<void>): Promise<void> {\n    await MicrofrontendPlatform.enterState(PlatformState.Starting);\n    try {\n      await startupFn?.();\n      await Beans.start({eagerBeanConstructRunlevel: Runlevel.One, initializerDefaultRunlevel: Runlevel.Two});\n      await MicrofrontendPlatform.enterState(PlatformState.Started);\n      return Promise.resolve();\n    }\n    catch (error) {\n      await MicrofrontendPlatform.destroy();\n      return Promise.reject(`[MicrofrontendPlatformStartupError] Microfrontend platform failed to start: ${error}`);\n    }\n  }\n\n  /**\n   * @return the current platform state.\n   */\n  public static get state(): PlatformState {\n    return this._state$.getValue();\n  }\n\n  /**\n   * Allows waiting for the platform to enter the specified {@link PlatformState}.\n   * If already in that state, the Promise resolves instantly.\n   *\n   * @param  state - the state to wait for.\n   * @return A Promise that resolves when the platform enters the given state.\n   *         If already in that state, the Promise resolves instantly.\n   */\n  public static async whenState(state: PlatformState): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this._state$\n        .pipe(first(it => it === state))\n        .subscribe({\n          error: reject,\n          complete: resolve,\n        });\n    });\n  }\n\n  /**\n   * Observable that, when subscribed, emits the current platform lifecycle state.\n   * It never completes and emits continuously when the platform enters\n   * another state.\n   */\n  public static get state$(): Observable<PlatformState> {\n    return this._state$;\n  }\n\n  private static async enterState(newState: PlatformState): Promise<void> {\n    const currentState = (this.state === PlatformState.Stopped) ? -1 : this.state;\n    if (currentState >= newState) {\n      throw Error(`[PlatformStateError] Failed to enter platform state [prevState=${PlatformState[this.state]}, newState=${PlatformState[newState]}].`);\n    }\n\n    this._state$.next(newState);\n\n    // Let microtasks waiting for entering that state to resolve first.\n    await this.whenState(newState);\n  }\n\n  /**\n   * Allows listening to the startup progress of the platform.\n   *\n   * In the host, when the platform starts, it fetches the manifests of the registered applications, among other things,\n   * and waits for the applications to signal their readiness, which can take some time.\n   *\n   * You can subscribe to this Observable to provide feedback to the user about the progress of the platform startup.\n   * The Observable reports the progress as a percentage number. The Observable completes once the platform finished startup.\n   */\n  public static get startupProgress$(): Observable<number> {\n    return this._startupProgress$;\n  }\n\n  private static installHostStartupProgressMonitor(): void {\n    const monitor = new ProgressMonitor();\n\n    const [startupProgressMonitor, manifestLoadProgressMonitor, activatorLoadProgressMonitor] = monitor.split(1, 3, 5);\n    Beans.register(ManifestLoadProgressMonitor, {useValue: manifestLoadProgressMonitor});\n    Beans.register(ActivatorLoadProgressMonitor, {useValue: activatorLoadProgressMonitor});\n    MicrofrontendPlatform.whenState(PlatformState.Started).then(() => {\n      startupProgressMonitor.done();\n    });\n    MicrofrontendPlatform.whenState(PlatformState.Stopped).then(() => {\n      MicrofrontendPlatform._startupProgress$ = new Subject<number>();\n    });\n\n    monitor.progress$\n      .pipe(takeUntil(from(MicrofrontendPlatform.whenState(PlatformState.Started))))\n      .subscribe(MicrofrontendPlatform._startupProgress$);\n  }\n\n  private static installClientStartupProgressMonitor(): void {\n    const monitor = new ProgressMonitor();\n    MicrofrontendPlatform.whenState(PlatformState.Started).then(() => {\n      monitor.done();\n    });\n    MicrofrontendPlatform.whenState(PlatformState.Stopped).then(() => {\n      MicrofrontendPlatform._startupProgress$ = new Subject<number>();\n    });\n\n    monitor.progress$\n      .pipe(takeUntil(from(MicrofrontendPlatform.whenState(PlatformState.Started))))\n      .subscribe(MicrofrontendPlatform._startupProgress$);\n  }\n}\n\n/** @ignore */\nfunction registerBrokerGateway(connectOptions: ConnectOptions & {connectRunlevel: number}): void {\n  if (connectOptions.connect ?? true) {\n    Beans.register(ɵBrokerGateway, {\n      useFactory: () => new ɵBrokerGateway(connectOptions),\n      destroyOrder: BeanDestroyOrders.MESSAGING,\n    });\n    Beans.register(BrokerGateway, {useExisting: ɵBrokerGateway});\n    Beans.registerInitializer({useExisting: ɵBrokerGateway, runlevel: connectOptions.connectRunlevel});\n  }\n  else {\n    Beans.register(BrokerGateway, {useClass: NullBrokerGateway});\n  }\n}\n\n/** @ignore */\nfunction provideMessageClient(): BeanInstanceConstructInstructions {\n  return {\n    useClass: ɵMessageClient,\n    eager: true,\n    destroyOrder: BeanDestroyOrders.MESSAGING,\n  };\n}\n\n/** @ignore */\nfunction provideIntentClient(): BeanInstanceConstructInstructions {\n  return {\n    useClass: ɵIntentClient,\n    eager: true,\n    destroyOrder: BeanDestroyOrders.MESSAGING,\n  };\n}\n\n/**\n * Specifies destroy orders of platform-specific beans, enabling controlled termination of the platform.\n *\n * @ignore\n */\nenum BeanDestroyOrders {\n  /**\n   * Use for core platform beans which should be destroyed as the very last beans.\n   */\n  CORE = Number.MAX_SAFE_INTEGER,\n  /**\n   * Use for the {@link MessageBroker}.\n   */\n  BROKER = CORE - 1,\n  /**\n   * Use for messaging-related beans.\n   */\n  MESSAGING = BROKER - 1\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Manifest} from '../platform.model';\n\n/**\n * Configures the interaction of the host application with the platform.\n *\n * As with micro applications, you can provide a manifest for the host, allowing the host to contribute capabilities and declare intentions.\n *\n * @category Platform\n */\nexport abstract class HostConfig {\n  /**\n   * Symbolic name of the host. If not set, 'host' is used as the symbolic name of the host.\n   *\n   * The symbolic name must be unique and contain only lowercase alphanumeric characters and hyphens.\n   */\n  public abstract symbolicName?: string;\n  /**\n   * The manifest of the host.\n   *\n   * The manifest can be passed either as an {@link Manifest object literal} or specified as a URL to be loaded over the network.\n   * Providing a manifest lets the host contribute capabilities or declare intentions.\n   */\n  public abstract readonly manifest?: Manifest | string;\n  /**\n   * Controls whether the host can interact with private capabilities of other micro applications.\n   *\n   * By default, scope check is enabled. Disabling scope check is strongly discouraged.\n   */\n  public abstract readonly scopeCheckDisabled?: boolean;\n  /**\n   * Controls whether the host can interact with the capabilities of other apps without having to declare respective intentions.\n   *\n   * By default, intention check is enabled. Disabling intention check is strongly discouraged.\n   */\n  public abstract readonly intentionCheckDisabled?: boolean;\n  /**\n   * Controls whether the host can register and unregister intentions dynamically at runtime.\n   *\n   * By default, this API is disabled. Enabling this API is strongly discouraged.\n   */\n  public abstract readonly intentionRegisterApiDisabled?: boolean;\n  /**\n   * Maximum time (in milliseconds) that the platform waits to receive dispatch confirmation for messages sent by the host until rejecting the publishing Promise.\n   * By default, a timeout of 10s is used.\n   */\n  public abstract readonly messageDeliveryTimeout?: number;\n  /**\n   * Maximum time (in milliseconds) to wait until the message broker is discovered on platform startup. If the broker is not discovered within\n   * the specified time, platform startup fails with an error. By default, a timeout of 10s is used.\n   *\n   * @internal\n   */\n  public abstract readonly brokerDiscoverTimeout?: number;\n}\n","import {IntentClient, ManifestService, MessageClient, MessageHeaders, MicrofrontendPlatform, OutletRouter} from '@scion/microfrontend-platform';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\nwindow['__SCION_RCP'] = window['__SCION_RCP'] || {};\nwindow['__SCION_RCP'].refs = {\n  get MicrofrontendPlatform() {\n    return MicrofrontendPlatform;\n  },\n  get MessageClient() {\n    return Beans.get(MessageClient);\n  },\n  get IntentClient() {\n    return Beans.get(IntentClient);\n  },\n  get OutletRouter() {\n    return Beans.get(OutletRouter);\n  },\n  get ManifestService() {\n    return Beans.get(ManifestService);\n  },\n};\n"],"names":["parcelRequire","MAX_SAFE_COMPONENT_LENGTH","re","exports","module","src","t","R","createToken","name","value","isGlobal","index","$dvpiY","RegExp","undefined","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","$65334a193605b481$require$MAX_SAFE_COMPONENT_LENGTH","COERCE","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace","$ccfbe39734edce8a$var$MAX_SAFE_INTEGER","Number","MAX_SAFE_INTEGER","SEMVER_SPEC_VERSION","MAX_LENGTH","$pA5gb","$9d51ccae265a466f$var$debug","env","$hB7Jo","$8GGB9","compareIdentifiers","$34b0ff98b7ed6a68$var$SemVer","constructor","version","options","$d3X7n","loose","includePrerelease","TypeError","length","$34b0ff98b7ed6a68$require$MAX_LENGTH","this","m","trim","match","$34b0ff98b7ed6a68$require$re","$34b0ff98b7ed6a68$require$t","LOOSE","FULL","raw","major","minor","patch","$34b0ff98b7ed6a68$require$MAX_SAFE_INTEGER","prerelease","split","map","id","test","num","build","format","join","toString","compare","other","compareMain","comparePre","$34b0ff98b7ed6a68$require$compareIdentifiers","i","a","b","compareBuild","inc","release","identifier","push","isNaN","Error","$982969c7b736917e$var$opts","options1","filter","k","reduce","$ffd415568e29642a$var$numeric","$ffd415568e29642a$var$compareIdentifiers","anum","bnum","rcompareIdentifiers","$4wtse","$dbe9f7221dfe0c82$require$MAX_LENGTH","$dbe9f7221dfe0c82$require$re","$dbe9f7221dfe0c82$require$t","er","$iSAZC","v","s","replace","version1","version2","$5RRTJ","v1","v2","hasPre","prefix","defaultResult","key","$8F3OP","parsed","versionA","versionB","$htXfi","list","sort","op","$7phFd","$7QOKQ","$idAJQ","$cHrAw","$jZ7fd","String","rtl","next","$c140a62135e2796c$require$re","$c140a62135e2796c$require$t","COERCERTL","exec","lastIndex","$99144e60f20433c7$var$ANY","Symbol","$99144e60f20433c7$var$Comparator","ANY","comp","parse","semver","operator","r","$99144e60f20433c7$require$re","$99144e60f20433c7$require$t","COMPARATORLOOSE","COMPARATOR","$jonRq","intersects","$2h0j1","sameDirectionIncreasing","sameDirectionDecreasing","sameSemVer","differentDirectionsInclusive","oppositeDirectionsLessThan","oppositeDirectionsGreaterThan","$1a7d68043dbffde5$var$Range","range1","$d8PVR","set","range","parseRange","c","first","$1a7d68043dbffde5$var$isNullSet","$1a7d68043dbffde5$var$isAny","comps","memoKey","Object","keys","cached","$1a7d68043dbffde5$var$cache","get","hr","$1a7d68043dbffde5$require$re","$1a7d68043dbffde5$require$t","HYPHENRANGELOOSE","HYPHENRANGE","$1a7d68043dbffde5$var$hyphenReplace","COMPARATORTRIM","$1a7d68043dbffde5$require$comparatorTrimReplace","TILDETRIM","$1a7d68043dbffde5$require$tildeTrimReplace","CARETTRIM","$1a7d68043dbffde5$require$caretTrimReplace","compRe","rangeList","$1a7d68043dbffde5$var$parseComparator","$1a7d68043dbffde5$var$replaceGTE0","rangeMap","Map","comp1","size","has","delete","result","values","some","thisComparators","$1a7d68043dbffde5$var$isSatisfiable","rangeComparators","every","thisComparator","rangeComparator","$1a7d68043dbffde5$var$testSet","max","comparators","remainingComparators","slice","testComparator","pop","otherComparator","$1a7d68043dbffde5$var$replaceCarets","$1a7d68043dbffde5$var$replaceTildes","$1a7d68043dbffde5$var$replaceXRanges","$1a7d68043dbffde5$var$replaceStars","$1a7d68043dbffde5$var$isX","toLowerCase","comp2","$1a7d68043dbffde5$var$replaceTilde","TILDELOOSE","TILDE","_","M","p","pr","ret","comp3","$1a7d68043dbffde5$var$replaceCaret","CARETLOOSE","CARET","z","comp4","$1a7d68043dbffde5$var$replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","anyX","STAR","GTE0PRE","GTE0","incPr","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","tb","allowed","$20d1f5bd3cbffe38$var$MAX","$20d1f5bd3cbffe38$var$LENGTH","$20d1f5bd3cbffe38$var$LENGTH_CALCULATOR","$20d1f5bd3cbffe38$var$ALLOW_STALE","$20d1f5bd3cbffe38$var$MAX_AGE","$20d1f5bd3cbffe38$var$DISPOSE","$20d1f5bd3cbffe38$var$NO_DISPOSE_ON_SET","$20d1f5bd3cbffe38$var$LRU_LIST","$20d1f5bd3cbffe38$var$CACHE","$20d1f5bd3cbffe38$var$UPDATE_AGE_ON_GET","$20d1f5bd3cbffe38$var$naiveLength","$20d1f5bd3cbffe38$var$get","self","doUse","node","hit","$20d1f5bd3cbffe38$var$isStale","$20d1f5bd3cbffe38$var$del","now","Date","unshiftNode","maxAge","diff","$20d1f5bd3cbffe38$var$trim","walker","tail","prev","removeNode","$20d1f5bd3cbffe38$var$Entry","$20d1f5bd3cbffe38$var$forEachStep","fn","thisp","call","Infinity","lc","stale","dispose","noDisposeOnSet","updateAgeOnGet","reset","mL","allowStale","mA","lengthCalculator","lC","forEach","itemCount","rforEach","head","toArray","$axaYp","dump","e","h","dumpLru","len","item","unshift","peek","del","load","arr","l","expiresAt","prune","$7ab57f8d0ad04f0c$var$Yallist","arguments","$7ab57f8d0ad04f0c$var$insert","inserted","$7ab57f8d0ad04f0c$var$Node","$7ab57f8d0ad04f0c$var$push","$7ab57f8d0ad04f0c$var$unshift","Node","create","prototype","pushNode","res","shift","forEachReverse","n","getReverse","mapReverse","initial","acc","reduceReverse","Array","toArrayReverse","sliceReverse","splice","start","deleteCount","nodes","reverse","Yallist","iterator","versions","maxSV","rangeObj","min","minSV","minver","setMin","comparator","compver","$5264a412d80a644a$var$ANY","hilo","gtfn","ltefn","ltfn","ecomp","$iPUQq","high","low","$74zKN","r1","r2","ranges","min1","simplified","original","$442a419d852084f5$var$ANY","$442a419d852084f5$var$simpleSubset","sub","dom","eqSet","Set","gt","lt","gtltComp","higher","lower","hasDomLT","hasDomGT","$442a419d852084f5$var$higherGT","$442a419d852084f5$var$lowerLT","add","eq","needDomLTPre","needDomGTPre","c1","sawNonNull","OUTER","simpleSub","simpleDom","isSub","ERROR","WINDOW","window","root","JS_SHA256_NO_WINDOW","WEB_WORKER","NODE_JS","JS_SHA256_NO_NODE_JS","$parcel$global","COMMON_JS","JS_SHA256_NO_COMMON_JS","AMD","define","amd","ARRAY_BUFFER","JS_SHA256_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","EXTRA","SHIFT","K","OUTPUT_TYPES","blocks1","isArray","obj","JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW","isView","buffer","createOutputMethod","outputType","is224","message","Sha256","update","createMethod","method","nodeWrap","type","crypto","eval","Buffer","algorithm","nodeMethod","createHash","digest","Uint8Array","createHmacOutputMethod","HmacSha256","createHmacMethod","sharedMemory","blocks","h0","h1","h2","h3","h4","h5","h6","h7","block","bytes","hBytes","finalized","hashed","code","charCodeAt","array","oKeyPad","iKeyPad","inner","notString","lastByteIndex","hash","finalize","j","s0","s1","maj","t1","ab","da","cd","bc","d","f","g","hex","arrayBuffer","dataView","DataView","setUint32","innerHash","sha256","sha224","hmac","$746141bbf30b1d44$var$extendStatics","d1","b1","setPrototypeOf","__proto__","hasOwnProperty","$746141bbf30b1d44$export$a8ba968b8961cb8a","__","$746141bbf30b1d44$export$18ce0697a983be9b","assign","apply","$746141bbf30b1d44$export$3c9a16f847548506","indexOf","getOwnPropertySymbols","propertyIsEnumerable","$746141bbf30b1d44$export$29e00dfd3077644b","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","$746141bbf30b1d44$export$d5ad3fd78186038f","paramIndex","decorator","metadataKey","metadataValue","metadata","$746141bbf30b1d44$export$1050f835b63b671e","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","rejected","done","then","$746141bbf30b1d44$export$67ebef60e6f28a6","body","label","sent","verb","throw","return","y","ops","trys","$746141bbf30b1d44$export$45d3717a4c69092e","o","k2","enumerable","$746141bbf30b1d44$export$f33643c0debef087","$746141bbf30b1d44$export$19a8beecd37a4c45","$746141bbf30b1d44$export$8d051b38c9118094","ar","error","concat","$746141bbf30b1d44$export$6388937ca91ccae8","il","jl","$746141bbf30b1d44$export$1216008129fb82ed","pack","$746141bbf30b1d44$export$10c90e4f7922046c","q","asyncIterator","resume","fulfill","settle","$746141bbf30b1d44$export$bbd80228419bb833","$746141bbf30b1d44$export$e3b29a3d6162315f","$746141bbf30b1d44$export$4fb47efe1390b86f","cooked","$746141bbf30b1d44$export$c21735bcef00d192","mod","__esModule","$746141bbf30b1d44$var$__setModuleDefault","$746141bbf30b1d44$export$da59b14a69baef04","default","$e996a377a476308b$export$f6e2535fb5126e54","$84b00e98e2449571$export$128a15b65d1b6041","createImpl","ctorFunc","instance","stack","$ea002fe37e02483f$export$c9648b76fd580c34","_super","errors","err","$e982355222966567$export$dae3f38077fc36c0","$5124a93ca0cff8ae$export$f55210826850c514","initialTeardown","closed","_parentage","_finalizers","empty","unsubscribe","_parentage_1","_parentage_1_1","remove","initialFinalizer","_finalizers_1","_finalizers_1_1","finalizer","$5124a93ca0cff8ae$var$execFinalizer","teardown","_hasParent","_addParent","_a","parent","includes","_removeParent","EMPTY","$5124a93ca0cff8ae$export$610f9c3ca1a38dd8","$5124a93ca0cff8ae$export$4f9221cbada3c4fc","$ed09702a4a712d45$export$e506a1d27d1eaa20","onUnhandledError","onStoppedNotification","useDeprecatedSynchronousErrorHandling","useDeprecatedNextContext","$9cfc76a232e78ed6$export$365aa6bd3c788e3d","setTimeout","handler","timeout","args","_i","delegate","clearTimeout","handle","$e95832991341c572$export$ebf645db02d3e99f","$a2669f8c8173c8d3$export$8793edee2d425525","$a4b08c076fa88601$export$b7f97edb34bc1f87","$a4b08c076fa88601$export$9c8f6e8d39c60cf3","$a4b08c076fa88601$export$dd472c3d8fe5a85a","$a4b08c076fa88601$export$ff9346b0d1d30313","kind","$97e50eda4820bbda$var$context","$97e50eda4820bbda$export$d974811edc77eafa","cb","isRoot","errorThrown","$97e50eda4820bbda$export$3e205fbb5df021e0","$144251abd0e070aa$export$60959659b2c22881","destination","_this","isStopped","$144251abd0e070aa$export$88d395d20619a0af","complete","$144251abd0e070aa$export$94eeb6a328cab6c7","$144251abd0e070aa$var$handleStoppedNotification","_next","_error","_complete","$144251abd0e070aa$var$_bind","Function","bind","$144251abd0e070aa$var$bind","$144251abd0e070aa$var$ConsumerObserver","ConsumerObserver","partialObserver","$144251abd0e070aa$var$handleUnhandledError","observerOrNext","context_1","$144251abd0e070aa$var$defaultErrorHandler","notification","subscriber","$ea15a553d1249983$export$5ab46cbf6120b33a","observable","$d964bb9c87650d9b$export$f0954fd7d5368655","x","$105ed219d50c6c26$export$a4627e546088548d","fns","$105ed219d50c6c26$export$71f88a61afaa14d7","input","$157495f65d1fedd6$export$77cea355fa80b5f4","subscribe","_subscribe","lift","source","$157495f65d1fedd6$var$isSubscriber","_trySubscribe","sink","promiseCtor","$157495f65d1fedd6$var$getPromiseCtor","pipe","operations","toPromise","$157495f65d1fedd6$var$isObserver","$fc094a53485b6f1b$export$f708eee25634bc80","$489dabb836a96717$export$b6bbab5a9b109038","currentObservers","observers","hasError","thrownError","subject","$489dabb836a96717$export$155189cde295587d","_throwIfClosed","_b","_c","_checkFinalizedStatuses","_innerSubscribe","asObservable","$30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b","_value","getValue","subscription","$8777e340304a87e2$export$c1895ea2d519a677","$3abb0c810830a073$export$915d2682b0aa0991","_bufferSize","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","Math","_trimBuffer","copy","adjustedBufferSize","last","$d80e01a928648151$export$fe960da701faae26","_hasValue","_isComplete","$eec29157d02a25b0$export$78f6d1b1dbcda304","$7b246f86cff85ef0$export$a175cc82f1f2275e","config","hasConfig","defaultValue","$f03dcc354f8c1062$export$400f9f949cef996c","$e731e77718be64fd$export$e19cd5f9376f8cee","scheduler","work","schedule","state","delay","$a4abb0157f6db370$export$f0ca5e16f6f68711","setInterval","clearInterval","$331a777e5f6dff82$export$b5369ffd7cb2211b","pending","recycleAsyncId","requestAsyncId","_id","flush","_scheduler","execute","_execute","_delay","errorValue","errored","actions","$699ca6a12b1d5e7c$export$d3e54bb8584cda7c","schedulerActionCtor","$16ada899f929327b$export$4114a3ec92faa3c6","SchedulerAction","_active","_scheduled","action","$03059729cc91d1d5$export$8d6b71a2b178fc32","$03059729cc91d1d5$export$12af436354f1a4f7","$df0ca230b4c087cb$export$c03bb0116ee09d4b","$b70519f632db53cb$export$ebec8610810318c5","$b70519f632db53cb$export$871731df685d7753","init","liftedSource","$91d542d0b784d24b$export$1e2f57719e155213","$7700e3a10fed84ae$export$4369c812aac99591","$ba3895138ebfd0d0$export$48c0cddbc99c45c2","$8b01cc4a4fa9c790$export$edb10ab8dd75a915","$80eb79c79e8b4ce6$export$7cbe71b9fa263484","$10702573cd9f2753$export$aa9956be4ae4fe8","$10702573cd9f2753$export$6f58e2338da23f4d","$3172d966b15186c2$export$9652023d9040757","$022971cd29cb3478$export$cf4785e597badab3","readableStream","reader","getReader","read","releaseLock","$022971cd29cb3478$export$c088ffafdba7405f","$d5e97ca40de1dca2$export$6a9cfa3ebc765910","$d5e97ca40de1dca2$export$aa3d41784b3267fa","$d5e97ca40de1dca2$export$4cb2acdbcda2c253","$d5e97ca40de1dca2$export$60f45028237c39d1","$d5e97ca40de1dca2$export$e073fccf36d78cc1","$d5e97ca40de1dca2$export$dcccc29c315dd646","$d5e97ca40de1dca2$export$b2dcb11d46e7a4ad","obs","promise","iterable","iterable_1","iterable_1_1","asyncIterable","$d5e97ca40de1dca2$var$process","catch","asyncIterable_1","asyncIterable_1_1","$1082674ba26021fb$export$b9e075132cc6937f","onNext","onComplete","onError","onFinalize","$1082674ba26021fb$export$8fbbf0c4d80268e5","shouldUnsubscribe","err1","closed_1","$bb90871d75d428d3$export$a2b7447487315232","parentSubscription","repeat","scheduleSubscription","$4be3df9c8b191a2f$export$66d311bf29d5c89c","info","$4be3df9c8b191a2f$export$83e74882c5df8fe1","schedulerArg","each","with","_with","$4be3df9c8b191a2f$var$timeoutErrorFactory","_d","meta","originalSourceSubscription","timerSubscription","lastValue","seen","startTimer","$cb6028617666e135$var$isArray","$cb6028617666e135$var$getPrototypeOf","getPrototypeOf","$cb6028617666e135$var$objectProto","$cb6028617666e135$var$getKeys","$cb6028617666e135$export$8871b3799a14360f","first_1","$cb6028617666e135$var$isPOJO","$b3be89a302f54553$export$9007f49c319d1ac7","$03c04c3ffa6f4f2b$export$1eb44d8f5f64733b","$bfcdfb161bcad5ec$export$ed8bd553a12b6a30","$b200b6eac85b4492$export$fc9afd948577f0a8","$7b1925659fd6b401$export$b34673931371729a","$de7ccd11b81af792$export$2b75c58ab9b5b766","$099e1a95f8be7c6a$export$7c7f0979b56a32f3","$970e2f50a47ce5c8$export$3385251aeecad28a","$428746786ed9c66f$export$49c44dfc2bb21d70","$cecb8b01522e9ff4$export$6788812c4e6611e6","$a344549688aae3fd$export$871de8747c9eaa88","project","$fdef718a708846aa$var$isArray","$fdef718a708846aa$var$callOrApply","$fdef718a708846aa$export$559affaa48f4288d","$c3cdee6cceaf9473$export$187e35932e88c15c","$798a448d65d66d7d$var$last","$798a448d65d66d7d$export$9ae19b645239a61b","$798a448d65d66d7d$export$29534b2f653ae592","$798a448d65d66d7d$export$3de14b735070dcd5","$9ee0b49cb72a62a4$export$79c7e160a7743efd","$e9c33d8acb1fdd17$export$77fa7d86f5204e8a","resultSelector","observables","$e9c33d8acb1fdd17$export$f04dcfb475ed2128","valueTransform","$e9c33d8acb1fdd17$var$maybeSchedule","active","remainingFirstValues","_loop_1","hasFirstValue","i1","$28f45fd372d3b455$export$600918ebaa9e0a1b","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","bufferedValue","$8657d55690de2a98$export$6b9f6c0d32c093f9","ii","$b57c3fedf76caaed$export$18aef43295bbe906","$0280bbcc426dce78$export$b314777ae20abca9","$98685deadaab283c$export$ee1b3e54f0441b22","$ead8e990cfbfe279$export$260e5c0943f31606","observableFactory","$6e7e0ef18f0a3115$export$ccb33e29d92c9a58","$6e7e0ef18f0a3115$export$6e22c362a0406a2c","$6e7e0ef18f0a3115$var$emptyScheduled","$6ca17bc48d68771b$var$nodeEventEmitterMethods","$6ca17bc48d68771b$var$eventTargetMethods","$6ca17bc48d68771b$var$jqueryMethods","$6ca17bc48d68771b$export$a36e16046ae8f1bb","eventName","$6ca17bc48d68771b$var$isEventTarget","methodName","$6ca17bc48d68771b$var$isNodeStyleEventEmitter","$6ca17bc48d68771b$var$toCommonHandlerRegistry","$6ca17bc48d68771b$var$isJQueryStyleEventEmitter","subTarget","addListener","removeListener","on","off","addEventListener","removeEventListener","$ba06f10a02915e96$export$9dc4ecf953986f04","dueTime","intervalOrScheduler","intervalDuration","due","$5c0fdd8d65c521ee$export$3174cdbf0a0cbc84","period","$30ffe4e7b3d62072$export$4950aa0f605343fb","sources","$62d8f22c904e5fe7$export$96c94437c95d7862","$f2752f137309d393$export$790c233a67baba3","$f2752f137309d393$export$3b0ccdbbdb9feaa4","$f2752f137309d393$export$5c089a222833d7b7","$f2752f137309d393$export$45dae21dfe837dd7","$f2752f137309d393$export$2869c604d0a0cf9c","$f2752f137309d393$export$3e8af96bd6669133","$62d8f22c904e5fe7$export$b3e22bcfd64c1022","$ed54d2f12a6f8669$export$ba255e9e49e00608","$7793e4bb10595700$export$8bf7aba4a9e09055","errorOrErrorFactory","errorFactory","$827970c208304071$export$3dea766d36a8935f","predicate","$e8a8f4270a768261$export$9f6ea8e48bc26eab","innerSubscriber","innerIndex","outerIndex","$022094d06ff270cc$export$d449030e5c10edf7","inputs","otherValues","hasValue","ready","$e68e523fee93831a$export$d779b02e6b68c3e8","durationSelector","durationSubscriber","endDuration","cleanupDuration","$cfad638bbde2c674$export$719c70722b10e5ff","duration","$a3c41b925191c992$export$3dede90624df3ba9","selector","handledResult","innerSub","syncUnsub","$69a89d48bfba698b$export$7843a4469d64c07e","activeTask","lastTime","emit","emitWhenIdle","targetTime","$419c2da03c3ac473$export$779c5fb865a0172e","keySelector","$419c2da03c3ac473$var$defaultCompare","previousKey","currentKey","$7d94a21417a1623d$export$9f77e0932fb78f72","$970a0f030dee86ff$export$578723aef62d92f5","callback","$c7828fe634a19a01$export$b7df5d561049483a","count","$34cec3157a65a432$export$e4ca6d7b7a6dcf9b","$be8653f4a3e95561$export$c8ea5e9f84346833","$be8653f4a3e95561$var$defaultErrorFactory","$cbe8268c6277296f$export$43128fadae87b74a","hasDefaultValue","$063935e48cc2799b$export$e0eaf3a86c03b2ad","$561b46b470f8ef34$export$bd7cfc9a42b8a412","innerObservable","$e1dacc25c9354c6a$export$8f9d79d42bff1aac","hasPrev","$f60f59c3c27c3419$export$ed80d9de1d9df928","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","refCount","hasCompleted","hasErrored","cancelReset","resetAndUnsubscribe","conn","dest","$f60f59c3c27c3419$var$handleReset","$91193f05f5f7351e$export$175dedd748069215","taking","$369a1beddcfddd56$export$a4fe86229b0e9bdd","$095ad5aa66f29705$export$ac8dfd3a7ad06e80","notifier","$54e8ed1fe60bf698$export$9384c7afe4015e42","inclusive","$9654f9d6f3b258de$export$3f23594af5f37336","tapObserver","_a1","isUnsub","$f2752f137309d393$var$createDictionaryFromMap","entries","dictionary","orElse","orElseValue","orElseThrow","orElseThrowFn","coerce","coerceNullOrUndefined","isEqual","array1","array2","exactOrder","element","firstOnly","indexOfElementFn","findIndex","removedElements","distinct","items","itemSet","intersect","arrays","_arrays","intersection","dictionaryLike","withoutUndefinedEntries","object","mapLike","addSetValue","multiValueMap","removeSetValue","hasRemoved","predicateFn","removed","it","addListValue","removeListValue","$2468ac492642ec20$export$fb19ae9cd5d9554c","_beanRegistry","_decoratorRegistry","_initializers","_sequence","_runlevel$","_eagerBeansConstructed","_started","register","symbol","instructions","$2468ac492642ec20$var$containsBeansConstructStrategy","useClass","$2468ac492642ec20$var$validateBeanConstructInstructions","multi","metaData","disposeBean","beanInfo","beanConstructFn","$2468ac492642ec20$var$createBeanConstructFunction","eager","useValue","constructing","beans","unregister","registerIfAbsent","registerDecorator","constructFn","registerInitializer","initializer","initializerInfo","runlevel","useFunction","useExisting","$2468ac492642ec20$export$e1272dadeadaca63","all","orElseGet","orElseSupply","$2468ac492642ec20$var$getSymbolName","opt","beanInfos","getOrConstructBeanInstance","initializerDefaultRunlevel","eagerBeanConstructRunlevel","constructEagerBeans","runInitializers","destroy","getBeanInfos","$2468ac492642ec20$var$compareByDestroyOrder","bean","clear","preDestroy","console","whenRunlevel","currentRunlevel","defaultInitializerRunlevel","initializersGroupedByRunlevel","grouped","runlevels","initializerFn","decoratedBean","constructInstant","bean1","bean2","destroyOrder","_e","_f","useClassFn","useFactory","useFactoryFn","instruction","startsWith","JSON","stringify","property","$4ba9fe88ae2b07db$export$bc35efed93511c4b","static","performance","char","random","floor","$7f58d37bd0f6acca$export$8f2c8e61d147b502","$7f58d37bd0f6acca$export$c629d26da3372c2a","extractor","$7f58d37bd0f6acca$export$4c9116dcf1374231","projectFn","$7f58d37bd0f6acca$export$92f26f2c62c5b941","$7f58d37bd0f6acca$export$8a30e918558d65db","$7f58d37bd0f6acca$export$a03a3ccc5cf2316b","$7f58d37bd0f6acca$export$b5f2084817235760","closingNotifier$","guard$","$7f58d37bd0f6acca$export$b914490df9483590","tapFn","$7f58d37bd0f6acca$export$b392cf45da42771d","executionFn","observer","$7f58d37bd0f6acca$export$43119cf92799032b","super","$e09aaf607f6d2c66$export$e17d0a8e529bc2ca","resizeObserver","ResizeObserver","$e09aaf607f6d2c66$export$531bc876f121e23a","observe","disconnect","clientWidth","offsetWidth","clientHeight","offsetHeight","$e09aaf607f6d2c66$export$e027a46ec7e152e7","mutationObserver","MutationObserver","mutations","$e09aaf607f6d2c66$export$6716176e0c7941a4","document","childList","subtree","$e09aaf607f6d2c66$var$collectElements","$e09aaf607f6d2c66$var$detectLayoutChange","$e09aaf607f6d2c66$var$captureClientRect","left","top","width","height","elements","el","parentElement","children","child","HTMLElement","passive","getBoundingClientRect","$3338c5078fd07f84$exports","tokens","SemVer","valid","clean","rcompare","compareLoose","rsort","neq","gte","lte","cmp","Comparator","Range","satisfies","toComparators","maxSatisfying","minSatisfying","minVersion","validRange","outside","gtr","ltr","simplifyRange","subset","$f360cb19a7470d55$export$36e3ecc814ff657b","$f360cb19a7470d55$export$abac07b0d121aae2","$f360cb19a7470d55$export$4ce958c9d1dac10e","$f360cb19a7470d55$export$a11aa4b1ad6eec09","$f360cb19a7470d55$export$b23af55470b7f1e1","$f360cb19a7470d55$export$846c248a91ff93f7","$f360cb19a7470d55$export$a499daaa5fe026d2","$f360cb19a7470d55$var$MessagingTransport","MessagingTransport","$f360cb19a7470d55$var$MessagingChannel","MessagingChannel","$f360cb19a7470d55$var$PlatformTopics","PlatformTopics","$f360cb19a7470d55$export$c3e6bb28c793a982","status","headers","Status","OK","messageBody","$f360cb19a7470d55$export$43ee7d0e4f429743","BAD_REQUEST","NOT_FOUND","TERMINAL","$f360cb19a7470d55$export$d6978861bb0c00c2","msg","$f360cb19a7470d55$export$a5b24081a734c6a9","$f360cb19a7470d55$export$2509be367963fa45","topic","subscriberCount$","RequestSubscriberCount","FocusIn","IsFocusWithin","PlatformProperties","Applications","heartbeat","clientId","$f360cb19a7470d55$export$417f7cd86929f164","pattern","_patternSegments","$f360cb19a7470d55$var$toPathSegments","inputTopicSegments","patternSegments","$f360cb19a7470d55$var$isWildcardSegment","matches","params","patternSegment","segment","substring","Boolean","$f360cb19a7470d55$var$filterByTransport","transport","event","envelope","data","channel","$f360cb19a7470d55$var$filterByChannel","channels","$f360cb19a7470d55$var$filterByTopicChannel","Topic","messageTopic","$f360cb19a7470d55$var$filterByOrigin","origin","$f360cb19a7470d55$var$filterByMessageHeader","header","messageHeaders","$f360cb19a7470d55$var$pluckMessage","messageEvent","$f360cb19a7470d55$var$VERSION","$f360cb19a7470d55$export$efa9a398d6368992","$f360cb19a7470d55$export$ba6a9c7ac8291f7f","debug","log","warn","severity","loggingContext","$f360cb19a7470d55$export$cfece0898859977d","appSymbolicName","consoleFn","$f360cb19a7470d55$export$1643d64233a33b47","$f360cb19a7470d55$export$f677ff3cbab00a1f","$f360cb19a7470d55$export$63daa6aa86ffb707","$f360cb19a7470d55$var$MicrofrontendPlatformRef","$f360cb19a7470d55$var$runSafe","runnable","error1","$f360cb19a7470d55$var$stringifyError","$f360cb19a7470d55$var$BrokerGateway","$f360cb19a7470d55$var$NullBrokerGateway","isConnected","message$","postMessage","requestReply$","subscribeToTopic$","$f360cb19a7470d55$var$CONNECT_INTERVAL","connectOptions","_platformStopping$","_brokerInfo","_brokerInfo$","_appSymbolicName","_brokerDiscoverTimeout","brokerDiscoverTimeout","_messageDeliveryTimeout","messageDeliveryTimeout","brokerInfo","connectToBroker","installBrokerMessageListener","installHeartbeatPublisher","$f360cb19a7470d55$var$isPlatformStopped","$f360cb19a7470d55$var$GatewayErrors","PLATFORM_STOPPED_ERROR","messageId","randomUUID","ClientToBroker","MessageId","Timestamp","AppSymbolicName","ClientId","postError$","whenPosted","MESSAGE_DISPATCH_ERROR","statusMessage","ok","details","replyTo","unsubscribe$","requestError$","ReplyTo","reply","subscriberId","subscribeError$","unsubscribeFromTopic","topicSubscribeMessage","TopicSubscribe","topicUnsubscribeCommand","TopicUnsubscribe","BrokerToClient","$f360cb19a7470d55$var$fixMapObjects","heartbeatInterval","publish","connectPromise","response","returnCode","returnMessage","BROKER_DISCOVER_ERROR","connectMessage","ClientConnect","Version","windowHierarchy","collectWindowHierarchy","disconnectFromBroker","disconnectMessage","ClientDisconnect","candidates","candidate","Intent","intentMessage","intent","topicMessage","$f360cb19a7470d55$var$stringifyEnvelope","platformState","Stopped","GatewayErrors","$f360cb19a7470d55$export$795435d319aa5def","_properties","properties$","observe$","properties","contains","$f360cb19a7470d55$export$453ace576174a6eb","$f360cb19a7470d55$var$ManifestRegistry","$f360cb19a7470d55$var$ABSOLUTE_URL_REGEX","$f360cb19a7470d55$var$Urls","Urls","isAbsoluteUrl","url","newUrl","base","baseUrl","URL","pathname","endsWith","ensureTrailingSlash","$f360cb19a7470d55$export$2eb36f74b177828a","$f360cb19a7470d55$var$ApplicationRegistry","_applications","registerApplication","applicationConfig","manifest","symbolicName","manifestUrl","SYMBOLIC_NAME_REGEXP","application","computeBaseUrl","manifestLoadTimeout","activatorLoadTimeout","messageOrigin","scopeCheckDisabled","intentionCheckDisabled","intentionRegisterApiDisabled","capabilities","capability","registerCapability","intentions","intention","registerIntention","getApplication","getApplications","isScopeCheckDisabled","isIntentionRegisterApiDisabled","isIntentionCheckDisabled","manifestURL","$f360cb19a7470d55$var$HttpClient","fetch","$f360cb19a7470d55$var$ProgressMonitor","_progress$","_done$","_hasSubMonitors","progress$","progress","round","ratio","subMonitors","subMonitor","$f360cb19a7470d55$var$computeProgress","splitEven","fill","ratioSum","sum","weight","subMonitorsProgress","totalProgress","subMonitorWeight","subMonitorIndex","$f360cb19a7470d55$var$ManifestLoadProgressMonitor","$f360cb19a7470d55$var$ActivatorLoadProgressMonitor","$f360cb19a7470d55$export$3af33b08f01f58a3","intercept","hostManifest","$f360cb19a7470d55$var$provideActivatorIntentionIfEnabled","activatorApiDisabled","Activator","qualifier","$f360cb19a7470d55$var$ManifestCollector","fetchAndRegisterManifests","appConfigs","monitor","appConfig","fetchAndRegisterManifest","fetchManifest$","manifestFetchTimeout","onManifestFetchTimeout","manifestFetchResponse","statusText","json","interceptor","$f360cb19a7470d55$var$ClientRegistry","$f360cb19a7470d55$var$TopicSubscriptionRegistry","_destroy$","_subscriptionRegistry","_subscriptionChange$","unregister$","client","unsubscribeClient","subscriptions","subscriptionCount$","containsWildcardSegments","subscriptionChange","resolveTopicDestinations","publishTopic","resolvedTopicDestinations","$f360cb19a7470d55$var$RetainedMessageStore","_retainedMessagesByTopic","persistOrDelete","findMostRecentRetainedMessage","subscriptionTopic","mostRecentMessage","lastMessageTimestamp","$f360cb19a7470d55$export$928c6333c0fd2868","$f360cb19a7470d55$export$93458e9b1705f47e","$f360cb19a7470d55$export$218fc7342c49994f","interceptors","publisher","terminalHandler","$f360cb19a7470d55$export$a428cd33b25d5283","handlerChain","reduceRight","$f360cb19a7470d55$var$ParamMatcher","definitions","_requiredParamDefs","_optionalParamDefs","_deprecatedParamDefs","paramDef","required","deprecated","parameters","matcherResult","missingParams","unexpectedParams","deprecatedParams","deprecation","useInstead","param","$f360cb19a7470d55$var$CLIENT_HEARTBEAT_INTERVAL","$f360cb19a7470d55$var$STALE_CLIENT_UNREGISTER_DELAY","_heartbeatInterval","_staleClientUnregisterDelay","installHeartbeatMonitor","$parcel$interopDefault","_heartbeat","logStaleClientWarning","unregisterClient","markStaleAndQueueForRemoval","_staleClientUnregisterTimer","$f360cb19a7470d55$var$MessageBroker","_clientRegistry","_topicSubscriptionRegistry","_retainedMessageRegistry","_applicationRegistry","_manifestRegistry","_clientMessage$","Two","$f360cb19a7470d55$var$checkOriginTrusted","$f360cb19a7470d55$var$catchErrorAndRetry","installClientConnectListener","installClientDisconnectListener","installTopicMessageDispatcher","installIntentMessageDispatcher","installTopicSubscribeListener","installTopicUnsubscribeListener","installTopicSubscriberCountObserver","_messagePublisher","createMessagePublisher","_intentPublisher","createIntentPublisher","One","eventSource","clientAppName","clientMessageTarget","$f360cb19a7470d55$var$MessageTarget","warning","$f360cb19a7470d55$var$sendTopicMessage","currentClient","getByWindow","registerClient","$f360cb19a7470d55$var$getSendingClient","$f360cb19a7470d55$var$sendDeliveryStatusError","$f360cb19a7470d55$var$sendDeliveryStatusSuccess","retainedMessage","request","dispatchTopicMessage","hasIntention","resolveCapabilitiesByIntent","capability1","paramMatchResult","deprecatedParam","$f360cb19a7470d55$var$constructDeprecatedParamWarning","retain","clients","getByApplication","existsClient","destinations","resolvedTopicDestination","getByClientId","caught","$f360cb19a7470d55$var$CONTEXT_LOOKUP_OPTIONS","$f360cb19a7470d55$var$Contexts","Contexts","contextValueLookupTopic","contextTreeNamesLookupTopic","contextTreeChangeTopic","newContextValueLookupRequest","MicrofrontendToOutlet","encodeURIComponent","newContextTreeNamesLookupRequest","names","newContextTreeObserveRequest","RootContextSubscribeEvent","$f360cb19a7470d55$var$RouterOutletContextProvider","iframe","_entries$","_entryChange$","_outletDisconnect$","_microfrontendRequest$","contentWindow","entries$","onOutletMount","installContextValueLookupListener","installContextTreeNamesLookupListener","installContextTreeObserveListener","onOutletUnmount","lookupRequest","encodedName","decodeURIComponent","collect","collectedValues","collectedNames","observeRequest","$f360cb19a7470d55$var$BLANK_URL","$f360cb19a7470d55$export$b84d9f3cc1de7d1d","currNavigation","prevNavigation","patchedUrl","patchUrl","pushStateToSessionHistoryStack","location","currUrl","prevUrl","prevURL","currURL","search","patchedURL","searchParams","$f360cb19a7470d55$var$Keystroke","eventType","modifiers","flags","parts","control","alt","withFlags","$f360cb19a7470d55$var$escapeKeyboardEventKey","ctrlKey","shiftKey","altKey","metaKey","$f360cb19a7470d55$var$parseFlags","keystroke","flagsStr","groups","flag","flagName","flagValue","preventDefault","$f360cb19a7470d55$var$PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER","$f360cb19a7470d55$var$ELEMENT_NAME","$f360cb19a7470d55$var$ATTR_NAME","$f360cb19a7470d55$var$ATTR_SCROLLABLE","$f360cb19a7470d55$var$ATTR_KEYSTROKES","$f360cb19a7470d55$var$HTML_TEMPLATE","$f360cb19a7470d55$export$40346ab29ce71372","_disconnect$","_uid","_empty$","_outletName$","$f360cb19a7470d55$export$61656ab94335dbc0","_shadowRoot","attachShadow","mode","innerHTML","_iframe","querySelector","_contextProvider","empty$","setAttribute","removeAttribute","getAttribute","scrollable","keystrokes","$f360cb19a7470d55$var$KeystrokesAttributeUtil","setContextValue","removeContextValue","contextValues$","resetPreferredSize","$f360cb19a7470d55$export$5747e8c66ba169f9","preferredSizeTopic","preferredSize","minWidth","style","maxWidth","minHeight","maxHeight","installOutletContext","outletContext","uid","$f360cb19a7470d55$export$ff8ad477982f6328","installOutletUrlListener","outlet","$f360cb19a7470d55$var$outletNavigate$","navigation","url1","url2","dispatchEvent","CustomEvent","detail","installPreferredSizeListener","$f360cb19a7470d55$var$setStyle","installKeyboardEventDispatcher","keyboardEventTopic","KeyboardEvent","installFocusWithinEventDispatcher","focusWithinOutletTopic","focusWithin","bubbles","cancelable","installHostElementDecorator","host","classList","connectedCallback","disconnectedCallback","attributeChangedCallback","oldValue","newValue","$f360cb19a7470d55$var$coerceBooleanProperty","$f360cb19a7470d55$var$KEYSTROKE_CONTEXT_NAME_PREFIX","fromString","keystrokeStr","customElements","whenDefined","observedAttributes","KeystrokesAttributeUtil","urlTopic","outletName","outletUid","attributeValue","outletNavigationTopic","navigateMessage","setProperty","$f360cb19a7470d55$export$a8e56bb192edf201","_contextTreeChange$","_whenContextTreeChangeListenerInstalled","installContextTreeChangeListener","changeEvent","switchMap","lookupContextValue$","lookup","isPresent","names$","lookupContextNames$","contextValueLookupRequest","$f360cb19a7470d55$var$whenSubscribedToReplyTopic","contextNamesLookupRequest","listener","contextObserveRequest","$f360cb19a7470d55$export$fc96cab2c66d5054","path","relativeTo","$f360cb19a7470d55$export$7fb6e18939c89ffa","navigate","resolveOutlet","outletUrlTopic","navigationUrl","computeNavigationUrl","substituteNamedParameters","href","$1","$f360cb19a7470d55$export$9b078e20c2505aad","focusWithin$","request$","$f360cb19a7470d55$var$FocusInEventDispatcher","makeWindowFocusable","dispatchDocumentFocusInEvent","reportFocusWithinEventToParentOutlet","relatedTarget","publishTo","outline","$f360cb19a7470d55$var$FocusTracker","_focusOwner$","monitorFocusInEvents","replyToIsFocusWithinRequests","focusOwner","isFocusWithin","getParentClient","$f360cb19a7470d55$export$a0e8060499828631","_fromDimensionElementChange$","_publishPreferredSize","createPreferredSizePublisher","setPreferredSize","fromDimension","dimension","publish$","$f360cb19a7470d55$var$MouseMoveEventDispatcher","_dispatcherId","produceSynthEvents","consumeSynthEvents","buttons","$f360cb19a7470d55$var$PRIMARY_MOUSE_BUTTON","DISPATCHER_ID_HEADER","$f360cb19a7470d55$var$MOUSEMOVE_EVENT_TOPIC","screenX","screenY","sciMouseEvent","Event","$f360cb19a7470d55$var$MouseUpEventDispatcher","$f360cb19a7470d55$var$DISPATCHER_ID_HEADER","$f360cb19a7470d55$var$MOUSEUP_EVENT_TOPIC","$f360cb19a7470d55$var$KeyboardEventDispatcher","_keyboardEvents$","installKeyboardEventListener","installKeystrokeListener","contextNames","contextName","keystrokeContextName","observeKeyboardEvent$","keyboardEvents","onKeyboardEventToPropagate","outletIdentity","eventInit","collectedFlags","switchToKeyboardEvents","fromEvent","$f360cb19a7470d55$var$applyKeystrokeFlags","keystrokeEvent","$f360cb19a7470d55$export$26246f283d6ee833","_pattern","_patternKeys","_flags","testee","testeeKeys","patternKeys","evalOptional","evalAsterisk","$f360cb19a7470d55$export$1690027cb4ee275f","$f360cb19a7470d55$var$ManifestObjectStore","_objectById","_objectsByType","_objectsByApplication","_change$","objectsToRemove","find","_remove","qualifierPredicate","filterById","filterByType","filterByApp","change$","objects","deleted","objectId","_capabilityStore","_intentionStore","installCapabilityRegisterRequestHandler","installCapabilityUnregisterRequestHandler","installIntentionRegisterRequestHandler","installIntentionUnregisterRequestHandler","installCapabilitiesLookupRequestHandler","installIntentionsLookupRequestHandler","capabilityQualifier","isApplicationQualifiedForCapability","intentionQualifier","isCapabilityPublic","private","hasIntentionForCapability","capabilityId","$8zcyd","capabilityToRegister","$f360cb19a7470d55$var$coerceCapabilityParamDefinitions","requiredParams","optionalParams","unregisterCapabilities","intentionId","intentionToRegister","unregisterIntention","$f360cb19a7470d55$var$ManifestRegistryTopics","RegisterCapability","UnregisterCapabilities","capabilityFilter","RegisterIntention","$f360cb19a7470d55$var$assertIntentionRegisterApiEnabled","UnregisterIntentions","intentFilter","LookupCapabilities","lookupFilter","registryChange$","finder$","LookupIntentions","ManifestRegistryTopics","migration","$f360cb19a7470d55$var$assertCapabilityParamDefinitions","validSubstitutes","$f360cb19a7470d55$export$aafa7a6a222a9fad","applications$","applications","lookupApplications$","lookupCapabilities$","lookupIntentions$","unregisterIntentions","$f360cb19a7470d55$var$ActivatorInstaller","activators","activatorsGroupedByApp","skipInvalidActivators","activator","activatorReadyPromises","appActivators","waitForActivatorsToSignalReady","sameAppActivators","primaryActivator","mountActivator","t0","readinessPromises","readinessTopics","readinessTopic","onReadinessTimeout","primary","routerOutlet","createElement","$f360cb19a7470d55$export$3200a3edec649cbd","display","position","appendChild","whenState","removeChild","$f360cb19a7470d55$var$MessageHandler","_callback","_messageClient","handleMessage","consumeMessage","platformStopping$","state$","Stopping","error2","observableStatus","replyHeaders","_brokerGateway","setBodyIfDefined","onIntent","$f360cb19a7470d55$var$assertTopic","allowWildcardSegments","$f360cb19a7470d55$var$setBodyIfDefined","onMessage","$f360cb19a7470d55$var$createHostApplicationConfig","hostConfig","$f360cb19a7470d55$var$provideHostManifestUrl","$f360cb19a7470d55$var$serveHostManifest","createObjectURL","Blob","revokeObjectURL","$f360cb19a7470d55$export$61c6825dcf81208b","$f360cb19a7470d55$export$33b9eb3dc0ea6d8","onUnload","once","_clientsById","_clientsByWindow","staleClient","$f360cb19a7470d55$var$version","$f360cb19a7470d55$export$5cce370cfaa52f9e","startPlatform","installHostStartupProgressMonitor","$f360cb19a7470d55$var$BeanDestroyOrders","CORE","BROKER","$f360cb19a7470d55$var$provideMessageClient","$f360cb19a7470d55$var$provideIntentClient","$f360cb19a7470d55$var$registerBrokerGateway","connectRunlevel","Zero","Three","exclude","installClientStartupProgressMonitor","brokerGateway","enterState","startupFn","Starting","Started","_state$","newState","startupProgress$","_startupProgress$","startupProgressMonitor","manifestLoadProgressMonitor","activatorLoadProgressMonitor","connect","MESSAGING","BeanDestroyOrders","$f360cb19a7470d55$export$9ec1071e9ace7b1b","refs","MicrofrontendPlatform","MessageClient","IntentClient","OutletRouter","ManifestService"],"version":3,"file":"refs.js.map"}