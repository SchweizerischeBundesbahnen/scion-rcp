{"mappings":"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","sources":["<anon>","src/refs.ts","node_modules/@scion/microfrontend-platform/fesm2022/scion-microfrontend-platform.mjs","projects/scion/microfrontend-platform/src/lib/platform-state.ts","projects/scion/microfrontend-platform/src/lib/platform.model.ts","projects/scion/microfrontend-platform/src/lib/ɵplatform.model.ts","projects/scion/microfrontend-platform/src/lib/microfrontend-platform-stopper.ts","projects/scion/microfrontend-platform/src/lib/logger.ts","projects/scion/microfrontend-platform/src/lib/microfrontend-platform.ts","projects/scion/microfrontend-platform/src/lib/host/microfrontend-platform-config.ts","projects/scion/microfrontend-platform/src/lib/host/host-manifest-interceptor.ts","projects/scion/microfrontend-platform/src/lib/host/client-registry/client.registry.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/message-client.ts","projects/scion/microfrontend-platform/src/lib/ɵmessaging.model.ts","projects/scion/microfrontend-platform/src/lib/messaging.model.ts","projects/scion/microfrontend-platform/src/lib/topics.util.ts","projects/scion/microfrontend-platform/src/lib/topic-matcher.util.ts","projects/scion/microfrontend-platform/src/lib/operators.ts","projects/scion/microfrontend-platform/src/lib/safe-runner.ts","projects/scion/microfrontend-platform/src/lib/error.util.ts","projects/scion/microfrontend-platform/src/lib/observable-decorator.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/message-selector.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/broker-gateway.ts","projects/scion/microfrontend-platform/src/lib/platform-property-service.ts","projects/scion/microfrontend-platform/src/lib/host/http-client.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-registry/manifest-registry.ts","projects/scion/microfrontend-platform/src/lib/url.util.ts","projects/scion/microfrontend-platform/src/lib/host/application-registry.ts","projects/scion/microfrontend-platform/src/lib/qualifier-matcher.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-registry/manifest-object-store.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-registry/capability-interceptors.ts","projects/scion/microfrontend-platform/src/lib/qualifiers.util.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-registry/ɵmanifest-registry.ts","projects/scion/microfrontend-platform/src/lib/host/focus/focus-tracker.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-fetcher.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/message-subscription.registry.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/topic-subscription.registry.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/message-interception.ts","projects/scion/microfrontend-platform/src/lib/host/semver.ts","projects/scion/microfrontend-platform/src/lib/host/client-registry/client.ts","projects/scion/microfrontend-platform/src/lib/host/client-registry/ɵclient.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/intent-subscription.registry.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/predicates.util.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/param-matcher.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/intent-params.util.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/message-broker.ts","projects/scion/microfrontend-platform/src/lib/client/manifest-registry/manifest-service.ts","projects/scion/microfrontend-platform/src/lib/client/context/context.model.ts","projects/scion/microfrontend-platform/src/lib/client/context/router-outlet-context-provider.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/router-outlet-url-assigner.ts","projects/scion/microfrontend-platform/src/lib/client/keyboard-event/keystroke.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/metadata.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/router-outlet.element.ts","projects/scion/microfrontend-platform/src/lib/client/context/context-service.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/relative-path-resolver.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/intent-client.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/outlet-router.ts","projects/scion/microfrontend-platform/src/lib/host/router/microfrontend-intent-navigator.interceptor.ts","projects/scion/microfrontend-platform/src/lib/host/client-registry/ɵclient.registry.ts","projects/scion/microfrontend-platform/src/lib/host/host-app-config-provider.ts","projects/scion/microfrontend-platform/src/lib/host/progress-monitor/progress-monitor.ts","projects/scion/microfrontend-platform/src/lib/host/progress-monitor/progress-monitors.ts","projects/scion/microfrontend-platform/src/lib/host/app-installer.ts","projects/scion/microfrontend-platform/src/lib/host/activator/activator-installer.ts","projects/scion/microfrontend-platform/src/lib/client/focus/focus-monitor.ts","projects/scion/microfrontend-platform/src/lib/client/focus/focus-in-event-dispatcher.ts","projects/scion/microfrontend-platform/src/lib/client/mouse-event/mouse-move-event-dispatcher.ts","projects/scion/microfrontend-platform/src/lib/client/mouse-event/mouse-up-event-dispatcher.ts","projects/scion/microfrontend-platform/src/lib/client/preferred-size/preferred-size-service.ts","projects/scion/microfrontend-platform/src/lib/client/keyboard-event/keyboard-event-dispatcher.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/message-handler.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/ɵmessage-client.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/ɵintent-client.ts","projects/scion/microfrontend-platform/src/lib/client/microfrontend-platform-client.ts","projects/scion/microfrontend-platform/src/lib/host/microfrontend-platform-host.ts","projects/scion/microfrontend-platform/src/lib/host/host-config.ts","projects/scion/microfrontend-platform/src/lib/host/application-config.ts","projects/scion/microfrontend-platform/src/lib/host/manifest-registry/public_api.ts","projects/scion/microfrontend-platform/src/lib/host/message-broker/public_api.ts","projects/scion/microfrontend-platform/src/lib/host/liveness-config.ts","projects/scion/microfrontend-platform/src/lib/host/public_api.ts","projects/scion/microfrontend-platform/src/lib/client/connect-options.ts","projects/scion/microfrontend-platform/src/lib/client/router-outlet/public_api.ts","projects/scion/microfrontend-platform/src/lib/client/context/public_api.ts","projects/scion/microfrontend-platform/src/lib/client/focus/public_api.ts","projects/scion/microfrontend-platform/src/lib/client/preferred-size/public_api.ts","projects/scion/microfrontend-platform/src/lib/client/manifest-registry/public_api.ts","projects/scion/microfrontend-platform/src/lib/client/messaging/public_api.ts","projects/scion/microfrontend-platform/src/lib/client/public_api.ts","projects/scion/microfrontend-platform/src/public-api.ts","projects/scion/microfrontend-platform/src/scion-microfrontend-platform.ts","node_modules/rxjs/dist/esm5/internal/AsyncSubject.js","node_modules/rxjs/src/internal/AsyncSubject.ts","node_modules/tslib/tslib.es6.js","node_modules/rxjs/dist/esm5/internal/Subject.js","node_modules/rxjs/src/internal/Subject.ts","node_modules/rxjs/dist/esm5/internal/Observable.js","node_modules/rxjs/src/internal/Observable.ts","node_modules/rxjs/dist/esm5/internal/Subscriber.js","node_modules/rxjs/src/internal/Subscriber.ts","node_modules/rxjs/dist/esm5/internal/util/isFunction.js","node_modules/rxjs/src/internal/util/isFunction.ts","node_modules/rxjs/dist/esm5/internal/Subscription.js","node_modules/rxjs/src/internal/Subscription.ts","node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js","node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js","node_modules/rxjs/src/internal/util/createErrorClass.ts","node_modules/rxjs/dist/esm5/internal/util/arrRemove.js","node_modules/rxjs/src/internal/util/arrRemove.ts","node_modules/rxjs/dist/esm5/internal/config.js","node_modules/rxjs/src/internal/config.ts","node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js","node_modules/rxjs/src/internal/util/reportUnhandledError.ts","node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js","node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts","node_modules/rxjs/dist/esm5/internal/util/noop.js","node_modules/rxjs/src/internal/util/noop.ts","node_modules/rxjs/dist/esm5/internal/NotificationFactories.js","node_modules/rxjs/src/internal/NotificationFactories.ts","node_modules/rxjs/dist/esm5/internal/util/errorContext.js","node_modules/rxjs/src/internal/util/errorContext.ts","node_modules/rxjs/dist/esm5/internal/symbol/observable.js","node_modules/rxjs/src/internal/symbol/observable.ts","node_modules/rxjs/dist/esm5/internal/util/pipe.js","node_modules/rxjs/src/internal/util/pipe.ts","node_modules/rxjs/dist/esm5/internal/util/identity.js","node_modules/rxjs/src/internal/util/identity.ts","node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js","node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js","node_modules/rxjs/src/internal/BehaviorSubject.ts","node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js","node_modules/rxjs/src/internal/observable/combineLatest.ts","node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js","node_modules/rxjs/src/internal/util/argsArgArrayOrObject.ts","node_modules/rxjs/dist/esm5/internal/observable/from.js","node_modules/rxjs/src/internal/observable/from.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js","node_modules/rxjs/src/internal/scheduled/scheduled.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js","node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts","node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js","node_modules/rxjs/src/internal/observable/innerFrom.ts","node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js","node_modules/rxjs/src/internal/util/isArrayLike.ts","node_modules/rxjs/dist/esm5/internal/util/isPromise.js","node_modules/rxjs/src/internal/util/isPromise.ts","node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js","node_modules/rxjs/src/internal/util/isInteropObservable.ts","node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js","node_modules/rxjs/src/internal/util/isAsyncIterable.ts","node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js","node_modules/rxjs/src/internal/util/throwUnobservableError.ts","node_modules/rxjs/dist/esm5/internal/util/isIterable.js","node_modules/rxjs/src/internal/util/isIterable.ts","node_modules/rxjs/dist/esm5/internal/symbol/iterator.js","node_modules/rxjs/src/internal/symbol/iterator.ts","node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js","node_modules/rxjs/src/internal/util/isReadableStreamLike.ts","node_modules/rxjs/dist/esm5/internal/operators/observeOn.js","node_modules/rxjs/src/internal/operators/observeOn.ts","node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js","node_modules/rxjs/src/internal/util/executeSchedule.ts","node_modules/rxjs/dist/esm5/internal/util/lift.js","node_modules/rxjs/src/internal/util/lift.ts","node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js","node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts","node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js","node_modules/rxjs/src/internal/operators/subscribeOn.ts","node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js","node_modules/rxjs/src/internal/scheduled/schedulePromise.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js","node_modules/rxjs/src/internal/scheduled/scheduleArray.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js","node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js","node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js","node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts","node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js","node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts","node_modules/rxjs/dist/esm5/internal/operators/map.js","node_modules/rxjs/src/internal/operators/map.ts","node_modules/rxjs/dist/esm5/internal/util/args.js","node_modules/rxjs/src/internal/util/args.ts","node_modules/rxjs/dist/esm5/internal/util/isScheduler.js","node_modules/rxjs/src/internal/util/isScheduler.ts","node_modules/rxjs/dist/esm5/internal/util/createObject.js","node_modules/rxjs/src/internal/util/createObject.ts","node_modules/rxjs/dist/esm5/internal/observable/concat.js","node_modules/rxjs/src/internal/observable/concat.ts","node_modules/rxjs/dist/esm5/internal/operators/concatAll.js","node_modules/rxjs/src/internal/operators/concatAll.ts","node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js","node_modules/rxjs/src/internal/operators/mergeAll.ts","node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js","node_modules/rxjs/src/internal/operators/mergeMap.ts","node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js","node_modules/rxjs/src/internal/operators/mergeInternals.ts","node_modules/rxjs/dist/esm5/internal/operators/concatWith.js","node_modules/rxjs/src/internal/operators/concatWith.ts","node_modules/rxjs/dist/esm5/internal/operators/concat.js","node_modules/rxjs/src/internal/operators/concat.ts","node_modules/rxjs/dist/esm5/internal/observable/defer.js","node_modules/rxjs/src/internal/observable/defer.ts","node_modules/rxjs/dist/esm5/internal/observable/empty.js","node_modules/rxjs/src/internal/observable/empty.ts","node_modules/rxjs/dist/esm5/internal/operators/filter.js","node_modules/rxjs/src/internal/operators/filter.ts","node_modules/rxjs/dist/esm5/internal/firstValueFrom.js","node_modules/rxjs/src/internal/firstValueFrom.ts","node_modules/rxjs/dist/esm5/internal/util/EmptyError.js","node_modules/rxjs/src/internal/util/EmptyError.ts","node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js","node_modules/rxjs/src/internal/observable/fromEvent.ts","node_modules/rxjs/dist/esm5/internal/observable/interval.js","node_modules/rxjs/src/internal/observable/interval.ts","node_modules/rxjs/dist/esm5/internal/scheduler/async.js","node_modules/rxjs/src/internal/scheduler/async.ts","node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js","node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","node_modules/rxjs/dist/esm5/internal/scheduler/Action.js","node_modules/rxjs/src/internal/scheduler/Action.ts","node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js","node_modules/rxjs/src/internal/scheduler/intervalProvider.ts","node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js","node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","node_modules/rxjs/dist/esm5/internal/Scheduler.js","node_modules/rxjs/src/internal/Scheduler.ts","node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js","node_modules/rxjs/src/internal/scheduler/dateTimestampProvider.ts","node_modules/rxjs/dist/esm5/internal/observable/timer.js","node_modules/rxjs/src/internal/observable/timer.ts","node_modules/rxjs/dist/esm5/internal/util/isDate.js","node_modules/rxjs/src/internal/util/isDate.ts","node_modules/rxjs/dist/esm5/internal/lastValueFrom.js","node_modules/rxjs/src/internal/lastValueFrom.ts","node_modules/rxjs/dist/esm5/internal/observable/merge.js","node_modules/rxjs/src/internal/observable/merge.ts","node_modules/rxjs/dist/esm5/internal/observable/never.js","node_modules/rxjs/src/internal/observable/never.ts","node_modules/rxjs/dist/esm5/internal/observable/of.js","node_modules/rxjs/src/internal/observable/of.ts","node_modules/rxjs/dist/esm5/internal/observable/race.js","node_modules/rxjs/src/internal/observable/race.ts","node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js","node_modules/rxjs/src/internal/util/argsOrArgArray.ts","node_modules/rxjs/dist/esm5/internal/ReplaySubject.js","node_modules/rxjs/src/internal/ReplaySubject.ts","node_modules/rxjs/dist/esm5/internal/operators/retry.js","node_modules/rxjs/src/internal/operators/retry.ts","node_modules/rxjs/dist/esm5/internal/operators/switchMap.js","node_modules/rxjs/src/internal/operators/switchMap.ts","node_modules/rxjs/dist/esm5/internal/observable/throwError.js","node_modules/rxjs/src/internal/observable/throwError.ts","node_modules/rxjs/dist/esm5/internal/operators/timeout.js","node_modules/rxjs/src/internal/operators/timeout.ts","node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js","node_modules/rxjs/src/internal/operators/withLatestFrom.ts","node_modules/rxjs/dist/esm5/internal/operators/auditTime.js","node_modules/rxjs/src/internal/operators/auditTime.ts","node_modules/rxjs/dist/esm5/internal/operators/audit.js","node_modules/rxjs/src/internal/operators/audit.ts","node_modules/rxjs/dist/esm5/internal/operators/catchError.js","node_modules/rxjs/src/internal/operators/catchError.ts","node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js","node_modules/rxjs/src/internal/operators/combineLatestWith.ts","node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js","node_modules/rxjs/src/internal/operators/combineLatest.ts","node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js","node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts","node_modules/rxjs/dist/esm5/internal/operators/expand.js","node_modules/rxjs/src/internal/operators/expand.ts","node_modules/rxjs/dist/esm5/internal/operators/finalize.js","node_modules/rxjs/src/internal/operators/finalize.ts","node_modules/rxjs/dist/esm5/internal/operators/first.js","node_modules/rxjs/src/internal/operators/first.ts","node_modules/rxjs/dist/esm5/internal/operators/take.js","node_modules/rxjs/src/internal/operators/take.ts","node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js","node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts","node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js","node_modules/rxjs/src/internal/operators/throwIfEmpty.ts","node_modules/rxjs/dist/esm5/internal/operators/pairwise.js","node_modules/rxjs/src/internal/operators/pairwise.ts","node_modules/rxjs/dist/esm5/internal/operators/share.js","node_modules/rxjs/src/internal/operators/share.ts","node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js","node_modules/rxjs/src/internal/operators/skipWhile.ts","node_modules/rxjs/dist/esm5/internal/operators/startWith.js","node_modules/rxjs/src/internal/operators/startWith.ts","node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js","node_modules/rxjs/src/internal/operators/takeUntil.ts","node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js","node_modules/rxjs/src/internal/operators/takeWhile.ts","node_modules/rxjs/dist/esm5/internal/operators/tap.js","node_modules/rxjs/src/internal/operators/tap.ts","node_modules/@scion/toolkit/fesm2022/scion-toolkit-bean-manager.mjs","projects/scion/toolkit/bean-manager/src/bean-manager.ts","projects/scion/toolkit/bean-manager/src/public_api.ts","projects/scion/toolkit/bean-manager/src/scion-toolkit-bean-manager.ts","node_modules/@scion/toolkit/fesm2022/scion-toolkit-util.mjs","projects/scion/toolkit/util/src/defined.util.ts","projects/scion/toolkit/util/src/arrays.util.ts","projects/scion/toolkit/util/src/objects.util.ts","projects/scion/toolkit/util/src/dictionaries.util.ts","projects/scion/toolkit/util/src/maps.util.ts","projects/scion/toolkit/util/src/observables.util.ts","projects/scion/toolkit/util/src/public_api.ts","projects/scion/toolkit/util/src/scion-toolkit-util.ts","node_modules/@scion/toolkit/fesm2022/scion-toolkit-uuid.mjs","projects/scion/toolkit/uuid/src/uuid.util.ts","projects/scion/toolkit/uuid/src/public_api.ts","projects/scion/toolkit/uuid/src/scion-toolkit-uuid.ts","node_modules/@scion/toolkit/fesm2022/scion-toolkit-operators.mjs","projects/scion/toolkit/operators/src/operators.ts","projects/scion/toolkit/operators/src/public_api.ts","projects/scion/toolkit/operators/src/scion-toolkit-operators.ts","node_modules/@scion/toolkit/fesm2022/scion-toolkit-observable.mjs","projects/scion/toolkit/observable/src/dimension.observable.ts","projects/scion/toolkit/observable/src/mutation.observable.ts","projects/scion/toolkit/observable/src/bounding-client-rect.observable.ts","projects/scion/toolkit/observable/src/public_api.ts","projects/scion/toolkit/observable/src/scion-toolkit-observable.ts"],"sourcesContent":["(() => {\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var $746141bbf30b1d44$var$extendStatics = function(d, b) {\n    $746141bbf30b1d44$var$extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return $746141bbf30b1d44$var$extendStatics(d, b);\n};\nfunction $746141bbf30b1d44$export$a8ba968b8961cb8a(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    $746141bbf30b1d44$var$extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar $746141bbf30b1d44$export$18ce0697a983be9b = function() {\n    $746141bbf30b1d44$export$18ce0697a983be9b = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $746141bbf30b1d44$export$18ce0697a983be9b.apply(this, arguments);\n};\nfunction $746141bbf30b1d44$export$3c9a16f847548506(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction $746141bbf30b1d44$export$29e00dfd3077644b(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction $746141bbf30b1d44$export$d5ad3fd78186038f(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction $746141bbf30b1d44$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\nfunction $746141bbf30b1d44$export$d831c04e792af3d(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    return useValue ? value : void 0;\n}\nfunction $746141bbf30b1d44$export$6a2a36740a146cb8(x) {\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\nfunction $746141bbf30b1d44$export$d1a06452d3489bc7(f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\nfunction $746141bbf30b1d44$export$f1db080c865becb9(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction $746141bbf30b1d44$export$1050f835b63b671e(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction $746141bbf30b1d44$export$67ebef60e6f28a6(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar $746141bbf30b1d44$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    };\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction $746141bbf30b1d44$export$f33643c0debef087(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) $746141bbf30b1d44$export$45d3717a4c69092e(o, m, p);\n}\nfunction $746141bbf30b1d44$export$19a8beecd37a4c45(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction $746141bbf30b1d44$export$8d051b38c9118094(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction $746141bbf30b1d44$export$afc72e2116322959() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($746141bbf30b1d44$export$8d051b38c9118094(arguments[i]));\n    return ar;\n}\nfunction $746141bbf30b1d44$export$6388937ca91ccae8() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction $746141bbf30b1d44$export$1216008129fb82ed(to, from, pack) {\n    if (pack || arguments.length === 2) {\n        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction $746141bbf30b1d44$export$10c90e4f7922046c(v) {\n    return this instanceof $746141bbf30b1d44$export$10c90e4f7922046c ? (this.v = v, this) : new $746141bbf30b1d44$export$10c90e4f7922046c(v);\n}\nfunction $746141bbf30b1d44$export$e427f37a30a4de9b(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof $746141bbf30b1d44$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction $746141bbf30b1d44$export$bbd80228419bb833(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: $746141bbf30b1d44$export$10c90e4f7922046c(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction $746141bbf30b1d44$export$e3b29a3d6162315f(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof $746141bbf30b1d44$export$19a8beecd37a4c45 === \"function\" ? $746141bbf30b1d44$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction $746141bbf30b1d44$export$4fb47efe1390b86f(cooked, raw) {\n    if (Object.defineProperty) Object.defineProperty(cooked, \"raw\", {\n        value: raw\n    });\n    else cooked.raw = raw;\n    return cooked;\n}\nvar $746141bbf30b1d44$var$__setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction $746141bbf30b1d44$export$c21735bcef00d192(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) $746141bbf30b1d44$export$45d3717a4c69092e(result, mod, k);\n    }\n    $746141bbf30b1d44$var$__setModuleDefault(result, mod);\n    return result;\n}\nfunction $746141bbf30b1d44$export$da59b14a69baef04(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction $746141bbf30b1d44$export$d5dcaf168c640c35(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction $746141bbf30b1d44$export$d40a35129aaff81f(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction $746141bbf30b1d44$export$81fdc39f203e4e04(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nfunction $746141bbf30b1d44$export$88ac25d8e944e405(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n        var dispose;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) env.stack.push({\n        async: true\n    });\n    return value;\n}\nvar $746141bbf30b1d44$var$_SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction $746141bbf30b1d44$export$8f076105dc360e92(env) {\n    function fail(e) {\n        env.error = env.hasError ? new $746141bbf30b1d44$var$_SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n        env.hasError = true;\n    }\n    function next() {\n        while(env.stack.length){\n            var rec = env.stack.pop();\n            try {\n                var result = rec.dispose && rec.dispose.call(rec.value);\n                if (rec.async) return Promise.resolve(result).then(next, function(e) {\n                    fail(e);\n                    return next();\n                });\n            } catch (e) {\n                fail(e);\n            }\n        }\n        if (env.hasError) throw env.error;\n    }\n    return next();\n}\nvar $746141bbf30b1d44$export$2e2bcd8739ae039 = {\n    __extends: $746141bbf30b1d44$export$a8ba968b8961cb8a,\n    __assign: $746141bbf30b1d44$export$18ce0697a983be9b,\n    __rest: $746141bbf30b1d44$export$3c9a16f847548506,\n    __decorate: $746141bbf30b1d44$export$29e00dfd3077644b,\n    __param: $746141bbf30b1d44$export$d5ad3fd78186038f,\n    __metadata: $746141bbf30b1d44$export$f1db080c865becb9,\n    __awaiter: $746141bbf30b1d44$export$1050f835b63b671e,\n    __generator: $746141bbf30b1d44$export$67ebef60e6f28a6,\n    __createBinding: $746141bbf30b1d44$export$45d3717a4c69092e,\n    __exportStar: $746141bbf30b1d44$export$f33643c0debef087,\n    __values: $746141bbf30b1d44$export$19a8beecd37a4c45,\n    __read: $746141bbf30b1d44$export$8d051b38c9118094,\n    __spread: $746141bbf30b1d44$export$afc72e2116322959,\n    __spreadArrays: $746141bbf30b1d44$export$6388937ca91ccae8,\n    __spreadArray: $746141bbf30b1d44$export$1216008129fb82ed,\n    __await: $746141bbf30b1d44$export$10c90e4f7922046c,\n    __asyncGenerator: $746141bbf30b1d44$export$e427f37a30a4de9b,\n    __asyncDelegator: $746141bbf30b1d44$export$bbd80228419bb833,\n    __asyncValues: $746141bbf30b1d44$export$e3b29a3d6162315f,\n    __makeTemplateObject: $746141bbf30b1d44$export$4fb47efe1390b86f,\n    __importStar: $746141bbf30b1d44$export$c21735bcef00d192,\n    __importDefault: $746141bbf30b1d44$export$da59b14a69baef04,\n    __classPrivateFieldGet: $746141bbf30b1d44$export$d5dcaf168c640c35,\n    __classPrivateFieldSet: $746141bbf30b1d44$export$d40a35129aaff81f,\n    __classPrivateFieldIn: $746141bbf30b1d44$export$81fdc39f203e4e04,\n    __addDisposableResource: $746141bbf30b1d44$export$88ac25d8e944e405,\n    __disposeResources: $746141bbf30b1d44$export$8f076105dc360e92\n};\n\n\n\n\nfunction $e996a377a476308b$export$f6e2535fb5126e54(value) {\n    return typeof value === \"function\";\n}\n\n\n\n\nfunction $84b00e98e2449571$export$128a15b65d1b6041(createImpl) {\n    var _super = function(instance) {\n        Error.call(instance);\n        instance.stack = new Error().stack;\n    };\n    var ctorFunc = createImpl(_super);\n    ctorFunc.prototype = Object.create(Error.prototype);\n    ctorFunc.prototype.constructor = ctorFunc;\n    return ctorFunc;\n}\n\n\nvar $ea002fe37e02483f$export$c9648b76fd580c34 = (0, $84b00e98e2449571$export$128a15b65d1b6041)(function(_super) {\n    return function UnsubscriptionErrorImpl(errors) {\n        _super(this);\n        this.message = errors ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function(err, i) {\n            return i + 1 + \") \" + err.toString();\n        }).join(\"\\n  \") : \"\";\n        this.name = \"UnsubscriptionError\";\n        this.errors = errors;\n    };\n});\n\n\nfunction $e982355222966567$export$dae3f38077fc36c0(arr, item) {\n    if (arr) {\n        var index = arr.indexOf(item);\n        0 <= index && arr.splice(index, 1);\n    }\n}\n\n\nvar $5124a93ca0cff8ae$export$f55210826850c514 = function() {\n    function Subscription(initialTeardown) {\n        this.initialTeardown = initialTeardown;\n        this.closed = false;\n        this._parentage = null;\n        this._finalizers = null;\n    }\n    Subscription.prototype.unsubscribe = function() {\n        var e_1, _a, e_2, _b;\n        var errors;\n        if (!this.closed) {\n            this.closed = true;\n            var _parentage = this._parentage;\n            if (_parentage) {\n                this._parentage = null;\n                if (Array.isArray(_parentage)) try {\n                    for(var _parentage_1 = (0, $746141bbf30b1d44$export$19a8beecd37a4c45)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()){\n                        var parent_1 = _parentage_1_1.value;\n                        parent_1.remove(this);\n                    }\n                } catch (e_1_1) {\n                    e_1 = {\n                        error: e_1_1\n                    };\n                } finally{\n                    try {\n                        if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n                    } finally{\n                        if (e_1) throw e_1.error;\n                    }\n                }\n                else _parentage.remove(this);\n            }\n            var initialFinalizer = this.initialTeardown;\n            if ((0, $e996a377a476308b$export$f6e2535fb5126e54)(initialFinalizer)) try {\n                initialFinalizer();\n            } catch (e) {\n                errors = e instanceof (0, $ea002fe37e02483f$export$c9648b76fd580c34) ? e.errors : [\n                    e\n                ];\n            }\n            var _finalizers = this._finalizers;\n            if (_finalizers) {\n                this._finalizers = null;\n                try {\n                    for(var _finalizers_1 = (0, $746141bbf30b1d44$export$19a8beecd37a4c45)(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()){\n                        var finalizer = _finalizers_1_1.value;\n                        try {\n                            $5124a93ca0cff8ae$var$execFinalizer(finalizer);\n                        } catch (err) {\n                            errors = errors !== null && errors !== void 0 ? errors : [];\n                            if (err instanceof (0, $ea002fe37e02483f$export$c9648b76fd580c34)) errors = (0, $746141bbf30b1d44$export$1216008129fb82ed)((0, $746141bbf30b1d44$export$1216008129fb82ed)([], (0, $746141bbf30b1d44$export$8d051b38c9118094)(errors)), (0, $746141bbf30b1d44$export$8d051b38c9118094)(err.errors));\n                            else errors.push(err);\n                        }\n                    }\n                } catch (e_2_1) {\n                    e_2 = {\n                        error: e_2_1\n                    };\n                } finally{\n                    try {\n                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);\n                    } finally{\n                        if (e_2) throw e_2.error;\n                    }\n                }\n            }\n            if (errors) throw new (0, $ea002fe37e02483f$export$c9648b76fd580c34)(errors);\n        }\n    };\n    Subscription.prototype.add = function(teardown) {\n        var _a;\n        if (teardown && teardown !== this) {\n            if (this.closed) $5124a93ca0cff8ae$var$execFinalizer(teardown);\n            else {\n                if (teardown instanceof Subscription) {\n                    if (teardown.closed || teardown._hasParent(this)) return;\n                    teardown._addParent(this);\n                }\n                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n            }\n        }\n    };\n    Subscription.prototype._hasParent = function(parent) {\n        var _parentage = this._parentage;\n        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n    };\n    Subscription.prototype._addParent = function(parent) {\n        var _parentage = this._parentage;\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [\n            _parentage,\n            parent\n        ] : parent;\n    };\n    Subscription.prototype._removeParent = function(parent) {\n        var _parentage = this._parentage;\n        if (_parentage === parent) this._parentage = null;\n        else if (Array.isArray(_parentage)) (0, $e982355222966567$export$dae3f38077fc36c0)(_parentage, parent);\n    };\n    Subscription.prototype.remove = function(teardown) {\n        var _finalizers = this._finalizers;\n        _finalizers && (0, $e982355222966567$export$dae3f38077fc36c0)(_finalizers, teardown);\n        if (teardown instanceof Subscription) teardown._removeParent(this);\n    };\n    Subscription.EMPTY = function() {\n        var empty = new Subscription();\n        empty.closed = true;\n        return empty;\n    }();\n    return Subscription;\n}();\nvar $5124a93ca0cff8ae$export$610f9c3ca1a38dd8 = $5124a93ca0cff8ae$export$f55210826850c514.EMPTY;\nfunction $5124a93ca0cff8ae$export$4f9221cbada3c4fc(value) {\n    return value instanceof $5124a93ca0cff8ae$export$f55210826850c514 || value && \"closed\" in value && (0, $e996a377a476308b$export$f6e2535fb5126e54)(value.remove) && (0, $e996a377a476308b$export$f6e2535fb5126e54)(value.add) && (0, $e996a377a476308b$export$f6e2535fb5126e54)(value.unsubscribe);\n}\nfunction $5124a93ca0cff8ae$var$execFinalizer(finalizer) {\n    if ((0, $e996a377a476308b$export$f6e2535fb5126e54)(finalizer)) finalizer();\n    else finalizer.unsubscribe();\n}\n\n\nvar $ed09702a4a712d45$export$e506a1d27d1eaa20 = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: undefined,\n    useDeprecatedSynchronousErrorHandling: false,\n    useDeprecatedNextContext: false\n};\n\n\n\n\nvar $9cfc76a232e78ed6$export$365aa6bd3c788e3d = {\n    setTimeout: function(handler, timeout) {\n        var args = [];\n        for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];\n        var delegate = $9cfc76a232e78ed6$export$365aa6bd3c788e3d.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) return delegate.setTimeout.apply(delegate, (0, $746141bbf30b1d44$export$1216008129fb82ed)([\n            handler,\n            timeout\n        ], (0, $746141bbf30b1d44$export$8d051b38c9118094)(args)));\n        return setTimeout.apply(void 0, (0, $746141bbf30b1d44$export$1216008129fb82ed)([\n            handler,\n            timeout\n        ], (0, $746141bbf30b1d44$export$8d051b38c9118094)(args)));\n    },\n    clearTimeout: function(handle) {\n        var delegate = $9cfc76a232e78ed6$export$365aa6bd3c788e3d.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n    },\n    delegate: undefined\n};\n\n\nfunction $e95832991341c572$export$ebf645db02d3e99f(err) {\n    (0, $9cfc76a232e78ed6$export$365aa6bd3c788e3d).setTimeout(function() {\n        var onUnhandledError = (0, $ed09702a4a712d45$export$e506a1d27d1eaa20).onUnhandledError;\n        if (onUnhandledError) onUnhandledError(err);\n        else throw err;\n    });\n}\n\n\nfunction $a2669f8c8173c8d3$export$8793edee2d425525() {}\n\n\nvar $a4b08c076fa88601$export$b7f97edb34bc1f87 = function() {\n    return $a4b08c076fa88601$export$9c8f6e8d39c60cf3(\"C\", undefined, undefined);\n}();\nfunction $a4b08c076fa88601$export$dd472c3d8fe5a85a(error) {\n    return $a4b08c076fa88601$export$9c8f6e8d39c60cf3(\"E\", undefined, error);\n}\nfunction $a4b08c076fa88601$export$ff9346b0d1d30313(value) {\n    return $a4b08c076fa88601$export$9c8f6e8d39c60cf3(\"N\", value, undefined);\n}\nfunction $a4b08c076fa88601$export$9c8f6e8d39c60cf3(kind, value, error) {\n    return {\n        kind: kind,\n        value: value,\n        error: error\n    };\n}\n\n\n\n\nvar $97e50eda4820bbda$var$context = null;\nfunction $97e50eda4820bbda$export$d974811edc77eafa(cb) {\n    if ((0, $ed09702a4a712d45$export$e506a1d27d1eaa20).useDeprecatedSynchronousErrorHandling) {\n        var isRoot = !$97e50eda4820bbda$var$context;\n        if (isRoot) $97e50eda4820bbda$var$context = {\n            errorThrown: false,\n            error: null\n        };\n        cb();\n        if (isRoot) {\n            var _a = $97e50eda4820bbda$var$context, errorThrown = _a.errorThrown, error = _a.error;\n            $97e50eda4820bbda$var$context = null;\n            if (errorThrown) throw error;\n        }\n    } else cb();\n}\nfunction $97e50eda4820bbda$export$3e205fbb5df021e0(err) {\n    if ((0, $ed09702a4a712d45$export$e506a1d27d1eaa20).useDeprecatedSynchronousErrorHandling && $97e50eda4820bbda$var$context) {\n        $97e50eda4820bbda$var$context.errorThrown = true;\n        $97e50eda4820bbda$var$context.error = err;\n    }\n}\n\n\nvar $144251abd0e070aa$export$60959659b2c22881 = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(Subscriber, _super);\n    function Subscriber(destination) {\n        var _this = _super.call(this) || this;\n        _this.isStopped = false;\n        if (destination) {\n            _this.destination = destination;\n            if ((0, $5124a93ca0cff8ae$export$4f9221cbada3c4fc)(destination)) destination.add(_this);\n        } else _this.destination = $144251abd0e070aa$export$88d395d20619a0af;\n        return _this;\n    }\n    Subscriber.create = function(next, error, complete) {\n        return new $144251abd0e070aa$export$94eeb6a328cab6c7(next, error, complete);\n    };\n    Subscriber.prototype.next = function(value) {\n        if (this.isStopped) $144251abd0e070aa$var$handleStoppedNotification((0, $a4b08c076fa88601$export$ff9346b0d1d30313)(value), this);\n        else this._next(value);\n    };\n    Subscriber.prototype.error = function(err) {\n        if (this.isStopped) $144251abd0e070aa$var$handleStoppedNotification((0, $a4b08c076fa88601$export$dd472c3d8fe5a85a)(err), this);\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function() {\n        if (this.isStopped) $144251abd0e070aa$var$handleStoppedNotification((0, $a4b08c076fa88601$export$b7f97edb34bc1f87), this);\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function() {\n        if (!this.closed) {\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n            this.destination = null;\n        }\n    };\n    Subscriber.prototype._next = function(value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function(err) {\n        try {\n            this.destination.error(err);\n        } finally{\n            this.unsubscribe();\n        }\n    };\n    Subscriber.prototype._complete = function() {\n        try {\n            this.destination.complete();\n        } finally{\n            this.unsubscribe();\n        }\n    };\n    return Subscriber;\n}((0, $5124a93ca0cff8ae$export$f55210826850c514));\nvar $144251abd0e070aa$var$_bind = Function.prototype.bind;\nfunction $144251abd0e070aa$var$bind(fn, thisArg) {\n    return $144251abd0e070aa$var$_bind.call(fn, thisArg);\n}\nvar $144251abd0e070aa$var$ConsumerObserver = function() {\n    function ConsumerObserver(partialObserver) {\n        this.partialObserver = partialObserver;\n    }\n    ConsumerObserver.prototype.next = function(value) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.next) try {\n            partialObserver.next(value);\n        } catch (error) {\n            $144251abd0e070aa$var$handleUnhandledError(error);\n        }\n    };\n    ConsumerObserver.prototype.error = function(err) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.error) try {\n            partialObserver.error(err);\n        } catch (error) {\n            $144251abd0e070aa$var$handleUnhandledError(error);\n        }\n        else $144251abd0e070aa$var$handleUnhandledError(err);\n    };\n    ConsumerObserver.prototype.complete = function() {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.complete) try {\n            partialObserver.complete();\n        } catch (error) {\n            $144251abd0e070aa$var$handleUnhandledError(error);\n        }\n    };\n    return ConsumerObserver;\n}();\nvar $144251abd0e070aa$export$94eeb6a328cab6c7 = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(SafeSubscriber, _super);\n    function SafeSubscriber(observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        var partialObserver;\n        if ((0, $e996a377a476308b$export$f6e2535fb5126e54)(observerOrNext) || !observerOrNext) partialObserver = {\n            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,\n            error: error !== null && error !== void 0 ? error : undefined,\n            complete: complete !== null && complete !== void 0 ? complete : undefined\n        };\n        else {\n            var context_1;\n            if (_this && (0, $ed09702a4a712d45$export$e506a1d27d1eaa20).useDeprecatedNextContext) {\n                context_1 = Object.create(observerOrNext);\n                context_1.unsubscribe = function() {\n                    return _this.unsubscribe();\n                };\n                partialObserver = {\n                    next: observerOrNext.next && $144251abd0e070aa$var$bind(observerOrNext.next, context_1),\n                    error: observerOrNext.error && $144251abd0e070aa$var$bind(observerOrNext.error, context_1),\n                    complete: observerOrNext.complete && $144251abd0e070aa$var$bind(observerOrNext.complete, context_1)\n                };\n            } else partialObserver = observerOrNext;\n        }\n        _this.destination = new $144251abd0e070aa$var$ConsumerObserver(partialObserver);\n        return _this;\n    }\n    return SafeSubscriber;\n}($144251abd0e070aa$export$60959659b2c22881);\nfunction $144251abd0e070aa$var$handleUnhandledError(error) {\n    if ((0, $ed09702a4a712d45$export$e506a1d27d1eaa20).useDeprecatedSynchronousErrorHandling) (0, $97e50eda4820bbda$export$3e205fbb5df021e0)(error);\n    else (0, $e95832991341c572$export$ebf645db02d3e99f)(error);\n}\nfunction $144251abd0e070aa$var$defaultErrorHandler(err) {\n    throw err;\n}\nfunction $144251abd0e070aa$var$handleStoppedNotification(notification, subscriber) {\n    var onStoppedNotification = (0, $ed09702a4a712d45$export$e506a1d27d1eaa20).onStoppedNotification;\n    onStoppedNotification && (0, $9cfc76a232e78ed6$export$365aa6bd3c788e3d).setTimeout(function() {\n        return onStoppedNotification(notification, subscriber);\n    });\n}\nvar $144251abd0e070aa$export$88d395d20619a0af = {\n    closed: true,\n    next: (0, $a2669f8c8173c8d3$export$8793edee2d425525),\n    error: $144251abd0e070aa$var$defaultErrorHandler,\n    complete: (0, $a2669f8c8173c8d3$export$8793edee2d425525)\n};\n\n\n\nvar $ea15a553d1249983$export$5ab46cbf6120b33a = function() {\n    return typeof Symbol === \"function\" && Symbol.observable || \"@@observable\";\n}();\n\n\nfunction $d964bb9c87650d9b$export$f0954fd7d5368655(x) {\n    return x;\n}\n\n\nfunction $105ed219d50c6c26$export$a4627e546088548d() {\n    var fns = [];\n    for(var _i = 0; _i < arguments.length; _i++)fns[_i] = arguments[_i];\n    return $105ed219d50c6c26$export$71f88a61afaa14d7(fns);\n}\nfunction $105ed219d50c6c26$export$71f88a61afaa14d7(fns) {\n    if (fns.length === 0) return 0, $d964bb9c87650d9b$export$f0954fd7d5368655;\n    if (fns.length === 1) return fns[0];\n    return function piped(input) {\n        return fns.reduce(function(prev, fn) {\n            return fn(prev);\n        }, input);\n    };\n}\n\n\n\n\n\nvar $157495f65d1fedd6$export$77cea355fa80b5f4 = function() {\n    function Observable(subscribe) {\n        if (subscribe) this._subscribe = subscribe;\n    }\n    Observable.prototype.lift = function(operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function(observerOrNext, error, complete) {\n        var _this = this;\n        var subscriber = $157495f65d1fedd6$var$isSubscriber(observerOrNext) ? observerOrNext : new (0, $144251abd0e070aa$export$94eeb6a328cab6c7)(observerOrNext, error, complete);\n        (0, $97e50eda4820bbda$export$d974811edc77eafa)(function() {\n            var _a = _this, operator = _a.operator, source = _a.source;\n            subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));\n        });\n        return subscriber;\n    };\n    Observable.prototype._trySubscribe = function(sink) {\n        try {\n            return this._subscribe(sink);\n        } catch (err) {\n            sink.error(err);\n        }\n    };\n    Observable.prototype.forEach = function(next, promiseCtor) {\n        var _this = this;\n        promiseCtor = $157495f65d1fedd6$var$getPromiseCtor(promiseCtor);\n        return new promiseCtor(function(resolve, reject) {\n            var subscriber = new (0, $144251abd0e070aa$export$94eeb6a328cab6c7)({\n                next: function(value) {\n                    try {\n                        next(value);\n                    } catch (err) {\n                        reject(err);\n                        subscriber.unsubscribe();\n                    }\n                },\n                error: reject,\n                complete: resolve\n            });\n            _this.subscribe(subscriber);\n        });\n    };\n    Observable.prototype._subscribe = function(subscriber) {\n        var _a;\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    };\n    Observable.prototype[0, $ea15a553d1249983$export$5ab46cbf6120b33a] = function() {\n        return this;\n    };\n    Observable.prototype.pipe = function() {\n        var operations = [];\n        for(var _i = 0; _i < arguments.length; _i++)operations[_i] = arguments[_i];\n        return (0, $105ed219d50c6c26$export$71f88a61afaa14d7)(operations)(this);\n    };\n    Observable.prototype.toPromise = function(promiseCtor) {\n        var _this = this;\n        promiseCtor = $157495f65d1fedd6$var$getPromiseCtor(promiseCtor);\n        return new promiseCtor(function(resolve, reject) {\n            var value;\n            _this.subscribe(function(x) {\n                return value = x;\n            }, function(err) {\n                return reject(err);\n            }, function() {\n                return resolve(value);\n            });\n        });\n    };\n    Observable.create = function(subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}();\nfunction $157495f65d1fedd6$var$getPromiseCtor(promiseCtor) {\n    var _a;\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : (0, $ed09702a4a712d45$export$e506a1d27d1eaa20).Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction $157495f65d1fedd6$var$isObserver(value) {\n    return value && (0, $e996a377a476308b$export$f6e2535fb5126e54)(value.next) && (0, $e996a377a476308b$export$f6e2535fb5126e54)(value.error) && (0, $e996a377a476308b$export$f6e2535fb5126e54)(value.complete);\n}\nfunction $157495f65d1fedd6$var$isSubscriber(value) {\n    return value && value instanceof (0, $144251abd0e070aa$export$60959659b2c22881) || $157495f65d1fedd6$var$isObserver(value) && (0, $5124a93ca0cff8ae$export$4f9221cbada3c4fc)(value);\n}\n\n\n\n\nvar $fc094a53485b6f1b$export$f708eee25634bc80 = (0, $84b00e98e2449571$export$128a15b65d1b6041)(function(_super) {\n    return function ObjectUnsubscribedErrorImpl() {\n        _super(this);\n        this.name = \"ObjectUnsubscribedError\";\n        this.message = \"object unsubscribed\";\n    };\n});\n\n\n\n\nvar $489dabb836a96717$export$b6bbab5a9b109038 = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.closed = false;\n        _this.currentObservers = null;\n        _this.observers = [];\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype.lift = function(operator) {\n        var subject = new $489dabb836a96717$export$155189cde295587d(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype._throwIfClosed = function() {\n        if (this.closed) throw new (0, $fc094a53485b6f1b$export$f708eee25634bc80)();\n    };\n    Subject.prototype.next = function(value) {\n        var _this = this;\n        (0, $97e50eda4820bbda$export$d974811edc77eafa)(function() {\n            var e_1, _a;\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                if (!_this.currentObservers) _this.currentObservers = Array.from(_this.observers);\n                try {\n                    for(var _b = (0, $746141bbf30b1d44$export$19a8beecd37a4c45)(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()){\n                        var observer = _c.value;\n                        observer.next(value);\n                    }\n                } catch (e_1_1) {\n                    e_1 = {\n                        error: e_1_1\n                    };\n                } finally{\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    } finally{\n                        if (e_1) throw e_1.error;\n                    }\n                }\n            }\n        });\n    };\n    Subject.prototype.error = function(err) {\n        var _this = this;\n        (0, $97e50eda4820bbda$export$d974811edc77eafa)(function() {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.hasError = _this.isStopped = true;\n                _this.thrownError = err;\n                var observers = _this.observers;\n                while(observers.length)observers.shift().error(err);\n            }\n        });\n    };\n    Subject.prototype.complete = function() {\n        var _this = this;\n        (0, $97e50eda4820bbda$export$d974811edc77eafa)(function() {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.isStopped = true;\n                var observers = _this.observers;\n                while(observers.length)observers.shift().complete();\n            }\n        });\n    };\n    Subject.prototype.unsubscribe = function() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    };\n    Object.defineProperty(Subject.prototype, \"observed\", {\n        get: function() {\n            var _a;\n            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Subject.prototype._trySubscribe = function(subscriber) {\n        this._throwIfClosed();\n        return _super.prototype._trySubscribe.call(this, subscriber);\n    };\n    Subject.prototype._subscribe = function(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    };\n    Subject.prototype._innerSubscribe = function(subscriber) {\n        var _this = this;\n        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;\n        if (hasError || isStopped) return 0, $5124a93ca0cff8ae$export$610f9c3ca1a38dd8;\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new (0, $5124a93ca0cff8ae$export$f55210826850c514)(function() {\n            _this.currentObservers = null;\n            (0, $e982355222966567$export$dae3f38077fc36c0)(observers, subscriber);\n        });\n    };\n    Subject.prototype._checkFinalizedStatuses = function(subscriber) {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;\n        if (hasError) subscriber.error(thrownError);\n        else if (isStopped) subscriber.complete();\n    };\n    Subject.prototype.asObservable = function() {\n        var observable = new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function(destination, source) {\n        return new $489dabb836a96717$export$155189cde295587d(destination, source);\n    };\n    return Subject;\n}((0, $157495f65d1fedd6$export$77cea355fa80b5f4));\nvar $489dabb836a96717$export$155189cde295587d = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 || _b.call(_a, value);\n    };\n    AnonymousSubject.prototype.error = function(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 || _b.call(_a, err);\n    };\n    AnonymousSubject.prototype.complete = function() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 || _b.call(_a);\n    };\n    AnonymousSubject.prototype._subscribe = function(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : (0, $5124a93ca0cff8ae$export$610f9c3ca1a38dd8);\n    };\n    return AnonymousSubject;\n}($489dabb836a96717$export$b6bbab5a9b109038);\n\n\nvar $d80e01a928648151$export$fe960da701faae26 = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(AsyncSubject, _super);\n    function AsyncSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._value = null;\n        _this._hasValue = false;\n        _this._isComplete = false;\n        return _this;\n    }\n    AsyncSubject.prototype._checkFinalizedStatuses = function(subscriber) {\n        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;\n        if (hasError) subscriber.error(thrownError);\n        else if (isStopped || _isComplete) {\n            _hasValue && subscriber.next(_value);\n            subscriber.complete();\n        }\n    };\n    AsyncSubject.prototype.next = function(value) {\n        if (!this.isStopped) {\n            this._value = value;\n            this._hasValue = true;\n        }\n    };\n    AsyncSubject.prototype.complete = function() {\n        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;\n        if (!_isComplete) {\n            this._isComplete = true;\n            _hasValue && _super.prototype.next.call(this, _value);\n            _super.prototype.complete.call(this);\n        }\n    };\n    return AsyncSubject;\n}((0, $489dabb836a96717$export$b6bbab5a9b109038));\n\n\n\nvar $30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function() {\n            return this.getValue();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function(subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        !subscription.closed && subscriber.next(this._value);\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function() {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;\n        if (hasError) throw thrownError;\n        this._throwIfClosed();\n        return _value;\n    };\n    BehaviorSubject.prototype.next = function(value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}((0, $489dabb836a96717$export$b6bbab5a9b109038));\n\n\nvar $cb6028617666e135$var$isArray = Array.isArray;\nvar $cb6028617666e135$var$getPrototypeOf = Object.getPrototypeOf, $cb6028617666e135$var$objectProto = Object.prototype, $cb6028617666e135$var$getKeys = Object.keys;\nfunction $cb6028617666e135$export$8871b3799a14360f(args) {\n    if (args.length === 1) {\n        var first_1 = args[0];\n        if ($cb6028617666e135$var$isArray(first_1)) return {\n            args: first_1,\n            keys: null\n        };\n        if ($cb6028617666e135$var$isPOJO(first_1)) {\n            var keys = $cb6028617666e135$var$getKeys(first_1);\n            return {\n                args: keys.map(function(key) {\n                    return first_1[key];\n                }),\n                keys: keys\n            };\n        }\n    }\n    return {\n        args: args,\n        keys: null\n    };\n}\nfunction $cb6028617666e135$var$isPOJO(obj) {\n    return obj && typeof obj === \"object\" && $cb6028617666e135$var$getPrototypeOf(obj) === $cb6028617666e135$var$objectProto;\n}\n\n\n\nvar $91d542d0b784d24b$export$1e2f57719e155213 = function(x) {\n    return x && typeof x.length === \"number\" && typeof x !== \"function\";\n};\n\n\n\nfunction $7700e3a10fed84ae$export$4369c812aac99591(value) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)(value === null || value === void 0 ? void 0 : value.then);\n}\n\n\n\n\n\nfunction $ba3895138ebfd0d0$export$48c0cddbc99c45c2(input) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)(input[0, $ea15a553d1249983$export$5ab46cbf6120b33a]);\n}\n\n\n\nfunction $8b01cc4a4fa9c790$export$edb10ab8dd75a915(obj) {\n    return Symbol.asyncIterator && (0, $e996a377a476308b$export$f6e2535fb5126e54)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\n}\n\n\nfunction $80eb79c79e8b4ce6$export$7cbe71b9fa263484(input) {\n    return new TypeError(\"You provided \" + (input !== null && typeof input === \"object\" ? \"an invalid object\" : \"'\" + input + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\n\n\nfunction $10702573cd9f2753$export$aa9956be4ae4fe8() {\n    if (typeof Symbol !== \"function\" || !Symbol.iterator) return \"@@iterator\";\n    return Symbol.iterator;\n}\nvar $10702573cd9f2753$export$6f58e2338da23f4d = $10702573cd9f2753$export$aa9956be4ae4fe8();\n\n\n\nfunction $3172d966b15186c2$export$9652023d9040757(input) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)(input === null || input === void 0 ? void 0 : input[0, $10702573cd9f2753$export$6f58e2338da23f4d]);\n}\n\n\n\n\nfunction $022971cd29cb3478$export$cf4785e597badab3(readableStream) {\n    return (0, $746141bbf30b1d44$export$e427f37a30a4de9b)(this, arguments, function readableStreamLikeToAsyncGenerator_1() {\n        var reader, _a, value, done;\n        return (0, $746141bbf30b1d44$export$67ebef60e6f28a6)(this, function(_b) {\n            switch(_b.label){\n                case 0:\n                    reader = readableStream.getReader();\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([\n                        1,\n                        ,\n                        9,\n                        10\n                    ]);\n                    _b.label = 2;\n                case 2:\n                    return [\n                        4,\n                        (0, $746141bbf30b1d44$export$10c90e4f7922046c)(reader.read())\n                    ];\n                case 3:\n                    _a = _b.sent(), value = _a.value, done = _a.done;\n                    if (!done) return [\n                        3,\n                        5\n                    ];\n                    return [\n                        4,\n                        (0, $746141bbf30b1d44$export$10c90e4f7922046c)(void 0)\n                    ];\n                case 4:\n                    return [\n                        2,\n                        _b.sent()\n                    ];\n                case 5:\n                    return [\n                        4,\n                        (0, $746141bbf30b1d44$export$10c90e4f7922046c)(value)\n                    ];\n                case 6:\n                    return [\n                        4,\n                        _b.sent()\n                    ];\n                case 7:\n                    _b.sent();\n                    return [\n                        3,\n                        2\n                    ];\n                case 8:\n                    return [\n                        3,\n                        10\n                    ];\n                case 9:\n                    reader.releaseLock();\n                    return [\n                        7\n                    ];\n                case 10:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n}\nfunction $022971cd29cb3478$export$c088ffafdba7405f(obj) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)(obj === null || obj === void 0 ? void 0 : obj.getReader);\n}\n\n\n\n\n\nfunction $d5e97ca40de1dca2$export$6a9cfa3ebc765910(input) {\n    if (input instanceof (0, $157495f65d1fedd6$export$77cea355fa80b5f4)) return input;\n    if (input != null) {\n        if ((0, $ba3895138ebfd0d0$export$48c0cddbc99c45c2)(input)) return $d5e97ca40de1dca2$export$aa3d41784b3267fa(input);\n        if ((0, $91d542d0b784d24b$export$1e2f57719e155213)(input)) return $d5e97ca40de1dca2$export$4cb2acdbcda2c253(input);\n        if ((0, $7700e3a10fed84ae$export$4369c812aac99591)(input)) return $d5e97ca40de1dca2$export$60f45028237c39d1(input);\n        if ((0, $8b01cc4a4fa9c790$export$edb10ab8dd75a915)(input)) return $d5e97ca40de1dca2$export$e073fccf36d78cc1(input);\n        if ((0, $3172d966b15186c2$export$9652023d9040757)(input)) return $d5e97ca40de1dca2$export$dcccc29c315dd646(input);\n        if ((0, $022971cd29cb3478$export$c088ffafdba7405f)(input)) return $d5e97ca40de1dca2$export$b2dcb11d46e7a4ad(input);\n    }\n    throw (0, $80eb79c79e8b4ce6$export$7cbe71b9fa263484)(input);\n}\nfunction $d5e97ca40de1dca2$export$aa3d41784b3267fa(obj) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        var obs = obj[0, $ea15a553d1249983$export$5ab46cbf6120b33a]();\n        if ((0, $e996a377a476308b$export$f6e2535fb5126e54)(obs.subscribe)) return obs.subscribe(subscriber);\n        throw new TypeError(\"Provided object does not correctly implement Symbol.observable\");\n    });\n}\nfunction $d5e97ca40de1dca2$export$4cb2acdbcda2c253(array) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        for(var i = 0; i < array.length && !subscriber.closed; i++)subscriber.next(array[i]);\n        subscriber.complete();\n    });\n}\nfunction $d5e97ca40de1dca2$export$60f45028237c39d1(promise) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        promise.then(function(value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function(err) {\n            return subscriber.error(err);\n        }).then(null, (0, $e95832991341c572$export$ebf645db02d3e99f));\n    });\n}\nfunction $d5e97ca40de1dca2$export$dcccc29c315dd646(iterable) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        var e_1, _a;\n        try {\n            for(var iterable_1 = (0, $746141bbf30b1d44$export$19a8beecd37a4c45)(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()){\n                var value = iterable_1_1.value;\n                subscriber.next(value);\n                if (subscriber.closed) return;\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        subscriber.complete();\n    });\n}\nfunction $d5e97ca40de1dca2$export$e073fccf36d78cc1(asyncIterable) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        $d5e97ca40de1dca2$var$process(asyncIterable, subscriber).catch(function(err) {\n            return subscriber.error(err);\n        });\n    });\n}\nfunction $d5e97ca40de1dca2$export$b2dcb11d46e7a4ad(readableStream) {\n    return $d5e97ca40de1dca2$export$e073fccf36d78cc1((0, $022971cd29cb3478$export$cf4785e597badab3)(readableStream));\n}\nfunction $d5e97ca40de1dca2$var$process(asyncIterable, subscriber) {\n    var asyncIterable_1, asyncIterable_1_1;\n    var e_2, _a;\n    return (0, $746141bbf30b1d44$export$1050f835b63b671e)(this, void 0, void 0, function() {\n        var value, e_2_1;\n        return (0, $746141bbf30b1d44$export$67ebef60e6f28a6)(this, function(_b) {\n            switch(_b.label){\n                case 0:\n                    _b.trys.push([\n                        0,\n                        5,\n                        6,\n                        11\n                    ]);\n                    asyncIterable_1 = (0, $746141bbf30b1d44$export$e3b29a3d6162315f)(asyncIterable);\n                    _b.label = 1;\n                case 1:\n                    return [\n                        4,\n                        asyncIterable_1.next()\n                    ];\n                case 2:\n                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [\n                        3,\n                        4\n                    ];\n                    value = asyncIterable_1_1.value;\n                    subscriber.next(value);\n                    if (subscriber.closed) return [\n                        2\n                    ];\n                    _b.label = 3;\n                case 3:\n                    return [\n                        3,\n                        1\n                    ];\n                case 4:\n                    return [\n                        3,\n                        11\n                    ];\n                case 5:\n                    e_2_1 = _b.sent();\n                    e_2 = {\n                        error: e_2_1\n                    };\n                    return [\n                        3,\n                        11\n                    ];\n                case 6:\n                    _b.trys.push([\n                        6,\n                        ,\n                        9,\n                        10\n                    ]);\n                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [\n                        3,\n                        8\n                    ];\n                    return [\n                        4,\n                        _a.call(asyncIterable_1)\n                    ];\n                case 7:\n                    _b.sent();\n                    _b.label = 8;\n                case 8:\n                    return [\n                        3,\n                        10\n                    ];\n                case 9:\n                    if (e_2) throw e_2.error;\n                    return [\n                        7\n                    ];\n                case 10:\n                    return [\n                        7\n                    ];\n                case 11:\n                    subscriber.complete();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n}\n\n\nfunction $bb90871d75d428d3$export$a2b7447487315232(parentSubscription, scheduler, work, delay, repeat) {\n    if (delay === void 0) delay = 0;\n    if (repeat === void 0) repeat = false;\n    var scheduleSubscription = scheduler.schedule(function() {\n        work();\n        if (repeat) parentSubscription.add(this.schedule(null, delay));\n        else this.unsubscribe();\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) return scheduleSubscription;\n}\n\n\n\nfunction $b70519f632db53cb$export$ebec8610810318c5(source) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)(source === null || source === void 0 ? void 0 : source.lift);\n}\nfunction $b70519f632db53cb$export$871731df685d7753(init) {\n    return function(source) {\n        if ($b70519f632db53cb$export$ebec8610810318c5(source)) return source.lift(function(liftedSource) {\n            try {\n                return init(liftedSource, this);\n            } catch (err) {\n                this.error(err);\n            }\n        });\n        throw new TypeError(\"Unable to lift unknown Observable type\");\n    };\n}\n\n\n\n\nfunction $1082674ba26021fb$export$b9e075132cc6937f(destination, onNext, onComplete, onError, onFinalize) {\n    return new $1082674ba26021fb$export$8fbbf0c4d80268e5(destination, onNext, onComplete, onError, onFinalize);\n}\nvar $1082674ba26021fb$export$8fbbf0c4d80268e5 = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(OperatorSubscriber, _super);\n    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        var _this = _super.call(this, destination) || this;\n        _this.onFinalize = onFinalize;\n        _this.shouldUnsubscribe = shouldUnsubscribe;\n        _this._next = onNext ? function(value) {\n            try {\n                onNext(value);\n            } catch (err) {\n                destination.error(err);\n            }\n        } : _super.prototype._next;\n        _this._error = onError ? function(err) {\n            try {\n                onError(err);\n            } catch (err) {\n                destination.error(err);\n            } finally{\n                this.unsubscribe();\n            }\n        } : _super.prototype._error;\n        _this._complete = onComplete ? function() {\n            try {\n                onComplete();\n            } catch (err) {\n                destination.error(err);\n            } finally{\n                this.unsubscribe();\n            }\n        } : _super.prototype._complete;\n        return _this;\n    }\n    OperatorSubscriber.prototype.unsubscribe = function() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            var closed_1 = this.closed;\n            _super.prototype.unsubscribe.call(this);\n            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 || _a.call(this));\n        }\n    };\n    return OperatorSubscriber;\n}((0, $144251abd0e070aa$export$60959659b2c22881));\n\n\nfunction $b3be89a302f54553$export$9007f49c319d1ac7(scheduler, delay) {\n    if (delay === void 0) delay = 0;\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            return (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, scheduler, function() {\n                return subscriber.next(value);\n            }, delay);\n        }, function() {\n            return (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, scheduler, function() {\n                return subscriber.complete();\n            }, delay);\n        }, function(err) {\n            return (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, scheduler, function() {\n                return subscriber.error(err);\n            }, delay);\n        }));\n    });\n}\n\n\n\nfunction $03c04c3ffa6f4f2b$export$1eb44d8f5f64733b(scheduler, delay) {\n    if (delay === void 0) delay = 0;\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        subscriber.add(scheduler.schedule(function() {\n            return source.subscribe(subscriber);\n        }, delay));\n    });\n}\n\n\nfunction $bfcdfb161bcad5ec$export$ed8bd553a12b6a30(input, scheduler) {\n    return (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(input).pipe((0, $03c04c3ffa6f4f2b$export$1eb44d8f5f64733b)(scheduler), (0, $b3be89a302f54553$export$9007f49c319d1ac7)(scheduler));\n}\n\n\n\n\n\nfunction $b200b6eac85b4492$export$fc9afd948577f0a8(input, scheduler) {\n    return (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(input).pipe((0, $03c04c3ffa6f4f2b$export$1eb44d8f5f64733b)(scheduler), (0, $b3be89a302f54553$export$9007f49c319d1ac7)(scheduler));\n}\n\n\n\nfunction $7b1925659fd6b401$export$b34673931371729a(input, scheduler) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        var i = 0;\n        return scheduler.schedule(function() {\n            if (i === input.length) subscriber.complete();\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) this.schedule();\n            }\n        });\n    });\n}\n\n\n\n\n\n\nfunction $de7ccd11b81af792$export$2b75c58ab9b5b766(input, scheduler) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        var iterator;\n        (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, scheduler, function() {\n            iterator = input[0, $10702573cd9f2753$export$6f58e2338da23f4d]();\n            (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, scheduler, function() {\n                var _a;\n                var value;\n                var done;\n                try {\n                    _a = iterator.next(), value = _a.value, done = _a.done;\n                } catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) subscriber.complete();\n                else subscriber.next(value);\n            }, 0, true);\n        });\n        return function() {\n            return (0, $e996a377a476308b$export$f6e2535fb5126e54)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n        };\n    });\n}\n\n\n\n\nfunction $099e1a95f8be7c6a$export$7c7f0979b56a32f3(input, scheduler) {\n    if (!input) throw new Error(\"Iterable cannot be null\");\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, scheduler, function() {\n            var iterator = input[Symbol.asyncIterator]();\n            (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, scheduler, function() {\n                iterator.next().then(function(result) {\n                    if (result.done) subscriber.complete();\n                    else subscriber.next(result.value);\n                });\n            }, 0, true);\n        });\n    });\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction $970e2f50a47ce5c8$export$3385251aeecad28a(input, scheduler) {\n    return (0, $099e1a95f8be7c6a$export$7c7f0979b56a32f3)((0, $022971cd29cb3478$export$cf4785e597badab3)(input), scheduler);\n}\n\n\nfunction $428746786ed9c66f$export$49c44dfc2bb21d70(input, scheduler) {\n    if (input != null) {\n        if ((0, $ba3895138ebfd0d0$export$48c0cddbc99c45c2)(input)) return (0, $bfcdfb161bcad5ec$export$ed8bd553a12b6a30)(input, scheduler);\n        if ((0, $91d542d0b784d24b$export$1e2f57719e155213)(input)) return (0, $7b1925659fd6b401$export$b34673931371729a)(input, scheduler);\n        if ((0, $7700e3a10fed84ae$export$4369c812aac99591)(input)) return (0, $b200b6eac85b4492$export$fc9afd948577f0a8)(input, scheduler);\n        if ((0, $8b01cc4a4fa9c790$export$edb10ab8dd75a915)(input)) return (0, $099e1a95f8be7c6a$export$7c7f0979b56a32f3)(input, scheduler);\n        if ((0, $3172d966b15186c2$export$9652023d9040757)(input)) return (0, $de7ccd11b81af792$export$2b75c58ab9b5b766)(input, scheduler);\n        if ((0, $022971cd29cb3478$export$c088ffafdba7405f)(input)) return (0, $970e2f50a47ce5c8$export$3385251aeecad28a)(input, scheduler);\n    }\n    throw (0, $80eb79c79e8b4ce6$export$7cbe71b9fa263484)(input);\n}\n\n\n\nfunction $cecb8b01522e9ff4$export$6788812c4e6611e6(input, scheduler) {\n    return scheduler ? (0, $428746786ed9c66f$export$49c44dfc2bb21d70)(input, scheduler) : (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(input);\n}\n\n\n\n\n\n\nfunction $a344549688aae3fd$export$871de8747c9eaa88(project, thisArg) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var index = 0;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n\n\nvar $fdef718a708846aa$var$isArray = Array.isArray;\nfunction $fdef718a708846aa$var$callOrApply(fn, args) {\n    return $fdef718a708846aa$var$isArray(args) ? fn.apply(void 0, (0, $746141bbf30b1d44$export$1216008129fb82ed)([], (0, $746141bbf30b1d44$export$8d051b38c9118094)(args))) : fn(args);\n}\nfunction $fdef718a708846aa$export$559affaa48f4288d(fn) {\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)(function(args) {\n        return $fdef718a708846aa$var$callOrApply(fn, args);\n    });\n}\n\n\n\n\nfunction $c3cdee6cceaf9473$export$187e35932e88c15c(value) {\n    return value && (0, $e996a377a476308b$export$f6e2535fb5126e54)(value.schedule);\n}\n\n\nfunction $798a448d65d66d7d$var$last(arr) {\n    return arr[arr.length - 1];\n}\nfunction $798a448d65d66d7d$export$9ae19b645239a61b(args) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)($798a448d65d66d7d$var$last(args)) ? args.pop() : undefined;\n}\nfunction $798a448d65d66d7d$export$29534b2f653ae592(args) {\n    return (0, $c3cdee6cceaf9473$export$187e35932e88c15c)($798a448d65d66d7d$var$last(args)) ? args.pop() : undefined;\n}\nfunction $798a448d65d66d7d$export$3de14b735070dcd5(args, defaultValue) {\n    return typeof $798a448d65d66d7d$var$last(args) === \"number\" ? args.pop() : defaultValue;\n}\n\n\nfunction $9ee0b49cb72a62a4$export$79c7e160a7743efd(keys, values) {\n    return keys.reduce(function(result, key, i) {\n        return result[key] = values[i], result;\n    }, {});\n}\n\n\n\n\nfunction $e9c33d8acb1fdd17$export$77fa7d86f5204e8a() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n    var scheduler = (0, $798a448d65d66d7d$export$29534b2f653ae592)(args);\n    var resultSelector = (0, $798a448d65d66d7d$export$9ae19b645239a61b)(args);\n    var _a = (0, $cb6028617666e135$export$8871b3799a14360f)(args), observables = _a.args, keys = _a.keys;\n    if (observables.length === 0) return (0, $cecb8b01522e9ff4$export$6788812c4e6611e6)([], scheduler);\n    var result = new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)($e9c33d8acb1fdd17$export$f04dcfb475ed2128(observables, scheduler, keys ? function(values) {\n        return (0, $9ee0b49cb72a62a4$export$79c7e160a7743efd)(keys, values);\n    } : (0, $d964bb9c87650d9b$export$f0954fd7d5368655)));\n    return resultSelector ? result.pipe((0, $fdef718a708846aa$export$559affaa48f4288d)(resultSelector)) : result;\n}\nfunction $e9c33d8acb1fdd17$export$f04dcfb475ed2128(observables, scheduler, valueTransform) {\n    if (valueTransform === void 0) valueTransform = (0, $d964bb9c87650d9b$export$f0954fd7d5368655);\n    return function(subscriber) {\n        $e9c33d8acb1fdd17$var$maybeSchedule(scheduler, function() {\n            var length = observables.length;\n            var values = new Array(length);\n            var active = length;\n            var remainingFirstValues = length;\n            var _loop_1 = function(i) {\n                $e9c33d8acb1fdd17$var$maybeSchedule(scheduler, function() {\n                    var source = (0, $cecb8b01522e9ff4$export$6788812c4e6611e6)(observables[i], scheduler);\n                    var hasFirstValue = false;\n                    source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n                        values[i] = value;\n                        if (!hasFirstValue) {\n                            hasFirstValue = true;\n                            remainingFirstValues--;\n                        }\n                        if (!remainingFirstValues) subscriber.next(valueTransform(values.slice()));\n                    }, function() {\n                        if (!--active) subscriber.complete();\n                    }));\n                }, subscriber);\n            };\n            for(var i = 0; i < length; i++)_loop_1(i);\n        }, subscriber);\n    };\n}\nfunction $e9c33d8acb1fdd17$var$maybeSchedule(scheduler, execute, subscription) {\n    if (scheduler) (0, $bb90871d75d428d3$export$a2b7447487315232)(subscription, scheduler, execute);\n    else execute();\n}\n\n\n\n\n\n\n\nfunction $28f45fd372d3b455$export$600918ebaa9e0a1b(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    var buffer = [];\n    var active = 0;\n    var index = 0;\n    var isComplete = false;\n    var checkComplete = function() {\n        if (isComplete && !buffer.length && !active) subscriber.complete();\n    };\n    var outerNext = function(value) {\n        return active < concurrent ? doInnerSub(value) : buffer.push(value);\n    };\n    var doInnerSub = function(value) {\n        expand && subscriber.next(value);\n        active++;\n        var innerComplete = false;\n        (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(project(value, index++)).subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(innerValue) {\n            onBeforeNext === null || onBeforeNext === void 0 || onBeforeNext(innerValue);\n            if (expand) outerNext(innerValue);\n            else subscriber.next(innerValue);\n        }, function() {\n            innerComplete = true;\n        }, undefined, function() {\n            if (innerComplete) try {\n                active--;\n                var _loop_1 = function() {\n                    var bufferedValue = buffer.shift();\n                    if (innerSubScheduler) (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, innerSubScheduler, function() {\n                        return doInnerSub(bufferedValue);\n                    });\n                    else doInnerSub(bufferedValue);\n                };\n                while(buffer.length && active < concurrent)_loop_1();\n                checkComplete();\n            } catch (err) {\n                subscriber.error(err);\n            }\n        }));\n    };\n    source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, outerNext, function() {\n        isComplete = true;\n        checkComplete();\n    }));\n    return function() {\n        additionalFinalizer === null || additionalFinalizer === void 0 || additionalFinalizer();\n    };\n}\n\n\n\nfunction $8657d55690de2a98$export$6b9f6c0d32c093f9(project, resultSelector, concurrent) {\n    if (concurrent === void 0) concurrent = Infinity;\n    if ((0, $e996a377a476308b$export$f6e2535fb5126e54)(resultSelector)) return $8657d55690de2a98$export$6b9f6c0d32c093f9(function(a, i) {\n        return (0, $a344549688aae3fd$export$871de8747c9eaa88)(function(b, ii) {\n            return resultSelector(a, b, i, ii);\n        })((0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(project(a, i)));\n    }, concurrent);\n    else if (typeof resultSelector === \"number\") concurrent = resultSelector;\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        return (0, $28f45fd372d3b455$export$600918ebaa9e0a1b)(source, subscriber, project, concurrent);\n    });\n}\n\n\n\nfunction $b57c3fedf76caaed$export$18aef43295bbe906(concurrent) {\n    if (concurrent === void 0) concurrent = Infinity;\n    return (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)((0, $d964bb9c87650d9b$export$f0954fd7d5368655), concurrent);\n}\n\n\nfunction $0280bbcc426dce78$export$b314777ae20abca9() {\n    return (0, $b57c3fedf76caaed$export$18aef43295bbe906)(1);\n}\n\n\n\n\nfunction $98685deadaab283c$export$ee1b3e54f0441b22() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n    return (0, $0280bbcc426dce78$export$b314777ae20abca9)()((0, $cecb8b01522e9ff4$export$6788812c4e6611e6)(args, (0, $798a448d65d66d7d$export$29534b2f653ae592)(args)));\n}\n\n\n\n\n\n\n\nfunction $2dc044d45b969f33$export$ee1b3e54f0441b22() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n    var scheduler = (0, $798a448d65d66d7d$export$29534b2f653ae592)(args);\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        (0, $0280bbcc426dce78$export$b314777ae20abca9)()((0, $cecb8b01522e9ff4$export$6788812c4e6611e6)((0, $746141bbf30b1d44$export$1216008129fb82ed)([\n            source\n        ], (0, $746141bbf30b1d44$export$8d051b38c9118094)(args)), scheduler)).subscribe(subscriber);\n    });\n}\n\n\nfunction $a8cf4712258bbbb6$export$6a50f648373d0fa8() {\n    var otherSources = [];\n    for(var _i = 0; _i < arguments.length; _i++)otherSources[_i] = arguments[_i];\n    return (0, $2dc044d45b969f33$export$ee1b3e54f0441b22).apply(void 0, (0, $746141bbf30b1d44$export$1216008129fb82ed)([], (0, $746141bbf30b1d44$export$8d051b38c9118094)(otherSources)));\n}\n\n\n\nfunction $ead8e990cfbfe279$export$260e5c0943f31606(observableFactory) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(observableFactory()).subscribe(subscriber);\n    });\n}\n\n\nvar $6e7e0ef18f0a3115$export$ccb33e29d92c9a58 = new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n    return subscriber.complete();\n});\nfunction $6e7e0ef18f0a3115$export$6e22c362a0406a2c(scheduler) {\n    return scheduler ? $6e7e0ef18f0a3115$var$emptyScheduled(scheduler) : $6e7e0ef18f0a3115$export$ccb33e29d92c9a58;\n}\nfunction $6e7e0ef18f0a3115$var$emptyScheduled(scheduler) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        return scheduler.schedule(function() {\n            return subscriber.complete();\n        });\n    });\n}\n\n\n\nfunction $827970c208304071$export$3dea766d36a8935f(predicate, thisArg) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var index = 0;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            return predicate.call(thisArg, value, index++) && subscriber.next(value);\n        }));\n    });\n}\n\n\nvar $eec29157d02a25b0$export$78f6d1b1dbcda304 = (0, $84b00e98e2449571$export$128a15b65d1b6041)(function(_super) {\n    return function EmptyErrorImpl() {\n        _super(this);\n        this.name = \"EmptyError\";\n        this.message = \"no elements in sequence\";\n    };\n});\n\n\n\nfunction $f03dcc354f8c1062$export$400f9f949cef996c(source, config) {\n    var hasConfig = typeof config === \"object\";\n    return new Promise(function(resolve, reject) {\n        var subscriber = new (0, $144251abd0e070aa$export$94eeb6a328cab6c7)({\n            next: function(value) {\n                resolve(value);\n                subscriber.unsubscribe();\n            },\n            error: reject,\n            complete: function() {\n                if (hasConfig) resolve(config.defaultValue);\n                else reject(new (0, $eec29157d02a25b0$export$78f6d1b1dbcda304)());\n            }\n        });\n        source.subscribe(subscriber);\n    });\n}\n\n\n\n\n\n\n\n\nvar $6ca17bc48d68771b$var$nodeEventEmitterMethods = [\n    \"addListener\",\n    \"removeListener\"\n];\nvar $6ca17bc48d68771b$var$eventTargetMethods = [\n    \"addEventListener\",\n    \"removeEventListener\"\n];\nvar $6ca17bc48d68771b$var$jqueryMethods = [\n    \"on\",\n    \"off\"\n];\nfunction $6ca17bc48d68771b$export$a36e16046ae8f1bb(target, eventName, options, resultSelector) {\n    if ((0, $e996a377a476308b$export$f6e2535fb5126e54)(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) return $6ca17bc48d68771b$export$a36e16046ae8f1bb(target, eventName, options).pipe((0, $fdef718a708846aa$export$559affaa48f4288d)(resultSelector));\n    var _a = (0, $746141bbf30b1d44$export$8d051b38c9118094)($6ca17bc48d68771b$var$isEventTarget(target) ? $6ca17bc48d68771b$var$eventTargetMethods.map(function(methodName) {\n        return function(handler) {\n            return target[methodName](eventName, handler, options);\n        };\n    }) : $6ca17bc48d68771b$var$isNodeStyleEventEmitter(target) ? $6ca17bc48d68771b$var$nodeEventEmitterMethods.map($6ca17bc48d68771b$var$toCommonHandlerRegistry(target, eventName)) : $6ca17bc48d68771b$var$isJQueryStyleEventEmitter(target) ? $6ca17bc48d68771b$var$jqueryMethods.map($6ca17bc48d68771b$var$toCommonHandlerRegistry(target, eventName)) : [], 2), add = _a[0], remove = _a[1];\n    if (!add) {\n        if ((0, $91d542d0b784d24b$export$1e2f57719e155213)(target)) return (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)(function(subTarget) {\n            return $6ca17bc48d68771b$export$a36e16046ae8f1bb(subTarget, eventName, options);\n        })((0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(target));\n    }\n    if (!add) throw new TypeError(\"Invalid event target\");\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        var handler = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n            return subscriber.next(1 < args.length ? args : args[0]);\n        };\n        add(handler);\n        return function() {\n            return remove(handler);\n        };\n    });\n}\nfunction $6ca17bc48d68771b$var$toCommonHandlerRegistry(target, eventName) {\n    return function(methodName) {\n        return function(handler) {\n            return target[methodName](eventName, handler);\n        };\n    };\n}\nfunction $6ca17bc48d68771b$var$isNodeStyleEventEmitter(target) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)(target.addListener) && (0, $e996a377a476308b$export$f6e2535fb5126e54)(target.removeListener);\n}\nfunction $6ca17bc48d68771b$var$isJQueryStyleEventEmitter(target) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)(target.on) && (0, $e996a377a476308b$export$f6e2535fb5126e54)(target.off);\n}\nfunction $6ca17bc48d68771b$var$isEventTarget(target) {\n    return (0, $e996a377a476308b$export$f6e2535fb5126e54)(target.addEventListener) && (0, $e996a377a476308b$export$f6e2535fb5126e54)(target.removeEventListener);\n}\n\n\n\n\nvar $e731e77718be64fd$export$e19cd5f9376f8cee = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    Action.prototype.schedule = function(state, delay) {\n        if (delay === void 0) delay = 0;\n        return this;\n    };\n    return Action;\n}((0, $5124a93ca0cff8ae$export$f55210826850c514));\n\n\n\nvar $a4abb0157f6db370$export$f0ca5e16f6f68711 = {\n    setInterval: function(handler, timeout) {\n        var args = [];\n        for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];\n        var delegate = $a4abb0157f6db370$export$f0ca5e16f6f68711.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) return delegate.setInterval.apply(delegate, (0, $746141bbf30b1d44$export$1216008129fb82ed)([\n            handler,\n            timeout\n        ], (0, $746141bbf30b1d44$export$8d051b38c9118094)(args)));\n        return setInterval.apply(void 0, (0, $746141bbf30b1d44$export$1216008129fb82ed)([\n            handler,\n            timeout\n        ], (0, $746141bbf30b1d44$export$8d051b38c9118094)(args)));\n    },\n    clearInterval: function(handle) {\n        var delegate = $a4abb0157f6db370$export$f0ca5e16f6f68711.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined\n};\n\n\n\nvar $331a777e5f6dff82$export$b5369ffd7cb2211b = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function(state, delay) {\n        var _a;\n        if (delay === void 0) delay = 0;\n        if (this.closed) return this;\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        if (id != null) this.id = this.recycleAsyncId(scheduler, id, delay);\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function(scheduler, _id, delay) {\n        if (delay === void 0) delay = 0;\n        return (0, $a4abb0157f6db370$export$f0ca5e16f6f68711).setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function(_scheduler, id, delay) {\n        if (delay === void 0) delay = 0;\n        if (delay != null && this.delay === delay && this.pending === false) return id;\n        if (id != null) (0, $a4abb0157f6db370$export$f0ca5e16f6f68711).clearInterval(id);\n        return undefined;\n    };\n    AsyncAction.prototype.execute = function(state, delay) {\n        if (this.closed) return new Error(\"executing a cancelled action\");\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) return error;\n        else if (this.pending === false && this.id != null) this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    };\n    AsyncAction.prototype._execute = function(state, _delay) {\n        var errored = false;\n        var errorValue;\n        try {\n            this.work(state);\n        } catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error(\"Scheduled action threw falsy error\");\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype.unsubscribe = function() {\n        if (!this.closed) {\n            var _a = this, id = _a.id, scheduler = _a.scheduler;\n            var actions = scheduler.actions;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            (0, $e982355222966567$export$dae3f38077fc36c0)(actions, this);\n            if (id != null) this.id = this.recycleAsyncId(scheduler, id, null);\n            this.delay = null;\n            _super.prototype.unsubscribe.call(this);\n        }\n    };\n    return AsyncAction;\n}((0, $e731e77718be64fd$export$e19cd5f9376f8cee));\n\n\n\nvar $8777e340304a87e2$export$c1895ea2d519a677 = {\n    now: function() {\n        return ($8777e340304a87e2$export$c1895ea2d519a677.delegate || Date).now();\n    },\n    delegate: undefined\n};\n\n\nvar $699ca6a12b1d5e7c$export$d3e54bb8584cda7c = function() {\n    function Scheduler(schedulerActionCtor, now) {\n        if (now === void 0) now = Scheduler.now;\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    Scheduler.prototype.schedule = function(work, delay, state) {\n        if (delay === void 0) delay = 0;\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    };\n    Scheduler.now = (0, $8777e340304a87e2$export$c1895ea2d519a677).now;\n    return Scheduler;\n}();\n\n\nvar $16ada899f929327b$export$4114a3ec92faa3c6 = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(AsyncScheduler, _super);\n    function AsyncScheduler(SchedulerAction, now) {\n        if (now === void 0) now = (0, $699ca6a12b1d5e7c$export$d3e54bb8584cda7c).now;\n        var _this = _super.call(this, SchedulerAction, now) || this;\n        _this.actions = [];\n        _this._active = false;\n        return _this;\n    }\n    AsyncScheduler.prototype.flush = function(action) {\n        var actions = this.actions;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this._active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) break;\n        }while (action = actions.shift());\n        this._active = false;\n        if (error) {\n            while(action = actions.shift())action.unsubscribe();\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}((0, $699ca6a12b1d5e7c$export$d3e54bb8584cda7c));\n\n\nvar $03059729cc91d1d5$export$8d6b71a2b178fc32 = new (0, $16ada899f929327b$export$4114a3ec92faa3c6)((0, $331a777e5f6dff82$export$b5369ffd7cb2211b));\nvar $03059729cc91d1d5$export$12af436354f1a4f7 = $03059729cc91d1d5$export$8d6b71a2b178fc32;\n\n\n\n\n\nfunction $df0ca230b4c087cb$export$c03bb0116ee09d4b(value) {\n    return value instanceof Date && !isNaN(value);\n}\n\n\nfunction $ba06f10a02915e96$export$9dc4ecf953986f04(dueTime, intervalOrScheduler, scheduler) {\n    if (dueTime === void 0) dueTime = 0;\n    if (scheduler === void 0) scheduler = (0, $03059729cc91d1d5$export$12af436354f1a4f7);\n    var intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if ((0, $c3cdee6cceaf9473$export$187e35932e88c15c)(intervalOrScheduler)) scheduler = intervalOrScheduler;\n        else intervalDuration = intervalOrScheduler;\n    }\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(function(subscriber) {\n        var due = (0, $df0ca230b4c087cb$export$c03bb0116ee09d4b)(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) due = 0;\n        var n = 0;\n        return scheduler.schedule(function() {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) this.schedule(undefined, intervalDuration);\n                else subscriber.complete();\n            }\n        }, due);\n    });\n}\n\n\nfunction $5c0fdd8d65c521ee$export$3174cdbf0a0cbc84(period, scheduler) {\n    if (period === void 0) period = 0;\n    if (scheduler === void 0) scheduler = (0, $03059729cc91d1d5$export$8d6b71a2b178fc32);\n    if (period < 0) period = 0;\n    return (0, $ba06f10a02915e96$export$9dc4ecf953986f04)(period, period, scheduler);\n}\n\n\nfunction $7b246f86cff85ef0$export$a175cc82f1f2275e(source, config) {\n    var hasConfig = typeof config === \"object\";\n    return new Promise(function(resolve, reject) {\n        var _hasValue = false;\n        var _value;\n        source.subscribe({\n            next: function(value) {\n                _value = value;\n                _hasValue = true;\n            },\n            error: reject,\n            complete: function() {\n                if (_hasValue) resolve(_value);\n                else if (hasConfig) resolve(config.defaultValue);\n                else reject(new (0, $eec29157d02a25b0$export$78f6d1b1dbcda304)());\n            }\n        });\n    });\n}\n\n\n\n\n\n\nfunction $30ffe4e7b3d62072$export$4950aa0f605343fb() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n    var scheduler = (0, $798a448d65d66d7d$export$29534b2f653ae592)(args);\n    var concurrent = (0, $798a448d65d66d7d$export$3de14b735070dcd5)(args, Infinity);\n    var sources = args;\n    return !sources.length ? (0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58) : sources.length === 1 ? (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(sources[0]) : (0, $b57c3fedf76caaed$export$18aef43295bbe906)(concurrent)((0, $cecb8b01522e9ff4$export$6788812c4e6611e6)(sources, scheduler));\n}\n\n\n\nvar $62d8f22c904e5fe7$export$96c94437c95d7862 = new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((0, $a2669f8c8173c8d3$export$8793edee2d425525));\nfunction $62d8f22c904e5fe7$export$b3e22bcfd64c1022() {\n    return $62d8f22c904e5fe7$export$96c94437c95d7862;\n}\n\n\n\nfunction $ed54d2f12a6f8669$export$ba255e9e49e00608() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n    var scheduler = (0, $798a448d65d66d7d$export$29534b2f653ae592)(args);\n    return (0, $cecb8b01522e9ff4$export$6788812c4e6611e6)(args, scheduler);\n}\n\n\n\nvar $4dfab0b79a6f46d4$var$isArray = Array.isArray;\nfunction $4dfab0b79a6f46d4$export$24e1bb79414042be(args) {\n    return args.length === 1 && $4dfab0b79a6f46d4$var$isArray(args[0]) ? args[0] : args;\n}\n\n\n\nfunction $886ab650a4e672e5$export$236c05de452bec2() {\n    var sources = [];\n    for(var _i = 0; _i < arguments.length; _i++)sources[_i] = arguments[_i];\n    sources = (0, $4dfab0b79a6f46d4$export$24e1bb79414042be)(sources);\n    return sources.length === 1 ? (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(sources[0]) : new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)($886ab650a4e672e5$export$903c39bc8627b085(sources));\n}\nfunction $886ab650a4e672e5$export$903c39bc8627b085(sources) {\n    return function(subscriber) {\n        var subscriptions = [];\n        var _loop_1 = function(i) {\n            subscriptions.push((0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(sources[i]).subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n                if (subscriptions) {\n                    for(var s = 0; s < subscriptions.length; s++)s !== i && subscriptions[s].unsubscribe();\n                    subscriptions = null;\n                }\n                subscriber.next(value);\n            })));\n        };\n        for(var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++)_loop_1(i);\n    };\n}\n\n\n\n\nvar $3abb0c810830a073$export$915d2682b0aa0991 = function(_super) {\n    (0, $746141bbf30b1d44$export$a8ba968b8961cb8a)(ReplaySubject, _super);\n    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {\n        if (_bufferSize === void 0) _bufferSize = Infinity;\n        if (_windowTime === void 0) _windowTime = Infinity;\n        if (_timestampProvider === void 0) _timestampProvider = (0, $8777e340304a87e2$export$c1895ea2d519a677);\n        var _this = _super.call(this) || this;\n        _this._bufferSize = _bufferSize;\n        _this._windowTime = _windowTime;\n        _this._timestampProvider = _timestampProvider;\n        _this._buffer = [];\n        _this._infiniteTimeWindow = true;\n        _this._infiniteTimeWindow = _windowTime === Infinity;\n        _this._bufferSize = Math.max(1, _bufferSize);\n        _this._windowTime = Math.max(1, _windowTime);\n        return _this;\n    }\n    ReplaySubject.prototype.next = function(value) {\n        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        var subscription = this._innerSubscribe(subscriber);\n        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;\n        var copy = _buffer.slice();\n        for(var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2)subscriber.next(copy[i]);\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    };\n    ReplaySubject.prototype._trimBuffer = function() {\n        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;\n        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            var now = _timestampProvider.now();\n            var last = 0;\n            for(var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2)last = i;\n            last && _buffer.splice(0, last + 1);\n        }\n    };\n    return ReplaySubject;\n}((0, $489dabb836a96717$export$b6bbab5a9b109038));\n\n\n\n\n\n\nfunction $63c66526492cd4cc$export$9369b12211e1fce4(configOrCount) {\n    if (configOrCount === void 0) configOrCount = Infinity;\n    var config;\n    if (configOrCount && typeof configOrCount === \"object\") config = configOrCount;\n    else config = {\n        count: configOrCount\n    };\n    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;\n    return count <= 0 ? (0, $d964bb9c87650d9b$export$f0954fd7d5368655) : (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var soFar = 0;\n        var innerSub;\n        var subscribeForRetry = function() {\n            var syncUnsub = false;\n            innerSub = source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n                if (resetOnSuccess) soFar = 0;\n                subscriber.next(value);\n            }, undefined, function(err) {\n                if (soFar++ < count) {\n                    var resub_1 = function() {\n                        if (innerSub) {\n                            innerSub.unsubscribe();\n                            innerSub = null;\n                            subscribeForRetry();\n                        } else syncUnsub = true;\n                    };\n                    if (delay != null) {\n                        var notifier = typeof delay === \"number\" ? (0, $ba06f10a02915e96$export$9dc4ecf953986f04)(delay) : (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(delay(err, soFar));\n                        var notifierSubscriber_1 = (0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function() {\n                            notifierSubscriber_1.unsubscribe();\n                            resub_1();\n                        }, function() {\n                            subscriber.complete();\n                        });\n                        notifier.subscribe(notifierSubscriber_1);\n                    } else resub_1();\n                } else subscriber.error(err);\n            }));\n            if (syncUnsub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                subscribeForRetry();\n            }\n        };\n        subscribeForRetry();\n    });\n}\n\n\n\n\nfunction $e8a8f4270a768261$export$9f6ea8e48bc26eab(project, resultSelector) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var innerSubscriber = null;\n        var index = 0;\n        var isComplete = false;\n        var checkComplete = function() {\n            return isComplete && !innerSubscriber && subscriber.complete();\n        };\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            innerSubscriber === null || innerSubscriber === void 0 || innerSubscriber.unsubscribe();\n            var innerIndex = 0;\n            var outerIndex = index++;\n            (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(project(value, outerIndex)).subscribe(innerSubscriber = (0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(innerValue) {\n                return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);\n            }, function() {\n                innerSubscriber = null;\n                checkComplete();\n            }));\n        }, function() {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n\n\n\nfunction $7793e4bb10595700$export$8bf7aba4a9e09055(errorOrErrorFactory, scheduler) {\n    var errorFactory = (0, $e996a377a476308b$export$f6e2535fb5126e54)(errorOrErrorFactory) ? errorOrErrorFactory : function() {\n        return errorOrErrorFactory;\n    };\n    var init = function(subscriber) {\n        return subscriber.error(errorFactory());\n    };\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)(scheduler ? function(subscriber) {\n        return scheduler.schedule(init, 0, subscriber);\n    } : init);\n}\n\n\n\n\n\n\n\n\nvar $4be3df9c8b191a2f$export$66d311bf29d5c89c = (0, $84b00e98e2449571$export$128a15b65d1b6041)(function(_super) {\n    return function TimeoutErrorImpl(info) {\n        if (info === void 0) info = null;\n        _super(this);\n        this.message = \"Timeout has occurred\";\n        this.name = \"TimeoutError\";\n        this.info = info;\n    };\n});\nfunction $4be3df9c8b191a2f$export$83e74882c5df8fe1(config, schedulerArg) {\n    var _a = (0, $df0ca230b4c087cb$export$c03bb0116ee09d4b)(config) ? {\n        first: config\n    } : typeof config === \"number\" ? {\n        each: config\n    } : config, first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? $4be3df9c8b191a2f$var$timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : (0, $03059729cc91d1d5$export$8d6b71a2b178fc32) : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;\n    if (first == null && each == null) throw new TypeError(\"No timeout provided.\");\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var originalSourceSubscription;\n        var timerSubscription;\n        var lastValue = null;\n        var seen = 0;\n        var startTimer = function(delay) {\n            timerSubscription = (0, $bb90871d75d428d3$export$a2b7447487315232)(subscriber, scheduler, function() {\n                try {\n                    originalSourceSubscription.unsubscribe();\n                    (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(_with({\n                        meta: meta,\n                        lastValue: lastValue,\n                        seen: seen\n                    })).subscribe(subscriber);\n                } catch (err) {\n                    subscriber.error(err);\n                }\n            }, delay);\n        };\n        originalSourceSubscription = source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            timerSubscription === null || timerSubscription === void 0 || timerSubscription.unsubscribe();\n            seen++;\n            subscriber.next(lastValue = value);\n            each > 0 && startTimer(each);\n        }, undefined, undefined, function() {\n            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) timerSubscription === null || timerSubscription === void 0 || timerSubscription.unsubscribe();\n            lastValue = null;\n        }));\n        !seen && startTimer(first != null ? typeof first === \"number\" ? first : +first - scheduler.now() : each);\n    });\n}\nfunction $4be3df9c8b191a2f$var$timeoutErrorFactory(info) {\n    throw new $4be3df9c8b191a2f$export$66d311bf29d5c89c(info);\n}\n\n\n\n\n\n\n\n\nfunction $022094d06ff270cc$export$d449030e5c10edf7() {\n    var inputs = [];\n    for(var _i = 0; _i < arguments.length; _i++)inputs[_i] = arguments[_i];\n    var project = (0, $798a448d65d66d7d$export$9ae19b645239a61b)(inputs);\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var len = inputs.length;\n        var otherValues = new Array(len);\n        var hasValue = inputs.map(function() {\n            return false;\n        });\n        var ready = false;\n        var _loop_1 = function(i) {\n            (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(inputs[i]).subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n                otherValues[i] = value;\n                if (!ready && !hasValue[i]) {\n                    hasValue[i] = true;\n                    (ready = hasValue.every((0, $d964bb9c87650d9b$export$f0954fd7d5368655))) && (hasValue = null);\n                }\n            }, (0, $a2669f8c8173c8d3$export$8793edee2d425525)));\n        };\n        for(var i = 0; i < len; i++)_loop_1(i);\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            if (ready) {\n                var values = (0, $746141bbf30b1d44$export$1216008129fb82ed)([\n                    value\n                ], (0, $746141bbf30b1d44$export$8d051b38c9118094)(otherValues));\n                subscriber.next(project ? project.apply(void 0, (0, $746141bbf30b1d44$export$1216008129fb82ed)([], (0, $746141bbf30b1d44$export$8d051b38c9118094)(values))) : values);\n            }\n        }));\n    });\n}\n\n\n\n\n\n\nfunction $e68e523fee93831a$export$d779b02e6b68c3e8(durationSelector) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var hasValue = false;\n        var lastValue = null;\n        var durationSubscriber = null;\n        var isComplete = false;\n        var endDuration = function() {\n            durationSubscriber === null || durationSubscriber === void 0 || durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                var value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        var cleanupDuration = function() {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(durationSelector(value)).subscribe(durationSubscriber = (0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, endDuration, cleanupDuration));\n        }, function() {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n\n\n\nfunction $cfad638bbde2c674$export$719c70722b10e5ff(duration, scheduler) {\n    if (scheduler === void 0) scheduler = (0, $03059729cc91d1d5$export$8d6b71a2b178fc32);\n    return (0, $e68e523fee93831a$export$d779b02e6b68c3e8)(function() {\n        return (0, $ba06f10a02915e96$export$9dc4ecf953986f04)(duration, scheduler);\n    });\n}\n\n\n\n\nfunction $a3c41b925191c992$export$3dede90624df3ba9(selector) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var innerSub = null;\n        var syncUnsub = false;\n        var handledResult;\n        innerSub = source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, undefined, undefined, function(err) {\n            handledResult = (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(selector(err, $a3c41b925191c992$export$3dede90624df3ba9(selector)(source)));\n            if (innerSub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                handledResult.subscribe(subscriber);\n            } else syncUnsub = true;\n        }));\n        if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            handledResult.subscribe(subscriber);\n        }\n    });\n}\n\n\n\n\n\n\n\n\n\nfunction $b816cfe1994a56f7$export$77fa7d86f5204e8a() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n    var resultSelector = (0, $798a448d65d66d7d$export$9ae19b645239a61b)(args);\n    return resultSelector ? (0, $105ed219d50c6c26$export$a4627e546088548d)($b816cfe1994a56f7$export$77fa7d86f5204e8a.apply(void 0, (0, $746141bbf30b1d44$export$1216008129fb82ed)([], (0, $746141bbf30b1d44$export$8d051b38c9118094)(args))), (0, $fdef718a708846aa$export$559affaa48f4288d)(resultSelector)) : (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        (0, $e9c33d8acb1fdd17$export$f04dcfb475ed2128)((0, $746141bbf30b1d44$export$1216008129fb82ed)([\n            source\n        ], (0, $746141bbf30b1d44$export$8d051b38c9118094)((0, $4dfab0b79a6f46d4$export$24e1bb79414042be)(args))))(subscriber);\n    });\n}\n\n\nfunction $1b8b5ade318bf9a9$export$2c346d97ede9fe0c() {\n    var otherSources = [];\n    for(var _i = 0; _i < arguments.length; _i++)otherSources[_i] = arguments[_i];\n    return (0, $b816cfe1994a56f7$export$77fa7d86f5204e8a).apply(void 0, (0, $746141bbf30b1d44$export$1216008129fb82ed)([], (0, $746141bbf30b1d44$export$8d051b38c9118094)(otherSources)));\n}\n\n\n\n\nfunction $419c2da03c3ac473$export$779c5fb865a0172e(comparator, keySelector) {\n    if (keySelector === void 0) keySelector = (0, $d964bb9c87650d9b$export$f0954fd7d5368655);\n    comparator = comparator !== null && comparator !== void 0 ? comparator : $419c2da03c3ac473$var$defaultCompare;\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var previousKey;\n        var first = true;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            var currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction $419c2da03c3ac473$var$defaultCompare(a, b) {\n    return a === b;\n}\n\n\n\nfunction $7d94a21417a1623d$export$9f77e0932fb78f72(project, concurrent, scheduler) {\n    if (concurrent === void 0) concurrent = Infinity;\n    concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        return (0, $28f45fd372d3b455$export$600918ebaa9e0a1b)(source, subscriber, project, concurrent, undefined, true, scheduler);\n    });\n}\n\n\nfunction $970a0f030dee86ff$export$578723aef62d92f5(callback) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        try {\n            source.subscribe(subscriber);\n        } finally{\n            subscriber.add(callback);\n        }\n    });\n}\n\n\n\n\n\n\nfunction $c7828fe634a19a01$export$b7df5d561049483a(count) {\n    return count <= 0 ? function() {\n        return 0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58;\n    } : (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var seen = 0;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            if (++seen <= count) {\n                subscriber.next(value);\n                if (count <= seen) subscriber.complete();\n            }\n        }));\n    });\n}\n\n\n\n\nfunction $34cec3157a65a432$export$e4ca6d7b7a6dcf9b(defaultValue) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var hasValue = false;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            hasValue = true;\n            subscriber.next(value);\n        }, function() {\n            if (!hasValue) subscriber.next(defaultValue);\n            subscriber.complete();\n        }));\n    });\n}\n\n\n\n\n\nfunction $be8653f4a3e95561$export$c8ea5e9f84346833(errorFactory) {\n    if (errorFactory === void 0) errorFactory = $be8653f4a3e95561$var$defaultErrorFactory;\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var hasValue = false;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            hasValue = true;\n            subscriber.next(value);\n        }, function() {\n            return hasValue ? subscriber.complete() : subscriber.error(errorFactory());\n        }));\n    });\n}\nfunction $be8653f4a3e95561$var$defaultErrorFactory() {\n    return new (0, $eec29157d02a25b0$export$78f6d1b1dbcda304)();\n}\n\n\n\nfunction $cbe8268c6277296f$export$43128fadae87b74a(predicate, defaultValue) {\n    var hasDefaultValue = arguments.length >= 2;\n    return function(source) {\n        return source.pipe(predicate ? (0, $827970c208304071$export$3dea766d36a8935f)(function(v, i) {\n            return predicate(v, i, source);\n        }) : (0, $d964bb9c87650d9b$export$f0954fd7d5368655), (0, $c7828fe634a19a01$export$b7df5d561049483a)(1), hasDefaultValue ? (0, $34cec3157a65a432$export$e4ca6d7b7a6dcf9b)(defaultValue) : (0, $be8653f4a3e95561$export$c8ea5e9f84346833)(function() {\n            return new (0, $eec29157d02a25b0$export$78f6d1b1dbcda304)();\n        }));\n    };\n}\n\n\n\nfunction $e1dacc25c9354c6a$export$8f9d79d42bff1aac() {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var prev;\n        var hasPrev = false;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            var p = prev;\n            prev = value;\n            hasPrev && subscriber.next([\n                p,\n                value\n            ]);\n            hasPrev = true;\n        }));\n    });\n}\n\n\n\n\n\n\nfunction $f60f59c3c27c3419$export$ed80d9de1d9df928(options) {\n    if (options === void 0) options = {};\n    var _a = options.connector, connector = _a === void 0 ? function() {\n        return new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n    } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;\n    return function(wrapperSource) {\n        var connection;\n        var resetConnection;\n        var subject;\n        var refCount = 0;\n        var hasCompleted = false;\n        var hasErrored = false;\n        var cancelReset = function() {\n            resetConnection === null || resetConnection === void 0 || resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        var reset = function() {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        var resetAndUnsubscribe = function() {\n            var conn = connection;\n            reset();\n            conn === null || conn === void 0 || conn.unsubscribe();\n        };\n        return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n            refCount++;\n            if (!hasErrored && !hasCompleted) cancelReset();\n            var dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n            subscriber.add(function() {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) resetConnection = $f60f59c3c27c3419$var$handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n            });\n            dest.subscribe(subscriber);\n            if (!connection && refCount > 0) {\n                connection = new (0, $144251abd0e070aa$export$94eeb6a328cab6c7)({\n                    next: function(value) {\n                        return dest.next(value);\n                    },\n                    error: function(err) {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = $f60f59c3c27c3419$var$handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: function() {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = $f60f59c3c27c3419$var$handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    }\n                });\n                (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction $f60f59c3c27c3419$var$handleReset(reset, on) {\n    var args = [];\n    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) return;\n    var onSubscriber = new (0, $144251abd0e070aa$export$94eeb6a328cab6c7)({\n        next: function() {\n            onSubscriber.unsubscribe();\n            reset();\n        }\n    });\n    return (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(on.apply(void 0, (0, $746141bbf30b1d44$export$1216008129fb82ed)([], (0, $746141bbf30b1d44$export$8d051b38c9118094)(args)))).subscribe(onSubscriber);\n}\n\n\n\nfunction $91193f05f5f7351e$export$175dedd748069215(predicate) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var taking = false;\n        var index = 0;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            return (taking || (taking = !predicate(value, index++))) && subscriber.next(value);\n        }));\n    });\n}\n\n\n\n\nfunction $369a1beddcfddd56$export$a4fe86229b0e9bdd() {\n    var values = [];\n    for(var _i = 0; _i < arguments.length; _i++)values[_i] = arguments[_i];\n    var scheduler = (0, $798a448d65d66d7d$export$29534b2f653ae592)(values);\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        (scheduler ? (0, $98685deadaab283c$export$ee1b3e54f0441b22)(values, source, scheduler) : (0, $98685deadaab283c$export$ee1b3e54f0441b22)(values, source)).subscribe(subscriber);\n    });\n}\n\n\n\n\n\nfunction $095ad5aa66f29705$export$ac8dfd3a7ad06e80(notifier) {\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        (0, $d5e97ca40de1dca2$export$6a9cfa3ebc765910)(notifier).subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function() {\n            return subscriber.complete();\n        }, (0, $a2669f8c8173c8d3$export$8793edee2d425525)));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n\n\n\nfunction $54e8ed1fe60bf698$export$9384c7afe4015e42(predicate, inclusive) {\n    if (inclusive === void 0) inclusive = false;\n    return (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var index = 0;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            var result = predicate(value, index++);\n            (result || inclusive) && subscriber.next(value);\n            !result && subscriber.complete();\n        }));\n    });\n}\n\n\n\n\n\nfunction $9654f9d6f3b258de$export$3f23594af5f37336(observerOrNext, error, complete) {\n    var tapObserver = (0, $e996a377a476308b$export$f6e2535fb5126e54)(observerOrNext) || error || complete ? {\n        next: observerOrNext,\n        error: error,\n        complete: complete\n    } : observerOrNext;\n    return tapObserver ? (0, $b70519f632db53cb$export$871731df685d7753)(function(source, subscriber) {\n        var _a;\n        (_a = tapObserver.subscribe) === null || _a === void 0 || _a.call(tapObserver);\n        var isUnsub = true;\n        source.subscribe((0, $1082674ba26021fb$export$b9e075132cc6937f)(subscriber, function(value) {\n            var _a;\n            (_a = tapObserver.next) === null || _a === void 0 || _a.call(tapObserver, value);\n            subscriber.next(value);\n        }, function() {\n            var _a;\n            isUnsub = false;\n            (_a = tapObserver.complete) === null || _a === void 0 || _a.call(tapObserver);\n            subscriber.complete();\n        }, function(err) {\n            var _a;\n            isUnsub = false;\n            (_a = tapObserver.error) === null || _a === void 0 || _a.call(tapObserver, err);\n            subscriber.error(err);\n        }, function() {\n            var _a, _b;\n            if (isUnsub) (_a = tapObserver.unsubscribe) === null || _a === void 0 || _a.call(tapObserver);\n            (_b = tapObserver.finalize) === null || _b === void 0 || _b.call(tapObserver);\n        }));\n    }) : (0, $d964bb9c87650d9b$export$f0954fd7d5368655);\n}\n\n\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides utility methods to work with `undefined` values. The value `null` is considered as a defined value.\n *\n * Note: TypeScript 3.7 introduces the `nullish coalescing operator` [1] `(??)`, which is similar to the `Defined` function,\n * but also applies for `null` values.\n *\n * ## Links:\n * [1] https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing\n */ var $ccc574af478a1fb0$export$790c233a67baba3;\n(function(Defined) {\n    /**\n     * Returns the value if not `undefined`, otherwise \"orElseValue\". The \"orElseValue\" value can be created with a factory function.\n     *\n     * Unlike JavaScript's \"nullish coalescing operator (??)\", the \"orElse\" function only tests for `undefined`, not `null`.\n     */ function orElse(value, orElseValue) {\n        return value !== undefined ? value : typeof orElseValue === \"function\" ? orElseValue() : orElseValue;\n    }\n    Defined.orElse = orElse;\n    /**\n     * Returns the value if not `undefined`, otherwise throws the error created by the passed factory function.\n     */ function orElseThrow(value, orElseThrowFn) {\n        if (value !== undefined) return value;\n        throw orElseThrowFn();\n    }\n    Defined.orElseThrow = orElseThrow;\n})($ccc574af478a1fb0$export$790c233a67baba3 || ($ccc574af478a1fb0$export$790c233a67baba3 = {}));\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides array utility methods.\n */ var $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4;\n(function(Arrays) {\n    function coerce(value, options) {\n        if (value === null || value === undefined) {\n            if ($ccc574af478a1fb0$export$790c233a67baba3.orElse(options && options.coerceNullOrUndefined, true)) return [];\n            return value;\n        }\n        return Array.isArray(value) ? value : [\n            value\n        ];\n    }\n    Arrays.coerce = coerce;\n    /**\n     * Compares items of given arrays for reference equality.\n     *\n     * Use the parameter `exactOrder` to control if the item order must be equal (which is by default) or not.\n     */ function isEqual(array1, array2, options) {\n        if (array1 === array2) return true;\n        if (!array1 || !array2) return false;\n        if (array1.length !== array2.length) return false;\n        if (options?.exactOrder ?? true) return array1.every((item, index)=>item === array2[index]);\n        return array1.every((item)=>array2.includes(item)) && array2.every((item)=>array1.includes(item));\n    }\n    Arrays.isEqual = isEqual;\n    /**\n     * Removes the specified element from an array, or the elements which satisfy the provided predicate function.\n     * The original array will be changed.\n     *\n     * @param  array - The array from which elements should be removed.\n     * @param  element - The element to be removed, or a predicate function to resolve elements which to be removed.\n     * @param  options - Control if to remove all occurrences of the element. If not specified, all occurrences are removed.\n     * @return the elements removed from the array.\n     */ function remove(array, element, options) {\n        const firstOnly = $ccc574af478a1fb0$export$790c233a67baba3.orElse(options && options.firstOnly, false);\n        // define a function to resolve the element's index in the original array\n        const indexOfElementFn = (()=>{\n            if (typeof element === \"function\") {\n                const predicate = element;\n                return ()=>array.findIndex(predicate);\n            } else return ()=>array.indexOf(element);\n        })();\n        const removedElements = [];\n        for(let i = indexOfElementFn(); i !== -1; i = indexOfElementFn()){\n            removedElements.push(...array.splice(i, 1)); // changes the original array\n            if (firstOnly) break;\n        }\n        return removedElements;\n    }\n    Arrays.remove = remove;\n    /**\n     * Removes duplicate items from the array. The original array will not be modified.\n     *\n     * Use the parameter `keySelector` to provide a function for comparing objects.\n     */ function distinct(items, keySelector = (0, $d964bb9c87650d9b$export$f0954fd7d5368655)) {\n        const itemSet = new Set(items.map(keySelector));\n        return items.filter((item)=>itemSet.delete(keySelector(item)));\n    }\n    Arrays.distinct = distinct;\n    /**\n     * Intersects the given arrays, returning a new array containing all the elements contained in every array.\n     * Arrays which are `undefined` or `null` are ignored.\n     */ function intersect(...arrays) {\n        const _arrays = arrays.filter((array)=>array !== undefined && array !== null);\n        if (!_arrays.length) return [];\n        const first = _arrays.pop();\n        return _arrays.reduce((intersection, array)=>intersection.filter((value)=>array.includes(value)), [\n            ...first\n        ]);\n    }\n    Arrays.intersect = intersect;\n    /**\n     * Returns the last element in the given array, optionally matching the predicate if given.\n     *\n     * Returns `undefined` if no element is found.\n     */ function last(array, predicate) {\n        if (!array) return undefined;\n        if (!predicate) return array[array.length - 1];\n        for(let i = array.length - 1; i >= 0; i--){\n            if (predicate(array[i])) return array[i];\n        }\n        return undefined;\n    }\n    Arrays.last = last;\n})($ccc574af478a1fb0$export$3b0ccdbbdb9feaa4 || ($ccc574af478a1fb0$export$3b0ccdbbdb9feaa4 = {}));\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ var $ccc574af478a1fb0$export$5c089a222833d7b7;\n(function(Objects) {\n    /**\n     * Compares the two objects for shallow equality.\n     */ function isEqual(a, b) {\n        if (a === b) return true;\n        if (!a || !b) return false;\n        if (Object.keys(a).length !== Object.keys(b).length) return false;\n        return Object.entries(a).every(([key, value])=>b[key] === value);\n    }\n    Objects.isEqual = isEqual;\n})($ccc574af478a1fb0$export$5c089a222833d7b7 || ($ccc574af478a1fb0$export$5c089a222833d7b7 = {}));\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides dictionary utility methods.\n */ var $ccc574af478a1fb0$export$45dae21dfe837dd7;\n(function(Dictionaries) {\n    function coerce(dictionaryLike, options) {\n        if (dictionaryLike === null || dictionaryLike === undefined) {\n            if ($ccc574af478a1fb0$export$790c233a67baba3.orElse(options && options.coerceNullOrUndefined, true)) return {};\n            return dictionaryLike;\n        }\n        if (dictionaryLike instanceof Map) return $ccc574af478a1fb0$var$createDictionaryFromMap(dictionaryLike);\n        // Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n        // Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n        // This is most likely because the serialization takes place in a different realm.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n        // @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n        try {\n            const map = new Map(dictionaryLike);\n            return $ccc574af478a1fb0$var$createDictionaryFromMap(map);\n        } catch  {\n        // noop\n        }\n        return dictionaryLike;\n    }\n    Dictionaries.coerce = coerce;\n    /**\n     * Returns a new {@link Dictionary} with `undefined` values removed.\n     */ function withoutUndefinedEntries(object) {\n        return Object.entries(object).reduce((dictionary, [key, value])=>{\n            if (value !== undefined) dictionary[key] = value;\n            return dictionary;\n        }, {});\n    }\n    Dictionaries.withoutUndefinedEntries = withoutUndefinedEntries;\n})($ccc574af478a1fb0$export$45dae21dfe837dd7 || ($ccc574af478a1fb0$export$45dae21dfe837dd7 = {}));\nfunction $ccc574af478a1fb0$var$createDictionaryFromMap(map) {\n    return Array.from(map.entries()).reduce((dictionary, [key, value])=>{\n        dictionary[key] = value;\n        return dictionary;\n    }, {});\n}\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides utility methods for {@link Map}.\n */ var $ccc574af478a1fb0$export$2869c604d0a0cf9c;\n(function(Maps) {\n    function coerce(mapLike, options) {\n        if (mapLike === null || mapLike === undefined) {\n            if ($ccc574af478a1fb0$export$790c233a67baba3.orElse(options && options.coerceNullOrUndefined, true)) return new Map();\n            return mapLike;\n        }\n        if (mapLike instanceof Map) return mapLike;\n        // Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n        // Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n        // This is most likely because the serialization takes place in a different realm.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n        // @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n        try {\n            return new Map(mapLike);\n        } catch  {\n        // noop\n        }\n        return Object.entries(mapLike).reduce((map, [key, value])=>map.set(key, value), new Map());\n    }\n    Maps.coerce = coerce;\n    /**\n     * Adds the given value into a {@link Set} in the multi value {@link Map}.\n     */ function addSetValue(multiValueMap, key, value) {\n        const values = multiValueMap.get(key) || new Set();\n        return multiValueMap.set(key, values.add(value));\n    }\n    Maps.addSetValue = addSetValue;\n    /**\n     * Removes the given value or values matching the given predicate from the multi {@link Map}.\n     *\n     * @return `true` if the element was removed, or `false` otherwise.\n     */ function removeSetValue(multiValueMap, key, value) {\n        const values = multiValueMap.get(key) || new Set();\n        let hasRemoved;\n        if (typeof value === \"function\") {\n            const predicateFn = value;\n            hasRemoved = Array.from(values).filter(predicateFn).reduce((removed, it)=>values.delete(it) || removed, false);\n        } else hasRemoved = values.delete(value);\n        if (hasRemoved && !values.size) multiValueMap.delete(key);\n        return hasRemoved;\n    }\n    Maps.removeSetValue = removeSetValue;\n    /**\n     * Adds the given value into an {@link Array} in the multi value {@link Map}.\n     */ function addListValue(map, key, value) {\n        const values = map.get(key) || [];\n        return map.set(key, values.concat(value));\n    }\n    Maps.addListValue = addListValue;\n    /**\n     * Removes the given value or values matching the given predicate from the multi {@link Map}.\n     *\n     * @return `true` if the element was removed, or `false` otherwise.\n     */ function removeListValue(multiValueMap, key, value) {\n        const values = multiValueMap.get(key) || [];\n        const hasRemoved = $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4.remove(values, value, {\n            firstOnly: false\n        }).length > 0;\n        if (hasRemoved && !values.length) multiValueMap.delete(key);\n        return hasRemoved;\n    }\n    Maps.removeListValue = removeListValue;\n})($ccc574af478a1fb0$export$2869c604d0a0cf9c || ($ccc574af478a1fb0$export$2869c604d0a0cf9c = {}));\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ var $ccc574af478a1fb0$export$3e8af96bd6669133;\n(function(Observables) {\n    /**\n     * Creates an `Observable` from the passed value, which will emit the value and then complete,\n     * or, if passing an `Observable`, returns it unchanged. If passing a `Promise`, it is converted\n     * to an `Observable`.\n     */ function coerce(value) {\n        if (value instanceof (0, $157495f65d1fedd6$export$77cea355fa80b5f4)) return value;\n        if (value instanceof Promise) return (0, $cecb8b01522e9ff4$export$6788812c4e6611e6)(value);\n        return (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(value);\n    }\n    Observables.coerce = coerce;\n})($ccc574af478a1fb0$export$3e8af96bd6669133 || ($ccc574af478a1fb0$export$3e8af96bd6669133 = {}));\n\n\n\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ /**\n * The bean manager allows getting references to singleton objects, so-called beans.\n *\n * #### Bean\n * A bean can be any object or even a primitive like a `boolean`. A bean is registered under some symbol in the bean manager. In most\n * cases, the class of the bean is used as the symbol. You can then look up the bean under its registration symbol. A symbol is either\n * a class type, an abstract class type, or a `Symbol`.\n *\n * #### Bean Scope\n * Beans are application-scoped, sometimes also referred to as singleton objects.\n *\n * #### Bean Construction\n * By default, the bean manager constructs beans lazily when looked up for the first time. Subsequent lookups then get the same bean instance.\n * When registering a bean, however, you can instruct the bean manager to construct the bean eagerly at startup. Eager beans are constructed after\n * all initializers complete.\n *\n * #### Registering Beans\n * A bean is registered in the bean manager under some class type, abstract class type or `Symbol`. In most cases, the symbol is also the type of the bean\n * instance but does not have to be. You can then look up the bean from the bean manager using that symbol.\n *\n * When registering a bean, you must tell the bean manager how to construct the bean. Different strategies are supported, as listed below.\n *\n * |Strategy|Description|Example|\n * |-|-|-|\n * |useClass             |if to create an instance of a class                                   |```Beans.register(Logger, {useClass: ConsoleLogger});```|\n * |useClass (shorthand) |Shorthand syntax if class and lookup symbol are identical             |```Beans.register(ConsoleLogger);```|\n * |useValue             |if to use a static value as bean                                      |```Beans.register(LoggingConfig, {useValue: config});```|\n * |useFactory           |if to construct the bean with a factory function                      |```Beans.register(Logger, {useFactory: () => new ConsoleLogger()});```|\n * |useExisting          |if to create an alias for another bean registered in the bean manager |```Beans.register(Logger, {useExisting: ConsoleLogger});```|\n *\n * #### Registering multiple Beans on the same Symbol\n * Multiple beans can be registered under the same symbol by setting the multi flag to `true`. When looking them up, they are returned in an array in registration order.\n *\n * ```ts\n * Beans.register(MessageInterceptor, {useClass: MessageLoggerInterceptor, multi: true});\n * ```\n * #### Looking up Beans\n * Beans are looked up using the symbol under which they were registered. The bean manager providers different methods to look up beans, as listed below.\n *\n * |Method|Description|\n * |-|-|\n * |`Beans.get` |Returns the bean registered under the given symbol. If no or multiple beans are registered under the passed symbol, an error is thrown. |\n * |`Beans.opt` |Returns the bean registered under the given symbol, if any, or returns `undefined` otherwise. |\n * |`Beans.all` |Returns all beans registered under the given symbol. Returns an empty array if no bean is found. |\n *\n * #### Replacing Beans\n * A bean can be replaced by registering another bean under a bean's symbol. In turn, the replaced bean is disposed and unregistered.\n *\n * #### Decorating Beans\n * The bean manager allows decorating a bean to intercept invocations to its methods and properties. Multiple decorators can decorate a single bean. Decoration\n * takes place in decorator registration order.\n *\n * Decorators are registered in the bean manager using the `Beans.registerDecorator` method under the symbol of the bean to be decorated.\n * As with the registration of a bean, you must tell the bean manager how to construct the decorator. For more information, see Bean Construction Strategies.\n * Decorators must be registered before starting the bean manager.\n *\n * A decorator must implement the decorate method of the BeanDecorator interface and return the proxied bean. To proxy a bean, you can create a JavaScript proxy,\n * or create an anonymous class delegating to the actual bean.\n *\n * #### Initializers\n * Initializers help to run initialization tasks during startup. Initializers can specify a runlevel in which to execute. Initializers bound to lower\n * runlevels execute before initializers of higher runlevels. Initializers of the same runlevel may execute in parallel.\n *\n * Initializers are registered in the bean manager using the `Beans.registerInitializer` method, passing a function or an initializer object, and optionally a runlevel.\n * If not specifying a runlevel, the initializer is executed in runlevel <code>0</code>, or in the default runlevel as specified when starting the bean manager.\n *\n * @category BeanManager\n */ class $0d8b1f299d46dd84$export$fb19ae9cd5d9554c {\n    constructor(){\n        this._beanRegistry = new Map();\n        this._decoratorRegistry = new Map();\n        this._initializers = [];\n        this._sequence = 0;\n        this._runlevel$ = new (0, $30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b)(-1);\n        this._eagerBeansConstructed = false;\n        this._started = false;\n    }\n    /**\n     * Registers a bean under the given symbol.\n     *\n     * If not providing instructions, the given symbol is used as the constructor function to construct the bean.\n     *\n     * By default, bean construction is lazy, meaning that the bean is constructed when looked up for the first time.\n     * If another bean is registered under the same symbol, that other bean is disposed and replaced with the given bean.\n     * To register multiple beans on the same symbol, register it with the flag `multi` set to `true`.\n     *\n     * Beans can be registered, replaced or removed even after starting the bean manager.\n     *\n     * @param  symbol - Symbol under which to register the bean.\n     * @param  instructions - Control bean construction; see {@link BeanInstanceConstructInstructions} for more detail.\n     * @return handle to unregister the bean.\n     */ register(symbol, instructions) {\n        if (!symbol) throw Error(\"[BeanRegisterError] Missing bean lookup symbol.\");\n        if (!instructions || !$0d8b1f299d46dd84$var$containsBeansConstructStrategy(instructions)) instructions = {\n            ...instructions,\n            useClass: symbol\n        };\n        $0d8b1f299d46dd84$var$validateBeanConstructInstructions(symbol, instructions);\n        // Check that either 'multi' or 'non-multi' beans are registered on the same symbol.\n        const multi = (0, $ccc574af478a1fb0$export$790c233a67baba3).orElse(instructions.multi, false);\n        if (multi && this._beanRegistry.has(symbol) && Array.from(this._beanRegistry.get(symbol)).some((metaData)=>!metaData.multi)) throw Error(\"[BeanRegisterError] Trying to register a bean as 'multi-bean' on a symbol that has already registered a 'non-multi-bean'. This is probably not what was intended.\");\n        if (!multi && this._beanRegistry.has(symbol) && Array.from(this._beanRegistry.get(symbol)).some((metaData)=>metaData.multi)) throw Error(\"[BeanRegisterError] Trying to register a bean on a symbol that has already registered a 'multi-bean'. This is probably not what was intended.\");\n        // Destroy an already registered bean under the same symbol, if any, unless multi is set to `true`.\n        if (!multi && this._beanRegistry.has(symbol)) this.disposeBean(this._beanRegistry.get(symbol).values().next().value);\n        const beanInfo = {\n            symbol: symbol,\n            beanConstructFn: $0d8b1f299d46dd84$var$createBeanConstructFunction(instructions),\n            eager: (0, $ccc574af478a1fb0$export$790c233a67baba3).orElse(instructions.eager || instructions.useValue !== undefined, false),\n            multi: multi,\n            instructions: instructions,\n            constructing: false\n        };\n        if (multi) {\n            const beans = this._beanRegistry.get(symbol) || new Set();\n            this._beanRegistry.set(symbol, beans.add(beanInfo));\n        } else this._beanRegistry.set(symbol, new Set([\n            beanInfo\n        ]));\n        if (beanInfo.eager && this._eagerBeansConstructed) this.getOrConstructBeanInstance(beanInfo);\n        return {\n            unregister: ()=>this.disposeBean(beanInfo)\n        };\n    }\n    /**\n     * Registers a bean under the given symbol, but only if no other bean is registered under that symbol yet.\n     *\n     * For detailed information about how to register a bean, see {@link register}.\n     *\n     * @param  symbol - Symbol under which to register the bean.\n     * @param  instructions - Control bean construction; see {@link BeanInstanceConstructInstructions} for more detail.\n     * @return handle to unregister the bean.\n     */ registerIfAbsent(symbol, instructions) {\n        if (!symbol) throw Error(\"[BeanRegisterError] Missing bean lookup symbol.\");\n        if (!this._beanRegistry.has(symbol)) return this.register(symbol, instructions);\n        return {\n            unregister: (0, $a2669f8c8173c8d3$export$8793edee2d425525)\n        };\n    }\n    /**\n     * Registers a decorator to proxy a bean.\n     *\n     * The decorator is invoked when the bean is constructed. Multiple decorators can be registered to decorate a bean.\n     * They are invoked in the order as registered.\n     *\n     * Decorators must be registered before starting the bean manager.\n     *\n     * @param symbol - Identifies the bean(s) which to decorate. If multiple beans are registered under that symbol, they all are decorated.\n     * @param decorator - Specifies the decorator.\n     */ registerDecorator(symbol, decorator) {\n        if (this._started) throw Error(\"[BeanManagerLifecycleError] Decorators can only be registered before starting the bean manager.\");\n        if (!symbol) throw Error(\"[BeanDecoratorRegisterError] A decorator requires a symbol.\");\n        $0d8b1f299d46dd84$var$validateBeanConstructInstructions(symbol, decorator);\n        const constructFn = $0d8b1f299d46dd84$var$createBeanConstructFunction(decorator)();\n        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(this._decoratorRegistry, symbol, constructFn);\n    }\n    /**\n     * Registers an initializer that is executed when the bean manager starts. The bean manager is fully started when all initializers are completed.\n     *\n     * Initializers can specify a runlevel in which to execute. Initializers bound to lower runlevels execute before initializers of higher runlevels.\n     * Initializers of the same runlevel may execute in parallel. Runlevels must be >= 0;\n     *\n     * Initializers must be registered before starting the bean manager.\n     */ registerInitializer(initializer) {\n        if (this._started) throw Error(\"[BeanManagerLifecycleError] Initializers can only be registered before starting the bean manager.\");\n        const initializerInfo = (()=>{\n            if (typeof initializer === \"function\") return {\n                fn: initializer\n            };\n            else if (initializer.runlevel !== undefined && initializer.runlevel < 0) throw Error(`[InitializerRegisterError] The runlevel of an initializer must be >= 0, but was ${initializer.runlevel}.`);\n            else if (initializer.useFunction) return {\n                fn: initializer.useFunction,\n                runlevel: initializer.runlevel\n            };\n            else if (initializer.useClass) {\n                const useClass = initializer.useClass;\n                return {\n                    fn: ()=>new useClass().init(),\n                    runlevel: initializer.runlevel\n                };\n            } else if (initializer.useExisting) {\n                const useExisting = initializer.useExisting;\n                return {\n                    fn: ()=>$0d8b1f299d46dd84$export$e1272dadeadaca63.get(useExisting).init(),\n                    runlevel: initializer.runlevel\n                };\n            }\n            throw Error(\"[NullInitializerError] No initializer specified.\");\n        })();\n        this._initializers.push(initializerInfo);\n    }\n    /**\n     * Returns the bean registered under the given symbol.\n     *\n     * By default, if no or multiple beans are registered under the given symbol, an error is thrown.\n     *\n     * @param  symbol - Symbol to look up the bean.\n     * @param  orElse - Controls what to do if no bean is found under the given symbol. If not set and if no bean is found, the bean manager throws an error.\n     * @throws if not finding a bean, or if multiple beans are found under the given symbol.\n     */ get(symbol, orElse) {\n        const beans = this.all(symbol);\n        switch(beans.length){\n            case 0:\n                if (orElse?.orElseGet !== undefined) return orElse.orElseGet;\n                if (orElse?.orElseSupply) return orElse.orElseSupply();\n                throw Error(`[NullBeanError] No bean registered under the symbol '${$0d8b1f299d46dd84$var$getSymbolName(symbol)}'.`);\n            case 1:\n                return beans[0];\n            default:\n                throw Error(`[MultiBeanError] Multiple beans registered under the symbol '${$0d8b1f299d46dd84$var$getSymbolName(symbol)}'.`);\n        }\n    }\n    /**\n     * Returns the bean registered under the given symbol, if any, or returns `undefined` otherwise.\n     *\n     * @param  symbol - Symbol to look up the bean.\n     * @throws if multiple beans are found under the given symbol.\n     */ opt(symbol) {\n        return this.get(symbol, {\n            orElseSupply: ()=>undefined\n        });\n    }\n    /**\n     * Returns all beans registered under the given symbol. Returns an empty array if no bean is found.\n     *\n     * @param symbol - Symbol to look up the beans.\n     */ all(symbol) {\n        const beanInfos = Array.from(this._beanRegistry.get(symbol) || new Set());\n        if (!beanInfos || !beanInfos.length) return [];\n        if (beanInfos.some((beanInfo)=>beanInfo.constructing)) throw Error(`[BeanConstructError] Circular bean construction cycle detected [bean={${$0d8b1f299d46dd84$var$getSymbolName(symbol)}}].`);\n        return beanInfos.map((beanInfo)=>this.getOrConstructBeanInstance(beanInfo));\n    }\n    /**\n     * Starts the bean manager by running initializers and constructing eager beans. By default, constructs eager beans after\n     * all initializers completed.\n     *\n     * Initializers with a lower runlevel are executed before initializers with a higher runlevel. After all initializers of the\n     * same runlevel have completed, initializers of the next higher runlevel are executed, and so on. Initializers of the same\n     * runlevel may run in parallel.\n     *\n     * @param  config - Control initialization of the bean manager.\n     * @return A Promise that resolves when all initializers completed.\n     */ async start(config) {\n        if (this._started) throw Error(\"[BeanManagerLifecycleError] Bean manager already started.\");\n        const initializerDefaultRunlevel = config?.initializerDefaultRunlevel ?? 0;\n        const eagerBeanConstructRunlevel = config?.eagerBeanConstructRunlevel ?? (()=>{\n            if (this._initializers.length === 0) return initializerDefaultRunlevel + 1;\n            return Math.max(...this._initializers.map((initializer)=>initializer.runlevel ?? initializerDefaultRunlevel)) + 1;\n        })();\n        // Register initializer to construct eager beans.\n        this.registerInitializer({\n            useFunction: async ()=>{\n                this.constructEagerBeans();\n                this._eagerBeansConstructed = true;\n            },\n            runlevel: eagerBeanConstructRunlevel\n        });\n        // Run initializers.\n        await this.runInitializers(initializerDefaultRunlevel);\n        this._started = true;\n    }\n    /**\n     * Destroys all beans managed by the bean manager.\n     *\n     * After calling this method, beans, initializers and decorators unregistered.\n     *\n     * Calling this method has no effect if the bean manager is not started, or failed to start.\n     */ destroy() {\n        this.getBeanInfos().sort($0d8b1f299d46dd84$var$compareByDestroyOrder).forEach((bean)=>this.disposeBean(bean));\n        this._beanRegistry.clear();\n        this._decoratorRegistry.clear();\n        this._initializers.length = 0;\n        this._runlevel$.next(-1);\n        this._eagerBeansConstructed = false;\n        this._started = false;\n    }\n    disposeBean(beanInfo) {\n        const destroyable = beanInfo.instructions.useClass || beanInfo.instructions.useFactory;\n        if (destroyable && beanInfo.instance && typeof beanInfo.instance.preDestroy === \"function\") try {\n            beanInfo.instance.preDestroy();\n        } catch (error) {\n            console?.error(\"Bean threw an error in `preDestroy`\", error);\n        }\n        beanInfo.instance = undefined;\n        beanInfo.constructing = false;\n        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeSetValue(this._beanRegistry, beanInfo.symbol, beanInfo);\n    }\n    /**\n     * Returns a Promise that resolves when the bean manager enters the specified runlevel.\n     * The Promise resolves immediately when the bean manager has already entered or completed that runlevel.\n     */ async whenRunlevel(runlevel) {\n        return (0, $f03dcc354f8c1062$export$400f9f949cef996c)(this._runlevel$.pipe((0, $827970c208304071$export$3dea766d36a8935f)((currentRunlevel)=>currentRunlevel >= runlevel))).then(()=>Promise.resolve());\n    }\n    getBeanInfos() {\n        return Array.from(this._beanRegistry.values()).reduce((acc, beanInfos)=>acc.concat(Array.from(beanInfos)), []);\n    }\n    /**\n     * Runs registered initializers, where initializers with a lower runlevel are executed before initializers with a higher runlevel.\n     * After all initializers of the same runlevel have completed, initializers of the next higher runlevel are executed, and so on.\n     * Initializers of the same runlevel may run in parallel.\n     */ async runInitializers(defaultInitializerRunlevel) {\n        const initializersGroupedByRunlevel = this._initializers.reduce((grouped, initializer)=>(0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(grouped, initializer.runlevel ?? defaultInitializerRunlevel, initializer.fn), new Map());\n        const runlevels = Array.from(initializersGroupedByRunlevel.keys()).sort((a, b)=>a - b); // sort numerically, not alphabetically\n        for (const runlevel of runlevels){\n            this._runlevel$.next(runlevel);\n            try {\n                await Promise.all(initializersGroupedByRunlevel.get(runlevel).map((initializerFn)=>initializerFn()));\n            } catch (error) {\n                throw Error(`[InitializerError] Initializer rejected with an error: ${error} [runlevel=${runlevel}]`);\n            }\n        }\n    }\n    /**\n     * Constructs beans with an eager construction.\n     */ constructEagerBeans() {\n        this.getBeanInfos().filter((beanInfo)=>beanInfo.eager).forEach((beanInfo)=>this.getOrConstructBeanInstance(beanInfo));\n    }\n    /**\n     * Returns the bean instance if already constructed, or constructs the bean otherwise.\n     */ getOrConstructBeanInstance(beanInfo) {\n        // Check if the bean is already constructed.\n        if (beanInfo.instance) return beanInfo.instance;\n        // Construct the bean and decorate it.\n        beanInfo.constructing = true;\n        try {\n            const bean = beanInfo.beanConstructFn();\n            const decorators = this._decoratorRegistry.get(beanInfo.symbol) || [];\n            beanInfo.instance = [\n                ...decorators\n            ].reverse().reduce((decoratedBean, decorator)=>decorator.decorate(decoratedBean), bean);\n            beanInfo.constructInstant = ++this._sequence;\n            return beanInfo.instance;\n        } finally{\n            beanInfo.constructing = false;\n        }\n    }\n}\n/**\n * Provides access to beans registered in the bean manager.\n *\n * @category BeanManager\n */ const $0d8b1f299d46dd84$export$e1272dadeadaca63 = new $0d8b1f299d46dd84$export$fb19ae9cd5d9554c();\n/**\n * Compares beans according to their destroy order. If the order is the same, the construction time of the beans is compared, in reverse construction order.\n *\n * @ignore\n */ function $0d8b1f299d46dd84$var$compareByDestroyOrder(bean1, bean2) {\n    if ((bean1.instructions.destroyOrder ?? 0) < (bean2.instructions.destroyOrder ?? 0)) return -1;\n    if ((bean1.instructions.destroyOrder ?? 0) > (bean2.instructions.destroyOrder ?? 0)) return 1;\n    return (bean2.constructInstant ?? 0) - (bean1.constructInstant ?? 0); // reverse construction order\n}\n/** @ignore */ function $0d8b1f299d46dd84$var$createBeanConstructFunction(instructions) {\n    if (instructions.useValue !== undefined) {\n        const useValue = instructions.useValue;\n        return ()=>useValue;\n    } else if (instructions.useClass) {\n        const useClassFn = instructions.useClass;\n        return ()=>new useClassFn();\n    } else if (instructions.useFactory) {\n        const useFactoryFn = instructions.useFactory;\n        return ()=>useFactoryFn();\n    } else if (instructions.useExisting) {\n        const useExisting = instructions.useExisting;\n        return ()=>$0d8b1f299d46dd84$export$e1272dadeadaca63.get(useExisting);\n    }\n    throw Error(`[BeanConstructError] Missing bean construction strategy`);\n}\n/**\n * Validates passed instructions to construct the bean to be valid.\n *\n * @ignore\n */ function $0d8b1f299d46dd84$var$validateBeanConstructInstructions(symbol, instructions) {\n    switch(Object.keys(instructions).filter((instruction)=>instruction.startsWith(\"use\")).length){\n        case 0:\n            throw Error(`[BeanRegisterError] Missing bean construction strategy. Expected one of 'useValue', 'useClass', 'useFactory' or 'useExisting' [bean=${symbol.toString()}, instructions=${JSON.stringify(instructions)}]`);\n        case 1:\n            break;\n        default:\n            throw Error(`[BeanRegisterError] Multiple bean construction strategies specified. Expected one of 'useValue', 'useClass', 'useFactory' or 'useExisting' [bean=${symbol.toString()}, instructions=${JSON.stringify(instructions)}]`);\n    }\n    if (Object.keys(instructions).includes(\"useValue\") && instructions.useValue === undefined) throw Error(`[BeanRegisterError] Passing \\`undefined\\` as bean value is not supported [bean=${symbol.toString()}].`);\n}\n/** @ignore */ function $0d8b1f299d46dd84$var$containsBeansConstructStrategy(instructions) {\n    return Object.keys(instructions).some((property)=>property.startsWith(\"use\"));\n}\n/**\n * @ignore\n */ function $0d8b1f299d46dd84$var$getSymbolName(symbol) {\n    return typeof symbol === \"function\" ? symbol.name : symbol.toString();\n}\n\n\n\n/*\n * Copyright (c) 2018-2023 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ const $65410acb3348d48d$var$uuidIterator = $65410acb3348d48d$var$generateUUID();\nfunction* $65410acb3348d48d$var$generateUUID() {\n    const lut = [];\n    for(let i = 0; i < 256; i++)lut[i] = (i < 16 ? \"0\" : \"\") + i.toString(16);\n    while(true){\n        const d0 = Math.random() * 0xffffffff | 0;\n        const d1 = Math.random() * 0xffffffff | 0;\n        const d2 = Math.random() * 0xffffffff | 0;\n        const d3 = Math.random() * 0xffffffff | 0;\n        const uuid = lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + \"-\" + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + \"-\" + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + \"-\" + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + \"-\" + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];\n        yield uuid;\n    }\n}\n/**\n * Generates a UUID (universally unique identifier) compliant with the RFC 4122 version 4.\n */ function $65410acb3348d48d$var$randomUUID() {\n    return $65410acb3348d48d$var$uuidIterator.next().value;\n}\nvar $65410acb3348d48d$export$bc35efed93511c4b = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    randomUUID: $65410acb3348d48d$var$randomUUID\n});\n\n\n\n\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ function $d5bd6ae9534d951f$export$8f2c8e61d147b502(predicate) {\n    if (!predicate) return (source$)=>source$;\n    return (0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((items)=>{\n        if (!items.length) return (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)([]);\n        // Filter items if all predicates return a boolean value.\n        const matches = items.map(predicate);\n        if (matches.every((match)=>typeof match === \"boolean\")) return (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(items.filter((item, i)=>matches[i]));\n        /*\n         * Notes about `combineLatest` operator:\n         * - Passing an empty array will result in an Observable that completes immediately.\n         * - Waits for all Observables to emit at least once.\n         * - If some Observable does not emit a value but completes, resulting Observable will complete at the same moment without emitting anything.\n         * - If some Observable does not emit any value and never completes, `combineLatest` will also never emit and never complete.\n         * - If any Observable errors, `combineLatest` will error immediately as well, and all other Observables will be unsubscribed.\n         */ return (0, $e9c33d8acb1fdd17$export$77fa7d86f5204e8a)(matches.map((match)=>(0, $ccc574af478a1fb0$export$3e8af96bd6669133).coerce(match).pipe((0, $34cec3157a65a432$export$e4ca6d7b7a6dcf9b)(false), (0, $a3c41b925191c992$export$3dede90624df3ba9)(()=>(0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(false))))).pipe((0, $419c2da03c3ac473$export$779c5fb865a0172e)((previous, current)=>(0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).isEqual(previous, current)), (0, $a344549688aae3fd$export$871de8747c9eaa88)((matches)=>items.filter((item, i)=>matches[i])));\n    });\n}\n/**\n * Maps each element in the source array to its extracted property.\n *\n * Like rxjs 'pluck' but based on an array with a function to extract the property.\n *\n * @deprecated since version 10.0.0-beta.3. Use {@link mapArray} instead.\n */ function $d5bd6ae9534d951f$export$c629d26da3372c2a(extractor) {\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)((items)=>items.map((item)=>extractor(item)));\n}\n/**\n * Maps each element in the source array to its mapped value.\n */ function $d5bd6ae9534d951f$export$4c9116dcf1374231(projectFn) {\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)((items)=>items.map((item)=>projectFn(item)));\n}\n/**\n * Sorts items in the source array and emits an array with those items sorted.\n */ function $d5bd6ae9534d951f$export$92f26f2c62c5b941(comparator) {\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)((items)=>[\n            ...items\n        ].sort(comparator));\n}\n/**\n * Combines the Observables contained in the source array by applying {@link combineLatest}, emitting an array with the latest\n * value of each Observable of the source array. Combines only the Observables of the most recently emitted array.\n *\n * <span class=“informal”>Each time the source emits an array of Observables, combines its Observables by subscribing to each\n * of them, cancelling any subscription of a previous source emission.</span>\n */ function $d5bd6ae9534d951f$export$8a30e918558d65db() {\n    return (0, $105ed219d50c6c26$export$a4627e546088548d)((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((items)=>items.length ? (0, $e9c33d8acb1fdd17$export$77fa7d86f5204e8a)(items) : (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)([])), (0, $a344549688aae3fd$export$871de8747c9eaa88)((items)=>new Array().concat(...items)));\n}\n/**\n * Removes duplicates of elements in the source array.\n *\n * <span class=“informal”>Each time the source emits, maps the array to a new array with duplicates removed.</span>\n */ function $d5bd6ae9534d951f$export$a03a3ccc5cf2316b(keySelector = (0, $d964bb9c87650d9b$export$f0954fd7d5368655)) {\n    return (0, $105ed219d50c6c26$export$a4627e546088548d)((0, $a344549688aae3fd$export$871de8747c9eaa88)((items)=>(0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).distinct(items, keySelector)));\n}\n/**\n * Buffers the source Observable values until `closingNotifier$` notifier resolves, emits or completes.\n *\n * Once closed the buffer, emits its buffered values as a separate emission per buffered value, in the\n * order as collected. After that, this operator mirrors the source Observable, i.e., emits values as they\n * arrive.\n *\n * Unlike {@link bufferWhen} RxJS operator, the buffer is not re-opened once closed.\n *\n * @param closingNotifier$ Closes the buffer when the passed Promise resolves, or when the passed Observable\n *                         emits or completes.\n */ function $d5bd6ae9534d951f$export$b5f2084817235760(closingNotifier$) {\n    const guard$ = (0, $cecb8b01522e9ff4$export$6788812c4e6611e6)(closingNotifier$).pipe((0, $c7828fe634a19a01$export$b7df5d561049483a)(1), (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)(()=>(0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58)), (0, $f60f59c3c27c3419$export$ed80d9de1d9df928)({\n        resetOnComplete: false,\n        resetOnError: false,\n        resetOnRefCountZero: false\n    }));\n    return (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)((item)=>(0, $98685deadaab283c$export$ee1b3e54f0441b22)(guard$, (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(item)));\n}\n/**\n * Executes a tap-function for the first percolating value.\n */ function $d5bd6ae9534d951f$export$b914490df9483590(tapFn, scheduler) {\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)((value, index)=>{\n        if (index === 0) scheduler ? scheduler.schedule(tapFn) : tapFn(value);\n        return value;\n    });\n}\n/**\n * Mirrors the source Observable, but runs downstream operators (operators below the `observeInside` operator) and subscription handlers\n * (next, error, complete) inside the given execution context.\n *\n * This operator is particularly useful in Angular applications to run downstream operators inside or outside the Angular zone,\n * as following: `observeInside(continueFn => ngzone.run(continueFn))`.\n *\n * This operator is similar to RxJS's `observeOn` operator, but instead of a scheduler, it accepts an executor. An executor is a function to\n * create an execution context in which downstream operators are then executed. The function is called with a single argument, a function\n * to continue the execution chain.\n *\n * #### Example showing in which Angular zone operators run:\n * ```\n * // Code running outside Angular\n *\n * interval(1000) // Observable creation outside Angular\n *   .pipe(\n *     tap(() => ...), // outside Angular\n *     tap(() => ...), // outside Angular\n *     observeInside(continueFn => zone.run(continueFn)),\n *     tap(() => ...), // inside Angular\n *   )\n *   .subscribe(); // inside Angular\n * ```\n *\n * @param   executionFn - Function for setting up a context in which to continue the execution chain.\n * @return  An Observable mirroring the source, but running downstream operators in a context.\n */ function $d5bd6ae9534d951f$export$b392cf45da42771d(executionFn) {\n    return (source)=>{\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            const subscription = source.subscribe({\n                next: (next)=>executionFn(()=>observer.next(next)),\n                error: (error)=>executionFn(()=>observer.error(error)),\n                complete: ()=>executionFn(()=>observer.complete())\n            });\n            return ()=>subscription.unsubscribe();\n        });\n    };\n}\n/**\n * Mirrors the source Observable, but uses the given execution context to subscribe/unsubscribe to the source. It further runs all operators of the\n * execution chain (operators above and below the `subscribeInside` operator) as well as subscription handlers (next, error, complete) in the given\n * context.\n *\n * Unlike `observeInside` operator, the `subscribeInside` also acts upstream. By using the {@link observeInside} operator after the\n * {@link subscribeInside}, you can change the execution context for downstream operators.\n *\n * This operator is particularly useful in Angular applications to subscribe to the source inside or outside the Angular zone, as following:\n * `subscribeInside(continueFn => ngzone.run(continueFn))`.\n *\n * This operator is similar to RxJS's `subscribeOn` operator, but instead of a scheduler, it accepts an executor. An executor is a function to\n * create an execution context in which upstream and downstream operators are then executed. The function is called with a single argument,\n * a function to continue the execution chain.\n *\n * #### Example showing in which Angular zone operators run:\n * ```\n * // Code running outside Angular\n *\n * interval(1000) // Observable creation inside Angular\n *   .pipe(\n *     tap(() => ...), // inside Angular\n *     tap(() => ...), // inside Angular\n *     subscribeInside(continueFn => zone.run(continueFn)),\n *     tap(() => ...), // inside Angular\n *   )\n *   .subscribe(); // inside Angular\n * ```\n *\n * @param   executionFn - Function for setting up a context in which to continue the execution chain.\n * @return  An Observable mirroring the source, but running upstream and downstream operators in a context.\n */ function $d5bd6ae9534d951f$export$43119cf92799032b(executionFn) {\n    return (source)=>{\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            let subscription;\n            executionFn(()=>{\n                subscription = source.subscribe(new class extends (0, $144251abd0e070aa$export$60959659b2c22881) {\n                    constructor(){\n                        super(observer);\n                    }\n                    _next(value) {\n                        executionFn(()=>super._next(value));\n                    }\n                    _error(err) {\n                        executionFn(()=>super._error(err));\n                    }\n                    _complete() {\n                        executionFn(()=>super._complete());\n                    }\n                    unsubscribe() {\n                        executionFn(()=>this.closed ? (0, $a2669f8c8173c8d3$export$8793edee2d425525)() : super.unsubscribe());\n                    }\n                });\n            });\n            return ()=>{\n                executionFn(()=>subscription?.unsubscribe());\n            };\n        });\n    };\n}\n\n\n\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows observing the dimension of an element. Upon subscription, it emits the element's dimension, and then continuously\n * emits when the dimension of the element changes. It never completes.\n *\n * The Observable uses the native `ResizeObserver` to detect size changes of the passed element.\n *\n * @param  target - HTMLElement to observe its dimension.\n * @return Observable that emits dimension changes of the passed element.\n */ function $844621b1ac064085$export$e17d0a8e529bc2ca(target) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n        const resizeObserver = new ResizeObserver(()=>observer.next($844621b1ac064085$export$531bc876f121e23a(target)));\n        resizeObserver.observe(target); // emits the current dimension directly upon subscription\n        return ()=>{\n            resizeObserver.disconnect();\n        };\n    });\n}\n/**\n * Captures the dimension of the given element.\n */ function $844621b1ac064085$export$531bc876f121e23a(element) {\n    return {\n        clientWidth: element.clientWidth,\n        offsetWidth: element.offsetWidth,\n        clientHeight: element.clientHeight,\n        offsetHeight: element.offsetHeight,\n        element: element\n    };\n}\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows watching for changes being made to the DOM tree of an HTML element. It never completes.\n *\n * Wraps a {MutationObserver} in an Observable to watch for changes being made to the DOM tree.\n * See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver for more information.\n *\n * @param target - HTMLElement to observe.\n * @param options - describes the configuration of a mutation observer\n *        See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit\n */ function $844621b1ac064085$export$e027a46ec7e152e7(target, options) {\n    return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n        const mutationObserver = new MutationObserver((mutations)=>observer.next(mutations));\n        mutationObserver.observe(target, options);\n        return ()=>{\n            mutationObserver.disconnect();\n        };\n    });\n}\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows observing an element's bounding box, providing information about the element's size and position relative to the\n * browser viewport. Refer to https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect for more information.\n *\n * Upon subscription, the Observable emits the element's current bounding box, and then continuously emits when its\n * bounding box changes, e.g., due to a change in the layout. The Observable never completes.\n *\n * ***\n * If you are only interested in element size changes and not position changes, consider using the {@link fromDimension$} Observable\n * as it is more efficient because natively supported by the browser.\n * ***\n *\n * ### Note on the detection of position changes:\n *\n * There is, unfortunately, no native browser API to detect position changes of an element in a performant and reliable way.\n * Our approach to detecting position changes of an element is based on the premise that it usually involves a parent or a parent's\n * direct child changing in size. Repositioning can further occur when the user scrolls a parent container or when elements are added\n * to or removed from the DOM. This covers most cases, but not all.\n *\n * We are aware that this approach can be quite expensive, mainly because potentially a large number of elements need to be monitored\n * for resizing/scrolling. Therefore, use this Observable only if you need to be informed about position changes. For pure dimension\n * changes use the {@link fromDimension$} Observable instead.\n *\n * @see fromDimension$\n */ function $844621b1ac064085$export$6716176e0c7941a4(element) {\n    return $844621b1ac064085$export$e027a46ec7e152e7(document.body, {\n        childList: true,\n        subtree: true\n    }).pipe((0, $369a1beddcfddd56$export$a4fe86229b0e9bdd)(undefined), (0, $a344549688aae3fd$export$871de8747c9eaa88)(()=>$844621b1ac064085$var$collectElements(element)), $844621b1ac064085$var$detectLayoutChange(), (0, $a344549688aae3fd$export$871de8747c9eaa88)(()=>$844621b1ac064085$var$captureClientRect(element)), (0, $419c2da03c3ac473$export$779c5fb865a0172e)((a, b)=>a.left === b.left && a.top === b.top && a.width === b.width && a.height === b.height));\n}\n/**\n * Collects elements that can affect the given element's size and position.\n */ function $844621b1ac064085$var$collectElements(element) {\n    const elements = [];\n    for(let el = element.parentElement; el !== null; el = el.parentElement)elements.push(...Array.from(el.children).filter((child)=>child instanceof HTMLElement));\n    return elements;\n}\n/**\n * Emits whenever one of the source elements changes in size or scrolls.\n */ function $844621b1ac064085$var$detectLayoutChange() {\n    return (0, $105ed219d50c6c26$export$a4627e546088548d)((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((elements)=>(0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(...elements.map((element)=>(0, $30ffe4e7b3d62072$export$4950aa0f605343fb)($844621b1ac064085$export$e17d0a8e529bc2ca(element), (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(element, \"scroll\", {\n                passive: true\n            }))))), (0, $a344549688aae3fd$export$871de8747c9eaa88)(()=>undefined), // Debounce to a single emission as a layout change can cause multiple elements to change.\n    (0, $cfad638bbde2c674$export$719c70722b10e5ff)(25));\n}\nfunction $844621b1ac064085$var$captureClientRect(element) {\n    return element.getBoundingClientRect();\n}\n\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Lifecycle states of the microfrontend platform.\n *\n * @category Platform\n */ var $146947066e10b00e$export$f677ff3cbab00a1f;\n(function(PlatformState) {\n    /**\n     * Indicates that the platform is about to start.\n     */ PlatformState[PlatformState[\"Starting\"] = 1] = \"Starting\";\n    /**\n     * Indicates that the platform started.\n     */ PlatformState[PlatformState[\"Started\"] = 2] = \"Started\";\n    /**\n     * Indicates that the platform is about to stop.\n     */ PlatformState[PlatformState[\"Stopping\"] = 3] = \"Stopping\";\n    /**\n     * Indicates that the platform is not yet started.\n     */ PlatformState[PlatformState[\"Stopped\"] = 4] = \"Stopped\";\n})($146947066e10b00e$export$f677ff3cbab00a1f || ($146947066e10b00e$export$f677ff3cbab00a1f = {}));\n/**\n * Runlevels are used to control in which startup phase to execute initializers when starting the platform.\n *\n * The platform reports that it has started after all initializers have completed successfully.\n *\n * @internal\n */ var $146947066e10b00e$export$63daa6aa86ffb707;\n(function(Runlevel) {\n    /**\n     * In runlevel 0, the platform host fetches manifests of registered micro applications.\n     */ Runlevel[Runlevel[\"Zero\"] = 0] = \"Zero\";\n    /**\n     * In runlevel 1, the platform constructs eager beans.\n     */ Runlevel[Runlevel[\"One\"] = 1] = \"One\";\n    /**\n     * From runlevel 2 and above, messaging is enabled. This is the default runlevel at which initializers execute if not specifying any runlevel.\n     */ Runlevel[Runlevel[\"Two\"] = 2] = \"Two\";\n    /**\n     * In runlevel 3, the platform host installs activator microfrontends.\n     */ Runlevel[Runlevel[\"Three\"] = 3] = \"Three\";\n})($146947066e10b00e$export$63daa6aa86ffb707 || ($146947066e10b00e$export$63daa6aa86ffb707 = {}));\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Built in capability types.\n *\n * @category Intention API\n */ var $146947066e10b00e$export$36e3ecc814ff657b;\n(function(PlatformCapabilityTypes) {\n    /**\n     * Type for registering an activator capability.\n     *\n     * @see ActivatorCapability\n     */ PlatformCapabilityTypes[\"Activator\"] = \"activator\";\n    /**\n     * Type for registering a microfrontend capability.\n     *\n     * @see MicrofrontendCapability\n     */ PlatformCapabilityTypes[\"Microfrontend\"] = \"microfrontend\";\n})($146947066e10b00e$export$36e3ecc814ff657b || ($146947066e10b00e$export$36e3ecc814ff657b = {}));\n/**\n * Symbol to determine if this app instance is running as the platform host.\n *\n * ```ts\n * const isPlatformHost: boolean = Beans.get(IS_PLATFORM_HOST);\n * ```\n *\n * @category Platform\n */ const $146947066e10b00e$export$abac07b0d121aae2 = Symbol(\"IS_PLATFORM_HOST\");\n/**\n * Symbol to get the application's symbolic name from the bean manager.\n *\n * @category Platform\n */ const $146947066e10b00e$export$a11aa4b1ad6eec09 = Symbol(\"APP_IDENTITY\");\n/**\n * Key for obtaining the current activation context using {@link ContextService}.\n *\n * The activation context is only available to microfrontends loaded by an activator.\n *\n * @see {@link ActivationContext}\n * @see {@link ContextService}\n * @category Platform\n */ const $146947066e10b00e$export$3200a3edec649cbd = \"\\u0275ACTIVATION_CONTEXT\";\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Symbol to get the version of the SCION Microfrontend Platform.\n *\n * @internal\n */ const $146947066e10b00e$var$\\u0275VERSION = Symbol(\"\\u0275VERSION\");\n/**\n * Symbol to get the topmost window in the window hierarchy from the bean manager.\n *\n * Alias for `window.top` that can be overridden in tests, e.g., to simulate\n * the client to connect to a remote host.\n *\n * @internal\n */ const $146947066e10b00e$var$\\u0275WINDOW_TOP = Symbol(\"\\u0275WINDOW_TOP\");\n/**\n * Stops the platform and disconnects this client from the host when the browser unloads the document.\n *\n * By default, the platform initiates shutdown when the browser unloads the document, i.e., when `beforeunload` is triggered.\n * The main reason for `beforeunload` instead of `unload` is to avoid posting messages to disposed windows.\n * However, if `beforeunload` is not triggered, e.g., when an iframe is removed, we fall back to `unload`.\n *\n * @category Platform\n */ class $146947066e10b00e$export$61c6825dcf81208b {\n}\n/**\n * @internal\n */ class $146947066e10b00e$export$33b9eb3dc0ea6d8 {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        (0, $886ab650a4e672e5$export$236c05de452bec2)((0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"beforeunload\"), (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"unload\")).pipe((0, $c7828fe634a19a01$export$b7df5d561049483a)(1), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe(()=>{\n            $146947066e10b00e$export$5cce370cfaa52f9e.destroy();\n        });\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Logger used by the platform to log to the console.\n *\n * Replace this bean to capture the log output.\n *\n * @category Platform\n */ class $146947066e10b00e$export$efa9a398d6368992 {\n}\n/**\n * Logger used by the platform to log to the console.\n *\n * Replace this bean to capture the log output.\n *\n * @internal\n */ class $146947066e10b00e$export$ba6a9c7ac8291f7f {\n    debug(message, ...args) {\n        this.log(\"debug\", message, args);\n    }\n    info(message, ...args) {\n        this.log(\"info\", message, args);\n    }\n    warn(message, ...args) {\n        this.log(\"warn\", message, args);\n    }\n    error(message, ...args) {\n        this.log(\"error\", message, args);\n    }\n    log(severity, message, args) {\n        const loggingContext = args[0] instanceof $146947066e10b00e$export$cfece0898859977d ? args.shift() : {\n            appSymbolicName: (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a11aa4b1ad6eec09),\n            version: (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$\\u0275VERSION)\n        };\n        const prefix = new Array().concat(loggingContext.version ? `[@scion/microfrontend-platform@${loggingContext.version}]` : \"[@scion/microfrontend-platform]\").concat(`[${loggingContext.appSymbolicName}]`).join(\"\");\n        if (console && typeof console[severity] === \"function\") {\n            const consoleFn = console[severity];\n            args?.length ? consoleFn(`${prefix} ${message}`, ...args) : consoleFn(`${prefix} ${message}`);\n        }\n    }\n}\n/**\n * Logger that does nothing.\n *\n * @internal\n */ const $146947066e10b00e$export$1643d64233a33b47 = new class extends $146947066e10b00e$export$efa9a398d6368992 {\n    debug(message, ...args) {\n    // NOOP\n    }\n    info(message, ...args) {\n    // NOOP\n    }\n    warn(message, ...args) {\n    // NOOP\n    }\n    error(message, ...args) {\n    // NOOP\n    }\n};\n/**\n * Contextual information to add to the log message.\n *\n * Pass an instance of this class as the first argument to the logger when logging a message.\n *\n * @internal\n */ class $146947066e10b00e$export$cfece0898859977d {\n    constructor(appSymbolicName, version){\n        this.appSymbolicName = appSymbolicName;\n        this.version = version;\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Current version of the SCION Microfrontend Platform.\n */ const $146947066e10b00e$var$version = \"1.2.2\";\n/**\n * The central class of the SCION Microfrontend Platform. This class cannot be instantiated. All functionality is provided by static methods.\n *\n * To enable tree-shaking of the SCION Microfrontend Platform, the platform provides three separate entry points:\n * - {@link MicrofrontendPlatformHost} to configure and start the platform in the host\n * - {@link MicrofrontendPlatformClient} to connect to the platform from a microfrontend\n * - {@link MicrofrontendPlatform} to react to platform lifecycle events and stop the platform\n *\n * ## SCION Microfrontend Platform\n *\n * SCION Microfrontend Platform is a TypeScript-based open source library that enables the implementation of a framework-agnostic\n * microfrontend architecture using iframes. It provides fundamental APIs for microfrontends to communicate with each other across origins\n * and facilitates embedding microfrontends using a web component and a router. SCION Microfrontend Platform is a lightweight, web stack\n * agnostic library that has no user-facing components and does not dictate any form of application structure.\n *\n * You can continue using the frameworks you love since the platform integrates microfrontends via iframes. Iframes by nature provide\n * maximum isolation and allow the integration of any web application without complex adaptation. The platform aims to shield developers\n * from iframe specifics and the low-level messaging mechanism to focus instead on integrating microfrontends.\n *\n * #### Cross-microfrontend communication\n * The platform adds a pub/sub layer on top of the native `postMessage` mechanism to enable microfrontends to communicate with each other\n * easily across origins. Communication comes in two flavors: topic-based and intent-based. Both models feature request-response message\n * exchange, support retained messages for late subscribers to receive the latest messages, and provide API to intercept messages to\n * implement cross-cutting messaging concerns.\n *\n * Topic-based messaging enables you to publish messages to multiple subscribers via a common topic. Intent-based communication focuses on\n * controlled collaboration between applications. To collaborate, an application must express an intention. Manifesting intentions enables\n * us to see dependencies between applications down to the functional level.\n *\n * #### Microfrontend Integration and Routing\n * The platform makes it easy to integrate microfrontends through its router-outlet. The router-outlet is a web component that wraps an iframe.\n * It solves many of the cumbersome quirks of iframes and helps to overcome iframe restrictions. For example, it can adapt its size to the\n * preferred size of embedded content, supports keyboard event propagation and lets you pass contextual data to embedded content.\n * Using the router, you control which web content to display in an outlet. Multiple outlets can display different content, determined by\n * different outlet names, all at the same time. Routing works across application boundaries and enables features such as persistent navigation.\n *\n * ***\n *\n * A microfrontend architecture can be achieved in many ways, each with its pros and cons. The SCION Microfrontend Platform uses\n * the iframe approach primarily since iframes by nature provide the highest possible level of isolation through a separate browsing context.\n * The microfrontend design approach is very tempting and has obvious advantages, especially for large-scale and long-lasting projects, most\n * notably because we are observing an enormous dynamic in web frameworks. The SCION Microfrontend Platform provides you with the necessary\n * tools to best support you in implementing such an architecture.\n *\n * @see {@link MicrofrontendPlatformHost}\n * @see {@link MicrofrontendPlatformClient}\n *\n * @see {@link MessageClient}\n * @see {@link IntentClient}\n * @see {@link SciRouterOutletElement}\n * @see {@link OutletRouter}\n * @see {@link ContextService}\n * @see {@link PreferredSizeService}\n * @see {@link ManifestService}\n * @see {@link FocusMonitor}\n * @see {@link ActivatorCapability}\n *\n * @category Platform\n * @category Lifecycle\n */ class $146947066e10b00e$export$5cce370cfaa52f9e {\n    static{\n        this._state$ = new (0, $30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b)($146947066e10b00e$export$f677ff3cbab00a1f.Stopped);\n    }\n    constructor(){}\n    /**\n     * @internal\n     */ static async startPlatform(startupFn) {\n        if (this.state === $146947066e10b00e$export$f677ff3cbab00a1f.Started) return Promise.reject(Error(\"[MicrofrontendPlatformStartupError] Platform already started\"));\n        try {\n            startupFn?.();\n            await this.enterState($146947066e10b00e$export$f677ff3cbab00a1f.Starting);\n            await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).start({\n                eagerBeanConstructRunlevel: $146947066e10b00e$export$63daa6aa86ffb707.One,\n                initializerDefaultRunlevel: $146947066e10b00e$export$63daa6aa86ffb707.Two\n            });\n            await this.enterState($146947066e10b00e$export$f677ff3cbab00a1f.Started);\n            return Promise.resolve();\n        } catch (error) {\n            await this.destroy();\n            return Promise.reject(Error(`[MicrofrontendPlatformStartupError] Microfrontend platform failed to start: ${error}`));\n        }\n    }\n    /**\n     * Destroys this platform and releases resources allocated.\n     *\n     * @return a Promise that resolves once the platformed stopped.\n     */ static async destroy() {\n        await this.enterState($146947066e10b00e$export$f677ff3cbab00a1f.Stopping);\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).destroy();\n        await this.enterState($146947066e10b00e$export$f677ff3cbab00a1f.Stopped);\n    }\n    /**\n     * @return the current platform state.\n     */ static get state() {\n        return this._state$.getValue();\n    }\n    /**\n     * Observable that, when subscribed, emits the current platform lifecycle state.\n     * It never completes and emits continuously when the platform enters\n     * another state.\n     */ static get state$() {\n        return this._state$;\n    }\n    /**\n     * Waits for the platform to enter the specified {@link PlatformState}.\n     * If already in that state, the Promise resolves instantly.\n     *\n     * @param  state - the state to wait for.\n     * @return A Promise that resolves when the platform enters the given state.\n     *         If already in that state, the Promise resolves instantly.\n     */ static async whenState(state) {\n        return new Promise((resolve, reject)=>{\n            this._state$.pipe((0, $cbe8268c6277296f$export$43128fadae87b74a)((it)=>it === state)).subscribe({\n                error: reject,\n                complete: resolve\n            });\n        });\n    }\n    static async enterState(newState) {\n        const currentState = this.state === $146947066e10b00e$export$f677ff3cbab00a1f.Stopped ? -1 : this.state;\n        if (currentState >= newState) throw Error(`[PlatformStateError] Failed to enter platform state [prevState=${$146947066e10b00e$export$f677ff3cbab00a1f[this.state]}, newState=${$146947066e10b00e$export$f677ff3cbab00a1f[newState]}].`);\n        this._state$.next(newState);\n        // Let microtasks waiting for entering that state to resolve first.\n        await this.whenState(newState);\n    }\n}\n/**\n * @internal\n */ function $146947066e10b00e$export$1b673bb034e791a0(config) {\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$abac07b0d121aae2, {\n        useValue: config.isPlatformHost\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$a11aa4b1ad6eec09, {\n        useValue: config.symbolicName\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$var$\\u0275WINDOW_TOP, {\n        useValue: window.top\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$var$\\u0275VERSION, {\n        useValue: $146947066e10b00e$var$version,\n        destroyOrder: $146947066e10b00e$export$23337cc73d20200.CORE\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$export$61c6825dcf81208b, {\n        useClass: $146947066e10b00e$export$33b9eb3dc0ea6d8,\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$export$efa9a398d6368992, {\n        useClass: $146947066e10b00e$export$ba6a9c7ac8291f7f,\n        destroyOrder: $146947066e10b00e$export$23337cc73d20200.CORE\n    });\n}\n/**\n * Specifies destroy orders of platform-specific beans, enabling controlled termination of the platform.\n *\n * @internal\n */ var $146947066e10b00e$export$23337cc73d20200;\n(function(BeanDestroyOrders) {\n    /**\n     * Use for core platform beans which should be destroyed as the very last beans.\n     */ BeanDestroyOrders[BeanDestroyOrders[\"CORE\"] = Number.MAX_SAFE_INTEGER] = \"CORE\";\n    /**\n     * Use for the {@link MessageBroker}.\n     */ BeanDestroyOrders[BeanDestroyOrders[\"BROKER\"] = BeanDestroyOrders.CORE - 1] = \"BROKER\";\n    /**\n     * Use for messaging-related beans.\n     */ BeanDestroyOrders[BeanDestroyOrders[\"MESSAGING\"] = BeanDestroyOrders.BROKER - 1] = \"MESSAGING\";\n})($146947066e10b00e$export$23337cc73d20200 || ($146947066e10b00e$export$23337cc73d20200 = {}));\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Configures the platform and defines the micro applications running in the platform.\n *\n * @category Platform\n */ class $146947066e10b00e$export$2eb36f74b177828a {\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Hook to intercept the host manifest before it is registered in the platform.\n *\n * If integrating the platform in a library, you may need to intercept the manifest of the host in order to introduce library-specific behavior.\n *\n * You can register the interceptor in the bean manager, as follows:\n *\n * ```ts\n * Beans.register(HostManifestInterceptor, {useClass: YourInterceptor, multi: true});\n * ```\n *\n * The interceptor may look as following:\n * ```ts\n *  class YourInterceptor implements HostManifestInterceptor {\n *\n *   public intercept(hostManifest: Manifest): void {\n *     hostManifest.intentions = [\n *       ...hostManifest.intentions || [],\n *       provideMicrofrontendIntention(),\n *     ];\n *     hostManifest.capabilities = [\n *       ...hostManifest.capabilities || [],\n *       provideMessageBoxCapability(),\n *     ];\n *   }\n * }\n *\n * function provideMicrofrontendIntention(): Intention {\n *    return {\n *      type: 'microfrontend',\n *      qualifier: {'*': '*'},\n *    };\n *  }\n *\n * function provideMessageBoxCapability(): Capability {\n *    return {\n *      type: 'messagebox',\n *      qualifier: {},\n *      private: false,\n *      description: 'Allows displaying a simple message to the user.',\n *    };\n *  }\n *\n * ```\n *\n * @category Platform\n * @category Intention API\n */ class $146947066e10b00e$export$3af33b08f01f58a3 {\n}\n/**\n * Intercepts the host manifest, registering platform-specific intentions and capabilities.\n *\n * @internal\n */ class $146947066e10b00e$export$6b8e491f5c8f1d29 {\n    intercept(hostManifest) {\n        hostManifest.intentions = [\n            ...hostManifest.intentions || [],\n            ...$146947066e10b00e$var$provideActivatorIntentionIfEnabled()\n        ];\n    }\n}\n/**\n * Provides a wildcard activator intention for the platform to read activator capabilities for installing activator microfrontends.\n */ function $146947066e10b00e$var$provideActivatorIntentionIfEnabled() {\n    const activatorApiDisabled = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$2eb36f74b177828a).activatorApiDisabled ?? false;\n    if (activatorApiDisabled) return [];\n    return [\n        {\n            type: $146947066e10b00e$export$36e3ecc814ff657b.Activator,\n            qualifier: {\n                \"*\": \"*\"\n            }\n        }\n    ];\n}\n/**\n * Central point for managing client registrations.\n *\n * @internal\n */ class $146947066e10b00e$var$ClientRegistry {\n}\n/**\n * Message client for sending and receiving messages between microfrontends across origins.\n *\n * This client implements the topic-based pub/sub (publish/subscribe) messaging model, allowing for one message to be delivered to\n * multiple subscribers using topic addressing.\n *\n * The communication is built on top of the native `postMessage` mechanism. The host app acts as message broker.\n *\n * ### Topic Addressing\n * A publisher publishes a message to a topic, which then is transported to consumers subscribed to the topic. Topics are case-sensitive\n * and consist of one or more segments, each separated by a forward slash. When publishing a message to a topic, the topic must be exact,\n * thus not contain wildcards. Messages published to a topic are transported to all consumers subscribed to the topic. Consumers, on the\n * other hand, can subscribe to multiple topics simultaneously by using wildcard segments in the topic.\n *\n * ### Retained Message\n * You can mark a message as \"retained\" for helping newly subscribed clients to get the last message published to a topic immediately upon\n * subscription. The broker stores one retained message per topic, i.e., a later sent retained message will replace a previously sent retained\n * message. To delete a retained message, send a retained message without payload to the topic.\n *\n * ### Retained Request\n * Unlike retained messages, retained requests are not replaced by later retained requests/messages and remain in the broker until the requestor unsubscribes.\n *\n * ### Request-Response Messaging\n * Sometimes it is useful to initiate a request-response communication to wait for a response. Unlike with fire-and-forget messaging, a temporary\n * inbox is created for the sender to receive replies. If there is no consumer subscribed on the topic, the platform throws an error.\n *\n * @see {@link TopicMessage}\n * @see {@link takeUntilUnsubscribe}\n *\n * @category Messaging\n */ class $146947066e10b00e$export$a5b24081a734c6a9 {\n}\n/**\n * Returns an Observable that mirrors the source Observable as long as there is at least one subscriber subscribed to the\n * given topic. When the subscription count on the given topic drops to zero, the returned Observable completes. If there\n * is no topic subscription present at the time when subscribing to the Observable, then it completes immediately.\n *\n * This operator is similar to the RxJS {@link rxjs!takeUntil takeUntil} operator, but accepts a topic instead of a notifier Observable.\n *\n * @category Messaging\n */ function $146947066e10b00e$export$2509be367963fa45(topic) {\n    return (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).subscriberCount$(topic).pipe((0, $cbe8268c6277296f$export$43128fadae87b74a)((count)=>count === 0)));\n}\n/**\n * Declares the message transports.\n *\n * @internal\n */ var $146947066e10b00e$var$MessagingTransport;\n(function(MessagingTransport) {\n    /**\n     * Transport used by clients to communicate with the broker.\n     */ MessagingTransport[\"ClientToBroker\"] = \"sci://microfrontend-platform/client-to-broker\";\n    /**\n     * Transport used by the broker to communicate with its clients.\n     */ MessagingTransport[\"BrokerToClient\"] = \"sci://microfrontend-platform/broker-to-client\";\n    /**\n     * Transport used by a microfrontend to communicate with its embedding outlet.\n     */ MessagingTransport[\"MicrofrontendToOutlet\"] = \"sci://microfrontend-platform/microfrontend-to-outlet\";\n})($146947066e10b00e$var$MessagingTransport || ($146947066e10b00e$var$MessagingTransport = {}));\n/**\n * Defines the channels to which messages can be sent.\n *\n * @internal\n */ var $146947066e10b00e$var$MessagingChannel;\n(function(MessagingChannel) {\n    /**\n     * Channel for clients to subscribe to a topic destination.\n     */ MessagingChannel[\"TopicSubscribe\"] = \"topic-subscribe\";\n    /**\n     * Channel for clients to unsubscribe from a topic destination.\n     */ MessagingChannel[\"TopicUnsubscribe\"] = \"topic-unsubscribe\";\n    /**\n     * Channel for clients to subscribe to intents.\n     */ MessagingChannel[\"IntentSubscribe\"] = \"intent-subscribe\";\n    /**\n     * Channel for clients to unsubscribe from intents.\n     */ MessagingChannel[\"IntentUnsubscribe\"] = \"intent-unsubscribe\";\n    /**\n     * Channel for the host to transport topic message to subscribed clients.\n     */ MessagingChannel[\"Topic\"] = \"topic\";\n    /**\n     * Channel for the host to transport intent messages to subscribed clients.\n     */ MessagingChannel[\"Intent\"] = \"intent\";\n    /**\n     * Channel for clients to send a connect request.\n     */ MessagingChannel[\"ClientConnect\"] = \"client-connect\";\n    /**\n     * Channel for clients to send a disconnect request.\n     */ MessagingChannel[\"ClientDisconnect\"] = \"client-disconnect\";\n})($146947066e10b00e$var$MessagingChannel || ($146947066e10b00e$var$MessagingChannel = {}));\n/**\n * Declares internal platform topics.\n *\n * @internal\n */ var $146947066e10b00e$var$PlatformTopics;\n(function(PlatformTopics) {\n    /**\n     * Topic to request the subscription count on a topic.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link string}\n     * Response Type: {@link number}\n     */ PlatformTopics.RequestSubscriberCount = \"\\u0275REQUEST_SUBSCRIBER_COUNT\";\n    /**\n     * Topic to signal when gained the focus.\n     *\n     * Messaging Pattern: Publish-Subscribe\n     * Payload: {@link void}\n     */ PlatformTopics.FocusIn = \"\\u0275FOCUS_IN\";\n    /**\n     * Topic to request whether the requesting client (or a microfrontend embedded in the client) has gained focus.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link void}\n     * Response Type: {@link boolean}\n     */ PlatformTopics.IsFocusWithin = \"\\u0275IS_FOCUS_WITHIN\";\n    /**\n     * Topic to request whether the requesting client has gained focus.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link void}\n     * Response Type: {@link boolean}\n     */ PlatformTopics.HasFocus = \"\\u0275HAS_FOCUS\";\n    /**\n     * Topic to read platform properties.\n     *\n     * Messaging Pattern: Publish-Subscribe\n     * Payload: {@link Record}\n     */ PlatformTopics.PlatformProperties = \"\\u0275PLATFORM_PROPERTIES\";\n    /**\n     * Topic to read platform registered applications.\n     *\n     * Messaging Pattern: Publish-Subscribe\n     * Payload: {@link ɵApplication}\n     */ PlatformTopics.Applications = \"\\u0275APPLICATIONS\";\n    /**\n     * Topic to request capabilities.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ManifestObjectFilter}\n     * Response Type: {@link Array<Capability>}\n     */ PlatformTopics.LookupCapabilities = \"\\u0275LOOKUP_CAPABILITIES\";\n    /**\n     * Topic to request intentions.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ManifestObjectFilter}\n     * Response Type: {@link Array<Intention>}\n     */ PlatformTopics.LookupIntentions = \"\\u0275LOOKUP_INTENTIONS\";\n    /**\n     * Topic to register a capability.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link Capability}\n     * Response Type: {@link string}\n     */ PlatformTopics.RegisterCapability = \"\\u0275REGISTER_CAPABILITY\";\n    /**\n     * Topic to unregister a capability.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ManifestObjectFilter}\n     * Response Type: {@link void}\n     */ PlatformTopics.UnregisterCapabilities = \"\\u0275UNREGISTER_CAPABILITIES\";\n    /**\n     * Topic to register an intentions.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link Intention}\n     * Response Type: {@link string}\n     */ PlatformTopics.RegisterIntention = \"\\u0275REGISTER_INTENTION\";\n    /**\n     * Topic to unregister an intention.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ManifestObjectFilter}\n     * Response Type: {@link void}\n     */ PlatformTopics.UnregisterIntentions = \"\\u0275UNREGISTER_INTENTIONS\";\n    /**\n     * Topic to check if application is qualified for the capability.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ApplicationQualifiedForCapabilityRequest}\n     * Response Type: {@link boolean}\n     */ PlatformTopics.IsApplicationQualifiedForCapability = \"\\u0275IS_APPLICATION_QUALIFIED_FOR_CAPABILITY\";\n    /**\n     * Topic to request the platform version of a specific application.\n     */ function platformVersion(appSymbolicName) {\n        return `\\u{275}application/${appSymbolicName}/platform/version`;\n    }\n    PlatformTopics.platformVersion = platformVersion;\n    /**\n     * Topic to ping a client for liveness.\n     */ function ping(clientId) {\n        return `\\u{275}client/${clientId}/ping`;\n    }\n    PlatformTopics.ping = ping;\n})($146947066e10b00e$var$PlatformTopics || ($146947066e10b00e$var$PlatformTopics = {}));\n/**\n * Declares headers set by the platform when sending a message.\n *\n * Clients are allowed to read platform-defined headers from a message.\n *\n * @category Messaging\n */ var $146947066e10b00e$export$b23af55470b7f1e1;\n(function(MessageHeaders) {\n    /**\n     * Identifies the sending client instance of a message.\n     * This header is set by the platform when publishing a message or intent.\n     */ MessageHeaders[\"ClientId\"] = \"\\u0275CLIENT_ID\";\n    /**\n     * Identifies the sending application of a message.\n     * This header is set by the platform when publishing a message or intent.\n     */ MessageHeaders[\"AppSymbolicName\"] = \"\\u0275APP_SYMBOLIC_NAME\";\n    /**\n     * Unique identity of the message.\n     * This header is set by the platform when publishing a message or intent.\n     */ MessageHeaders[\"MessageId\"] = \"\\u0275MESSAGE_ID\";\n    /**\n     * Destination to which to send a response to this message.\n     * This header is set by the platform when sending a request.\n     */ MessageHeaders[\"ReplyTo\"] = \"\\u0275REPLY_TO\";\n    /**\n     * The time the message was sent.\n     * This header is set by the platform when publishing a message or intent.\n     */ MessageHeaders[\"Timestamp\"] = \"\\u0275TIMESTAMP\";\n    /**\n     * The version of the client.\n     */ MessageHeaders[\"Version\"] = \"\\u0275VERSION\";\n    /**\n     * Use this header to set the request method to indicate the desired action to be performed for a given resource.\n     * @see RequestMethods\n     */ MessageHeaders[\"Method\"] = \"\\u0275METHOD\";\n    /**\n     * Use this header to set the response status code to indicate whether a request has been successfully completed.\n     * See {@link ResponseStatusCodes} for available status codes. Other codes are also allowed.\n     *\n     * Status codes are primarily used in request-reply communication. In request-response communication, by default,\n     * the requestor’s Observable never completes. However, the replier can include the response status code in the reply’s\n     * headers, allowing to control the lifecycle of the requestor’s Observable.\n     *\n     * For example, the status code {@link ResponseStatusCodes.TERMINAL 250} allows completing the requestor’s Observable\n     * after emitted the reply, or the status code {@link ResponseStatusCodes.ERROR 500} to error the Observable.\n     *\n     * Note that the platform evaluates status codes only in request-response communication. They are ignored when observing\n     * topics or intents in pub/sub communication but can still be used; however, they must be handled by the application,\n     * e.g., by using the {@link throwOnErrorStatus} SCION RxJS operator.\n     *\n     * @see ResponseStatusCodes\n     */ MessageHeaders[\"Status\"] = \"\\u0275STATUS\";\n    /**\n     * Unique identity of a message or intent subscriber.\n     *\n     * @internal\n     */ MessageHeaders[\"\\u0275SubscriberId\"] = \"\\u0275SUBSCRIBER_ID\";\n})($146947066e10b00e$export$b23af55470b7f1e1 || ($146947066e10b00e$export$b23af55470b7f1e1 = {}));\n/**\n * Defines a set of request methods to indicate the desired action to be performed for a given resource.\n *\n * @category Messaging\n */ var $146947066e10b00e$export$846c248a91ff93f7;\n(function(RequestMethods) {\n    /**\n     * The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.\n     */ RequestMethods[\"GET\"] = \"GET\";\n    /**\n     * The DELETE method deletes the specified resource.\n     */ RequestMethods[\"DELETE\"] = \"DELETE\";\n    /**\n     * The PUT method replaces all current representations of the target resource with the request payload.\n     */ RequestMethods[\"PUT\"] = \"PUT\";\n    /**\n     * The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.\n     */ RequestMethods[\"POST\"] = \"POST\";\n    /**\n     * The OBSERVE method is used to observe the specified resource.\n     */ RequestMethods[\"OBSERVE\"] = \"OBSERVE\";\n})($146947066e10b00e$export$846c248a91ff93f7 || ($146947066e10b00e$export$846c248a91ff93f7 = {}));\n/**\n * Defines a set of response status codes to indicate whether a request has been successfully completed.\n *\n * @see throwOnErrorStatus\n * @see MessageClient.request$\n * @see IntentClient.request$\n *\n * @category Messaging\n */ var $146947066e10b00e$export$a499daaa5fe026d2;\n(function(ResponseStatusCodes) {\n    /**\n     * The request has succeeded.\n     */ ResponseStatusCodes[ResponseStatusCodes[\"OK\"] = 200] = \"OK\";\n    /**\n     * The request has succeeded. No further response to be expected.\n     *\n     * In request-reply communication, setting this status code will complete the requestor's Observable\n     * after emitted the reply. The reply is only emitted if not `undefined`.\n     */ ResponseStatusCodes[ResponseStatusCodes[\"TERMINAL\"] = 250] = \"TERMINAL\";\n    /**\n     * The receiver could not understand the request due to invalid syntax.\n     *\n     * In request-reply communication, setting this status code will error the requestor's Observable.\n     */ ResponseStatusCodes[ResponseStatusCodes[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\n    /**\n     * The receiver could not find the requested resource.\n     *\n     * In request-reply communication, setting this status code will error the requestor's Observable.\n     */ ResponseStatusCodes[ResponseStatusCodes[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\n    /**\n     * The receiver encountered an internal error. Optionally, set the error as message payload.\n     *\n     * In request-reply communication, setting this status code will error the requestor's Observable.\n     */ ResponseStatusCodes[ResponseStatusCodes[\"ERROR\"] = 500] = \"ERROR\";\n})($146947066e10b00e$export$a499daaa5fe026d2 || ($146947066e10b00e$export$a499daaa5fe026d2 = {}));\n/**\n * Returns an Observable that mirrors the source Observable unless receiving a message with\n * a response status code greater than or equal to 400. Then, the stream will end with an\n * {@link RequestError error} and the source Observable unsubscribed.\n *\n * When receiving a message with the response status code {@link ResponseStatusCodes.TERMINAL},\n * the Observable emits this message and completes.\n *\n * If a message does not include a response status code, the message is emitted as is.\n *\n * Note that this operator is installed in {@link MessageClient.request$} and {@link IntentClient.request$}.\n *\n * @category Messaging\n */ function $146947066e10b00e$export$c3e6bb28c793a982() {\n    return (0, $105ed219d50c6c26$export$a4627e546088548d)((0, $8657d55690de2a98$export$6b9f6c0d32c093f9)((message)=>{\n        const status = message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.Status) ?? $146947066e10b00e$export$a499daaa5fe026d2.OK;\n        if (status < 400) return (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(message); // 1xx: informational responses, 2xx: successful responses, 4xx: client errors, 5xx: server errors\n        if (typeof message.body === \"string\") {\n            const messageBody = message.body;\n            return (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>new $146947066e10b00e$export$43ee7d0e4f429743(messageBody, status, message));\n        }\n        switch(status){\n            case $146947066e10b00e$export$a499daaa5fe026d2.BAD_REQUEST:\n                return (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>new $146947066e10b00e$export$43ee7d0e4f429743(\"The receiver could not understand the request due to invalid syntax.\", status, message));\n            case $146947066e10b00e$export$a499daaa5fe026d2.NOT_FOUND:\n                return (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>new $146947066e10b00e$export$43ee7d0e4f429743(\"The receiver could not find the requested resource.\", status, message));\n            case $146947066e10b00e$export$a499daaa5fe026d2.ERROR:\n                return (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>new $146947066e10b00e$export$43ee7d0e4f429743(\"The receiver encountered an internal error.\", status, message));\n            default:\n                return (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>new $146947066e10b00e$export$43ee7d0e4f429743(\"Request error.\", status, message));\n        }\n    }), (0, $54e8ed1fe60bf698$export$9384c7afe4015e42)((message)=>{\n        return message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.Status) !== $146947066e10b00e$export$a499daaa5fe026d2.TERMINAL;\n    }, true), (0, $827970c208304071$export$3dea766d36a8935f)((message)=>{\n        const isTerminalMessage = message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.Status) === $146947066e10b00e$export$a499daaa5fe026d2.TERMINAL;\n        return !isTerminalMessage || message.body !== undefined;\n    }));\n}\n/**\n * Maps each message to its body.\n *\n * @category Messaging\n */ function $146947066e10b00e$export$d6978861bb0c00c2() {\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)((message)=>message.body);\n}\n/**\n * Indicates that the request handler responded with an error response.\n *\n * @category Messaging\n */ class $146947066e10b00e$export$43ee7d0e4f429743 extends Error {\n    constructor(error, status, msg){\n        super(error);\n        this.status = status;\n        this.msg = msg;\n        this.name = \"RequestError\";\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides utilities for working with topics.\n *\n * @internal\n */ var $146947066e10b00e$var$Topics;\n(function(Topics) {\n    /**\n     * Tests whether given topic contains wildcard segments.\n     */ function containsWildcardSegments(topic) {\n        return split(topic).some(isWildcardSegment);\n    }\n    Topics.containsWildcardSegments = containsWildcardSegments;\n    /**\n     * Tests whether given topic contains empty segments.\n     */ function containsEmptySegments(topic) {\n        return topic.split(\"/\").some((segment)=>!segment.length);\n    }\n    Topics.containsEmptySegments = containsEmptySegments;\n    /**\n     * Tests whether given segment is a wildcard segment.\n     */ function isWildcardSegment(segment) {\n        return segment.startsWith(\":\") && segment.length > 1;\n    }\n    Topics.isWildcardSegment = isWildcardSegment;\n    /**\n     * Splits given topic into its segments.\n     */ function split(topic) {\n        return topic?.split(\"/\").filter(Boolean) ?? [];\n    }\n    Topics.split = split;\n    /**\n     * Returns unnamed wildcard permutations for given exact topic.\n     * These are 2^n variations, where n is the number of segments.\n     *\n     * Example:\n     * Topic: myhome/kitchen/temperature\n     *\n     * +-----------+-----------+-----------*-+\n     * | Segment 1 | Segment 2 | Segment 3   |\n     * +-----------+-----------+-*-----------+\n     * | myhome    | kitchen   | temperature |\n     * | myhome    | kitchen   | *           |\n     * | myhome    | *         | temperature |\n     * | myhome    | *         | *           |\n     * | *         | kitchen   | temperature |\n     * | *         | kitchen   | *           |\n     * | *         | *         | temperature |\n     * | *         | *         | *           |\n     * +-----------+-----------+-------------+\n     */ function computeWildcardSegmentPermutations(topic, wildcardCharacter) {\n        const segments = typeof topic === \"string\" ? Topics.split(topic) : topic;\n        if (segments.length === 1) return [\n            segments[0],\n            wildcardCharacter\n        ];\n        return computeWildcardSegmentPermutations(segments.slice(1), wildcardCharacter).reduce((permutations, permutation)=>{\n            permutations.push(`${segments[0]}/${permutation}`);\n            permutations.push(`${wildcardCharacter}/${permutation}`);\n            return permutations;\n        }, new Array());\n    }\n    Topics.computeWildcardSegmentPermutations = computeWildcardSegmentPermutations;\n    /**\n     * Replaces named wildcard segments with given replacement.\n     *\n     * Example: \"myhome/:room/temperature\" => \"myhome/REPLACEMENT/temperature\"\n     *\n     */ function replaceWildcardSegments(topic, replacement) {\n        return topic.replace(/:[^/]+/g, replacement);\n    }\n    Topics.replaceWildcardSegments = replaceWildcardSegments;\n    /**\n     * Validates given topic.\n     *\n     * @return `null` if valid, or the `Error` otherwise.\n     */ function validateTopic(topic, options) {\n        if (!topic) return Error(\"[IllegalTopicError] Topic must not be `null`, `undefined` or empty\");\n        if (Topics.containsEmptySegments(topic)) return Error(`[IllegalTopicError] Topic must not contain empty segments [topic='${topic}']`);\n        if (options.exactTopic && Topics.containsWildcardSegments(topic)) return Error(`[IllegalTopicError] Topic must be exact, i.e., not contain wildcard segments [topic='${topic}']`);\n        return null;\n    }\n    Topics.validateTopic = validateTopic;\n})($146947066e10b00e$var$Topics || ($146947066e10b00e$var$Topics = {}));\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows testing whether an exact topic matches a pattern topic. The pattern topic may contain wildcard segments.\n *\n * Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n *\n * @category Messaging\n */ class $146947066e10b00e$export$417f7cd86929f164 {\n    /**\n     * Constructs a matcher that will match given topics against this pattern.\n     *\n     * @param pattern - Pattern to match topics. The pattern is a topic, not a regular expression; thus, it must consist of one or more segments,\n     *                  each separated by a forward slash. The pattern supports wildcard segments beginning with a colon (`:`). Wildcard segments\n     *                  act as a placeholder for any segment value.\n     */ constructor(pattern){\n        this._patternSegments = $146947066e10b00e$var$Topics.split(pattern);\n        if (!this._patternSegments.length) throw Error(\"[TopicMatcherError] Invalid pattern syntax. The pattern must consist of one or more topic segments, each separated by a forward slash.\");\n    }\n    /**\n     * Attempts to match the given topic against the pattern which was passed to the constructor.\n     *\n     * If the match succeeds, then {@link MatcherResult.matches} evaluates to `true`. If the pattern contains wildcard segments,\n     * the matched segments can be read using the property {@link TopicMessage.params} property.\n     *\n     * @param topic - The topic to match against the configured pattern; must be an exact topic, thus not contain wildcard segments.\n     * @return The result of the topic matcher test.\n     */ match(topic) {\n        const inputTopicSegments = $146947066e10b00e$var$Topics.split(topic);\n        const patternSegments = this._patternSegments;\n        if (!inputTopicSegments.length) throw Error(\"[TopicMatcherError] Invalid topic. The topic must consist of one or more segments, each separated by a forward slash.\");\n        if (inputTopicSegments.some($146947066e10b00e$var$Topics.isWildcardSegment)) throw Error(\"[TopicMatcherError] Invalid topic. Wildcard segments not allowed in an exact topic.\");\n        if (patternSegments.length !== inputTopicSegments.length) return {\n            matches: false\n        };\n        if ((0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).isEqual(inputTopicSegments, patternSegments, {\n            exactOrder: true\n        })) return {\n            matches: true,\n            params: new Map()\n        };\n        if (!patternSegments.some($146947066e10b00e$var$Topics.isWildcardSegment)) return {\n            matches: false\n        };\n        if (!patternSegments.every((patternSegment, i)=>patternSegment === inputTopicSegments[i] || $146947066e10b00e$var$Topics.isWildcardSegment(patternSegment))) return {\n            matches: false\n        };\n        return {\n            matches: true,\n            params: patternSegments.reduce((params, segment, i)=>{\n                if ($146947066e10b00e$var$Topics.isWildcardSegment(segment)) return params.set(segment.substring(1), inputTopicSegments[i]);\n                return params;\n            }, new Map())\n        };\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /** @internal */ function $146947066e10b00e$var$filterByTransport(transport) {\n    return (0, $827970c208304071$export$3dea766d36a8935f)((event)=>{\n        const envelope = event.data;\n        return envelope?.transport === transport && !!envelope.channel && !!envelope.message?.headers;\n    });\n}\n/** @internal */ function $146947066e10b00e$var$filterByChannel(...channel) {\n    const channels = new Set((0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).coerce(channel));\n    return (0, $827970c208304071$export$3dea766d36a8935f)((event)=>{\n        return channels.has(event.data.channel);\n    });\n}\n/** @internal */ function $146947066e10b00e$var$filterByTopicChannel(topic) {\n    return (0, $105ed219d50c6c26$export$a4627e546088548d)($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.Topic), (0, $827970c208304071$export$3dea766d36a8935f)((event)=>{\n        const messageTopic = event.data.message.topic;\n        return !!messageTopic && new $146947066e10b00e$export$417f7cd86929f164(topic).match(messageTopic).matches;\n    }));\n}\n/** @internal */ function $146947066e10b00e$var$filterByOrigin(origin) {\n    return (0, $827970c208304071$export$3dea766d36a8935f)((event)=>{\n        return event.origin === origin;\n    });\n}\n/** @internal */ function $146947066e10b00e$var$filterByWindow(window1) {\n    return (0, $827970c208304071$export$3dea766d36a8935f)((event)=>{\n        return event.source === window1;\n    });\n}\n/** @internal */ function $146947066e10b00e$var$pluckMessage() {\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)((messageEvent)=>{\n        return messageEvent.data.message;\n    });\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Runs the given function. Errors are caught and logged.\n *\n * If producing a Promise, returns that Promise, but with a catch handler installed.\n *\n * @internal\n */ function $146947066e10b00e$var$runSafe(runnable) {\n    let result;\n    try {\n        result = runnable();\n    } catch (error) {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).opt($146947066e10b00e$export$efa9a398d6368992)?.error(\"[UnexpectedError] An unexpected error occurred.\", error);\n        return undefined;\n    }\n    if (result instanceof Promise) return result.catch((error)=>{\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).opt($146947066e10b00e$export$efa9a398d6368992)?.error(\"[UnexpectedError] An unexpected error occurred.\", error);\n        return undefined;\n    });\n    return result;\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Returns the error message if given an error object, or the `toString` representation otherwise.\n *\n * @internal\n */ function $146947066e10b00e$var$stringifyError(error) {\n    if (error instanceof Error) return error.message;\n    return `${error}`;\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Enables the decoration of RxJS Observables provided by the SCION Microfrontend Platform to control their emission context.\n *\n * The emission context of an Observables may be different than the subscription context, which can lead to unexpected behavior\n * on the subscriber side. For example, Angular uses zones (Zone.js) to trigger change detection. Angular applications expect\n * an RxJS Observable to emit in the same Angular zone in which subscribed to the Observable. That is, if subscribing inside\n * the Angular zone, emissions are expected to be received inside the Angular zone. Otherwise, the UI may not be updated as\n * expected but delayed until the next change detection cycle. Similarly, if subscribing outside the Angular zone, emissions\n * are expected to be received outside the Angular zone. Otherwise, this would cause unnecessary change detection cycles\n * resulting in potential performance degradation.\n *\n * ### Example for Angular Applications\n *\n * For Angular applications, we reommend installing the following decorator:\n *\n * ```ts\n * import {NgZone} from '@angular/core';\n * import {ObservableDecorator} from '@scion/microfrontend-platform';\n * import {Observable} from 'rxjs';\n * import {observeInside, subscribeInside} from '@scion/toolkit/operators';\n *\n * export class NgZoneObservableDecorator implements ObservableDecorator {\n *\n *   constructor(private zone: NgZone) {\n *   }\n *\n *   public decorate$<T>(source$: Observable<T>): Observable<T> {\n *      return new Observable<T>(observer => {\n *        const insideAngular = NgZone.isInAngularZone();\n *        const subscription = source$\n *          .pipe(\n *            subscribeInside(fn => this.zone.runOutsideAngular(fn)),\n *            observeInside(fn => insideAngular ? this.zone.run(fn) : this.zone.runOutsideAngular(fn)),\n *          )\n *          .subscribe(observer);\n *        return () => subscription.unsubscribe();\n *      });\n *    }\n * }\n * ```\n *\n * A decorator can be registered with the bean manager under the symbol `ObservableDecorator`, as following:\n *\n * ```ts\n * Beans.register(ObservableDecorator, {useValue: new NgZoneObservableDecorator(zone)});\n * ```\n *\n * @category Messaging\n */ class $146947066e10b00e$export$2ee0ab7012d73034 {\n}\n/**\n * Decorates the source with registered {@link ObservableDecorator}, if any.\n *\n * @internal\n */ function $146947066e10b00e$export$9e24f86ac127622f() {\n    return (source$)=>(0, $0d8b1f299d46dd84$export$e1272dadeadaca63).opt($146947066e10b00e$export$2ee0ab7012d73034)?.decorate$(source$) ?? source$;\n}\n/*\n * Copyright (c) 2018-2023 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Selects items emitted by an Observable according to a static criterion.\n *\n * This selector was introduced to quickly filter many messages from many subscribers.\n * Instead of a predicate, a key is used to dispatch messages with O(1) complexity to the subscribers.\n *\n * Prior to this selector, performance degraded significantly when sending more than 1000 messages\n * simultaneously, since filtering of message acknowledgements per-subscriber scaled worse than linearly.\n *\n * ---\n * ### Usage\n *\n * ```ts\n * // Create message source.\n * const messages$ = new Subject<{id: string; text: string}>();\n *\n * // Create selector to filter messages by id.\n * const selectMessagesById = new MessageSelector({source$: messages$, keySelector: message => message.id});\n *\n * // Receive only messages with id '1'.\n * selectMessagesById.select$('1').subscribe(msg => {\n *   // do something\n * });\n *\n * // Emit messages.\n * messages$.next({id: '1', text: 'foo'});\n * messages$.next({id: '2', text: 'bar'});\n * ```\n *\n * @internal\n */ class $146947066e10b00e$var$MessageSelector {\n    /**\n     * @param config - Controls how to select messages.\n     */ constructor(config){\n        this._selectors = new Map;\n        this._sourceError$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._sourceComplete$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        const { source$: source$, keySelector: keySelector } = config;\n        source$.pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe({\n            next: (item)=>{\n                const key = keySelector(item);\n                this._selectors.get(key)?.forEach((selector)=>selector.next(item));\n            },\n            error: (error)=>this._sourceError$.error(error),\n            complete: ()=>this._sourceComplete$.next()\n        });\n    }\n    /**\n     * Selects items emitted by the source Observable that match the given key.\n     *\n     * @param key - Specifies the key to select items.\n     */ select$(key) {\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            const selector$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(this._selectors, key, selector$);\n            const subscription = (0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(selector$, this._sourceError$).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._sourceComplete$)).subscribe(observer);\n            return ()=>{\n                (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._selectors, key, selector$);\n                subscription.unsubscribe();\n            };\n        });\n    }\n    /**\n     * Returns the current subscriber count.\n     */ \\u0275subscriberCount() {\n        return Array.from(this._selectors.values()).reduce((count, selectors)=>count + selectors.length, 0);\n    }\n    /**\n     * Disconnects this selector from the source Observable.\n     */ disconnect() {\n        this._destroy$.next();\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * The gateway is responsible for dispatching messages between the client and the broker.\n *\n * To initiate a connection, the gateway sends a CONNECT message to the current and all parent windows. When the broker window\n * receives the CONNECT message, the broker responds with a CONNACK message. If no CONNACK message is received within the discovery\n * timeout, the gateway errors. When the gateway is being disposed, it sends a DISCONNECT message to the broker.\n *\n * @internal\n */ class $146947066e10b00e$var$BrokerGateway {\n}\n/**\n * Broker gateway that does nothing.\n *\n * Use this gateway in tests to not connect to the platform host.\n *\n * @internal\n */ class $146947066e10b00e$var$NullBrokerGateway {\n    constructor(){\n        console.log(\"[NullBrokerGateway] Using 'NullBrokerGateway'. Messages cannot be sent or received.\");\n    }\n    isConnected() {\n        return Promise.resolve(true);\n    }\n    get message$() {\n        return 0, $62d8f22c904e5fe7$export$96c94437c95d7862;\n    }\n    async postMessage(channel, message) {\n        return Promise.resolve();\n    }\n    requestReply$(channel, message) {\n        return 0, $62d8f22c904e5fe7$export$96c94437c95d7862;\n    }\n    subscribe$(subscriptionDescriptor) {\n        return 0, $62d8f22c904e5fe7$export$96c94437c95d7862;\n    }\n}\n/**\n * @internal\n */ class $146947066e10b00e$var$\\u0275BrokerGateway {\n    constructor(connectOptions){\n        /*\n         * This Observable is primarily used as a notifier for the `takeUntil` operator to complete Observable subscriptions when the platform is shutting down.\n         * Since some subscriptions trigger subsequent broker interactions, e.g., unsubscribing from a topic subscription, the notifier must \"replay\" its state\n         * to avoid waiting for broker responses, which would never arrive and otherwise cause timeout errors.\n         */ this._platformStopping$ = new (0, $3abb0c810830a073$export$915d2682b0aa0991)(1);\n        this._session = null;\n        this._session$ = new (0, $d80e01a928648151$export$fe960da701faae26)();\n        this._message$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._selectMessagesByTopic = new $146947066e10b00e$var$MessageSelector({\n            source$: this._message$.pipe($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.Topic)),\n            keySelector: (event)=>event.data.message.topic\n        });\n        this._selectMessagesBySubscriberIdHeader = new $146947066e10b00e$var$MessageSelector({\n            source$: this._message$,\n            keySelector: (event)=>event.data.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId)\n        });\n        this._appSymbolicName = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a11aa4b1ad6eec09);\n        this._brokerDiscoverTimeout = connectOptions?.brokerDiscoverTimeout ?? 10000;\n        this._messageDeliveryTimeout = connectOptions?.messageDeliveryTimeout ?? 10000;\n    }\n    async init() {\n        try {\n            const session = await this.connectToBroker();\n            this.installBrokerMessageListener(session);\n            this.installPingReplier(session);\n            this._session = session;\n            this._session$.next(session);\n            this._session$.complete();\n        } catch (error) {\n            this._session$.error(error);\n            throw error;\n        }\n    }\n    isConnected() {\n        return (0, $7b246f86cff85ef0$export$a175cc82f1f2275e)(this._session$).then(()=>true).catch(()=>false);\n    }\n    get session() {\n        return this._session;\n    }\n    async postMessage(channel, message) {\n        if ($146947066e10b00e$var$isPlatformStopped()) throw $146947066e10b00e$var$GatewayErrors.PLATFORM_STOPPED_ERROR;\n        // If not connected to the broker, wait until connected. If connected, continue execution immediately\n        // without spawning a microtask. Otherwise, messages cannot be published during platform shutdown.\n        const session = this._session || await (0, $7b246f86cff85ef0$export$a175cc82f1f2275e)(this._session$);\n        const messageId = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n        const envelope = {\n            transport: $146947066e10b00e$var$MessagingTransport.ClientToBroker,\n            channel: channel,\n            message: message\n        };\n        envelope.message.headers.set($146947066e10b00e$export$b23af55470b7f1e1.MessageId, messageId).set($146947066e10b00e$export$b23af55470b7f1e1.Timestamp, Date.now()).set($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName, this._appSymbolicName).set($146947066e10b00e$export$b23af55470b7f1e1.ClientId, session.clientId);\n        // Install Promise that resolves once the broker has acknowledged the message, or that rejects otherwise.\n        const postError$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        const whenPosted = new Promise((resolve, reject)=>{\n            (0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._selectMessagesByTopic.select$(messageId), postError$).pipe((0, $c7828fe634a19a01$export$b7df5d561049483a)(1), $146947066e10b00e$var$pluckMessage(), (0, $4be3df9c8b191a2f$export$83e74882c5df8fe1)({\n                first: this._messageDeliveryTimeout,\n                with: ()=>(0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>$146947066e10b00e$var$GatewayErrors.MESSAGE_DISPATCH_ERROR(this._messageDeliveryTimeout, envelope))\n            }), (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)((statusMessage)=>statusMessage.body.ok ? (0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58) : (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>Error(statusMessage.body.details))), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._platformStopping$)).subscribe({\n                error: reject,\n                complete: resolve\n            });\n        });\n        try {\n            session.broker.window.postMessage(envelope, session.broker.origin);\n        } catch (error) {\n            postError$.error(error);\n        }\n        await whenPosted;\n    }\n    requestReply$(channel, request) {\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            if ($146947066e10b00e$var$isPlatformStopped()) {\n                observer.error($146947066e10b00e$var$GatewayErrors.PLATFORM_STOPPED_ERROR);\n                return 0, $a2669f8c8173c8d3$export$8793edee2d425525;\n            }\n            const replyTo = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n            const subscriberId = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n            const unsubscribe$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            const requestError$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            request.headers.set($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo, replyTo) // message header for the replier where to send replies to\n            .set($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId, subscriberId); // message header to subscribe for replies\n            // Receive replies sent to the reply topic.\n            (0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._selectMessagesBySubscriberIdHeader.select$(subscriberId), requestError$).pipe($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.Topic), $146947066e10b00e$var$pluckMessage(), $146947066e10b00e$export$9e24f86ac127622f(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)((0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._platformStopping$, unsubscribe$)), (0, $970a0f030dee86ff$export$578723aef62d92f5)(()=>this.unsubscribe({\n                    unsubscribeChannel: $146947066e10b00e$var$MessagingChannel.TopicUnsubscribe,\n                    subscriberId: subscriberId,\n                    logContext: `[subscriberId=${subscriberId}, topic=${replyTo}]`\n                }))).subscribe({\n                next: (reply)=>observer.next(reply),\n                error: (error)=>observer.error(error),\n                complete: (0, $a2669f8c8173c8d3$export$8793edee2d425525)\n            });\n            // Post the request to the broker.\n            this.postMessage(channel, request).catch((error)=>requestError$.error(error));\n            return ()=>unsubscribe$.next();\n        });\n    }\n    subscribe$(subscriptionDescriptor) {\n        const { messageChannel: messageChannel, subscribeChannel: subscribeChannel, unsubscribeChannel: unsubscribeChannel, newSubscribeCommand: newSubscribeCommand } = subscriptionDescriptor;\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            if ($146947066e10b00e$var$isPlatformStopped()) {\n                observer.error($146947066e10b00e$var$GatewayErrors.PLATFORM_STOPPED_ERROR);\n                return 0, $a2669f8c8173c8d3$export$8793edee2d425525;\n            }\n            const subscriberId = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n            const unsubscribe$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            const subscribeError$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            // Receive messages of given subscription.\n            (0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._selectMessagesBySubscriberIdHeader.select$(subscriberId), subscribeError$).pipe($146947066e10b00e$var$filterByChannel(messageChannel), $146947066e10b00e$var$pluckMessage(), $146947066e10b00e$export$9e24f86ac127622f(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)((0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._platformStopping$, unsubscribe$)), (0, $970a0f030dee86ff$export$578723aef62d92f5)(()=>this.unsubscribe({\n                    unsubscribeChannel: unsubscribeChannel,\n                    subscriberId: subscriberId,\n                    logContext: JSON.stringify(newSubscribeCommand(subscriberId))\n                }))).subscribe({\n                next: (message)=>observer.next(message),\n                error: (error)=>observer.error(error),\n                complete: (0, $a2669f8c8173c8d3$export$8793edee2d425525)\n            });\n            // Post the subscription to the broker.\n            this.postMessage(subscribeChannel, newSubscribeCommand(subscriberId)).catch((error)=>subscribeError$.error(error));\n            return ()=>unsubscribe$.next();\n        });\n    }\n    /**\n     * Unsubscribes from described destination. Does nothing if the platform is stopped.\n     */ async unsubscribe(descriptor) {\n        if ($146947066e10b00e$var$isPlatformStopped()) return;\n        const { unsubscribeChannel: unsubscribeChannel, subscriberId: subscriberId, logContext: logContext } = descriptor;\n        const unsubscribeCommand = {\n            subscriberId: subscriberId,\n            headers: new Map()\n        };\n        try {\n            await this.postMessage(unsubscribeChannel, unsubscribeCommand);\n        } catch (error) {\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992, {\n                orElseGet: $146947066e10b00e$export$1643d64233a33b47\n            }).error(`[UnsubscribeError] Failed to unsubscribe from destination: '${logContext}'. Caused by: ${error}`); // Fall back using NULL_LOGGER, e.g., when the platform is stopping.\n        }\n    }\n    /**\n     * Subscribes to messages sent to this client.\n     * Messages are dispatched to {@link _message$}.\n     */ installBrokerMessageListener(session) {\n        (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"message\").pipe($146947066e10b00e$var$filterByWindow(session.broker.window), $146947066e10b00e$var$filterByOrigin(session.broker.origin), $146947066e10b00e$var$filterByTransport($146947066e10b00e$var$MessagingTransport.BrokerToClient), $146947066e10b00e$var$fixMapObjects(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._platformStopping$)).subscribe(this._message$);\n    }\n    /**\n     * Installs a ping replier to indicate that this client is connected to the host.\n     *\n     * Note that no ping replier is installed if running in the context of the host application.\n     */ installPingReplier(session) {\n        if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$abac07b0d121aae2)) return; // The host app client does not reply to pings.\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$PlatformTopics.ping(session.clientId)).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._platformStopping$)).subscribe((request)=>$146947066e10b00e$var$runSafe(()=>{\n                const replyTo = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, undefined, {\n                    headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.TERMINAL)\n                }).then();\n            }));\n    }\n    /**\n     * Connects this client to the broker by sending a CONNECT message to the current and all parent windows.\n     *\n     * When the broker receives the CONNECT message and trusts this client, the broker responds with a CONNACK message,\n     * or rejects the connect attempt otherwise.\n     *\n     * @return A Promise that, when connected, resolves to information about the connected client and broker, or that rejects if the connect attempt\n     * failed, either because the broker could not be found or because the application is not allowed to connect.\n     */ connectToBroker() {\n        const replyTo = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n        const connectPromise = (0, $f03dcc354f8c1062$export$400f9f949cef996c)((0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"message\").pipe($146947066e10b00e$var$filterByTransport($146947066e10b00e$var$MessagingTransport.BrokerToClient), $146947066e10b00e$var$filterByTopicChannel(replyTo), (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)((messageEvent)=>{\n            const response = messageEvent.data.message.body;\n            if (response?.returnCode !== \"accepted\") return (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>Error(`${response?.returnMessage ?? \"UNEXPECTED: Empty broker discovery response\"} [code: '${response?.returnCode ?? \"n/a\"}']`));\n            return (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)({\n                clientId: response.clientId,\n                broker: {\n                    window: messageEvent.source,\n                    origin: messageEvent.origin\n                }\n            });\n        }), (0, $4be3df9c8b191a2f$export$83e74882c5df8fe1)({\n            first: this._brokerDiscoverTimeout,\n            with: ()=>(0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>$146947066e10b00e$var$GatewayErrors.BROKER_DISCOVER_ERROR(this._brokerDiscoverTimeout))\n        }), (0, $9654f9d6f3b258de$export$3f23594af5f37336)({\n            error: (error)=>(0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992, {\n                    orElseGet: $146947066e10b00e$export$1643d64233a33b47\n                }).error($146947066e10b00e$var$stringifyError(error))\n        }), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._platformStopping$)));\n        const connectMessage = {\n            transport: $146947066e10b00e$var$MessagingTransport.ClientToBroker,\n            channel: $146947066e10b00e$var$MessagingChannel.ClientConnect,\n            message: {\n                headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.MessageId, (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID()).set($146947066e10b00e$export$b23af55470b7f1e1.Timestamp, Date.now()).set($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName, this._appSymbolicName).set($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo, replyTo).set($146947066e10b00e$export$b23af55470b7f1e1.Version, (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$\\u0275VERSION))\n            }\n        };\n        if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$abac07b0d121aae2)) window.postMessage(connectMessage, window.origin);\n        else if (window === (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$\\u0275WINDOW_TOP)) {\n            // If loading the client into the topmost window it may be integrated into a rich client, with the host running in a different browser window (remote host).\n            // The rich client then bridges messages between the windows of the client and the remote host. Since the rich client may not be able to bridge messages\n            // right away when the client loads, the client repeatedly sends a connect request until acknowledged by the remote host.\n            const windowHierarchy = this.collectWindowHierarchy();\n            (0, $ba06f10a02915e96$export$9dc4ecf953986f04)(0, 25).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(connectPromise.catch(()=>null))).subscribe(()=>{\n                windowHierarchy.forEach((window1)=>window1.postMessage(connectMessage, \"*\"));\n            });\n        } else this.collectWindowHierarchy().forEach((window1)=>window1.postMessage(connectMessage, \"*\"));\n        return connectPromise;\n    }\n    /**\n     * Disconnects this client from the broker by sending a DISCONNECT message.\n     * Has no effect if not connected to the broker. If this operation fails, the error is logged as\n     * a warning, but not thrown.\n     */ disconnectFromBroker() {\n        if (!this._session) return;\n        const disconnectMessage = {\n            transport: $146947066e10b00e$var$MessagingTransport.ClientToBroker,\n            channel: $146947066e10b00e$var$MessagingChannel.ClientDisconnect,\n            message: {\n                headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.MessageId, (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID()).set($146947066e10b00e$export$b23af55470b7f1e1.Timestamp, Date.now()).set($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName, this._appSymbolicName).set($146947066e10b00e$export$b23af55470b7f1e1.ClientId, this._session.clientId)\n            }\n        };\n        try {\n            this._session.broker.window.postMessage(disconnectMessage, this._session.broker.origin);\n        } catch (error) {\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992, {\n                orElseGet: $146947066e10b00e$export$1643d64233a33b47\n            }).warn(`[ClientDisconnectError] Failed to disconnect from the broker. Caused by: ${error}`);\n        }\n    }\n    /**\n     * Returns an array of the current `Window` hierarchy.\n     * Windows are sorted in top-down order, i.e., parent windows precede child windows.\n     */ collectWindowHierarchy() {\n        const candidates = [];\n        for(let candidate = window; candidate !== (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$\\u0275WINDOW_TOP); candidate = candidate.parent)candidates.unshift(candidate);\n        candidates.unshift((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$\\u0275WINDOW_TOP));\n        return candidates;\n    }\n    /**\n     * Method invoked when the platform enters state {@link PlatformState.Stopping}.\n     *\n     * Since this gateway is registered in the bean manager with the maximum destruction order `{destroyOrder: Number.MAX_SAFE_INTEGER}`,\n     * the platform will destroy this bean after destroying other beans, which is important so that other beans can send messages\n     * when the platform shuts down.\n     */ preDestroy() {\n        this.disconnectFromBroker();\n        this._platformStopping$.next();\n        this._selectMessagesByTopic.disconnect();\n        this._selectMessagesBySubscriberIdHeader.disconnect();\n    }\n}\n/**\n * Replaces `Map` objects contained in the message with a `Map` object of the current JavaScript realm.\n *\n * Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n * Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n * This is most likely because the serialization takes place in a different realm.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n * @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n */ function $146947066e10b00e$var$fixMapObjects() {\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)((event)=>{\n        const envelope = event.data;\n        envelope.message.headers = new Map(envelope.message.headers || []);\n        if (envelope.channel === $146947066e10b00e$var$MessagingChannel.Intent) {\n            const intentMessage = envelope.message;\n            intentMessage.intent.params = new Map(intentMessage.intent.params || []);\n        }\n        if (envelope.channel === $146947066e10b00e$var$MessagingChannel.Topic) {\n            const topicMessage = envelope.message;\n            topicMessage.params = new Map(topicMessage.params || []);\n        }\n        return event;\n    });\n}\n/**\n * Creates a string representation of the given {@link MessageEnvelope}.\n */ function $146947066e10b00e$var$stringifyEnvelope(envelope) {\n    return JSON.stringify(envelope, (key, value)=>value instanceof Map ? (0, $ccc574af478a1fb0$export$45dae21dfe837dd7).coerce(value) : value);\n}\nfunction $146947066e10b00e$var$isPlatformStopped() {\n    return $146947066e10b00e$export$5cce370cfaa52f9e.state >= $146947066e10b00e$export$f677ff3cbab00a1f.Stopped;\n}\nvar $146947066e10b00e$var$GatewayErrors;\n(function(GatewayErrors) {\n    GatewayErrors.PLATFORM_STOPPED_ERROR = Error(\"[GatewayError] Platform is stopped. Messages cannot be published or received.\");\n    function MESSAGE_DISPATCH_ERROR(timeout, message) {\n        return Error(`[GatewayError] No acknowledgement received within ${timeout}ms for a message sent to the broker. [msg=${$146947066e10b00e$var$stringifyEnvelope(message)}]`);\n    }\n    GatewayErrors.MESSAGE_DISPATCH_ERROR = MESSAGE_DISPATCH_ERROR;\n    function BROKER_DISCOVER_ERROR(timeout) {\n        return Error(`[GatewayError] Message broker not discovered within ${timeout}ms. Messages cannot be published or received.`);\n    }\n    GatewayErrors.BROKER_DISCOVER_ERROR = BROKER_DISCOVER_ERROR;\n})($146947066e10b00e$var$GatewayErrors || ($146947066e10b00e$var$GatewayErrors = {}));\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows looking up properties defined in the platform host.\n *\n * @category Platform\n */ class $146947066e10b00e$export$795435d319aa5def {\n    constructor(){\n        this._properties = new Map();\n    }\n    async init() {\n        const messagingDisabled = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$BrokerGateway) instanceof $146947066e10b00e$var$NullBrokerGateway;\n        if (messagingDisabled) return;\n        // Wait until obtained platform properties so that they can be accessed synchronously by the application via `PlatformPropertyService#properties`.\n        const properties$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$PlatformTopics.PlatformProperties);\n        this._properties = await (0, $f03dcc354f8c1062$export$400f9f949cef996c)(properties$.pipe($146947066e10b00e$export$d6978861bb0c00c2(), (0, $a344549688aae3fd$export$871de8747c9eaa88)((properties)=>(0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).coerce(properties))));\n    }\n    /**\n     * Indicates whether a property with the specified key exists or not.\n     */ contains(key) {\n        return this._properties.has(key);\n    }\n    /**\n     * Returns the property of the given key, or `defaultValue` if the property does not exist.\n     *\n     * Throws an error if `defaultValue` is not specified and the property does not exist.\n     */ get(key, defaultValue) {\n        if (this._properties.has(key)) return this._properties.get(key);\n        if (defaultValue !== undefined) return defaultValue;\n        throw Error(`[PropertyNotFoundError] No property of given name found [prop=${key}]`);\n    }\n    /**\n     * Returns the properties map.\n     */ properties() {\n        return this._properties;\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Uses the native Web Fetch API to fetch a resource from the network.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n * @internal\n */ class $146947066e10b00e$var$HttpClient {\n    /**\n     * Allows fetching a resource from the network, returning a promise which is fulfilled once the response is available. The promise resolves\n     * to the Response object representing the response to your request. The promise does not reject on HTTP errors — instead it only rejects on\n     * network errors; then handlers must check for HTTP errors.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n     *\n     * @param  input - Defines the resource that you wish to fetch.\n     * @param  init - Options object containing any custom settings that you want to apply to the request.\n     * @return A Promise that resolves to a Response object.\n     */ fetch(input, init) {\n        return fetch(input, init); // native call\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Central point for looking up or managing capabilities or intentions available in the platform.\n *\n * @internal\n */ class $146947066e10b00e$var$ManifestRegistry {\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ const $146947066e10b00e$var$ABSOLUTE_URL_REGEX = /^(https?:\\/\\/)|(blob:)/;\n/**\n * @internal\n */ var $146947066e10b00e$var$Urls;\n(function(Urls) {\n    /**\n     * Returns `true` if the given URL is an absolute URL, a blob or the 'about:blank' page.\n     */ function isAbsoluteUrl(url) {\n        return url === \"about:blank\" || $146947066e10b00e$var$ABSOLUTE_URL_REGEX.test(url);\n    }\n    Urls.isAbsoluteUrl = isAbsoluteUrl;\n    /**\n     * Constructs the {@link URL} for the given url and optional base, applying relative navigational symbols if contained in the url.\n     *\n     * Following rules apply:\n     * - base is required if providing a relative url\n     * - search and fragment parts of the base are ignored\n     * - relative navigational symbols are only applied if passing a base (native support)\n     *\n     * This function is similar to `new URL(url, base)` except that it works for bases that do not have a trailing slash.\n     * If you use `new URL(url, base)` without a trailing slash in the base, the last segment is discarded.\n     *\n     * // new URL('x/y', 'http://localhost:4200/a/b/').toString() -> \"http://localhost:4200/a/b/x/y\" // what we expect\n     * // new URL('x/y', 'http://localhost:4200/a/b').toString() -> \"http://localhost:4200/a/x/y\" // not what we expect\n     *\n     * We observed this behavior in Chromium and Firefox browsers.\n     */ function newUrl(url, base) {\n        if (base) {\n            const baseUrl = new URL(base);\n            if (baseUrl.pathname && !baseUrl.pathname.endsWith(\"/\")) baseUrl.pathname += \"/\";\n            return new URL(url, baseUrl);\n        }\n        return new URL(url);\n    }\n    Urls.newUrl = newUrl;\n    /**\n     * Adds a trailing slash to the given URL, if not already present.\n     */ function ensureTrailingSlash(url) {\n        if (!url.endsWith(\"/\")) return url + \"/\";\n        return url;\n    }\n    Urls.ensureTrailingSlash = ensureTrailingSlash;\n})($146947066e10b00e$var$Urls || ($146947066e10b00e$var$Urls = {}));\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Registry with all registered applications.\n *\n * @internal\n */ class $146947066e10b00e$var$ApplicationRegistry {\n    constructor(){\n        this._applications = new Map();\n    }\n    static{\n        this.SYMBOLIC_NAME_REGEXP = /^[a-z0-9-]+$/;\n    }\n    /**\n     * Registers the given application.\n     *\n     * Throws an error if the application's symbolic name is not unique or contains illegal characters.\n     */ async registerApplication(applicationConfig, manifest) {\n        (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(applicationConfig.symbolicName, ()=>Error(`[ApplicationRegistrationError] Invalid application config. Missing required property 'symbolicName'. [appConfig=\"${JSON.stringify(applicationConfig)}\", manifest=\"${JSON.stringify(manifest)}\"]`));\n        (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(applicationConfig.manifestUrl, ()=>Error(`[ApplicationRegistrationError] Invalid application config. Missing required property 'manifestUrl'. [appConfig=\"${JSON.stringify(applicationConfig)}\", manifest=\"${JSON.stringify(manifest)}\"]`));\n        if (!$146947066e10b00e$var$ApplicationRegistry.SYMBOLIC_NAME_REGEXP.test(applicationConfig.symbolicName)) throw Error(`[ApplicationRegistrationError] Symbolic name must be lowercase and contain alphanumeric and dash characters [symbolicName='${applicationConfig.symbolicName}'].`);\n        const notUniqueSymbolicName = Array.from(this._applications.values()).some((application)=>application.symbolicName === applicationConfig.symbolicName);\n        if (notUniqueSymbolicName) throw Error(`[ApplicationRegistrationError] Symbolic name must be unique [symbolicName='${applicationConfig.symbolicName}'].`);\n        const baseUrl = this.computeBaseUrl(applicationConfig, manifest);\n        this._applications.set(applicationConfig.symbolicName, {\n            symbolicName: applicationConfig.symbolicName,\n            name: manifest.name ?? applicationConfig.symbolicName,\n            baseUrl: baseUrl,\n            manifestUrl: $146947066e10b00e$var$Urls.newUrl(applicationConfig.manifestUrl, $146947066e10b00e$var$Urls.isAbsoluteUrl(applicationConfig.manifestUrl) ? applicationConfig.manifestUrl : window.origin).toString(),\n            manifestLoadTimeout: applicationConfig.manifestLoadTimeout ?? (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$2eb36f74b177828a).manifestLoadTimeout,\n            activatorLoadTimeout: applicationConfig.activatorLoadTimeout ?? (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$2eb36f74b177828a).activatorLoadTimeout,\n            allowedMessageOrigins: new Set((0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).coerce(applicationConfig.secondaryOrigin)).add($146947066e10b00e$var$Urls.newUrl(baseUrl).origin),\n            scopeCheckDisabled: (0, $ccc574af478a1fb0$export$790c233a67baba3).orElse(applicationConfig.scopeCheckDisabled, false),\n            intentionCheckDisabled: (0, $ccc574af478a1fb0$export$790c233a67baba3).orElse(applicationConfig.intentionCheckDisabled, false),\n            intentionRegisterApiDisabled: (0, $ccc574af478a1fb0$export$790c233a67baba3).orElse(applicationConfig.intentionRegisterApiDisabled, true)\n        });\n        for (const capability of manifest.capabilities ?? [])try {\n            await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ManifestRegistry).registerCapability(capability, applicationConfig.symbolicName);\n        } catch (error) {\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).error(`[CapabilityRegisterError] Failed to register capability for application '${applicationConfig.symbolicName}'. [capability=${JSON.stringify(capability)}]`, error);\n        }\n        manifest.intentions?.forEach((intention)=>{\n            try {\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ManifestRegistry).registerIntention(intention, applicationConfig.symbolicName);\n            } catch (error) {\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).error(`[IntentionRegisterError] Failed to register intention for application '${applicationConfig.symbolicName}' [intention=${JSON.stringify(intention)}].`, error);\n            }\n        });\n    }\n    getApplication(symbolicName, options) {\n        const application = this._applications.get(symbolicName);\n        if (!application && !options) throw Error(`[NullApplicationError] No application registered under the symbolic name '${symbolicName}'.`);\n        return application ?? null;\n    }\n    getApplications() {\n        return Array.from(this._applications.values());\n    }\n    /**\n     * Returns whether the specified application can interact with private capabilities of other applications.\n     */ isScopeCheckDisabled(appSymbolicName) {\n        return (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(this._applications.get(appSymbolicName), ()=>Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).scopeCheckDisabled;\n    }\n    /**\n     * Returns whether the specified application can register and unregister intentions dynamically at runtime.\n     */ isIntentionRegisterApiDisabled(appSymbolicName) {\n        return (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(this._applications.get(appSymbolicName), ()=>Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).intentionRegisterApiDisabled;\n    }\n    /**\n     * Returns whether the specified application can interact with capabilities of other applications without having to declare respective intentions.\n     */ isIntentionCheckDisabled(appSymbolicName) {\n        return (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(this._applications.get(appSymbolicName), ()=>Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).intentionCheckDisabled;\n    }\n    /**\n     * Computes the base URL as following:\n     *\n     * - if base URL is specified in the manifest, that URL is used (either as an absolute URL, or relative to the origin of 'manifestUrl')\n     * - if base URL is not specified in the manifest, the origin from 'manifestUrl' is used as the base URL, or the origin from the current window if the 'manifestUrl' is relative\n     * - if base URL has no trailing slash, adds a trailing slash\n     */ computeBaseUrl(applicationConfig, manifest) {\n        const manifestURL = $146947066e10b00e$var$Urls.isAbsoluteUrl(applicationConfig.manifestUrl) ? $146947066e10b00e$var$Urls.newUrl(applicationConfig.manifestUrl) : $146947066e10b00e$var$Urls.newUrl(applicationConfig.manifestUrl, window.origin);\n        if (!manifest.baseUrl) return $146947066e10b00e$var$Urls.ensureTrailingSlash(manifestURL.origin);\n        if ($146947066e10b00e$var$Urls.isAbsoluteUrl(manifest.baseUrl)) return $146947066e10b00e$var$Urls.ensureTrailingSlash(manifest.baseUrl);\n        else return $146947066e10b00e$var$Urls.ensureTrailingSlash($146947066e10b00e$var$Urls.newUrl(manifest.baseUrl, manifestURL.origin).toString());\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows testing whether a qualifier matches a qualifier pattern.\n *\n * @category Intention API\n */ class $146947066e10b00e$export$26246f283d6ee833 {\n    /**\n     * Constructs a matcher that will match given qualifiers against a pattern.\n     *\n     * @param pattern - Pattern to match qualifiers. If `null` or `undefined`, uses an empty qualifier pattern.\n     */ constructor(pattern){\n        this._pattern = pattern || {};\n        this._patternKeys = Object.keys(this._pattern);\n    }\n    /**\n     * Attempts to match the given qualifier against the pattern which was passed to the constructor.\n     */ matches(qualifier) {\n        const testee = qualifier || {};\n        const testeeKeys = Object.keys(testee);\n        const { _patternKeys: patternKeys, _pattern: pattern } = this;\n        // Test if the testee has no additional entries\n        if (!patternKeys.includes(\"*\") && testeeKeys.some((key)=>!patternKeys.includes(key))) return false;\n        return patternKeys.filter((key)=>key !== \"*\").every((key)=>{\n            if (pattern[key] === testee[key]) return true;\n            if (pattern[key] === \"*\" && testee[key] !== undefined && testee[key] !== null) return true;\n            return false;\n        });\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides an in-memory store for provided capabilities and registered intentions.\n *\n * @internal\n */ class $146947066e10b00e$var$ManifestObjectStore {\n    constructor(){\n        this._objectById = new Map();\n        this._objectsByType = new Map();\n        this._objectsByApplication = new Map();\n        this._add$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._remove$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n    }\n    /**\n     * Adds the given {@link ManifestObject} to this store.\n     */ add(object) {\n        this._objectById.set(object.metadata.id, object);\n        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(this._objectsByType, object.type, object);\n        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(this._objectsByApplication, object.metadata.appSymbolicName, object);\n        this._add$.next(object);\n    }\n    /**\n     * Removes manifest objects from this store that match the given filter.\n     *\n     * @param filter - Control which manifest objects to remove by specifying filter criteria which are \"AND\"ed together.\n     *        Wildcards in the qualifier criterion, if any, are interpreted as such.\n     */ remove(filter) {\n        const objectsToRemove = this.find(filter);\n        this._remove(objectsToRemove);\n    }\n    /**\n     * Finds manifest objects that match the given filter.\n     *\n     * @param filter - Control which manifest objects to return.\n     *        Specified filter criteria are \"AND\"ed together. If no filter criteria are specified, all objects will be returned.\n     */ find(filter) {\n        const filterById = filter.id !== undefined;\n        const filterByType = filter.type !== undefined;\n        const filterByApp = filter.appSymbolicName !== undefined;\n        return (0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).intersect(filterById ? (0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).coerce(this._objectById.get(filter.id)) : undefined, filterByType ? (0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).coerce(this._objectsByType.get(filter.type)) : undefined, filterByApp ? (0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).coerce(this._objectsByApplication.get(filter.appSymbolicName)) : undefined, filterById || filterByType || filterByApp ? undefined : Array.from(this._objectById.values())).filter((object)=>{\n            if (filter.qualifier === undefined) return true;\n            if (typeof filter.qualifier === \"function\") return filter.qualifier(object.qualifier || {});\n            return new $146947066e10b00e$export$26246f283d6ee833(filter.qualifier).matches(object.qualifier);\n        });\n    }\n    findById(id, options) {\n        const object = this._objectById.get(id);\n        if (!object && !options) throw Error(`[NullManifestObjectError] Manifest object '${id}' not found.`);\n        return object ?? null;\n    }\n    /**\n     * Emits when an object is added to or removed from this store.\n     */ get change$() {\n        return (0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this.add$, this.remove$).pipe((0, $a344549688aae3fd$export$871de8747c9eaa88)(()=>undefined));\n    }\n    /**\n     * Emits when an object is added to this store.\n     */ get add$() {\n        return this._add$;\n    }\n    /**\n     * Emits when object(s) are removed from this store.\n     */ get remove$() {\n        return this._remove$;\n    }\n    /**\n     * Removes the given objects from all internal maps.\n     */ _remove(objects) {\n        const deleted = new Set();\n        objects.forEach((object)=>{\n            const objectId = object.metadata.id;\n            if (this._objectById.delete(objectId)) {\n                (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._objectsByType, object.type, (candidate)=>candidate.metadata?.id === objectId);\n                (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._objectsByApplication, object.metadata.appSymbolicName, (candidate)=>candidate.metadata?.id === objectId);\n                deleted.add(object);\n            }\n        });\n        deleted.size && this._remove$.next(objects);\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows intercepting capabilities before their registration.\n *\n * Interceptors allow intercepting capabilities before they are registered, for example,\n * to perform validation checks, add metadata, or change properties.\n *\n * The following interceptor assigns a stable identifier to each microfrontend capability.\n *\n * ```ts\n * class MicrofrontendCapabilityInterceptor implements CapabilityInterceptor {\n *\n *   public async intercept(capability: Capability): Promise<Capability> {\n *     if (capability.type === 'microfrontend') {\n *       return {\n *         ...capability,\n *         metadata: {...capability.metadata, id: hash(capability)},\n *       };\n *     }\n *     return capability;\n *   }\n * }\n * ```\n *\n * #### Registering Interceptors\n * Interceptors are registered in the bean manager of the host application under the symbol `CapabilityInterceptor` as multi bean.\n * Multiple interceptors can be registered, forming a chain in which each interceptor is called one by one in registration order.\n *\n * ```ts\n * Beans.register(CapabilityInterceptor, {useClass: MicrofrontendCapabilityInterceptor, multi: true});\n * ```\n *\n * @category Intention API\n */ class $146947066e10b00e$export$6b68619c82449d52 {\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides utilities for working with qualifiers.\n *\n * @internal\n */ var $146947066e10b00e$var$Qualifiers;\n(function(Qualifiers) {\n    const ALLOWED_VALUE_TYPES = new Set().add(\"string\").add(\"number\").add(\"boolean\");\n    /**\n     * Validates given qualifier.\n     *\n     * @return `null` if valid, or the `Error` otherwise.\n     */ function validateQualifier(qualifier, options) {\n        if (!qualifier || Object.keys(qualifier).length === 0) return null;\n        if (options.exactQualifier && Object.entries(qualifier).some(([key, value])=>key === \"*\" || value === \"*\")) return Error(`[IllegalQualifierError] Qualifier must be exact, i.e., not contain wildcards. [qualifier='${JSON.stringify(qualifier)}']`);\n        if (Object.values(qualifier).some((value)=>value === \"\" || value === null || value === undefined)) return Error(`[IllegalQualifierError] Qualifier must not contain empty, \\`null\\`, or \\`undefined\\` entries. [qualifier='${JSON.stringify(qualifier)}']`);\n        if (Object.values(qualifier).some((value)=>!ALLOWED_VALUE_TYPES.has(typeof value))) return Error(`[IllegalQualifierError] Qualifier contains entries with an illegal data type. Supported data types are [${[\n            ...ALLOWED_VALUE_TYPES\n        ].join(\", \")}]. [qualifier='${JSON.stringify(qualifier)}']`);\n        return null;\n    }\n    Qualifiers.validateQualifier = validateQualifier;\n})($146947066e10b00e$var$Qualifiers || ($146947066e10b00e$var$Qualifiers = {}));\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * @internal\n */ class $146947066e10b00e$var$\\u0275ManifestRegistry {\n    constructor(){\n        this._subscriptions = new Set();\n        this._capabilityStore = new $146947066e10b00e$var$ManifestObjectStore();\n        this._intentionStore = new $146947066e10b00e$var$ManifestObjectStore();\n        this.capabilityRegister$ = this._capabilityStore.add$;\n        this.capabilityUnregister$ = this._capabilityStore.remove$;\n        this.installCapabilityRegisterRequestHandler();\n        this.installCapabilityUnregisterRequestHandler();\n        this.installIntentionRegisterRequestHandler();\n        this.installIntentionUnregisterRequestHandler();\n        this.installCapabilitiesLookupRequestHandler();\n        this.installIntentionsLookupRequestHandler();\n        this.installIsApplicationQualifiedRequestHandler();\n        this.installVersionLookupHandler();\n    }\n    /**\n     * @inheritDoc\n     */ resolveCapabilitiesByIntent(intent, appSymbolicName) {\n        const illegalQualifierError = $146947066e10b00e$var$Qualifiers.validateQualifier(intent.qualifier, {\n            exactQualifier: true\n        });\n        if (illegalQualifierError) throw illegalQualifierError;\n        const filter = {\n            type: intent.type,\n            qualifier: intent.qualifier || {}\n        };\n        return this._capabilityStore.find(filter).filter((capability)=>this.isApplicationQualifiedForCapability(appSymbolicName, capability));\n    }\n    /**\n     * @inheritDoc\n     */ hasIntention(intent, appSymbolicName) {\n        const illegalQualifierError = $146947066e10b00e$var$Qualifiers.validateQualifier(intent.qualifier, {\n            exactQualifier: true\n        });\n        if (illegalQualifierError) throw illegalQualifierError;\n        const filter = {\n            appSymbolicName: appSymbolicName,\n            type: intent.type\n        };\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).isIntentionCheckDisabled(appSymbolicName) || this._intentionStore.find({\n            ...filter,\n            qualifier: (intentionQualifier)=>new $146947066e10b00e$export$26246f283d6ee833(intentionQualifier).matches(intent.qualifier)\n        }).length > 0 || this._capabilityStore.find({\n            ...filter,\n            qualifier: intent.qualifier || {}\n        }).length > 0 // An app has an implicit intention if it provides the capability itself\n        ;\n    }\n    /**\n     * Tests if the specified micro app is qualified to interact with the given capability.\n     *\n     * A micro app is qualified if it meets either of the following criteria:\n     * - The capability is provided by the application itself.\n     * - The capability is provided by another application, but only if the capability is publicly visible (1),\n     *   and the micro app has declared an intention (2) to use the capability.\n     *\n     * (1) Unless 'scope check' is disabled for the specified micro app.\n     * (2) Unless 'intention check' is disabled for the specified micro app.\n     */ isApplicationQualifiedForCapability(appSymbolicName, capability) {\n        if (capability.metadata.appSymbolicName === appSymbolicName) return true;\n        const isScopeCheckDisabled = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).isScopeCheckDisabled(appSymbolicName);\n        const isIntentionCheckDisabled = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).isIntentionCheckDisabled(appSymbolicName);\n        return (isScopeCheckDisabled || !capability.private) && (isIntentionCheckDisabled || this.hasIntentionForCapability(appSymbolicName, capability));\n    }\n    /**\n     * Tests whether the given app has declared a matching intention for the given capability.\n     */ hasIntentionForCapability(appSymbolicName, capability) {\n        return this._intentionStore.find({\n            appSymbolicName: appSymbolicName,\n            type: capability.type,\n            qualifier: (intentionQualifier)=>new $146947066e10b00e$export$26246f283d6ee833(intentionQualifier).matches(capability.qualifier)\n        }).length > 0;\n    }\n    async registerCapability(capability, appSymbolicName) {\n        if (!capability) throw Error(\"[CapabilityRegisterError] Capability must not be null or undefined.\");\n        if (!capability.type) throw Error(\"[CapabilityRegisterError] Missing capability property: type\");\n        const illegalQualifierError = $146947066e10b00e$var$Qualifiers.validateQualifier(capability.qualifier, {\n            exactQualifier: true\n        });\n        if (illegalQualifierError) throw illegalQualifierError;\n        $146947066e10b00e$var$assertCapabilityParamDefinitions(capability.params);\n        // Let the host app intercept the capability to register.\n        const capabilityToRegister = await $146947066e10b00e$var$interceptCapability({\n            ...capability,\n            qualifier: capability.qualifier ?? {},\n            params: capability.params ?? [],\n            private: capability.private ?? true,\n            metadata: {\n                id: (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID(),\n                appSymbolicName: appSymbolicName\n            }\n        });\n        // Register the capability.\n        this._capabilityStore.add(capabilityToRegister);\n        return capabilityToRegister.metadata.id;\n    }\n    unregisterCapabilities(appSymbolicName, filter) {\n        this._capabilityStore.remove({\n            ...filter,\n            appSymbolicName: appSymbolicName\n        });\n    }\n    registerIntention(intention, appSymbolicName) {\n        if (!intention) throw Error(\"[IntentionRegisterError] Intention must not be null or undefined.\");\n        if (!intention.type) throw Error(\"[IntentionRegisterError] Missing intention property: type\");\n        const illegalQualifierError = $146947066e10b00e$var$Qualifiers.validateQualifier(intention.qualifier, {\n            exactQualifier: false\n        });\n        if (illegalQualifierError) throw illegalQualifierError;\n        const intentionToRegister = {\n            ...intention,\n            metadata: {\n                id: (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID(),\n                appSymbolicName: appSymbolicName\n            }\n        };\n        // Register the intention.\n        this._intentionStore.add(intentionToRegister);\n        return intentionToRegister.metadata.id;\n    }\n    unregisterIntention(appSymbolicName, filter) {\n        this._intentionStore.remove({\n            ...filter,\n            appSymbolicName: appSymbolicName\n        });\n    }\n    installCapabilityRegisterRequestHandler() {\n        this._subscriptions.add((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.RegisterCapability, (request)=>{\n            const capability = request.body;\n            const appSymbolicName = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName);\n            return this.registerCapability(capability, appSymbolicName);\n        }));\n    }\n    installCapabilityUnregisterRequestHandler() {\n        this._subscriptions.add((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.UnregisterCapabilities, (request)=>{\n            const capabilityFilter = request.body || {};\n            const appSymbolicName = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName);\n            this.unregisterCapabilities(appSymbolicName, capabilityFilter);\n        }));\n    }\n    installIntentionRegisterRequestHandler() {\n        this._subscriptions.add((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.RegisterIntention, (request)=>{\n            const intention = request.body;\n            const appSymbolicName = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName);\n            $146947066e10b00e$var$assertIntentionRegisterApiEnabled(appSymbolicName);\n            return this.registerIntention(intention, appSymbolicName);\n        }));\n    }\n    installIntentionUnregisterRequestHandler() {\n        this._subscriptions.add((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.UnregisterIntentions, (request)=>{\n            const intentFilter = request.body || {};\n            const appSymbolicName = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName);\n            $146947066e10b00e$var$assertIntentionRegisterApiEnabled(appSymbolicName);\n            this.unregisterIntention(appSymbolicName, intentFilter);\n        }));\n    }\n    installCapabilitiesLookupRequestHandler() {\n        this._subscriptions.add((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.LookupCapabilities, (request)=>{\n            const appSymbolicName = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName);\n            const lookupFilter = request.body || {};\n            const illegalQualifierError = $146947066e10b00e$var$Qualifiers.validateQualifier(lookupFilter.qualifier, {\n                exactQualifier: false\n            });\n            if (illegalQualifierError) throw illegalQualifierError;\n            // The queried capabilities may change on both, capability or intention change, because the computation\n            // of visible and qualified capabilities depends on registered capabilities and manifested intentions.\n            const registryChange$ = (0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._capabilityStore.change$, this._intentionStore.change$);\n            const finder$ = (0, $ead8e990cfbfe279$export$260e5c0943f31606)(()=>(0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(this._capabilityStore.find(lookupFilter)));\n            return finder$.pipe((0, $7d94a21417a1623d$export$9f77e0932fb78f72)(()=>registryChange$.pipe((0, $c7828fe634a19a01$export$b7df5d561049483a)(1), (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)(()=>finder$))), (0, $d5bd6ae9534d951f$export$8f2c8e61d147b502)((capability)=>this.isApplicationQualifiedForCapability(appSymbolicName, capability)), (0, $419c2da03c3ac473$export$779c5fb865a0172e)((a, b)=>JSON.stringify(a) === JSON.stringify(b)));\n        }));\n    }\n    installIntentionsLookupRequestHandler() {\n        this._subscriptions.add((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.LookupIntentions, (request)=>{\n            const lookupFilter = request.body || {};\n            const illegalQualifierError = $146947066e10b00e$var$Qualifiers.validateQualifier(lookupFilter.qualifier, {\n                exactQualifier: false\n            });\n            if (illegalQualifierError) throw illegalQualifierError;\n            const finder$ = (0, $ead8e990cfbfe279$export$260e5c0943f31606)(()=>(0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(this._intentionStore.find(lookupFilter)));\n            return finder$.pipe((0, $7d94a21417a1623d$export$9f77e0932fb78f72)(()=>this._intentionStore.change$.pipe((0, $c7828fe634a19a01$export$b7df5d561049483a)(1), (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)(()=>finder$))), (0, $419c2da03c3ac473$export$779c5fb865a0172e)((a, b)=>JSON.stringify(a) === JSON.stringify(b)));\n        }));\n    }\n    installIsApplicationQualifiedRequestHandler() {\n        this._subscriptions.add((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.IsApplicationQualifiedForCapability, (request)=>{\n            return (0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._intentionStore.change$, this._capabilityStore.change$).pipe((0, $369a1beddcfddd56$export$a4fe86229b0e9bdd)(undefined), (0, $a344549688aae3fd$export$871de8747c9eaa88)(()=>{\n                const application = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).getApplication(request.body.appSymbolicName);\n                const capability = this._capabilityStore.findById(request.body.capabilityId);\n                return this.isApplicationQualifiedForCapability(application.symbolicName, capability);\n            }), (0, $419c2da03c3ac473$export$779c5fb865a0172e)());\n        }));\n    }\n    installVersionLookupHandler() {\n        this._subscriptions.add((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.platformVersion(\":appSymbolicName\"), (message)=>{\n            const appSymbolicName = message.params.get(\"appSymbolicName\");\n            const clientRegister$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry).register$.pipe((0, $827970c208304071$export$3dea766d36a8935f)((client)=>client.application.symbolicName === appSymbolicName));\n            const platformVersion$ = (0, $ead8e990cfbfe279$export$260e5c0943f31606)(()=>{\n                const clients = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry).getByApplication(appSymbolicName);\n                return clients.length ? (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(clients[0].version) : (0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58);\n            });\n            return platformVersion$.pipe((0, $a8cf4712258bbbb6$export$6a50f648373d0fa8)(clientRegister$.pipe((0, $8657d55690de2a98$export$6b9f6c0d32c093f9)(()=>platformVersion$))), (0, $c7828fe634a19a01$export$b7df5d561049483a)(1));\n        }));\n    }\n    preDestroy() {\n        this._subscriptions.forEach((subscription)=>subscription.unsubscribe());\n    }\n}\n/**\n * Checks if the 'Intention Registration API' is enabled for the given app. If not, an error is thrown.\n */ function $146947066e10b00e$var$assertIntentionRegisterApiEnabled(appSymbolicName) {\n    if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).isIntentionRegisterApiDisabled(appSymbolicName)) throw Error(`[IntentionRegisterError] The 'Intention Registration API' is disabled for the application '${appSymbolicName}'. Contact the platform administrator to enable this API.`);\n}\n/**\n * Asserts given parameter definitions to be valid.\n */ function $146947066e10b00e$var$assertCapabilityParamDefinitions(params) {\n    if (!params?.length) return;\n    const validSubstitutes = params.filter((param)=>!param.deprecated).map((param)=>param.name);\n    params.forEach((param)=>{\n        if (param.required === undefined) throw Error(`[CapabilityParamError] Parameter '${param.name}' must be explicitly defined as required or optional.`);\n        if (param.deprecated !== undefined) {\n            // Ensure deprecated param to be optional\n            if (param.required) throw Error(`[CapabilityParamError] Deprecated parameters must be optional, not required. Alternatively, deprecated parameters can define a mapping to a required parameter via the 'useInstead' property. [param='${param.name}']`);\n            // Ensure existing substitute\n            if (typeof param.deprecated === \"object\" && param.deprecated.useInstead && !validSubstitutes.includes(param.deprecated.useInstead)) throw Error(`[CapabilityParamError] The deprecated parameter '${param.name}' defines an invalid substitute '${param.deprecated.useInstead}'. Valid substitutes are: [${validSubstitutes}]`);\n        }\n        return param;\n    });\n}\n/**\n * Intercepts capability before its registration.\n */ async function $146947066e10b00e$var$interceptCapability(capability) {\n    const interceptors = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).all($146947066e10b00e$export$6b68619c82449d52);\n    for (const interceptor of interceptors)capability = await interceptor.intercept(capability);\n    return capability;\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Tracks the focus across microfrontends and answers {@link PlatformTopics.IsFocusWithin} and {@link PlatformTopics.HasFocus} requests.\n *\n * @see FocusInEventDispatcher\n * @see FocusMonitor\n * @internal\n */ class $146947066e10b00e$var$FocusTracker {\n    constructor(){\n        this._focusOwner$ = new (0, $30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b)(undefined);\n        this._subscriptions = new Set();\n        this._subscriptions.add(this.monitorFocusInEvents());\n        this._subscriptions.add(this.replyToIsFocusWithinRequests());\n        this._subscriptions.add(this.replyToHasFocusRequests());\n    }\n    /**\n     * Monitors when a client gains the focus.\n     */ monitorFocusInEvents() {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$PlatformTopics.FocusIn).pipe((0, $a344549688aae3fd$export$871de8747c9eaa88)((event)=>event.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ClientId)), (0, $419c2da03c3ac473$export$779c5fb865a0172e)()).subscribe((clientId)=>$146947066e10b00e$var$runSafe(()=>{\n                this._focusOwner$.next((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry).getByClientId(clientId) || undefined);\n            }));\n    }\n    /**\n     * Replies to 'focus-within' requests.\n     */ replyToIsFocusWithinRequests() {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.IsFocusWithin, (request)=>{\n            const clientId = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ClientId);\n            return this._focusOwner$.pipe((0, $a344549688aae3fd$export$871de8747c9eaa88)((focusOwner)=>this.isFocusWithin(clientId, focusOwner)), (0, $419c2da03c3ac473$export$779c5fb865a0172e)());\n        });\n    }\n    /**\n     * Replies to 'focus' requests.\n     */ replyToHasFocusRequests() {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).onMessage($146947066e10b00e$var$PlatformTopics.HasFocus, (request)=>{\n            const clientId = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ClientId);\n            return this._focusOwner$.pipe((0, $a344549688aae3fd$export$871de8747c9eaa88)((focusOwner)=>focusOwner?.id === clientId), (0, $419c2da03c3ac473$export$779c5fb865a0172e)());\n        });\n    }\n    /**\n     * Tests whether the given client has received focus or contains embedded web content that has received focus.\n     */ isFocusWithin(clientId, focusOwner) {\n        for(let client = focusOwner; client !== undefined; client = this.getParentClient(client)){\n            if (client.id === clientId) return true;\n        }\n        return false;\n    }\n    getParentClient(client) {\n        if (client.window.parent === client.window) return undefined; // window has no parent as it is the top-level window\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry).getByWindow(client.window.parent);\n    }\n    preDestroy() {\n        this._subscriptions.forEach((subscription)=>subscription.unsubscribe());\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Fetches the manifest of an application.\n *\n * @internal\n */ class $146947066e10b00e$var$ManifestFetcher {\n    /**\n     * Fetches the manifest for given application.\n     *\n     * @return Promise that resolves to the manifest after successful retrieval, or that rejects if the manifest could not be fetched\n     *         or the maximum retrieval time has elapsed.\n     *         See https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful.\n     */ async fetch(appConfig) {\n        if (!appConfig.symbolicName) throw Error(\"[ManifestFetchError] Invalid application config. Missing required property 'symbolicName'.\");\n        if (!appConfig.manifestUrl) throw Error(\"[ManifestFetchError] Invalid application config. Missing required property 'manifestUrl'.\");\n        const fetchManifest$ = (0, $cecb8b01522e9ff4$export$6788812c4e6611e6)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$HttpClient).fetch(appConfig.manifestUrl));\n        const manifestFetchTimeout = appConfig.manifestLoadTimeout ?? (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$2eb36f74b177828a).manifestLoadTimeout;\n        const onManifestFetchTimeout = ()=>(0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>Error(`[ManifestFetchError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Timeout of ${manifestFetchTimeout}ms elapsed.`));\n        const manifestFetchResponse = await (0, $f03dcc354f8c1062$export$400f9f949cef996c)(fetchManifest$.pipe(manifestFetchTimeout ? (0, $4be3df9c8b191a2f$export$83e74882c5df8fe1)({\n            first: manifestFetchTimeout,\n            with: onManifestFetchTimeout\n        }) : (0, $d964bb9c87650d9b$export$f0954fd7d5368655)));\n        if (!manifestFetchResponse.ok) throw Error(`[ManifestFetchError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Maybe the application is currently unavailable. [httpStatusCode=${manifestFetchResponse.status}, httpStatusText=${manifestFetchResponse.statusText}]`);\n        return await manifestFetchResponse.json();\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Central point for managing message subscriptions.\n *\n * @internal\n */ class $146947066e10b00e$var$MessageSubscriptionRegistry {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._subscriptions = new Map();\n        this._subscriptionsByApp = new Map();\n        this._subscriptionsByClient = new Map();\n        this._register$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._unregister$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry).unregister$.pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((client)=>$146947066e10b00e$var$runSafe(()=>{\n                this.unregister({\n                    clientId: client.id\n                });\n            }));\n    }\n    /**\n     * Registers given subscription.\n     */ register(subscription) {\n        this._subscriptions.set(subscription.subscriberId, subscription);\n        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addSetValue(this._subscriptionsByApp, subscription.client.application.symbolicName, subscription);\n        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addSetValue(this._subscriptionsByClient, subscription.client.id, subscription);\n        this.onRegister?.(subscription);\n        this._register$.next(subscription);\n    }\n    /**\n     * Unregisters matching subscriptions.\n     *\n     * @param filter - Control which subscriptions to remove by specifying filter criteria which are \"AND\"ed together.\n     */ unregister(filter) {\n        const subscriptions = this.subscriptions(filter);\n        subscriptions.forEach((subscription)=>{\n            this._subscriptions.delete(subscription.subscriberId);\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeSetValue(this._subscriptionsByApp, subscription.client.application.symbolicName, subscription);\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeSetValue(this._subscriptionsByClient, subscription.client.id, subscription);\n            this.onUnregister?.(subscription);\n            subscription.notifyUnsubscribe();\n        });\n        this._unregister$.next(subscriptions);\n    }\n    /**\n     * Returns subscriptions matching the passed filter.\n     *\n     * @param filter - Control which subscriptions to return by specifying filter criteria which are \"AND\"ed together.\n     *                 If not specified, returns all subscriptions.\n     */ subscriptions(filter) {\n        const filterById = filter?.subscriberId;\n        const filterByClient = filter?.clientId;\n        const filterByApp = filter?.appSymbolicName;\n        return (0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).intersect(filterById ? this.subscriptionById(filterById) : undefined, filterByClient ? this.subscriptionsByClient(filterByClient) : undefined, filterByApp ? this.subscriptionsByApp(filterByApp) : undefined, filterById || filterByApp || filterByClient ? undefined : Array.from(this._subscriptions.values()));\n    }\n    /**\n     * Returns the subscription of given subscriber.\n     */ subscriptionById(subscriberId) {\n        const subscription = this._subscriptions.get(subscriberId);\n        return subscription ? [\n            subscription\n        ] : [];\n    }\n    /**\n     * Returns the subscriptions of given client.\n     */ subscriptionsByClient(clientId) {\n        const subscriptions = this._subscriptionsByClient.get(clientId);\n        return subscriptions ? Array.from(subscriptions) : [];\n    }\n    /**\n     * Returns the subscriptions of given application.\n     */ subscriptionsByApp(appSymbolicName) {\n        const subscriptions = this._subscriptionsByApp.get(appSymbolicName);\n        return subscriptions ? Array.from(subscriptions) : [];\n    }\n    /**\n     * Emits when registered a subscription via {@link MessageSubscriptionRegistry#register}.\n     */ get register$() {\n        return this._register$;\n    }\n    /**\n     * Emits when unregistered a subscription via {@link MessageSubscriptionRegistry#unregister}.\n     */ get unregister$() {\n        return this._unregister$;\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Represents a subscription for a given subscriber.\n *\n * @internal\n */ class $146947066e10b00e$var$MessageSubscription {\n    constructor(subscriberId, client){\n        this.subscriberId = subscriberId;\n        this.client = client;\n        /**\n         * Promise that resolves when the subscriber unsubscribes.\n         */ this.whenUnsubscribe = new Promise((resolve)=>this.notifyUnsubscribe = resolve);\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ const $146947066e10b00e$var$ASTERISK = \":\\u0275ANY\";\n/**\n * Central point for managing topic subscriptions.\n *\n * @internal\n */ class $146947066e10b00e$var$TopicSubscriptionRegistry extends $146947066e10b00e$var$MessageSubscriptionRegistry {\n    constructor(){\n        super(...arguments);\n        this._subscriptionsByTopic = new Map();\n    }\n    onRegister(subscription) {\n        const topic = $146947066e10b00e$var$Topics.replaceWildcardSegments(subscription.topic, $146947066e10b00e$var$ASTERISK);\n        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addSetValue(this._subscriptionsByTopic, topic, subscription);\n    }\n    onUnregister(subscription) {\n        const topic = $146947066e10b00e$var$Topics.replaceWildcardSegments(subscription.topic, $146947066e10b00e$var$ASTERISK);\n        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeSetValue(this._subscriptionsByTopic, topic, subscription);\n    }\n    subscriptions(filter) {\n        // Note that we need to identify matching subscriptions very quickly, otherwise the broker's throughput would decrease massively.\n        // Therefore, we must never iterate over all subscriptions, but resolve subscriptions by index.\n        const filterByTopic = filter?.topic;\n        const filterById = filter?.subscriberId;\n        const filterByClient = filter?.clientId;\n        const filterByApp = filter?.appSymbolicName;\n        return (0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).intersect(filterByTopic ? this.subscriptionsByTopic(filterByTopic) : undefined, filterById || filterByApp || filterByClient ? super.subscriptions(filter) : undefined, filterById || filterByApp || filterByClient || filterByTopic ? undefined : super.subscriptions());\n    }\n    /**\n     * Returns the subscription of given topic.\n     */ subscriptionsByTopic(topic) {\n        const subscriptions = new Array();\n        $146947066e10b00e$var$Topics.computeWildcardSegmentPermutations(topic, $146947066e10b00e$var$ASTERISK).forEach((permutation)=>{\n            subscriptions.push(...this._subscriptionsByTopic.get(permutation) || []);\n        });\n        return subscriptions;\n    }\n    /**\n     * Allows observing the number of subscriptions on a topic. It is not allowed to use wildcards in the topic to observe.\n     *\n     * @param  topic - Specifies the topic to observe.\n     * @return An Observable that, when subscribed, emits the current number of subscribers on it. It never completes and\n     *         emits continuously when the number of subscribers changes.\n     */ subscriptionCount$(topic) {\n        const illegalTopicError = $146947066e10b00e$var$Topics.validateTopic(topic, {\n            exactTopic: true\n        });\n        if (illegalTopicError) return (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>illegalTopicError);\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            const unsubscribe$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            // Emit current subscription count.\n            let count = this.subscriptions({\n                topic: topic\n            }).length;\n            observer.next(count);\n            // Increment count when matching subscriptions are added.\n            this.register$.pipe((0, $827970c208304071$export$3dea766d36a8935f)((subscription)=>subscription.matches(topic)), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(unsubscribe$)).subscribe(()=>{\n                count++;\n                observer.next(count);\n            });\n            // Decrement count when matching subscriptions are removed.\n            this.unregister$.pipe((0, $d5bd6ae9534d951f$export$8f2c8e61d147b502)((subscription)=>subscription.matches(topic)), (0, $827970c208304071$export$3dea766d36a8935f)((subscriptions)=>subscriptions.length > 0), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(unsubscribe$)).subscribe((subscriptions)=>{\n                count -= subscriptions.length;\n                observer.next(count);\n            });\n            return ()=>unsubscribe$.next();\n        });\n    }\n}\n/**\n * Represents a subscription on a topic. The topic may contain wildcard segments.\n *\n * @internal\n */ class $146947066e10b00e$var$TopicSubscription extends $146947066e10b00e$var$MessageSubscription {\n    constructor(topic, subscriberId, client){\n        super(subscriberId, client);\n        this.topic = topic;\n    }\n    /**\n     * Tests whether the given topic matches this subscription.\n     */ matches(topic) {\n        return topic === this.topic || new $146947066e10b00e$export$417f7cd86929f164(this.topic).match(topic).matches;\n    }\n}\n/**\n * Allows intercepting messages before their publication.\n *\n * An interceptor can reject or modify messages. Multiple interceptors can be registered, forming a chain in which each interceptor\n * is called one by one in registration order.\n *\n * For each message, the platform invokes the intercept method of the first registered interceptor, passing the message and the next\n * handler as arguments. By calling the next handler in the intercept method, message dispatching is continued. If there is no more\n * interceptor in the chain, the message is transported to the receivers, if any. But, if throwing an error in the intercept method,\n * message dispatching is aborted, and the error transported back to the sender.\n *\n * #### Registering Interceptors\n * You register interceptors with the bean manager when the host application starts. Interceptors can be registered only in the host\n * application. They are invoked in registration order.\n *\n * ```ts\n * Beans.register(MessageInterceptor, {useClass: MessageLoggerInterceptor, multi: true});\n * ```\n *\n * #### Filtering Messages for Interception\n * The platform passes all messages to the interceptors, including platform messages vital for its operation.\n * You can use the TopicMatcher to filter messages, allowing you to test whether a topic matches a pattern. The pattern must be a topic,\n * not a regular expression; thus, it must consist of one or more segments, each separated by a forward slash. The pattern can contain\n * wildcard segments. Wildcard segments start with a colon (:), acting act as a placeholder for any segment value.\n *\n * ```ts\n * class ProductValidatorInterceptor implements MessageInterceptor {\n *\n *   private topicMatcher = new TopicMatcher('product/:id');\n *\n *   public intercept(message: TopicMessage, next: Handler<TopicMessage>): Promise<void> {\n *     // Pass messages sent to other topics.\n *     if (!this.topicMatcher.match(message.topic).matches) {\n *       return next.handle(message);\n *     }\n *\n *     // Validate the payload of the message.\n *     if (isValid(message.body)) {\n *       return next.handle(message);\n *     }\n *\n *     throw Error('Message failed schema validation');\n *   }\n * }\n * ```\n *\n * @category Messaging\n */ class $146947066e10b00e$export$928c6333c0fd2868 {\n}\n/**\n * Allows intercepting intents before their publication.\n *\n * An interceptor can reject or modify intents. Multiple interceptors can be registered, forming a chain in which each interceptor\n * is called one by one in registration order.\n *\n * For each intent, the platform invokes the intercept method of the first registered interceptor, passing the intent and the next\n * handler as arguments. By calling the next handler in the intercept method, intent dispatching is continued. If there is no more\n * interceptor in the chain, the intent is transported to the receivers, if any. But, if throwing an error in the intercept method,\n * intent dispatching is aborted, and the error transported back to the sender.\n *\n * #### Registering Interceptors\n * You register interceptors with the bean manager when the host application starts. Interceptors can be registered only in the host\n * application. They are invoked in registration order.\n *\n * ```ts\n * Beans.register(IntentInterceptor, {useClass: IntentLoggerInterceptor, multi: true});\n * ```\n *\n * #### Filtering intents for Interception\n * The platform passes all intents to the interceptors. The interceptor must filter intents of interest.\n *\n * @category Messaging\n * @category Intention API\n */ class $146947066e10b00e$export$93458e9b1705f47e {\n}\n/**\n * Assembles the given interceptors to a chain of handlers which are called one after another. The publisher is added as terminal handler.\n *\n * @param interceptors - interceptors to be assembled to a chain\n * @param publisher - terminal handler to publish messages\n * @internal\n */ function $146947066e10b00e$export$218fc7342c49994f(interceptors, publisher) {\n    const terminalHandler = new class extends $146947066e10b00e$export$a428cd33b25d5283 {\n        handle(message) {\n            return publisher(message);\n        }\n    };\n    const handlerChain = interceptors.reduceRight((next, interceptor)=>new class extends $146947066e10b00e$export$a428cd33b25d5283 {\n            handle(element) {\n                return interceptor.intercept(element, next);\n            }\n        }, terminalHandler);\n    return new class {\n        interceptAndPublish(element) {\n            return handlerChain.handle(element);\n        }\n    };\n}\n/**\n * Represents a handler in the chain of interceptors.\n *\n * @category Messaging\n */ class $146947066e10b00e$export$a428cd33b25d5283 {\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ // See semantic versioning specification: https://semver.org/#semantic-versioning-specification-semver\nconst $146947066e10b00e$var$SEMVER_REGEX = /(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(-(?<prerelease>.+))?/;\n/*\n * Allows working with semantic versions (semver).\n *\n * ### Why not using `semver` NPM package (as of 2022-04)\n * We no longer depend on the NPM package `semver` as not yet been published as an ECMAScript module (ESM).\n * It is recommended to avoid dependencies on CommonJS modules as bundlers and minifiers may not be able to\n * optimize the application code, resulting in larger bundle size.\n *\n * For example, the Angular compiler would generate the following warning when using `semver`:\n * `Warning: ... depends on 'semver'. CommonJS or AMD dependencies can cause optimization bailouts.`\n *\n * ---\n *\n * The following rules for comparing two semantic versions are copied directly from the semantic versioning specification,\n * which can be found here: https://semver.org/#semantic-versioning-specification-semver\n *\n * ```\n * Precedence refers to how versions are compared to each other when ordered.\n *\n * 1. Precedence MUST be calculated by separating the version into major, minor, patch and pre-release identifiers\n *    in that order (Build metadata does not figure into precedence).\n *\n * 2. Precedence is determined by the first difference when comparing each of these identifiers from left to right as follows:\n *    Major, minor, and patch versions are always compared numerically.\n *    Example: 1.0.0 < 2.0.0 < 2.1.0 < 2.1.1.\n *\n * 3. When major, minor, and patch are equal, a pre-release version has lower precedence than a normal version:\n *    Example: 1.0.0-alpha < 1.0.0.\n *\n * 4. Precedence for two pre-release versions with the same major, minor, and patch version MUST be determined by comparing\n *    each dot separated identifier from left to right until a difference is found as follows:\n *\n *    1. Identifiers consisting of only digits are compared numerically.\n *    2. Identifiers with letters or hyphens are compared lexically in ASCII sort order.\n *    3. Numeric identifiers always have lower precedence than non-numeric identifiers.\n *    4. A larger set of pre-release fields has a higher precedence than a smaller set, if all of the preceding identifiers are equal.\n *\n *   Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.\n * ```\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */ class $146947066e10b00e$var$semver {\n    constructor(){}\n    /**\n     * Return the major version number.\n     */ static major(version) {\n        return $146947066e10b00e$var$parseVersion(version ?? \"0.0.0\").major;\n    }\n    /**\n     * Tests if `version1` is lower than `version2`.\n     *\n     * @return `true` if `version1` is lower than `version2`, or `false` otherwise.\n     *         The values `null` and `undefined` have lower precedence than a normal version.\n     * @throws throws if passed version is not a valid semantic version.\n     */ static lt(version1, version2) {\n        return $146947066e10b00e$var$compare(version1, version2) < 0;\n    }\n}\n/**\n * Compares given two versions.\n *\n * @return -1: if `v1` is lower than `v2`\n *          0: if both version are identical\n *         +1: if `v1` is greater than `v2`\n */ function $146947066e10b00e$var$compare(v1, v2) {\n    if (!v1 && v2) return -1;\n    if (!v1 && !v2) return 0;\n    if (v1 && !v2) return 1;\n    const semVer1 = $146947066e10b00e$var$parseVersion(v1);\n    const semVer2 = $146947066e10b00e$var$parseVersion(v2);\n    // Compare major version\n    const majorCompare = Math.sign(semVer1.major - semVer2.major);\n    if (majorCompare !== 0) return majorCompare;\n    // Compare minor version\n    const minorCompare = Math.sign(semVer1.minor - semVer2.minor);\n    if (minorCompare !== 0) return minorCompare;\n    // Compare patch version\n    const patchCompare = Math.sign(semVer1.patch - semVer2.patch);\n    if (patchCompare !== 0) return patchCompare;\n    // Compare pre-release portion.\n    return $146947066e10b00e$var$comparePreRelease(semVer1, semVer2);\n}\n/**\n * Compares the prerelease portion of two versions.\n *\n * @return -1: if `version1` is lower than `version2`\n *          0: if both version are identical\n *         +1: if `version1` is greater than `version2`\n */ function $146947066e10b00e$var$comparePreRelease(v1, v2) {\n    if (v1.preRelease && !v2.preRelease) return -1;\n    if (!v1.preRelease && !v2.preRelease) return 0;\n    if (!v1.preRelease && v2.preRelease) return 1;\n    for(let i = 0; i < Math.max(v1.preRelease.length, v2.preRelease.length); i++){\n        const identifier1 = v1.preRelease[i];\n        const identifier2 = v2.preRelease[i];\n        if (identifier1 === undefined) return -1;\n        if (identifier2 === undefined) return 1;\n        if (typeof identifier1 === \"number\" && typeof identifier2 === \"string\") return -1;\n        if (typeof identifier1 === \"string\" && typeof identifier2 === \"number\") return 1;\n        if (identifier1 < identifier2) return -1;\n        if (identifier1 > identifier2) return 1;\n    }\n    return 0;\n}\n/**\n * Parses given version into a {@link SemVer} instance.\n *\n * @throws throws if passed version is not a valid semantic version.\n */ function $146947066e10b00e$var$parseVersion(version) {\n    const match = version.match($146947066e10b00e$var$SEMVER_REGEX);\n    if (!match) throw Error(`[SemVerError] Version '${version}' is not a valid semantic version (semver).`);\n    return {\n        major: +match.groups[\"major\"],\n        minor: +match.groups[\"minor\"],\n        patch: +match.groups[\"patch\"],\n        preRelease: match.groups[\"prerelease\"]?.split(\".\").map((identifier)=>{\n            const numericIdentifier = +identifier;\n            return Number.isNaN(numericIdentifier) ? identifier : numericIdentifier;\n        })\n    };\n}\n/**\n * Specifies the interval (in milliseconds) at which the host pings connected clients.\n *\n * By default, if not set, a ping interval of 60s is used.\n *\n * NOTE: Use pure inline comment to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */ const $146947066e10b00e$var$CLIENT_PING_INTERVAL = /*@__PURE__*/ Symbol(\"CLIENT_PING_INTERVAL\");\n/**\n * Specifies the ping timeout (in milliseconds) for unregistering a client.\n *\n * By default, if not set, clients are unregistered if not answering the ping within 10 seconds.\n *\n * NOTE: Use pure inline comment to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */ const $146947066e10b00e$var$CLIENT_PING_TIMEOUT = /*@__PURE__*/ Symbol(\"CLIENT_PING_TIMEOUT\");\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * @internal\n */ class $146947066e10b00e$var$\\u0275Client {\n    constructor(id, window1, origin, application, version){\n        this.id = id;\n        this.window = window1;\n        this.origin = origin;\n        this.application = application;\n        this.version = version ?? \"0.0.0\";\n        this.installLivenessDetector();\n    }\n    /**\n     * Starts performing liveness tests to detect when this client is no longer connected to the host.\n     *\n     * Liveness is detected by sending ping requests at regular intervals.\n     *\n     * A client may fail to disconnect from the broker for a number of reasons:\n     * - The client was disposed without notice, i.e., without receiving the browser's \"unload\" event.\n     * - The browser discarded the \"DISCONNECT\" message because the client window became stale.\n     *   Typically, the browser discards messages for windows that are already closed or if another page\n     *   has been loaded into the window, both indicating a high load on the client during unloading.\n     */ installLivenessDetector() {\n        // The client of the host app needs not to be checked for liveness as it is part of the host.\n        if (this.application.symbolicName === (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a11aa4b1ad6eec09)) return;\n        // Observable to perform the ping. If the client does not respond, we ping the client again to account for the rare situation where\n        // the computer goes into standby immediately after sending the ping. Upon resumption, the timeout would expire immediately without\n        // the client being able to send the response.\n        const performPing$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.ping(this.id)).pipe((0, $4be3df9c8b191a2f$export$83e74882c5df8fe1)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$CLIENT_PING_TIMEOUT)), (0, $63c66526492cd4cc$export$9369b12211e1fce4)(1));\n        this._livenessDetector = (0, $5c0fdd8d65c521ee$export$3174cdbf0a0cbc84)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$CLIENT_PING_INTERVAL)).pipe((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)(()=>performPing$)).subscribe({\n            error: ()=>{\n                this.logStaleClientWarning();\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry).unregisterClient(this);\n            }\n        });\n    }\n    get stale() {\n        return this.window.closed;\n    }\n    dispose() {\n        this._livenessDetector?.unsubscribe();\n    }\n    logStaleClientWarning() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[StaleClient] Stale client registration of application '${this.application.symbolicName}' detected.\n       Removing stale registration. Most likely, the client could not disconnect from the broker, for example, because the client was\n       disposed without notice, i.e., without receiving the browser's \"unload\" event, or because the browser discarded the 'DISCONNECT'\n       message. Typically, the browser discards messages for windows that are already closed or if another page has been loaded into the\n       window, both indicating a high load on the client during unloading.`.replace(/\\s+/g, \" \"), new $146947066e10b00e$export$cfece0898859977d(this.application.symbolicName, this.version));\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Central point for managing intent subscriptions.\n *\n * @internal\n */ class $146947066e10b00e$var$IntentSubscriptionRegistry extends $146947066e10b00e$var$MessageSubscriptionRegistry {\n    subscriptions(filter) {\n        return super.subscriptions(filter).filter((subscription)=>filter?.intent ? subscription.matches(filter.intent) : true);\n    }\n}\n/**\n * Represents a subscription for intents matching the passed selector.\n *\n * @internal\n */ class $146947066e10b00e$var$IntentSubscription extends $146947066e10b00e$var$MessageSubscription {\n    constructor(selector, subscriberId, client){\n        super(subscriberId, client);\n        this.selector = selector;\n    }\n    /**\n     * Tests whether the given intent matches this subscription.\n     *\n     * Note that only a type and qualifier check is performed, but not whether the application is eligible\n     * to receive matching intents, i.e., provides a fulfilling capability.\n     */ matches(intent) {\n        if (this.selector.type && this.selector.type !== intent.type) return false;\n        if (this.selector.qualifier && !new $146947066e10b00e$export$26246f283d6ee833(this.selector.qualifier).matches(intent.qualifier)) return false;\n        return true;\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides utilities for working with predicates.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */ class $146947066e10b00e$var$Predicates {\n    constructor(){}\n    /**\n     * Negates the given predicate.\n     */ static not(predicate) {\n        return (value)=>!predicate(value);\n    }\n    /**\n     * Represents a predicate that always evaluates to `true`.\n     */ static{\n        this.alwaysTrue = ()=>true;\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows testing whether params match the param definitions.\n *\n * @internal\n */ class $146947066e10b00e$var$ParamMatcher {\n    constructor(definitions){\n        this._requiredParamDefs = new Array();\n        this._optionalParamDefs = new Array();\n        this._deprecatedParamDefs = new Array();\n        definitions.forEach((paramDef)=>{\n            if (paramDef.required ?? true) this._requiredParamDefs.push(paramDef);\n            else this._optionalParamDefs.push(paramDef);\n            if (paramDef.deprecated) this._deprecatedParamDefs.push(paramDef);\n        });\n    }\n    /**\n     * Tests if the given params match the param definitions.\n     */ match(parameters) {\n        const params = new Map(parameters);\n        const matcherResult = {\n            matches: true,\n            params: params,\n            missingParams: [],\n            unexpectedParams: [],\n            deprecatedParams: []\n        };\n        // Test if deprecated params are passed and map them to their substitute, if any.\n        this._deprecatedParamDefs.filter((paramDef)=>params.has(paramDef.name)).forEach((paramDef)=>{\n            matcherResult.deprecatedParams.push(paramDef);\n            // Try mapping the deprecated param to its substitute.\n            const deprecation = paramDef.deprecated;\n            if (typeof deprecation === \"object\" && deprecation.useInstead) {\n                params.set(deprecation.useInstead, params.get(paramDef.name));\n                params.delete(paramDef.name);\n            }\n        });\n        // Test if required params are passed.\n        this._requiredParamDefs.filter((paramDef)=>!params.has(paramDef.name) || params.get(paramDef.name) === undefined).filter((paramDef)=>!this._deprecatedParamDefs.includes(paramDef)).forEach((paramDef)=>{\n            matcherResult.matches = false;\n            matcherResult.missingParams.push(paramDef);\n        });\n        // Test if no additional params are passed.\n        Array.from(params.keys()).filter((param)=>!this._requiredParamDefs.some((paramDef)=>paramDef.name === param) && !this._optionalParamDefs.some((paramDef)=>paramDef.name === param)).forEach((param)=>{\n            matcherResult.matches = false;\n            matcherResult.unexpectedParams.push(param);\n        });\n        if (!matcherResult.matches) matcherResult.params = undefined;\n        return matcherResult;\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides utilities for working with intent params.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */ class $146947066e10b00e$var$IntentParams {\n    constructor(){}\n    /**\n     * Validates params of given intent.\n     *\n     * @throws if the message contains invalid params.\n     */ static validateParams(intentMessage) {\n        const { intent: intent, capability: capability } = intentMessage;\n        const sender = intentMessage.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName);\n        intent.params = new Map(intent.params);\n        // Remove params with `undefined` as value.\n        intent.params.forEach((value, key)=>{\n            if (value === undefined) intent.params.delete(key);\n        });\n        // Test params passed with the intent to match expected params as declared on the capability.\n        const paramMatcherResult = new $146947066e10b00e$var$ParamMatcher(capability.params || []).match(intent.params);\n        if (!paramMatcherResult.matches) {\n            const error = $146947066e10b00e$var$toParamValidationError(paramMatcherResult, intent);\n            throw Error(`[IntentParamValidationError] ${error}`);\n        }\n        // Warn about the usage of deprecated params.\n        if (paramMatcherResult.deprecatedParams.length) {\n            paramMatcherResult.deprecatedParams.forEach((deprecatedParam)=>{\n                const warning = $146947066e10b00e$var$toDeprecatedParamWarning(deprecatedParam, {\n                    appSymbolicName: sender\n                });\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[DEPRECATION][4EAC5956] ${warning}`, new $146947066e10b00e$export$cfece0898859977d(sender), intent);\n            });\n            // Use the matcher's parameters to have deprecated params mapped to their replacement.\n            intent.params = paramMatcherResult.params;\n        }\n    }\n}\nfunction $146947066e10b00e$var$toParamValidationError(paramsMatcherResult, intent) {\n    const intentStringified = JSON.stringify(intent, (key, value)=>key === \"params\" ? undefined : value);\n    const missingParams = paramsMatcherResult.missingParams.map((param)=>param.name);\n    const unexpectedParams = paramsMatcherResult.unexpectedParams;\n    return `Params of intent do not match expected params of capability. The intent must have required params and not have additional params. [intent=${intentStringified}, missingParams=[${missingParams}], unexpectedParams=[${unexpectedParams}]].`;\n}\nfunction $146947066e10b00e$var$toDeprecatedParamWarning(param, metadata) {\n    const deprecation = param.deprecated;\n    const useInstead = typeof deprecation === \"object\" && deprecation.useInstead || undefined;\n    const message = typeof deprecation === \"object\" && deprecation.message || undefined;\n    return new Array().concat(`Application '${metadata.appSymbolicName}' passes a deprecated parameter in the intent: '${param.name}'.`).concat(useInstead ? `Pass parameter '${useInstead}' instead.` : []).concat(message || []).join(\" \");\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * The broker is responsible for receiving all messages, filtering the messages, determining who is\n * subscribed to each message, and sending the message to these subscribed clients.\n *\n * The broker allows topic-based and intent-based messaging and supports retained messages.\n *\n * When the broker receives a message from a client, the broker identifies the sending client using the {@Window}\n * contained in the {@link MessageEvent}. The user agent sets the window, which cannot be tampered by the client.\n * However, when the client unloads, the window is not set because already been destroyed. Then, the broker identifies\n * the client using the unique client id. In both cases, the broker checks the origin of the message to match the\n * origin of the registered application.\n *\n * The broker processes client connect requests in runlevel 1 or higher. Message dispatching is enabled in runlevel 2.\n * Prior requests are buffered until entering the respective runlevel.\n *\n * @internal\n */ class $146947066e10b00e$var$MessageBroker {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._clientRegistry = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry);\n        this._topicSubscriptionRegistry = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$TopicSubscriptionRegistry);\n        this._intentSubscriptionRegistry = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$IntentSubscriptionRegistry);\n        this._retainedMessageStore = new Map();\n        this._retainedIntentStore = new Map();\n        this._applicationRegistry = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry);\n        this._manifestRegistry = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ManifestRegistry);\n        // Construct a stream of messages sent by clients.\n        this._clientMessage$ = (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"message\").pipe($146947066e10b00e$var$filterByTransport($146947066e10b00e$var$MessagingTransport.ClientToBroker), $146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.Intent, $146947066e10b00e$var$MessagingChannel.Topic, $146947066e10b00e$var$MessagingChannel.TopicSubscribe, $146947066e10b00e$var$MessagingChannel.TopicUnsubscribe, $146947066e10b00e$var$MessagingChannel.IntentSubscribe, $146947066e10b00e$var$MessagingChannel.IntentUnsubscribe), (0, $d5bd6ae9534d951f$export$b5f2084817235760)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).whenRunlevel($146947066e10b00e$export$63daa6aa86ffb707.Two)), $146947066e10b00e$var$checkOriginTrusted(), $146947066e10b00e$var$catchErrorAndRetry(), (0, $f60f59c3c27c3419$export$ed80d9de1d9df928)());\n        // Install client connect listeners.\n        this.installClientConnectListener();\n        this.installClientDisconnectListener();\n        // Install message handling.\n        this.installMessageDispatcher();\n        this.installTopicSubscribeListener();\n        this.installTopicUnsubscribeListener();\n        this.installTopicSubscriberCountObserver();\n        this.sendRetainedMessageOnSubscribe();\n        // Install intent handling.\n        this.installIntentDispatcher();\n        this.installIntentSubscribeListener();\n        this.installIntentUnsubscribeListener();\n        this.sendRetainedIntentOnSubscribe();\n        this.deleteRetainedIntentOnCapabilityUnregister();\n        // Assemble message interceptors to a chain of handlers which are called one after another. The publisher is added as terminal handler.\n        this._messagePublisher = this.createMessagePublisher();\n        this._intentPublisher = this.createIntentPublisher();\n    }\n    init() {\n        return Promise.resolve();\n    }\n    installClientConnectListener() {\n        (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"message\").pipe($146947066e10b00e$var$filterByTransport($146947066e10b00e$var$MessagingTransport.ClientToBroker), $146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.ClientConnect), (0, $d5bd6ae9534d951f$export$b5f2084817235760)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).whenRunlevel($146947066e10b00e$export$63daa6aa86ffb707.One)), $146947066e10b00e$var$catchErrorAndRetry(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>$146947066e10b00e$var$runSafe(()=>{\n                // Ignore stale CONNECT request, e.g. if the origin window has been closed or a page with a different origin has been loaded.\n                if (!event.source) {\n                    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).debug(`[CONNECT] Ignoring stale connect request from \"${event.origin}\".`);\n                    return;\n                }\n                const eventSource = event.source;\n                const envelope = event.data;\n                const clientAppName = envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName);\n                const clientMessageTarget = new $146947066e10b00e$var$MessageTarget(event);\n                const replyTo = envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n                if (!clientAppName) {\n                    const warning = `Client connect attempt rejected: Bad request. [origin='${event.origin}']`;\n                    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[CONNECT] ${warning}`);\n                    $146947066e10b00e$var$sendTopicMessage(clientMessageTarget, {\n                        topic: replyTo,\n                        body: {\n                            returnCode: \"refused:bad-request\",\n                            returnMessage: `[ClientConnectError] ${warning}`\n                        },\n                        headers: new Map()\n                    });\n                    return;\n                }\n                const application = this._applicationRegistry.getApplication(clientAppName, {\n                    orElse: null\n                });\n                if (!application) {\n                    const warning = `Client connect attempt rejected: Unknown client. [app='${clientAppName}']`;\n                    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[CONNECT] ${warning}`);\n                    $146947066e10b00e$var$sendTopicMessage(clientMessageTarget, {\n                        topic: replyTo,\n                        body: {\n                            returnCode: \"refused:rejected\",\n                            returnMessage: `[ClientConnectError] ${warning}`\n                        },\n                        headers: new Map()\n                    });\n                    return;\n                }\n                if (!application.allowedMessageOrigins.has(event.origin)) {\n                    const warning = `Client connect attempt blocked: Wrong origin [actual='${event.origin}', expected='${Array.from(application.allowedMessageOrigins)}', app='${application.symbolicName}']`;\n                    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[CONNECT] ${warning}`);\n                    $146947066e10b00e$var$sendTopicMessage(clientMessageTarget, {\n                        topic: replyTo,\n                        body: {\n                            returnCode: \"refused:blocked\",\n                            returnMessage: `[ClientConnectError] ${warning}`\n                        },\n                        headers: new Map()\n                    });\n                    return;\n                }\n                // Check if the client is already connected. If already connected, do nothing. A client can potentially initiate multiple connect requests, for example,\n                // when not receiving connect confirmation in time.\n                const currentClient = this._clientRegistry.getByWindow(eventSource);\n                if (currentClient && currentClient.origin === event.origin && currentClient.application.symbolicName === application.symbolicName) {\n                    $146947066e10b00e$var$sendTopicMessage(currentClient, {\n                        topic: replyTo,\n                        body: {\n                            returnCode: \"accepted\",\n                            clientId: currentClient.id\n                        },\n                        headers: new Map()\n                    });\n                    return;\n                }\n                const client = new $146947066e10b00e$var$\\u0275Client((0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID(), eventSource, event.origin, application, envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.Version));\n                this._clientRegistry.registerClient(client);\n                // Check if the client is compatible with the platform version of the host.\n                if ($146947066e10b00e$var$semver.major(client.version) !== $146947066e10b00e$var$semver.major((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$\\u0275VERSION))) (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[VersionMismatch] Application '${application.symbolicName}' uses a different major version of the @scion/microfrontend-platform than the host application, which may not be compatible. Please upgrade @scion/microfrontend-platform of application '${application.symbolicName}' from version '${client.version}' to version '${(0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$\\u0275VERSION)}'.`, new $146947066e10b00e$export$cfece0898859977d(application.symbolicName, client.version));\n                $146947066e10b00e$var$sendTopicMessage(client, {\n                    topic: replyTo,\n                    body: {\n                        returnCode: \"accepted\",\n                        clientId: client.id\n                    },\n                    headers: new Map()\n                });\n            }));\n    }\n    /**\n     * Listens for client disconnect requests.\n     */ installClientDisconnectListener() {\n        (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"message\").pipe($146947066e10b00e$var$filterByTransport($146947066e10b00e$var$MessagingTransport.ClientToBroker), $146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.ClientDisconnect), (0, $d5bd6ae9534d951f$export$b5f2084817235760)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).whenRunlevel($146947066e10b00e$export$63daa6aa86ffb707.One)), $146947066e10b00e$var$checkOriginTrusted(), $146947066e10b00e$var$catchErrorAndRetry(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>$146947066e10b00e$var$runSafe(()=>{\n                const client = $146947066e10b00e$var$getSendingClient(event);\n                this._clientRegistry.unregisterClient(client);\n            }));\n    }\n    /**\n     * Replies to requests to observe the number of subscribers on a topic.\n     */ installTopicSubscriberCountObserver() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$PlatformTopics.RequestSubscriberCount).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((request)=>$146947066e10b00e$var$runSafe(()=>{\n                const topic = request.body;\n                const replyTo = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n                const unsubscribe$ = this._topicSubscriptionRegistry.subscriptionCount$(replyTo).pipe((0, $827970c208304071$export$3dea766d36a8935f)((count)=>count === 0));\n                this._topicSubscriptionRegistry.subscriptionCount$(topic).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)((0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._destroy$, unsubscribe$))).subscribe({\n                    next: (count)=>(0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, count),\n                    error: (error)=>(0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, $146947066e10b00e$var$stringifyError(error), {\n                            headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.ERROR)\n                        })\n                });\n            }));\n    }\n    /**\n     * Dispatches topic messages to subscribed clients.\n     */ installMessageDispatcher() {\n        this._clientMessage$.pipe($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.Topic), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>$146947066e10b00e$var$runSafe(async ()=>{\n                const client = $146947066e10b00e$var$getSendingClient(event);\n                const message = event.data.message;\n                const messageId = message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId);\n                const illegalTopicError = $146947066e10b00e$var$Topics.validateTopic(message.topic, {\n                    exactTopic: true\n                });\n                if (illegalTopicError) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, illegalTopicError);\n                    return;\n                }\n                // If a retained message without payload, remove any stored retained message on that topic, if any.\n                if (message.retain && !$146947066e10b00e$var$isRequest(message) && message.body === undefined) {\n                    (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._retainedMessageStore, message.topic, $146947066e10b00e$var$Predicates.not($146947066e10b00e$var$isRequest));\n                    $146947066e10b00e$var$sendDeliveryStatusSuccess(client, messageId);\n                    return;\n                }\n                try {\n                    // If a request of a request-response communication, create a subscription for the requestor to receive replies.\n                    const requestorReplySubscription = this.subscribeForRepliesIfRequest(message, client);\n                    // Ensure the message header 'ɵSUBSCRIBER_ID' to be removed; is set in request-response communication by the client gateway.\n                    message.headers.delete($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId);\n                    // Dispatch the message.\n                    await this._messagePublisher.interceptAndPublish(message);\n                    // If a retained message or request, store it for late subscribers.\n                    this.storeMessageIfRetained(message, requestorReplySubscription);\n                    $146947066e10b00e$var$sendDeliveryStatusSuccess(client, messageId);\n                } catch (error) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                }\n            }));\n    }\n    /**\n     * Dispatches intents to qualified clients.\n     */ installIntentDispatcher() {\n        this._clientMessage$.pipe($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.Intent), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>$146947066e10b00e$var$runSafe(async ()=>{\n                const client = $146947066e10b00e$var$getSendingClient(event);\n                const message = event.data.message;\n                const messageId = message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId);\n                if (!message.intent) {\n                    const error = \"[MessagingError] Missing message property: intent\";\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                    return;\n                }\n                if (!message.intent.type) {\n                    const error = \"[MessagingError] Missing message property: type\";\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                    return;\n                }\n                const illegalQualifierError = $146947066e10b00e$var$Qualifiers.validateQualifier(message.intent.qualifier, {\n                    exactQualifier: true\n                });\n                if (illegalQualifierError) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, illegalQualifierError);\n                    return;\n                }\n                if (!this._manifestRegistry.hasIntention(message.intent, client.application.symbolicName)) {\n                    const error = `[NotQualifiedError] Application '${client.application.symbolicName}' is not qualified to publish intents of the type '${message.intent.type}' and qualifier '${JSON.stringify(message.intent.qualifier || {})}'. Ensure to have listed the intention in the application manifest.`;\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                    return;\n                }\n                // Find capabilities fulfilling the intent, or send an error otherwise.\n                const capabilities = this._manifestRegistry.resolveCapabilitiesByIntent(message.intent, client.application.symbolicName);\n                if (capabilities.length === 0) {\n                    const error = `[NullProviderError] No application found to provide a capability of the type '${message.intent.type}' and qualifiers '${JSON.stringify(message.intent.qualifier || {})}'. Maybe, the capability is not public API or the providing application not available.`;\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                    return;\n                }\n                // If a retained message without payload, remove any stored retained message for the resolved capabilities.\n                if (message.retain && !$146947066e10b00e$var$isRequest(message) && message.body === undefined) {\n                    capabilities.forEach((capability)=>{\n                        (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._retainedIntentStore, capability.metadata.id, $146947066e10b00e$var$Predicates.not($146947066e10b00e$var$isRequest));\n                        $146947066e10b00e$var$sendDeliveryStatusSuccess(client, messageId);\n                    });\n                    return;\n                }\n                try {\n                    // If a request of a request-response communication, create a subscription for the requestor to receive replies.\n                    const requestorReplySubscription = this.subscribeForRepliesIfRequest(message, client);\n                    // Ensure the message header 'ɵSUBSCRIBER_ID' to be removed; is set in request-response communication by the client gateway.\n                    message.headers.delete($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId);\n                    // Dispatch the message.\n                    await Promise.all(capabilities// Associate capability with the intent.\n                    .map((capability)=>({\n                            ...message,\n                            capability: capability\n                        })).map(async (message)=>{\n                        // Validate intent params.\n                        $146947066e10b00e$var$IntentParams.validateParams(message);\n                        // Publish the intent.\n                        await this._intentPublisher.interceptAndPublish(message);\n                        // If a retained message or request, store it for late subscribers.\n                        this.storeIntentIfRetained(message, requestorReplySubscription);\n                    }));\n                    $146947066e10b00e$var$sendDeliveryStatusSuccess(client, messageId);\n                } catch (error) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                }\n            }));\n    }\n    /**\n     * Installs a listener that sends retained messages to new subscribers.\n     */ sendRetainedMessageOnSubscribe() {\n        this._topicSubscriptionRegistry.register$.pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((subscription)=>$146947066e10b00e$var$runSafe(()=>{\n                Array.from(this._retainedMessageStore.values()).flat().filter((retainedMessage)=>subscription.matches(retainedMessage.topic)).forEach((retainedMessage)=>this._messagePublisher.interceptAndPublish({\n                        ...retainedMessage,\n                        headers: new Map(retainedMessage.headers).set($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId, subscription.subscriberId)\n                    }));\n            }));\n    }\n    /**\n     * Installs a listener that sends retained intents to new subscribers.\n     */ sendRetainedIntentOnSubscribe() {\n        this._intentSubscriptionRegistry.register$.pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((subscription)=>$146947066e10b00e$var$runSafe(()=>{\n                Array.from(this._retainedIntentStore.values()).flat().filter((retainedMessage)=>subscription.client.application.symbolicName === retainedMessage.capability.metadata.appSymbolicName).filter((retainedMessage)=>subscription.matches(retainedMessage.intent)).forEach((retainedMessage)=>this._intentPublisher.interceptAndPublish({\n                        ...retainedMessage,\n                        headers: new Map(retainedMessage.headers).set($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId, subscription.subscriberId)\n                    }));\n            }));\n    }\n    /**\n     * Installs a listener that removes retained intent(s) when associated capability is removed.\n     */ deleteRetainedIntentOnCapabilityUnregister() {\n        this._manifestRegistry.capabilityUnregister$.pipe((0, $8657d55690de2a98$export$6b9f6c0d32c093f9)((capabilities)=>(0, $cecb8b01522e9ff4$export$6788812c4e6611e6)(capabilities)), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((capability)=>$146947066e10b00e$var$runSafe(()=>{\n                (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._retainedIntentStore, capability.metadata.id, $146947066e10b00e$var$Predicates.alwaysTrue);\n            }));\n    }\n    /**\n     * Listens for topic subscription requests.\n     */ installTopicSubscribeListener() {\n        this._clientMessage$.pipe($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.TopicSubscribe), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>$146947066e10b00e$var$runSafe(()=>{\n                const client = $146947066e10b00e$var$getSendingClient(event);\n                const envelope = event.data;\n                const messageId = envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId);\n                const topic = envelope.message.topic;\n                const illegalTopicError = $146947066e10b00e$var$Topics.validateTopic(topic, {\n                    exactTopic: false\n                });\n                if (illegalTopicError) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, illegalTopicError);\n                    return;\n                }\n                try {\n                    const subscriberId = (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(envelope.message.subscriberId, ()=>Error(\"[TopicSubscribeError] Missing property: subscriberId\"));\n                    this._topicSubscriptionRegistry.register(new $146947066e10b00e$var$TopicSubscription(topic, subscriberId, client));\n                    $146947066e10b00e$var$sendDeliveryStatusSuccess(client, messageId);\n                } catch (error) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                }\n            }));\n    }\n    /**\n     * Listens for topic unsubscription requests.\n     */ installTopicUnsubscribeListener() {\n        this._clientMessage$.pipe($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.TopicUnsubscribe), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>$146947066e10b00e$var$runSafe(()=>{\n                const client = $146947066e10b00e$var$getSendingClient(event);\n                const envelope = event.data;\n                const messageId = envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId);\n                try {\n                    const subscriberId = (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(envelope.message.subscriberId, ()=>Error(\"[TopicUnsubscribeError] Missing property: subscriberId\"));\n                    this._topicSubscriptionRegistry.unregister({\n                        subscriberId: subscriberId\n                    });\n                    $146947066e10b00e$var$sendDeliveryStatusSuccess(client, messageId);\n                } catch (error) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                }\n            }));\n    }\n    /**\n     * Listens for intent subscription requests.\n     */ installIntentSubscribeListener() {\n        this._clientMessage$.pipe($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.IntentSubscribe), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>$146947066e10b00e$var$runSafe(()=>{\n                const client = $146947066e10b00e$var$getSendingClient(event);\n                const envelope = event.data;\n                const messageId = envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId);\n                const illegalQualifierError = $146947066e10b00e$var$Qualifiers.validateQualifier(envelope.message.selector?.qualifier, {\n                    exactQualifier: false\n                });\n                if (illegalQualifierError) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, illegalQualifierError);\n                    return;\n                }\n                try {\n                    const subscriberId = (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(envelope.message.subscriberId, ()=>Error(\"[IntentSubscribeError] Missing property: subscriberId\"));\n                    this._intentSubscriptionRegistry.register(new $146947066e10b00e$var$IntentSubscription(envelope.message.selector || {}, subscriberId, client));\n                    $146947066e10b00e$var$sendDeliveryStatusSuccess(client, messageId);\n                } catch (error) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                }\n            }));\n    }\n    /**\n     * Listens for intent unsubscription requests.\n     */ installIntentUnsubscribeListener() {\n        this._clientMessage$.pipe($146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.IntentUnsubscribe), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>$146947066e10b00e$var$runSafe(()=>{\n                const client = $146947066e10b00e$var$getSendingClient(event);\n                const envelope = event.data;\n                const messageId = envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId);\n                try {\n                    const subscriberId = (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(envelope.message.subscriberId, ()=>Error(\"[IntentUnsubscribeError] Missing property: subscriberId\"));\n                    this._intentSubscriptionRegistry.unregister({\n                        subscriberId: subscriberId\n                    });\n                    $146947066e10b00e$var$sendDeliveryStatusSuccess(client, messageId);\n                } catch (error) {\n                    $146947066e10b00e$var$sendDeliveryStatusError(client, messageId, error);\n                }\n            }));\n    }\n    /**\n     * Creates the interceptor chain to intercept message publishing. The publisher is added as terminal handler.\n     */ createMessagePublisher() {\n        return $146947066e10b00e$export$218fc7342c49994f((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).all($146947066e10b00e$export$928c6333c0fd2868), async (message)=>{\n            const subscribers = this._topicSubscriptionRegistry.subscriptions({\n                subscriberId: message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId),\n                topic: message.topic\n            });\n            // If request-reply communication, reply with an error if no subscriber is registered to answer the request.\n            if ($146947066e10b00e$var$isRequest(message) && !message.retain && !subscribers.length) throw Error(`[MessagingError] No subscriber registered to answer the request [topic=${message.topic}]`);\n            subscribers.forEach((subscriber)=>$146947066e10b00e$var$runSafe(()=>$146947066e10b00e$var$sendTopicMessage(subscriber, message)));\n        });\n    }\n    /**\n     * Creates the interceptor chain to intercept intent publishing. The publisher is added as terminal handler.\n     */ createIntentPublisher() {\n        return $146947066e10b00e$export$218fc7342c49994f((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).all($146947066e10b00e$export$93458e9b1705f47e), async (message)=>{\n            const subscribers = this._intentSubscriptionRegistry.subscriptions({\n                subscriberId: message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId),\n                appSymbolicName: message.capability.metadata.appSymbolicName,\n                intent: message.intent\n            });\n            // If request-reply communication, reply with an error if no subscriber is registered to answer the intent.\n            if ($146947066e10b00e$var$isRequest(message) && !message.retain && !subscribers.length) throw Error(`[MessagingError] No subscriber registered to answer the intent [intent=${JSON.stringify(message.intent)}]`);\n            subscribers.forEach((subscriber)=>$146947066e10b00e$var$runSafe(()=>$146947066e10b00e$var$sendIntentMessage(subscriber, message)));\n        });\n    }\n    /**\n     * Create a subscription for the sender to receive replies if request-response communication.\n     */ subscribeForRepliesIfRequest(message, sender) {\n        if (!$146947066e10b00e$var$isRequest(message)) return null;\n        const subscriberId = (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId), ()=>Error(\"[MessagingError] Missing message header: subscriberId\"));\n        const replyTo = message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n        const subscription = new $146947066e10b00e$var$TopicSubscription(replyTo, subscriberId, sender);\n        this._topicSubscriptionRegistry.register(subscription);\n        return subscription;\n    }\n    /**\n     * Stores the message if retained.\n     *\n     * Unlike a regular message, a retained message remains in the broker and is delivered to new subscribers, even if they subscribe\n     * after the request has been sent. The broker stores one retained message per topic, i.e., a later sent retained message will replace\n     * a previously sent retained message. This, however, does not apply to retained requests in request-response communication.\n     * Retained requests are NEVER replaced and remain in the broker until the requestor unsubscribes.\n     *\n     * @param message - Message to be stored if retained.\n     * @param requestorReplySubscription - Subscription of the requestor to receive replies; only set in request-response communication.\n     */ storeMessageIfRetained(message, requestorReplySubscription) {\n        if (!message.retain) return;\n        // If a retained request, store it. Retained requests are not replaced and are retained until the requestor unsubscribes.\n        if ($146947066e10b00e$var$isRequest(message)) {\n            (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(requestorReplySubscription, ()=>Error(\"[InternalMessagingError] An unexpected error occurred. Expected subscription not to be null.\"));\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(this._retainedMessageStore, message.topic, message);\n            requestorReplySubscription.whenUnsubscribe.then(()=>(0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._retainedMessageStore, message.topic, message));\n        } else {\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._retainedMessageStore, message.topic, $146947066e10b00e$var$Predicates.not($146947066e10b00e$var$isRequest));\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(this._retainedMessageStore, message.topic, message);\n        }\n    }\n    storeIntentIfRetained(message, requestorReplySubscription) {\n        if (!message.retain) return;\n        const capabilityId = message.capability.metadata.id;\n        // If a retained request, store it. Retained requests are not replaced and are retained until the requestor unsubscribes.\n        if ($146947066e10b00e$var$isRequest(message)) {\n            (0, $ccc574af478a1fb0$export$790c233a67baba3).orElseThrow(requestorReplySubscription, ()=>Error(\"[InternalMessagingError] An unexpected error occurred. Expected subscription not to be null.\"));\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(this._retainedIntentStore, capabilityId, message);\n            requestorReplySubscription.whenUnsubscribe.then(()=>(0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._retainedIntentStore, capabilityId, message));\n        } else {\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).removeListValue(this._retainedIntentStore, capabilityId, $146947066e10b00e$var$Predicates.not($146947066e10b00e$var$isRequest));\n            (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(this._retainedIntentStore, capabilityId, message);\n        }\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Resolves to the client that sent the passed message.\n *\n * Throws an error if the client could not be resolved.\n */ function $146947066e10b00e$var$getSendingClient(event) {\n    const clientId = event.data.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ClientId);\n    const client = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry).getByClientId(clientId);\n    if (!client) throw Error(`[NullClientError] Client not found in client registry. [clientId=${clientId}]`);\n    return client;\n}\n/**\n * Passes only messages originating from trusted and registered clients.\n */ function $146947066e10b00e$var$checkOriginTrusted() {\n    return (0, $8657d55690de2a98$export$6b9f6c0d32c093f9)((event)=>{\n        const envelope = event.data;\n        const messageId = envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId);\n        const clientId = envelope.message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ClientId);\n        const client = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ClientRegistry).getByClientId(clientId);\n        // Assert client registration.\n        if (!client) {\n            if (event.source !== null) {\n                const sender = new $146947066e10b00e$var$MessageTarget(event);\n                const error = `[MessagingError] Message rejected: Client not registered [origin=${event.origin}]`;\n                $146947066e10b00e$var$sendDeliveryStatusError(sender, messageId, error);\n            }\n            return 0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58;\n        }\n        // Assert source origin.\n        if (event.origin !== client.origin) {\n            if (event.source !== null) {\n                const sender = new $146947066e10b00e$var$MessageTarget(event);\n                const error = `[MessagingError] Message rejected: Wrong origin [actual=${event.origin}, expected=${client.origin}, application=${client.application.symbolicName}]`;\n                $146947066e10b00e$var$sendDeliveryStatusError(sender, messageId, error);\n            }\n            return 0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58;\n        }\n        // Assert the source window unless it is `null`, that is, it has been closed or a page from another origin has been loaded into the window.\n        // We still process requests of stale clients to enable proper disconnection, such as delivery of messages published by the client during shutdown.\n        if (event.source !== null && event.source !== client.window) {\n            const sender = new $146947066e10b00e$var$MessageTarget(event);\n            const error = `[MessagingError] Message rejected: Wrong window [origin=${event.origin}]`;\n            $146947066e10b00e$var$sendDeliveryStatusError(sender, messageId, error);\n            return 0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58;\n        }\n        return (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(event);\n    });\n}\nfunction $146947066e10b00e$var$sendDeliveryStatusSuccess(target, topic) {\n    $146947066e10b00e$var$sendTopicMessage(target, {\n        topic: topic,\n        body: {\n            ok: true\n        },\n        headers: new Map()\n    });\n}\nfunction $146947066e10b00e$var$sendDeliveryStatusError(target, topic, error) {\n    $146947066e10b00e$var$sendTopicMessage(target, {\n        topic: topic,\n        body: {\n            ok: false,\n            details: $146947066e10b00e$var$stringifyError(error)\n        },\n        headers: new Map()\n    });\n}\nfunction $146947066e10b00e$var$sendTopicMessage(target, message) {\n    const envelope = {\n        transport: $146947066e10b00e$var$MessagingTransport.BrokerToClient,\n        channel: $146947066e10b00e$var$MessagingChannel.Topic,\n        message: {\n            ...message,\n            params: new Map(message.params),\n            headers: new Map(message.headers).set($146947066e10b00e$export$b23af55470b7f1e1.MessageId, message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId) ?? (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID()).set($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName, message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName) ?? (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a11aa4b1ad6eec09))\n        }\n    };\n    if (target instanceof $146947066e10b00e$var$MessageTarget) !target.window.closed && target.window.postMessage(envelope, target.origin);\n    else if (target instanceof $146947066e10b00e$var$TopicSubscription) {\n        const subscription = target;\n        const client = subscription.client;\n        envelope.message.headers.set($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId, target.subscriberId);\n        envelope.message.params = new $146947066e10b00e$export$417f7cd86929f164(subscription.topic).match(message.topic).params;\n        !client.stale && client.window.postMessage(envelope, client.origin);\n    } else !target.stale && target.window.postMessage(envelope, target.origin);\n}\nfunction $146947066e10b00e$var$sendIntentMessage(subscription, message) {\n    const envelope = {\n        transport: $146947066e10b00e$var$MessagingTransport.BrokerToClient,\n        channel: $146947066e10b00e$var$MessagingChannel.Intent,\n        message: {\n            ...message,\n            headers: new Map(message.headers).set($146947066e10b00e$export$b23af55470b7f1e1.\\u0275SubscriberId, subscription.subscriberId).set($146947066e10b00e$export$b23af55470b7f1e1.MessageId, message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.MessageId) ?? (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID()).set($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName, message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName) ?? (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a11aa4b1ad6eec09))\n        }\n    };\n    const client = subscription.client;\n    !client.stale && client.window.postMessage(envelope, client.origin);\n}\n/**\n * Catches and logs errors, and resubscribes to the source observable.\n */ function $146947066e10b00e$var$catchErrorAndRetry() {\n    return (0, $a3c41b925191c992$export$3dede90624df3ba9)((error, caught)=>{\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).error(\"[UnexpectedError] An unexpected error occurred.\", error);\n        return caught;\n    });\n}\n/**\n * Tests whether given message is a request of a request-response communication.\n * That is a message that contains the {@link MessageHeaders#ReplyTo} message header.\n */ function $146947066e10b00e$var$isRequest(message) {\n    return message.headers.has($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n}\n/**\n * Represents the target where to send a message.\n */ class $146947066e10b00e$var$MessageTarget {\n    constructor(event){\n        this.window = event.source;\n        this.origin = event.origin;\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows browsing the catalog of capabilities and managing the capabilities of the application.\n *\n * The app can browse only capabilities which are visible to it, i.e., for which the app has declared an intention and\n * which are also publicly available. Capabilities that the app provides itself are always visible to the app.\n *\n * The app can also provide new capabilities or remove existing ones. If the *Intention Registration API* is enabled\n * for the app, the app can also manage its intentions, which, however, is strongly discouraged. Instead, apps should\n * declare the required functionality in their manifests using wildcard intentions.\n *\n * @category Intention API\n */ class $146947066e10b00e$export$aafa7a6a222a9fad {\n    constructor(){\n        this._applications = [];\n    }\n    async init() {\n        const messagingDisabled = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$BrokerGateway) instanceof $146947066e10b00e$var$NullBrokerGateway;\n        if (messagingDisabled) return;\n        // Wait until obtained registered applications so that they can be accessed synchronously by the application via `ManifestService#applications`.\n        const applications$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$PlatformTopics.Applications);\n        this._applications = await (0, $f03dcc354f8c1062$export$400f9f949cef996c)(applications$.pipe($146947066e10b00e$export$d6978861bb0c00c2(), $146947066e10b00e$var$mapToApplication()));\n    }\n    /**\n     * Applications installed in the platform.\n     */ get applications() {\n        return this._applications;\n    }\n    /**\n     * Allows browsing the catalog of capabilities that match the given filter.\n     *\n     * <strong>\n     * You can only browse capabilities that are visible to your application, that is, capabilities that you provide yourself or that are\n     * publicly available and for which you have declared an intention in your manifest.\n     * </strong>\n     *\n     * @param  filter - Control which capabilities to browse. If no or an empty filter is given, all capabilities visible to the requesting\n     *         app are returned. Specified filter criteria are \"AND\"ed together.\\\n     *         <p>\n     *         If specifying a qualifier filter, the capabilities must match that filter exactly. The filter supports the asterisk wildcard\n     *         to match any value, e.g., `{property: '*'}`, or partial matching to find capabilities with at least the specified qualifier\n     *         properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n     * @return An Observable that, when subscribed, emits the requested capabilities.\n     *         It never completes and emits continuously when fulfilling capabilities are registered or unregistered.\n     */ lookupCapabilities$(filter) {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.LookupCapabilities, filter).pipe($146947066e10b00e$export$d6978861bb0c00c2());\n    }\n    /**\n     * Allows browsing the catalog of intentions that match the given filter.\n     *\n     * @param  filter - Control which intentions to return. If no or an empty filter is given, no filtering takes place. Specified filter\n     *         criteria are \"AND\"ed together.\\\n     *         <p>\n     *         If specifying a qualifier filter, the intentions must match that filter exactly. The filter supports the asterisk wildcard\n     *         to match any value, e.g., `{property: '*'}`, or partial matching to find intentions with at least the specified qualifier\n     *         properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n     * @return An Observable that, when subscribed, emits the requested intentions.\n     *         It never completes and emits continuously when matching intentions are registered or unregistered.\n     */ lookupIntentions$(filter) {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.LookupIntentions, filter).pipe($146947066e10b00e$export$d6978861bb0c00c2());\n    }\n    /**\n     * Registers given capability. If the capability has public visibility, other applications can browse the capability and interact with it.\n     *\n     * @return A Promise that resolves to the identity of the registered capability,\n     *         or that rejects if the registration failed.\n     */ registerCapability(capability) {\n        const register$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.RegisterCapability, capability);\n        return (0, $7b246f86cff85ef0$export$a175cc82f1f2275e)(register$.pipe($146947066e10b00e$export$d6978861bb0c00c2()));\n    }\n    /**\n     * Unregisters capabilities matching the given filter.\n     *\n     * <strong>You can only unregister capabilities of your application.</strong>\n     *\n     * @param  filter - Control which capabilities to unregister by specifying filter criteria which are \"AND\"ed together. If not passing a filter,\n     *         all capabilities of the requesting app are unregistered.\\\n     *         <p>\n     *         If specifying a qualifier filter, the capabilities to unregister must match that filter exactly. The filter supports the asterisk\n     *         wildcard to match any value, e.g., `{property: '*'}`, or partial matching to unregister capabilities with at least the specified\n     *         qualifier properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n     *         Note that specifying a symbolic app name in the filter has no effect.\n     * @return A Promise that resolves when unregistered the capability,\n     *         or that rejects if the unregistration failed.\n     */ unregisterCapabilities(filter) {\n        return new Promise((resolve, reject)=>{\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.UnregisterCapabilities, filter).subscribe({\n                error: reject,\n                complete: resolve\n            });\n        });\n    }\n    /**\n     * Registers the given intention, allowing the application to interact with public capabilities matching the intention.\n     *\n     * The intention can match multiple capabilities by using the asterisk wildcard in the qualifier.\n     *\n     * <strong>This operation requires that the 'Intention Registration API' is enabled for your application.</strong>\n     *\n     * @return A Promise that resolves to the identity of the registered intention,\n     *         or that rejects if the registration failed.\n     */ registerIntention(intention) {\n        const register$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.RegisterIntention, intention);\n        return (0, $7b246f86cff85ef0$export$a175cc82f1f2275e)(register$.pipe($146947066e10b00e$export$d6978861bb0c00c2()));\n    }\n    /**\n     * Unregisters intentions matching the given filter.\n     *\n     * <strong>You can only unregister intentions of your application.</strong>\n     * <strong>This operation requires that the 'Intention Registration API' is enabled for your application.</strong>\n     *\n     * @param  filter - Control which intentions to unregister by specifying filter criteria which are \"AND\"ed together. If not passing a filter,\n     *         all intentions of the requesting app are unregistered.\\\n     *         <p>\n     *         If specifying a qualifier filter, the intentions to unregister must match that filter exactly. The filter supports the asterisk\n     *         wildcard to match any value, e.g., `{property: '*'}`, or partial matching to unregister intentions with at least the specified\n     *         qualifier properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n     *         Note that specifying a symbolic app name in the filter has no effect.\n     * @return A Promise that resolves when unregistered the intention,\n     *         or that rejects if the unregistration failed.\n     */ unregisterIntentions(filter) {\n        return new Promise((resolve, reject)=>{\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.UnregisterIntentions, filter).subscribe({\n                error: reject,\n                complete: resolve\n            });\n        });\n    }\n    /**\n     * Tests if the specified micro app is qualified to interact with the given capability.\n     *\n     * A micro app is qualified if it meets either of the following criteria:\n     * - The capability is provided by the application itself.\n     * - The capability is provided by another application, but only if the capability is publicly visible (1),\n     *   and the micro app has declared an intention (2) to use the capability.\n     *\n     * (1) Unless 'scope check' is disabled for the specified micro app.\n     * (2) Unless 'intention check' is disabled for the specified micro app.\n     *\n     * @param appSymbolicName - Specifies the symbolic name of the application under test.\n     * @param qualifiedFor\n     *        @property capabilityId - Identifies the capability to test.\n     * @return An Observable that, when subscribed, emits the qualification of specified application.\n     *         It never completes and emits continuously when capabilites or intentions are registered or unregistered.\n     */ isApplicationQualified$(appSymbolicName, qualifiedFor) {\n        const request = {\n            appSymbolicName: appSymbolicName,\n            capabilityId: qualifiedFor.capabilityId\n        };\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.IsApplicationQualifiedForCapability, request).pipe($146947066e10b00e$export$d6978861bb0c00c2());\n    }\n}\nfunction $146947066e10b00e$var$mapToApplication() {\n    return (0, $d5bd6ae9534d951f$export$4c9116dcf1374231)((application)=>{\n        return {\n            ...application,\n            platformVersion: (0, $f03dcc354f8c1062$export$400f9f949cef996c)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.platformVersion(application.symbolicName)).pipe($146947066e10b00e$export$d6978861bb0c00c2()))\n        };\n    });\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Context lookup options header to control if values should be collected.\n *\n * @internal\n */ const $146947066e10b00e$var$CONTEXT_LOOKUP_OPTIONS = \"\\u0275CONTEXT_LOOKUP_OPTIONS\";\n/**\n * Provides the API to lookup context related information.\n *\n * @internal\n */ var $146947066e10b00e$var$Contexts;\n(function(Contexts) {\n    /**\n     * Returns the request-reply topic to lookup the names of associated context values in the context tree.\n     */ function contextTreeNamesLookupTopic() {\n        return \"contexttree/names\";\n    }\n    Contexts.contextTreeNamesLookupTopic = contextTreeNamesLookupTopic;\n    /**\n     * Returns the request-reply topic to get notified when some context changes at any level in the context tree.\n     */ function contextTreeChangeTopic() {\n        return \"contexttree/change\";\n    }\n    Contexts.contextTreeChangeTopic = contextTreeChangeTopic;\n    /**\n     * Computes the request-reply topic to lookup a context value from embedded router outlet web content.\n     */ function contextValueLookupTopic(name) {\n        return `context/${name}`;\n    }\n    Contexts.contextValueLookupTopic = contextValueLookupTopic;\n    /**\n     * Creates a message envelope to request the context value associated with the given name.\n     *\n     * @param name - The name of the value to lookup.\n     * @param replyTo - The 'replyTo' topic where to send the reply.\n     * @param options - Options to control context lookup.\n     * @param values - The collected values passed to the parent context during a context lookup.\n     *                 Used to collect all values associated with the context name in the context hierarchy.\n     */ function newContextValueLookupRequest(name, replyTo, options, values) {\n        return {\n            transport: $146947066e10b00e$var$MessagingTransport.MicrofrontendToOutlet,\n            channel: $146947066e10b00e$var$MessagingChannel.Topic,\n            message: {\n                topic: contextValueLookupTopic(encodeURIComponent(name)),\n                body: values || [],\n                headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.MessageId, (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID()).set($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo, replyTo).set($146947066e10b00e$var$CONTEXT_LOOKUP_OPTIONS, options)\n            }\n        };\n    }\n    Contexts.newContextValueLookupRequest = newContextValueLookupRequest;\n    /**\n     * Creates a message envelope to lookup the names of associated context values in the context tree.\n     *\n     * @param replyTo - The 'replyTo' topic where to send the reply.\n     * @param names - The names of the current context to be combined with the names of the parent contexts.\n     */ function newContextTreeNamesLookupRequest(replyTo, names) {\n        return {\n            transport: $146947066e10b00e$var$MessagingTransport.MicrofrontendToOutlet,\n            channel: $146947066e10b00e$var$MessagingChannel.Topic,\n            message: {\n                topic: Contexts.contextTreeNamesLookupTopic(),\n                body: names || new Set(),\n                headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.MessageId, (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID()).set($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo, replyTo)\n            }\n        };\n    }\n    Contexts.newContextTreeNamesLookupRequest = newContextTreeNamesLookupRequest;\n    /**\n     * Creates a message envelope to get notified when some context changes at any level in the context tree.\n     *\n     * @param replyTo - The 'replyTo' topic where to send the reply.\n     */ function newContextTreeObserveRequest(replyTo) {\n        return {\n            transport: $146947066e10b00e$var$MessagingTransport.MicrofrontendToOutlet,\n            channel: $146947066e10b00e$var$MessagingChannel.Topic,\n            message: {\n                topic: Contexts.contextTreeChangeTopic(),\n                headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.MessageId, (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID()).set($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo, replyTo)\n            }\n        };\n    }\n    Contexts.newContextTreeObserveRequest = newContextTreeObserveRequest;\n    /**\n     * Event emitted by the root context when subscribed to it.\n     */ Contexts.RootContextSubscribeEvent = \"RootContextSubscribeEvent\";\n})($146947066e10b00e$var$Contexts || ($146947066e10b00e$var$Contexts = {}));\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides a context to the {@link SciRouterOutletElement} allowing the outlet to associate values with that context.\n * For embedded outlet web content, it allows looking up context names and values.\n *\n * A context is a hierarchical key-value map which are linked together to form a tree structure. When a key is not found\n * in a context, the lookup is retried on the parent, repeating until either a value is found or the root of the tree has\n * been reached.\n *\n * @internal\n */ class $146947066e10b00e$var$RouterOutletContextProvider {\n    constructor(iframe){\n        this._entries$ = new (0, $30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b)(new Map());\n        this._entryChange$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._outletDisconnect$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        // Listen for requests from embedded web content of the outlet.\n        this._microfrontendRequest$ = (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"message\").pipe((0, $827970c208304071$export$3dea766d36a8935f)((event)=>event.source === iframe.contentWindow), $146947066e10b00e$var$filterByTransport($146947066e10b00e$var$MessagingTransport.MicrofrontendToOutlet), $146947066e10b00e$var$filterByChannel($146947066e10b00e$var$MessagingChannel.Topic), (0, $f60f59c3c27c3419$export$ed80d9de1d9df928)());\n    }\n    /**\n     * Sets a value to be associated with a given name in this context.\n     *\n     * @param name - Specifies the name to store a value for.\n     * @param value - Specifies the value to be stored. It can be any object which\n     *        is serializable with the structured clone algorithm.\n     */ set(name, value) {\n        this._entries$.next(new Map(this._entries$.getValue()).set(name, value));\n        this._entryChange$.next({\n            name: name,\n            value: value,\n            type: \"set\"\n        });\n    }\n    /**\n     * Removes the given name and any corresponding value from this context.\n     *\n     * Removal does not affect parent contexts, so it is possible that a subsequent call to {@link ContextService#observe$} with the same name\n     * will return a non-null result, due to a value being stored in a parent context.\n     *\n     * @param  name - Specifies the name to remove.\n     * @return `true` if the value in the outlet context has been removed successfully; otherwise `false`.\n     */ remove(name) {\n        const entries = new Map(this._entries$.getValue());\n        if (entries.delete(name)) {\n            this._entries$.next(entries);\n            this._entryChange$.next({\n                name: name,\n                type: \"remove\"\n            });\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns an Observable that emits the values registered in this outlet. Values inherited from parent contexts are not returned.\n     * The Observable never completes, and emits when a context value is added or removed.\n     */ get entries$() {\n        return this._entries$;\n    }\n    /**\n     * Method invoked when the outlet is mounted to the DOM.\n     */ onOutletMount() {\n        this.installContextValueLookupListener();\n        this.installContextTreeNamesLookupListener();\n        this.installContextTreeObserveListener();\n    }\n    /**\n     * Method invoked when the outlet is removed from the DOM.\n     */ onOutletUnmount() {\n        this._outletDisconnect$.next();\n    }\n    /**\n     * Installs a listener to reply to context value lookup requests from embedded content.\n     * When a key is not found in this context, the lookup is passed on to the parent context.\n     */ installContextValueLookupListener() {\n        this._microfrontendRequest$.pipe($146947066e10b00e$var$filterByTopicChannel($146947066e10b00e$var$Contexts.contextValueLookupTopic(\":name\")), $146947066e10b00e$var$pluckMessage(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._outletDisconnect$)).subscribe((lookupRequest)=>$146947066e10b00e$var$runSafe(()=>{\n                const encodedName = new $146947066e10b00e$export$417f7cd86929f164($146947066e10b00e$var$Contexts.contextValueLookupTopic(\":name\")).match(lookupRequest.topic).params.get(\"name\");\n                // The name has to be decoded here because it was encoded in `newContextValueLookupRequest` where the topic was created.\n                const name = decodeURIComponent(encodedName);\n                const replyTo = lookupRequest.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n                const options = lookupRequest.headers.get($146947066e10b00e$var$CONTEXT_LOOKUP_OPTIONS);\n                const entries = this._entries$.getValue();\n                if (options?.collect) {\n                    const collectedValues = lookupRequest.body || [];\n                    if (entries.has(name) && entries.get(name) !== undefined) collectedValues.push(entries.get(name));\n                    if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$abac07b0d121aae2)) // Reply with the collected context values.\n                    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, collectedValues, {\n                        headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.OK)\n                    });\n                    else // Pass on the lookup request to the parent context.\n                    window.parent.postMessage($146947066e10b00e$var$Contexts.newContextValueLookupRequest(name, replyTo, options, collectedValues), \"*\");\n                } else {\n                    if (entries.has(name) && entries.get(name) !== undefined) // Reply with the found context value.\n                    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, entries.get(name), {\n                        headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.OK)\n                    });\n                    else if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$abac07b0d121aae2)) // No context value found; the root of the context tree has been reached; reply with `NOT_FOUND` status code.\n                    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, undefined, {\n                        headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.NOT_FOUND)\n                    });\n                    else // Pass on the lookup request to the parent context.\n                    window.parent.postMessage($146947066e10b00e$var$Contexts.newContextValueLookupRequest(name, replyTo, options), \"*\");\n                }\n            }));\n    }\n    /**\n     * Installs a listener to reply to context names lookup requests from embedded content.\n     *\n     * The context names are accumulated in the lookup request and passed on to the parent context.\n     * When the root context is reached, the request is finally answered with all collected context names.\n     */ installContextTreeNamesLookupListener() {\n        this._microfrontendRequest$.pipe($146947066e10b00e$var$filterByTopicChannel($146947066e10b00e$var$Contexts.contextTreeNamesLookupTopic()), $146947066e10b00e$var$pluckMessage(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._outletDisconnect$)).subscribe((lookupRequest)=>$146947066e10b00e$var$runSafe(()=>{\n                const replyTo = lookupRequest.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n                const entries = this._entries$.getValue();\n                const collectedNames = new Set([\n                    ...entries.keys(),\n                    ...lookupRequest.body || []\n                ]);\n                if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$abac07b0d121aae2)) // Answer the request when reaching the root of the context tree.\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, collectedNames, {\n                    headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.OK)\n                });\n                else // Pass on the lookup request to the parent context.\n                window.parent.postMessage($146947066e10b00e$var$Contexts.newContextTreeNamesLookupRequest(replyTo, collectedNames), \"*\");\n            }));\n    }\n    /**\n     * Installs a listener to publish a context change event when this context changes.\n     *\n     * For every request a replier is installed which emits when this context changes. It stops replying\n     * when the requestor unsubscribes. The request is also passed on to the parent context.\n     */ installContextTreeObserveListener() {\n        this._microfrontendRequest$.pipe($146947066e10b00e$var$filterByTopicChannel($146947066e10b00e$var$Contexts.contextTreeChangeTopic()), $146947066e10b00e$var$pluckMessage(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._outletDisconnect$)).subscribe((observeRequest)=>$146947066e10b00e$var$runSafe(()=>{\n                const replyTo = observeRequest.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n                this._entryChange$.pipe($146947066e10b00e$export$2509be367963fa45(replyTo), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._outletDisconnect$)).subscribe((event)=>{\n                    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, event);\n                });\n                if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$abac07b0d121aae2)) // Notify that the subscriber subscribed to the root context.\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, $146947066e10b00e$var$Contexts.RootContextSubscribeEvent);\n                else // Pass on the registration request to the parent context.\n                window.parent.postMessage($146947066e10b00e$var$Contexts.newContextTreeObserveRequest(replyTo), \"*\");\n            }));\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Assigns a URL to the iframe of a {@link SciRouterOutletElement `<sci-router-outlet>`}.\n *\n * @category Routing\n */ class $146947066e10b00e$export$b84d9f3cc1de7d1d {\n    /**\n     * Assigns a URL to the iframe of a {@link SciRouterOutletElement `<sci-router-outlet>`}.\n     *\n     * @param iframe - Iframe for which to set the URL.\n     * @param currNavigation - Current navigation.\n     * @param prevNavigation - Previous navigation, if any.\n     */ assign(iframe, currNavigation, prevNavigation) {\n        // Patch the URL to force Chrome to load the content of specified URL.\n        const patchedUrl = this.patchUrl(currNavigation.url, prevNavigation?.url);\n        if (currNavigation.pushStateToSessionHistoryStack) iframe.contentWindow.location.assign(patchedUrl);\n        else iframe.contentWindow.location.replace(patchedUrl);\n    }\n    /**\n     * Patches the URL to force Chrome to load the content of the given URL into an iframe.\n     *\n     * #### Problem:\n     * Chrome browser does not load the content of a nested iframe if already loaded a document from the same origin and path in a parent iframe.\n     * The problem does not occur if the URL contains query parameters. Also, the hash fragment of the URL does not matter.\n     *\n     * This problem could not be observed in Firefox and Edge.\n     *\n     * #### Motivation:\n     * If using hash-based routing, the microfrontends of an application are served under the same origin and path, and routing is based on the URL hash fragment only.\n     * This Chrome issue would prevent a microfrontend from embedding other microfrontends of its application.\n     *\n     * #### Fix:\n     * If the URL does not contain a query parameter, an arbitrary query parameter is appended to the URL to force Chrome to load the content.\n     * The name and value of the query param do not matter. However, it is crucial always to use the same param to allow the browser to cache the request.\n     *\n     * The only exception to appending a query param is when replacing an outlet's content with content from the same app. Then, the browser already loaded\n     * the application. Otherwise, if appending a query param, the application would load anew.\n     *\n     * #### Alternative fix:\n     * An alternative (but partial) fix would be to initialize the iframe with a `null` source. This fix is partial because only working when setting the initial URL\n     * of the iframe and not when changing it. Also, it has the drawback of temporarily loading the main entry point of the outlet host.\n     *\n     * @param currUrl - Specifies the URL to be patched.\n     * @param prevUrl - Specifies the previous URL, if any.\n     *\n     * @see https://stackoverflow.com/q/36985731\n     * @internal\n     */ patchUrl(currUrl, prevUrl) {\n        const patchedUrl = $146947066e10b00e$var$runSafe(()=>{\n            const prevURL = prevUrl ? $146947066e10b00e$var$Urls.newUrl(prevUrl) : undefined;\n            const currURL = $146947066e10b00e$var$Urls.newUrl(currUrl);\n            // Do not apply the fix for the \"about\" and \"blob\" protocol.\n            if (currURL.protocol === \"about:\" || currURL.protocol === \"blob:\") return currUrl;\n            // Do not apply the fix for top-level iframes.\n            if (window === (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$\\u0275WINDOW_TOP)) return currUrl;\n            // Do not apply the fix if the URL already contains query params.\n            if (currURL.search) return currUrl;\n            // Do not apply the fix when navigating within the same application using hash-based routing.\n            if (prevURL?.origin === currURL.origin && prevURL?.pathname === currURL.pathname) return currUrl;\n            // Add an arbitrary but fixed query param to the URL.\n            const patchedURL = $146947066e10b00e$var$Urls.newUrl(currUrl);\n            patchedURL.searchParams.set(\"_\", \"\");\n            return patchedURL.toString();\n        });\n        return patchedUrl ?? currUrl;\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Describes a user interaction with the keyboard.\n *\n * @internal\n */ class $146947066e10b00e$var$Keystroke {\n    constructor(eventType, key, modifiers, flags){\n        this.eventType = eventType;\n        const parts = [];\n        parts.push(eventType);\n        if (modifiers) {\n            modifiers.control && parts.push(\"control\");\n            modifiers.alt && parts.push(\"alt\");\n            modifiers.shift && parts.push(\"shift\");\n            modifiers.meta && parts.push(\"meta\");\n        }\n        parts.push(key.toLowerCase());\n        this.parts = parts.join(\".\");\n        this.flags = flags;\n    }\n    withFlags(flags) {\n        this.flags = flags;\n        return this;\n    }\n    /**\n     * Creates a {@link Keystroke} from the given keyboard event.\n     */ static fromEvent(event) {\n        if (!event) throw Error(\"[KeystrokeParseError] Cannot create the keystroke from `null` or `undefined`.\");\n        return new $146947066e10b00e$var$Keystroke(event.type, $146947066e10b00e$var$escapeKeyboardEventKey(event.key), {\n            control: event.ctrlKey,\n            shift: event.shiftKey,\n            alt: event.altKey,\n            meta: event.metaKey\n        });\n    }\n    /**\n     * Parses the textual representation of a keystroke into a {@link Keystroke} object.\n     *\n     * keydown.control.alt.enter{preventDefault=true}\n     * |<--1->|<----2---->|<-3->|<--------4--------->|\n     *\n     * 1: Event type\n     * 2: Modifier part(s) (optional)\n     * 3. Key as defined in https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\n     *    Two keys are an exception to the value of the {@link KeyboardEvent#key} property: dot and space.\n     * 4. flags (optional)\n     */ static fromString(value) {\n        if (!value) throw Error(\"[KeystrokeParseError] Cannot parse the keystroke from 'null' or 'undefined'.\");\n        const flags = $146947066e10b00e$var$parseFlags(value);\n        if (flags !== undefined) value = value.substring(0, value.indexOf(\"{\"));\n        const parts = value.split(\".\");\n        if (parts.length < 2) throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Requires at least the event type and keyboard key, and optionally some modifiers. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n        const eventType = parts[0];\n        if (eventType !== \"keydown\" && eventType !== \"keyup\") throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Unsupported event type. Supported event types are: 'keydown' or 'keyup'. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n        const key = parts[parts.length - 1];\n        if (!key || new Set().add(\"alt\").add(\"shift\").add(\"control\").add(\"meta\").has(key.toLowerCase())) throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. The keyboard key must be the last part. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n        const modifiers = new Set(parts.slice(1, -1));\n        const keystroke = new $146947066e10b00e$var$Keystroke(eventType, key, {\n            control: modifiers.delete(\"control\"),\n            shift: modifiers.delete(\"shift\"),\n            alt: modifiers.delete(\"alt\"),\n            meta: modifiers.delete(\"meta\")\n        }, flags);\n        if (modifiers.size > 0) throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Illegal modifier found. Supported modifiers are: 'alt', 'shift', 'control' or 'meta'. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n        return keystroke;\n    }\n}\nfunction $146947066e10b00e$var$escapeKeyboardEventKey(key) {\n    switch(key){\n        case \".\":\n            return \"dot\";\n        case \" \":\n            return \"space\";\n        default:\n            return key;\n    }\n}\nfunction $146947066e10b00e$var$parseFlags(keystroke) {\n    const flagsStr = keystroke.match(/{(?<flagsDictionary>.*)}/)?.groups[\"flagsDictionary\"] ?? null;\n    if (flagsStr === null) return undefined;\n    if (flagsStr === \"\") return {};\n    return flagsStr.split(\";\").map((flag)=>flag.split(\"=\")).reduce((flags, [flagName, flagValue])=>{\n        switch(flagName){\n            case \"preventDefault\":\n                return {\n                    ...flags,\n                    preventDefault: flagValue === \"true\"\n                };\n            default:\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[KeystrokeParseError] Ignore unkown flag '${keystroke}'. Supported flags are: 'preventDefault'.`);\n                return flags;\n        }\n    }, {});\n}\n/**\n * Routing message header to control if to push a state to the browser's session history stack.\n *\n * @internal\n */ const $146947066e10b00e$var$PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER = \"\\u0275PUSH_STATE_TO_SESSION_HISTORY_STACK\";\n/**\n * Routing message header to control if to show a splash until the microfrontend signals readiness.\n *\n * @internal\n */ const $146947066e10b00e$var$SHOW_SPLASH_MESSAGE_HEADER = \"\\u0275SHOW_SPLASH\";\n/**\n * Routing message header that contains the microfrontend capability when navigating via intent.\n *\n * @internal\n */ const $146947066e10b00e$var$CAPABILITY_ID_MESSAGE_HEADER = \"\\u0275CAPABILITY_ID\";\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ const $146947066e10b00e$var$ELEMENT_NAME = \"sci-router-outlet\";\nconst $146947066e10b00e$var$ATTR_NAME = \"name\";\nconst $146947066e10b00e$var$ATTR_SCROLLABLE = \"scrollable\";\nconst $146947066e10b00e$var$ATTR_KEYSTROKES = \"keystrokes\";\nconst $146947066e10b00e$var$HTML_TEMPLATE = `\n  <style>\n    :host {\n      display: block;\n      overflow: hidden;\n      position: relative; /* positioning context for splash */\n    }\n\n    iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n      margin: 0;\n    }\n    \n    /* Ensure transparent router-outlet if empty.\n     *\n     * An iframe is transparent only if the embedded content has the same color scheme as the embedding document.\n     * An empty router-outlet loads the 'about:blank' page. This page has the user's preferred OS color scheme,\n     * which may be different from the application's color scheme, making the iframe opaque. Therefore, we hide\n     * the iframe to make the router-outlet transparent again.\n     *\n     * More information about iframe transparency:\n     * - https://github.com/w3c/csswg-drafts/issues/4772#issuecomment-591553929\n     * - https://fvsch.com/transparent-iframes\n     */\n    :host-context(.sci-empty) iframe {\n      display: none;\n    }\n\n    div[part=\"splash\"] {\n      position: absolute;\n      inset: 0;\n    }\n  </style>\n  <iframe src=\"about:blank\" scrolling=\"yes\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n  \n  <template id=\"splash\">\n    <div part=\"splash\" class=\"e2e-splash\">\n      <slot></slot>\n    </div>  \n  </template>\n`;\n/**\n * Web component that allows embedding web content using the {@link OutletRouter}. The content is displayed inside\n * an iframe to achieve the highest possible level of isolation between the microfrontends via a separate browsing context.\n *\n * To embed a microfrontend, place this custom HMTL element `<sci-router-outlet></sci-router-outlet>` in an HTML\n * template, give it a name via its `name` attribute and navigate via {@link OutletRouter} to instruct the outlet to\n * load the microfrontend.\n *\n * 1. Place the web component in an HTML template:\n * ```html\n * <sci-router-outlet name=\"detail\"></sci-router-outlet>\n * ```\n *\n * 2. Control the outlet's content:\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {outlet: 'detail'});\n * ```\n *\n * Outlets can be nested, allowing a microfrontend to embed another microfrontend. There is no limit to the number of\n * nested outlets. However, be aware that nested content is loaded cascaded, that is, only loaded once its parent content\n * finished loading.\n *\n * When adding the outlet to the DOM, the outlet displays the last URL routed for it, if any. When repeating routing for\n * an outlet, its content is replaced.\n *\n * ***\n *\n * ### Outlet Context\n * The router outlet allows associating contextual data, which then is available to embedded content at any nesting level.\n * Data must be serializable with the structured clone algorithm. Embedded content can look up contextual data using the\n * {@link ContextService}. Typically, contextual data is  used to provide microfrontends with information about their embedding\n * environment. Looking up contextual data requires the embedded microfrontend to be a registered micro application.\n *\n * Each outlet spans a new context. A context is like a `Map` with key-value entries. Contexts form a hierarchical tree structure.\n * When looking up a value and if the value is not found in the current context, the lookup is retried on the parent context,\n * repeating until either a value is found, or the root of the context tree has been reached.\n *\n * You can set contextual data as following:\n * ```ts\n *  const outlet: SciRouterOutletElement = document.querySelector('sci-router-outlet');\n *  outlet.setContextValue('key', 'value');\n * ```\n *\n * Embedded content can look up contextual data as following:\n * ```ts\n * Beans.get(ContextService).observe$('key').subscribe(value => {\n *   ...\n * });\n * ```\n *\n * ### Outlet size\n * The router outlet can adapt its size to the preferred size of its embedded content. The preferred size is set by the microfrontend embedded\n * in the router outlet, which, therefore, requires the embedded microfrontend to be connected to the platform.\n *\n * Embedded content can report its preferred size using the {@link PreferredSizeService}, causing the outlet to adapt its size.\n *\n * ### Keystroke Bubbling\n * The router outlet allows the registration of keystrokes, instructing embedded content at any nesting level to propagate corresponding keyboard events\n * to this outlet. The outlet dispatches keyboard events for registered keystrokes as synthetic keyboard events via its event dispatcher. They bubble up\n * the DOM tree like regular events. Propagated events are of the original type, meaning that when the user presses a key on the keyboard, a `keydown`\n * keyboard event is dispatched, or a `keyup` event when releasing a key, respectively. Keystroke bubbling requires the embedded microfrontend to be a\n * registered micro application.\n *\n * A keystroke is a `string` that has several parts, each separated with a dot. The first part specifies the event type (`keydown` or `keyup`), followed\n * by optional modifier part(s) (`alt`, `shift`, `control`, `meta`, or a combination thereof) and with the keyboard key as the last part. The key is a\n * case-insensitive value of the `KeyboardEvent.key` property. Two keys are an exception to the value of the `KeyboardEvent.key` property: `dot` and `space`.\n * For a complete list of valid key values, see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\n *\n * You can register keystrokes via the `keystrokes` attribute in the HTML template, or via the `keystrokes` property on the DOM\n * element. If setting keystrokes via the HTML template, multiple keystrokes are separated by a comma.\n *\n * If you want to prevent the default action of a keystroke, add the `preventDefault` flag. If not specifying the flag, the default action won't be prevented.\n *\n * HTML template:\n * ```html\n * <sci-router-outlet keystrokes=\"keydown.control.alt.enter{preventDefault=true},keydown.escape,keydown.control.space\"></sci-router-outlet>\n * ```\n *\n * Alternatively, you can register keystrokes on the DOM element as shown below.\n *\n * TypeScript:\n * ```ts\n *  const outlet: SciRouterOutletElement = document.querySelector('sci-router-outlet');\n *  outlet.keystrokes = [\n *      'keydown.control.alt.enter{preventDefault=true}',\n *      'keydown.escape',\n *      'keydown.control.space'\n *  ];\n * ```\n *\n * ### Scrollable Content\n * By default, page scrolling is enabled for the embedded content, displaying a scrollbar when it overflows. If disabled, overflowing content is clipped,\n * unless the embedded content uses a viewport, or reports its preferred size to the outlet.\n *\n * The below code snippet illustrates how to disable page scrolling for the embedded content.\n * ```html\n * <sci-router-outlet scrollable=\"false\"></sci-router-outlet>\n * ```\n *\n * ### Router Outlet Events\n *\n * The router outlet emits the following events as custom DOM events. You can attach an event listener declaratively in the HTML template using the `onevent`\n * handler syntax, or programmatically using the `addEventListener` method.\n *\n * - `activate`\n *   The `activate` custom DOM event is fired when a microfrontend is mounted. It contains the URL of the mounted microfrontend in its `details` property as `string`\n *   value. The microfrontend may not be fully loaded yet.\n * - `deactivate`\n *   The `deactivate` custom DOM event is fired when a microfrontend is about to be unmounted. It contains the URL of the unmounted microfrontend in its `details`\n *   property as `string` value.\n * - `focuswithin`\n *   The `focuswithin` custom DOM event is fired when the microfrontend loaded into the outlet, or any of its child microfrontends, has gained or lost focus.\n *   It contains the current focus-within state in its `details` property as a `boolean` value: `true` if focus was gained, or `false` if focus was lost.\n *   The event does not bubble up through the DOM. After gaining focus, the event is not triggered again until embedded content loses focus completely, i.e.,\n *   when focus does not remain in the embedded content at any nesting level. This event behaves like the `:focus-within` CSS pseudo-class but operates across iframe\n *   boundaries. For example, it can be useful when implementing overlays that close upon focus loss.\n *\n *   Note that SCION can only monitor microfrontends of registered micro apps that are connected to the platform.\n *\n * Usage:\n *\n * ```html\n * <sci-router-outlet onfocuswithin=\"onFocusWithin()\"></sci-router-outlet>\n * ```\n *\n * For an Angular application, it would look as follows:\n * ```html\n * <sci-router-outlet (focuswithin)=\"onFocusWithin($event)\"></sci-router-outlet>\n * ```\n *\n * ### Splash\n *\n * Loading and bootstrapping a microfrontend can take some time, at worst, only displaying content once initialized.\n *\n * To indicate the loading of a microfrontend, the navigator can instruct the router outlet to display a splash until the microfrontend signals readiness.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('path/to/microfrontend', {showSplash: true});\n * ```\n *\n * The splash is the markup between the opening and closing tags of the router outlet element.\n *\n * ```html\n * <sci-router-outlet>\n *   Loading...\n * </sci-router-outlet>\n * ```\n *\n * The splash is displayed until the embedded microfrontend signals readiness.\n *\n * ```ts\n * MicrofrontendPlatformClient.signalReady();\n * ```\n *\n * #### Layouting the Splash\n *\n * To lay out the content of the splash use the pseudo-element selector `::part(splash)`.\n *\n * Example of centering splash content in a CSS grid container:\n * ```css\n * sci-router-outlet::part(splash) {\n *   display: grid;\n *   place-content: center;\n * }\n * ```\n *\n * ### Web component\n * The outlet is registered as a custom element in the browser's custom element registry as defined by the Web Components standard.\n * See https://developer.mozilla.org/en-US/docs/Web/Web_Components for more information.\n *\n * ### Miscellaneous\n * If no content is routed for display in the router outlet, the CSS class `sci-empty` is added to the outlet. An outlet will not display content if\n * either there has not yet been any navigation for the outlet or the outlet content has been cleared.\n *\n * @see {@link OutletRouter}\n * @see {@link PreferredSizeService}\n * @see {@link ContextService}\n *\n * @category Routing\n */ class $146947066e10b00e$export$40346ab29ce71372 extends HTMLElement {\n    constructor(){\n        super();\n        this._disconnect$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._uid = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n        this._empty$ = new (0, $30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b)(true);\n        this._outletName$ = new (0, $30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b)($146947066e10b00e$export$61656ab94335dbc0);\n        this._shadowRoot = this.attachShadow({\n            mode: \"open\"\n        });\n        this._shadowRoot.innerHTML = $146947066e10b00e$var$HTML_TEMPLATE.trim();\n        this._iframe = this._shadowRoot.querySelector(\"iframe\");\n        this._contextProvider = new $146947066e10b00e$var$RouterOutletContextProvider(this._iframe);\n        this._splash = new $146947066e10b00e$var$Splash(this._shadowRoot, this._iframe);\n        this.empty$ = this._empty$.pipe((0, $419c2da03c3ac473$export$779c5fb865a0172e)());\n    }\n    /**\n     * Sets the name of this outlet.\n     *\n     * By giving the outlet a name, you can reference the outlet when navigating. The name is optional;\n     * if not set, it defaults to {@link PRIMARY_OUTLET primary}\n     */ set name(name) {\n        if (name) this.setAttribute($146947066e10b00e$var$ATTR_NAME, name);\n        else this.removeAttribute($146947066e10b00e$var$ATTR_NAME);\n    }\n    /**\n     * Returns the name of this outlet.\n     */ get name() {\n        return this.getAttribute($146947066e10b00e$var$ATTR_NAME) ?? undefined;\n    }\n    /**\n     * Specifies whether to enable or disable native page scrolling in the embedded document.\n     *\n     * By default, page scrolling is enabled for the embedded content, displaying a scrollbar when it overflows.\n     * If disabled, overflowing content is clipped, unless the embedded content uses a viewport, or reports\n     * its preferred size to the outlet.\n     */ set scrollable(scrollable) {\n        if (scrollable) this.setAttribute($146947066e10b00e$var$ATTR_SCROLLABLE, \"true\");\n        else this.removeAttribute($146947066e10b00e$var$ATTR_SCROLLABLE);\n    }\n    /**\n     * Returns whether the embedded document is natively page scrollable.\n     */ get scrollable() {\n        return this.getAttribute($146947066e10b00e$var$ATTR_SCROLLABLE) === \"true\";\n    }\n    /**\n     * Instructs embedded content at any nesting level to propagate keyboard events to this outlet. The outlet dispatches keyboard events for registered\n     * keystrokes as synthetic keyboard events via its event dispatcher. They bubble up the DOM tree like regular events. Propagated events are of the\n     * original type, meaning that when the user presses a key on the keyboard, a `keydown` keyboard event is dispatched, or a `keyup` event when releasing\n     * a key, respectively.\n     *\n     * @param keystrokes - A keystroke is specified as a string that has several parts, each separated with a dot. The first part specifies the event type\n     *                   (`keydown` or `keyup`), followed by optional modifier part(s) (`alt`, `shift`, `control`, `meta`, or a combination thereof) and\n     *                   with the keyboard key as the last part. The key is a case-insensitive value of the `KeyboardEvent#key` property. For a complete\n     *                   list of valid key values, see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values. Two keys are an\n     *                   exception to the value of the `KeyboardEvent#key` property: `dot` and `space`.\n     *                   <br>\n     *                   To prevent the default action of a keystroke, the `preventDefault` flag can be added.\n     *                   <br>\n     *                   Examples: `keydown.control.z{preventDefault=true}`, `keydown.escape`, `keyup.enter`, `keydown.control.alt.enter`, `keydown.control.space`.\n     */ set keystrokes(keystrokes) {\n        if (keystrokes && keystrokes.length) this.setAttribute($146947066e10b00e$var$ATTR_KEYSTROKES, $146947066e10b00e$var$KeystrokesAttributeUtil.join(keystrokes));\n        else this.removeAttribute($146947066e10b00e$var$ATTR_KEYSTROKES);\n    }\n    /**\n     * Returns the keystrokes which to bubble across the iframe boundaries.\n     */ get keystrokes() {\n        return $146947066e10b00e$var$KeystrokesAttributeUtil.split(this.getAttribute($146947066e10b00e$var$ATTR_KEYSTROKES));\n    }\n    /**\n     * Makes contextual data available to embedded content. Embedded content can lookup contextual data using the {@link ContextService}.\n     * Contextual data must be serializable with the structured clone algorithm.\n     */ setContextValue(name, value) {\n        this._contextProvider.set(name, value);\n    }\n    /**\n     * Removes data registered under the given key from the context.\n     *\n     * Removal does not affect parent contexts, so it is possible that a subsequent call to {@link ContextService.observe$} with the same name\n     * will return a non-null result, due to a value being stored in a parent context.\n     *\n     * @return `true` if removed the value from the outlet context; otherwise `false`.\n     */ removeContextValue(name) {\n        return this._contextProvider.remove(name);\n    }\n    /**\n     * Returns an Observable that emits the context of this outlet. Context values inherited from parent contexts are not returned.\n     * The Observable never completes, and emits when a context value is added to or removed from the outlet context.\n     */ get contextValues$() {\n        return this._contextProvider.entries$;\n    }\n    /**\n     * Resets the preferred size which may have been set by the embedded content.\n     */ resetPreferredSize() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish($146947066e10b00e$var$RouterOutlets.preferredSizeTopic(this._uid), null);\n    }\n    /**\n     * Returns the preferred size, if any, or `undefined` otherwise.\n     */ get preferredSize() {\n        const preferredSize = {\n            minWidth: this.style.minWidth || undefined,\n            width: this.style.width || undefined,\n            maxWidth: this.style.maxWidth || undefined,\n            minHeight: this.style.minHeight || undefined,\n            height: this.style.height || undefined,\n            maxHeight: this.style.maxHeight || undefined\n        };\n        if (Object.values(preferredSize).some(Boolean)) return preferredSize;\n        return undefined;\n    }\n    /**\n     * Returns the reference to the iframe of this outlet.\n     */ get iframe() {\n        return this._iframe;\n    }\n    installOutletContext() {\n        this._outletName$.pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._disconnect$)).subscribe((name)=>{\n            const outletContext = {\n                name: name,\n                uid: this._uid\n            };\n            this.iframe.name = name;\n            this.setContextValue($146947066e10b00e$export$ff8ad477982f6328, outletContext);\n        });\n    }\n    installOutletUrlListener() {\n        this._outletName$.pipe((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((outlet)=>$146947066e10b00e$var$outletNavigate$(outlet).pipe((0, $369a1beddcfddd56$export$a4fe86229b0e9bdd)(null))), (0, $9654f9d6f3b258de$export$3f23594af5f37336)((navigation)=>this._empty$.next(!navigation || navigation.url === \"about:blank\")), (0, $e1dacc25c9354c6a$export$8f9d79d42bff1aac)(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._disconnect$)).subscribe(([prevNavigation, currNavigation])=>$146947066e10b00e$var$runSafe(()=>{\n                // Display splash if instructed by the navigator, but only if not navigating to the same capability, if any.\n                // Otherwise, the micro app would have to signal readiness not only after loading the microfrontend, but also when the parameters change.\n                // For example, the same microfrontend that displays data based on a path or query parameter.\n                if (!currNavigation?.capabilityId || currNavigation?.capabilityId !== prevNavigation?.capabilityId) currNavigation?.showSplash ? this._splash.attach() : this._splash.detach();\n                // Emit a page deactivate event, unless not having a previous navigation\n                prevNavigation && this.dispatchEvent(new CustomEvent(\"deactivate\", {\n                    detail: prevNavigation.url\n                }));\n                // Change the outlet URL\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$b84d9f3cc1de7d1d).assign(this._iframe, currNavigation || {\n                    url: \"about:blank\"\n                }, prevNavigation);\n                // Emit a page activate event, unless not having a current navigation\n                currNavigation && this.dispatchEvent(new CustomEvent(\"activate\", {\n                    detail: currNavigation.url\n                }));\n            }));\n    }\n    installPreferredSizeListener() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$RouterOutlets.preferredSizeTopic(this._uid)).pipe($146947066e10b00e$export$d6978861bb0c00c2(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._disconnect$)).subscribe((preferredSize)=>{\n            $146947066e10b00e$var$setStyle(this, {\n                \"min-width\": preferredSize?.minWidth ?? null,\n                \"width\": preferredSize?.width ?? null,\n                \"max-width\": preferredSize?.maxWidth ?? null,\n                \"min-height\": preferredSize?.minHeight ?? null,\n                \"height\": preferredSize?.height ?? null,\n                \"max-height\": preferredSize?.maxHeight ?? null\n            });\n        });\n    }\n    /**\n     * Dispatches synthetic keyboard events that bubble up the DOM like regular events.\n     * Note that synthetic events have the `isTrusted` flag set to `false`, preventing them of triggering default actions.\n     *\n     * Therefore, if default actions should be prevented, it has to be done where the original event is listened to.\n     * @see KeyboardEventDispatcher\n     *\n     * For more information about trusted events\n     * @see https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events\n     * @see https://www.chromestatus.com/features#istrusted\n     */ installKeyboardEventDispatcher() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$RouterOutlets.keyboardEventTopic(this._uid, \":eventType\")).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._disconnect$)).subscribe((event)=>{\n            const type = event.params.get(\"eventType\");\n            this.dispatchEvent(new KeyboardEvent(type, event.body));\n        });\n    }\n    installFocusWithinEventDispatcher() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$RouterOutlets.focusWithinOutletTopic(this._uid)).pipe($146947066e10b00e$export$d6978861bb0c00c2(), (0, $91193f05f5f7351e$export$175dedd748069215)((focusWithin)=>focusWithin === false), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._disconnect$)).subscribe((focusWithin)=>{\n            this.dispatchEvent(new CustomEvent(\"focuswithin\", {\n                detail: focusWithin,\n                bubbles: false,\n                cancelable: false\n            }));\n        });\n    }\n    installHostElementDecorator() {\n        this._empty$.pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._disconnect$)).subscribe((empty)=>{\n            if (empty) this._shadowRoot.host.classList.add(\"sci-empty\");\n            else this._shadowRoot.host.classList.remove(\"sci-empty\");\n        });\n    }\n    /**\n     * Disposes the splash when receiving a readiness signal of the embedded microfrontend.\n     */ installSplashDisposer() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$RouterOutlets.signalReadyTopic(this._uid)).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._disconnect$)).subscribe(()=>{\n            this._splash.detach();\n        });\n    }\n    /**\n     * Lifecycle callback of the 'Custom element' Web Component standard.\n     *\n     * Invoked each time the custom element is appended into a document-connected element.\n     * This will happen each time the node is moved, and may happen before the element's contents have been fully parsed.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     * @internal\n     */ connectedCallback() {\n        this.installOutletUrlListener();\n        this.installOutletContext();\n        this.installPreferredSizeListener();\n        this.installFocusWithinEventDispatcher();\n        this.installKeyboardEventDispatcher();\n        this.installHostElementDecorator();\n        this.installSplashDisposer();\n        this._contextProvider.onOutletMount();\n    }\n    /**\n     * Lifecycle callback of the 'Custom element' Web Component standard.\n     *\n     * Invoked each time the custom element is disconnected from the document's DOM.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     * @internal\n     */ disconnectedCallback() {\n        this._disconnect$.next();\n        this._contextProvider.onOutletUnmount();\n    }\n    /**\n     * Lifecycle callback of the 'Custom element' Web Component standard.\n     *\n     * Specifies the attributes which to observe in {@link attributeChangedCallback} method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     * @internal\n     */ static{\n        this.observedAttributes = [\n            $146947066e10b00e$var$ATTR_NAME,\n            $146947066e10b00e$var$ATTR_SCROLLABLE,\n            $146947066e10b00e$var$ATTR_KEYSTROKES\n        ];\n    }\n    /**\n     * Lifecycle callback of the 'Custom element' Web Component standard.\n     *\n     * Invoked each time one of the custom element's attributes is added, removed, or changed.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     * @internal\n     */ attributeChangedCallback(name, oldValue, newValue) {\n        switch(name){\n            case $146947066e10b00e$var$ATTR_NAME:\n                this._outletName$.next(newValue || $146947066e10b00e$export$61656ab94335dbc0);\n                break;\n            case $146947066e10b00e$var$ATTR_SCROLLABLE:\n                this._iframe.setAttribute(\"scrolling\", $146947066e10b00e$var$coerceBooleanProperty(newValue) ? \"yes\" : \"no\");\n                break;\n            case $146947066e10b00e$var$ATTR_KEYSTROKES:\n                $146947066e10b00e$var$KeystrokesAttributeUtil.split(oldValue).forEach((keystroke)=>this.removeContextValue($146947066e10b00e$var$KEYSTROKE_CONTEXT_NAME_PREFIX + $146947066e10b00e$var$Keystroke.fromString(keystroke).parts));\n                $146947066e10b00e$var$KeystrokesAttributeUtil.split(newValue).forEach((keystrokeStr)=>{\n                    const keystroke = $146947066e10b00e$var$Keystroke.fromString(keystrokeStr);\n                    this.setContextValue($146947066e10b00e$var$KEYSTROKE_CONTEXT_NAME_PREFIX + keystroke.parts, keystroke.flags);\n                });\n                break;\n        }\n    }\n    /**\n     * Defines this outlet as custom element in the browser custom element registry; has no effect if the element was already defined.\n     *\n     * @return A Promise that resolves once this custom element is defined.\n     * @internal\n     */ static define() {\n        if (customElements.get($146947066e10b00e$var$ELEMENT_NAME)) return Promise.resolve();\n        else {\n            customElements.define($146947066e10b00e$var$ELEMENT_NAME, $146947066e10b00e$export$40346ab29ce71372);\n            return customElements.whenDefined($146947066e10b00e$var$ELEMENT_NAME).then(()=>Promise.resolve());\n        }\n    }\n}\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n */ function $146947066e10b00e$var$coerceBooleanProperty(value) {\n    return value !== null && value !== undefined && `${value}` !== \"false\";\n}\n/**\n * Key for obtaining the current outlet context using {@link ContextService}.\n *\n * @category Context\n * @see {@link OutletContext}\n * @see {@link ContextService}\n */ const $146947066e10b00e$export$ff8ad477982f6328 = \"\\u0275OUTLET\";\n/**\n * Default name for an outlet if no explicit name is specified.\n * @category Routing\n */ const $146947066e10b00e$export$61656ab94335dbc0 = \"primary\";\n/**\n * Defines constants for {@link SciRouterOutletElement} and {@link OutletRouter}.\n *\n * @internal\n */ var $146947066e10b00e$var$RouterOutlets;\n(function(RouterOutlets) {\n    /**\n     * Computes the topic via which the URL for an outlet is exchanged as retained message.\n     */ function urlTopic(outletName) {\n        return `sci-router-outlets/${outletName}/url`;\n    }\n    RouterOutlets.urlTopic = urlTopic;\n    /**\n     * Computes the topic via which a microfrontend signals readiness.\n     */ function signalReadyTopic(outletUid) {\n        return `sci-router-outlets/${outletUid}/ready`;\n    }\n    RouterOutlets.signalReadyTopic = signalReadyTopic;\n    /**\n     * Computes the topic where to post keyboard events to be dispatched.\n     */ function keyboardEventTopic(outletUid, eventType) {\n        return `sci-router-outlets/${outletUid}/keyboard-events/${eventType}`;\n    }\n    RouterOutlets.keyboardEventTopic = keyboardEventTopic;\n    /**\n     * Computes the topic to which the preferred outlet size can be published to.\n     */ function preferredSizeTopic(outletUid) {\n        return `sci-router-outlets/${outletUid}/preferred-size`;\n    }\n    RouterOutlets.preferredSizeTopic = preferredSizeTopic;\n    /**\n     * Computes the topic to which the focus-within event can be published to.\n     */ function focusWithinOutletTopic(outletUid) {\n        return `sci-router-outlets/${outletUid}/focus-within`;\n    }\n    RouterOutlets.focusWithinOutletTopic = focusWithinOutletTopic;\n})($146947066e10b00e$var$RouterOutlets || ($146947066e10b00e$var$RouterOutlets = {}));\nvar $146947066e10b00e$var$KeystrokesAttributeUtil;\n(function(KeystrokesAttributeUtil) {\n    const delimiter = \",\";\n    function split(attributeValue) {\n        return attributeValue ? attributeValue.split(delimiter) : [];\n    }\n    KeystrokesAttributeUtil.split = split;\n    function join(keystrokes) {\n        return keystrokes.join(delimiter);\n    }\n    KeystrokesAttributeUtil.join = join;\n})($146947066e10b00e$var$KeystrokesAttributeUtil || ($146947066e10b00e$var$KeystrokesAttributeUtil = {}));\n/**\n * Keystroke bindings are prefixed with `keystroke:` when registered in the outlet context.\n *\n * @internal\n */ const $146947066e10b00e$var$KEYSTROKE_CONTEXT_NAME_PREFIX = \"keystroke:\";\n/**\n * Emits when a navigation for the given outlet occurs.\n */ function $146947066e10b00e$var$outletNavigate$(outlet) {\n    const outletNavigationTopic = $146947066e10b00e$var$RouterOutlets.urlTopic(outlet);\n    return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$(outletNavigationTopic).pipe((0, $a344549688aae3fd$export$871de8747c9eaa88)((navigateMessage)=>{\n        return {\n            url: navigateMessage.body || \"about:blank\",\n            pushStateToSessionHistoryStack: (0, $ccc574af478a1fb0$export$790c233a67baba3).orElse(navigateMessage.headers.get($146947066e10b00e$var$PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER), false),\n            showSplash: (0, $ccc574af478a1fb0$export$790c233a67baba3).orElse(navigateMessage.headers.get($146947066e10b00e$var$SHOW_SPLASH_MESSAGE_HEADER), false),\n            capabilityId: navigateMessage.headers.get($146947066e10b00e$var$CAPABILITY_ID_MESSAGE_HEADER)\n        };\n    }));\n}\n/**\n * Applies the given style(s) to the given element.\n *\n * Specify styles to be modified by passing a dictionary containing CSS property names (hyphen case).\n * To remove a style, set its value to `null`.\n */ function $146947066e10b00e$var$setStyle(element, style) {\n    Object.keys(style).forEach((key)=>element.style.setProperty(key, style[key]));\n}\n/**\n * Represents the splash of the router outlet element.\n *\n * The splash is created from the template with the id \"splash\" contained in the shadow DOM and is placed over the iframe.\n * When displaying the splash, we hide the iframe so that the splash does not have to set the background color.\n */ class $146947066e10b00e$var$Splash {\n    constructor(_shadowRoot, _iframeElement){\n        this._shadowRoot = _shadowRoot;\n        this._iframeElement = _iframeElement;\n        this._template = this._shadowRoot.querySelector(\"template#splash\");\n    }\n    /**\n     * Attaches the splash if not already attached.\n     */ attach() {\n        if (this._element) return;\n        const documentFragment = this._template.content.cloneNode(true);\n        this._element = this._shadowRoot.appendChild(documentFragment.querySelector('div[part=\"splash\"]'));\n        this._iframeElement.style.setProperty(\"visibility\", \"hidden\");\n    }\n    /**\n     * Detaches the splash if attached.\n     */ detach() {\n        if (!this._element) return;\n        this._element.remove();\n        this._element = undefined;\n        this._iframeElement.style.removeProperty(\"visibility\");\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows looking up contextual data set on a {@link SciRouterOutletElement `<sci-router-outlet>`} at any parent level.\n *\n * The platform allows associating contextual data with an outlet, which then is available in embedded content using {@link ContextService}.\n * Contextual data must be serializable with the structured clone algorithm.\n *\n * Each outlet spans a new context. A context is similar to a `Map`, but is linked to its parent outlet context, if any, thus forming a hierarchical tree structure.\n * When looking up a value and if the value is not found in the outlet context, the lookup is retried on the parent context, repeating until either a value\n * is found or the root of the context tree has been reached.\n *\n * The platform sets the following context values by default:\n *\n * | Key | Value type | Description |\n * |-----|------------|-------------|\n * | {@link OUTLET_CONTEXT ɵOUTLET} | {@link OutletContext} | Information about the outlet which embeds the microfrontend. |\n * | {@link ACTIVATION_CONTEXT ɵACTIVATION_CONTEXT} | {@link ActivationContext} | Information about the activation context if loaded by an activator. See {@link ActivatorCapability} for more information about activators. |\n *\n *\n * @category Context\n */ class $146947066e10b00e$export$a8e56bb192edf201 {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._contextTreeChange$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._whenContextTreeChangeListenerInstalled = this.installContextTreeChangeListener((changeEvent)=>this._contextTreeChange$.next(changeEvent));\n    }\n    observe$(name, options) {\n        if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$abac07b0d121aae2)) return (0, $98685deadaab283c$export$ee1b3e54f0441b22)((0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(options?.collect ? [] : null), (0, $62d8f22c904e5fe7$export$96c94437c95d7862));\n        return this._contextTreeChange$.pipe((0, $827970c208304071$export$3dea766d36a8935f)((event)=>event.name === name), (0, $369a1beddcfddd56$export$a4fe86229b0e9bdd)(undefined), (0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)(()=>this.lookupContextValue$(name, options)), $146947066e10b00e$export$9e24f86ac127622f());\n    }\n    lookup(name, options) {\n        return (0, $f03dcc354f8c1062$export$400f9f949cef996c)(this.observe$(name, options));\n    }\n    /**\n     * Checks if a context value is associated with the given name at any level in the context tree.\n     *\n     * @param name - The name of the context value to check if present.\n     * @return A Promise that resolves to `true` if a context value is associated with the given name, or that resolves to `false` otherwise.\n     */ isPresent(name) {\n        return this.lookup(name).then((value)=>value !== null);\n    }\n    /**\n     * Observes the names of context values registered at any level in the context tree.\n     *\n     * @return An Observable that emits the names of context values registered at any level in the context tree.\n     *         Upon subscription, it emits the names of context values currently registered, and then it emits whenever\n     *         some value is registered or unregistered from a context. The Observable never completes.\n     */ names$() {\n        if ((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$abac07b0d121aae2)) return (0, $98685deadaab283c$export$ee1b3e54f0441b22)((0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(new Set()), (0, $62d8f22c904e5fe7$export$96c94437c95d7862));\n        return this._contextTreeChange$.pipe((0, $369a1beddcfddd56$export$a4fe86229b0e9bdd)(undefined), (0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)(()=>this.lookupContextNames$()), $146947066e10b00e$export$9e24f86ac127622f());\n    }\n    /**\n     * Looks up the context tree for a value associated with the given name.\n     *\n     * @param  name - The name of the value to return.\n     * @param  options - Options to control context lookup.\n     * @return An Observable that emits the context value associated with the given key and then completes.\n     *         When the requested value is not found in a context, the Observable emits `null` and then completes.\n     */ lookupContextValue$(name, options) {\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            const replyTo = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n            const unsubscribe$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            const contextValueLookupRequest = $146947066e10b00e$var$Contexts.newContextValueLookupRequest(name, replyTo, options);\n            // Wait until the reply is received.\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$(replyTo).pipe((0, $c7828fe634a19a01$export$b7df5d561049483a)(1), (0, $a344549688aae3fd$export$871de8747c9eaa88)((reply)=>reply.headers.get($146947066e10b00e$export$b23af55470b7f1e1.Status) === $146947066e10b00e$export$a499daaa5fe026d2.OK ? reply.body ?? null : null), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(unsubscribe$)).subscribe(observer);\n            // Send the request.\n            Promise.all([\n                $146947066e10b00e$var$whenSubscribedToReplyTopic(replyTo),\n                this._whenContextTreeChangeListenerInstalled\n            ]).then(()=>window.parent.postMessage(contextValueLookupRequest, \"*\")).catch((error)=>observer.error(error));\n            return ()=>unsubscribe$.next();\n        });\n    }\n    /**\n     * Looks up the context names of all values registered in the current and parent contexts.\n     *\n     * @return An Observable that emits the names of all values registered in the current and parent contexts and then completes.\n     */ lookupContextNames$() {\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            const replyTo = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n            const unsubscribe$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            const contextNamesLookupRequest = $146947066e10b00e$var$Contexts.newContextTreeNamesLookupRequest(replyTo);\n            // Wait until the reply is received.\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$(replyTo).pipe((0, $c7828fe634a19a01$export$b7df5d561049483a)(1), (0, $a344549688aae3fd$export$871de8747c9eaa88)((reply)=>reply.headers.get($146947066e10b00e$export$b23af55470b7f1e1.Status) === $146947066e10b00e$export$a499daaa5fe026d2.OK ? reply.body : new Set()), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(unsubscribe$)).subscribe(observer);\n            // Send the request.\n            Promise.all([\n                $146947066e10b00e$var$whenSubscribedToReplyTopic(replyTo),\n                this._whenContextTreeChangeListenerInstalled\n            ]).then(()=>window.parent.postMessage(contextNamesLookupRequest, \"*\")).catch((error)=>observer.error(error));\n            return ()=>unsubscribe$.next();\n        });\n    }\n    /**\n     * Installs a listener to get notified about context changes at any level in the context tree.\n     *\n     * @return A Promise that resolves when installed the listener.\n     */ installContextTreeChangeListener(listener) {\n        const replyTo = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n        const contextObserveRequest = $146947066e10b00e$var$Contexts.newContextTreeObserveRequest(replyTo);\n        return new Promise((resolve, reject)=>{\n            // Receive change notifications.\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$(replyTo).pipe($146947066e10b00e$export$d6978861bb0c00c2(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe({\n                next: (event)=>{\n                    if (event === $146947066e10b00e$var$Contexts.RootContextSubscribeEvent) resolve(); // resolve the promise as subscribed to all parent contexts.\n                    else listener(event);\n                },\n                error: reject\n            });\n            // Send the observe request.\n            $146947066e10b00e$var$whenSubscribedToReplyTopic(replyTo).then(()=>window.parent.postMessage(contextObserveRequest, \"*\")).catch((error)=>reject(error));\n        });\n    }\n    /** @ignore */ preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Resolves when subscribed to the given reply topic.\n */ function $146947066e10b00e$var$whenSubscribedToReplyTopic(topic) {\n    return new Promise((resolve, reject)=>{\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).subscriberCount$(topic).pipe((0, $cbe8268c6277296f$export$43128fadae87b74a)((count)=>count === 1)).subscribe({\n            error: reject,\n            complete: resolve\n        });\n    });\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Used by {@link OutletRouter} to convert relative paths to absolute paths.\n *\n * Replace this bean to use a different relative path resolution strategy.\n *\n * @see {@link OutletRouter}\n * @category Routing\n */ class $146947066e10b00e$export$fc96cab2c66d5054 {\n    /**\n     * Converts the given relative path into a navigable URL with relative navigational symbols like `/`, `./`, or `../` resolved.\n     *\n     * @param  path - Specifies the path which to convert into an absolute path.\n     * @param  options - Specifies to which url the given path is relative to.\n     * @return the absolute path.\n     */ resolve(path, options) {\n        const relativeTo = $146947066e10b00e$var$Urls.newUrl(options.relativeTo);\n        // Check if hash-based routing is used\n        if (relativeTo.hash?.startsWith(\"#/\")) {\n            // Apply navigational symbols only to the path of the hash-based route, and not to the context path before the hash, if any.\n            // For that reason, we temporarily remove the context path when constructing the URL.\n            const { pathname: pathname, search: search, hash: hash } = $146947066e10b00e$var$Urls.newUrl(path, `${relativeTo.origin}${relativeTo.hash.substring(1)}`);\n            return relativeTo.origin + relativeTo.pathname + \"#\" + pathname + search + hash;\n        } else return $146947066e10b00e$var$Urls.newUrl(path, options.relativeTo).toString();\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows sending and receiving intents between microfrontends across origins.\n * This client is part of the Intention API of the SCION Microfrontend Platform.\n *\n * Intent-based messaging enables controlled collaboration between micro applications, a mechanism known from Android development\n * where an application can start an activity via an intent (such as sending an email).\n *\n * Like topic-based communication, intent-based communication implements the pub/sub (publish/subscribe) messaging pattern, but is,\n * in contrast, more restrictive when sending messages. Sending messages is also referred to as issuing intents. It requires the sending\n * application to declare an intention in its manifest. Intents are received only by applications that provide a fulfilling capability.\n * If no application provides a fulfilling capability, the platform rejects the intent.\n *\n * The communication is built on top of the native `postMessage` mechanism. The host app acts as message broker.\n *\n * #### Intent Addressing\n * In intent-based communication, the destination are capabilities, formulated in an abstract way, consisting of a a type, and optionally\n * a qualifier. The type categorizes a capability in terms of its functional semantics. A capability may also define a qualifier to\n * differentiate the different capabilities of the same type. The type is a string literal and the qualifier a dictionary of key-value pairs.\n *\n * ### Retained Intents\n * You can mark an intent as \"retained\" for helping newly subscribed clients to get the last intent published for a capability immediately upon\n * subscription. The broker stores one retained intent per capability, i.e., a later sent retained intent will replace a previously sent retained\n * intent. To delete a retained intent, send a retained intent without payload to the same destination.\n *\n * ### Retained Request\n * Unlike retained intents, retained requests are not replaced by later retained requests/intents and remain in the broker until the requestor unsubscribes.\n *\n * ### Request-Response Messaging\n * Sometimes it is useful to initiate a request-response communication to wait for a response. Unlike with fire-and-forget intents, a temporary\n * inbox is created for the intent issuer to receive replies.\n *\n * @see {@link IntentMessage}\n * @see {@link Intent}\n * @see {@link MessageHeaders}\n *\n * @category Messaging\n * @category Intention API\n */ class $146947066e10b00e$export$453ace576174a6eb {\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows navigating to a web page or microfrontend in a {@link SciRouterOutletElement `<sci-router-outlet>`} element.\n *\n * In SCION Microfrontend Platform, routing means instructing a `<sci-router-outlet>` to display the content of a URL. Routing works\n * across microfrontend and micro application boundaries, allowing the URL of an outlet to be set from anywhere in the application. The\n * web content displayed in an outlet can be any HTML document that has not set the HTTP header X-Frame-Options. Routing is also referred\n * to as navigating.\n *\n * The router supports multiple outlets in the same application to co-exist. By giving an outlet a name, you can reference it as the\n * routing target. If not naming an outlet, its name defaults to {@link PRIMARY_OUTLET primary}. If multiple outlets have the same name,\n * they all show the same content. If routing in the context of a router outlet, that is inside a microfrontend, and not specifying a\n * routing target, the content of the current outlet is replaced.\n *\n * An outlet does not necessarily have to exist at the time of routing. When adding the outlet to the DOM, the outlet displays the last URL\n * routed for it. When repeating routing for an outlet, its content is replaced.\n *\n * A router outlet is defined as follows. If no navigation has been performed for the outlet yet, then its content is empty.\n *\n *  ```html\n * <sci-router-outlet name=\"aside\"></sci-router-outlet>\n * ```\n *\n * ### Navigation via URL\n * The URL of the page to be loaded into the router outlet is passed to the router, as follows:\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {outlet: 'aside'});\n * ```\n *\n * #### Relative URL Navigation\n * The router allows to use both absolute and relative paths. A relative path begins with a navigational symbol `/`, `./`, or `../`. By default,\n * relative navigation is relative to the current window location of the navigating application, unless specifying a base path for the navigation.\n *\n * ```ts\n * // Navigation relative to the root path segment\n * Beans.get(OutletRouter).navigate('/products/:id', {outlet: PRIMARY_OUTLET});\n *\n * // Navigation relative to the parent path segment\n * Beans.get(OutletRouter).navigate('../products/:id', {outlet: PRIMARY_OUTLET});\n * ```\n *\n * #### Named URL Parameters\n * The URL being passed to the router can contain named parameters which the router replaces with values of the provided params object.\n * A named parameter begins with a colon (`:`) and is allowed in path segments, query parameters, matrix parameters and the fragment part,\n * e.g., `product/:id` or `product;id=:id` or `products?id=:id`.\n *\n * ### Navigating via Intent\n * As an alternative to navigating directly to a URL, the router supports navigation to a microfrontend capability via an intent.\n * We refer to this as intent-based routing.\n *\n * We recommend using intent-based routing over url-based routing, especially for cross-application navigations, since the navigation flows\n * are explicit, i.e., declared in the manifest, and to keep the microfrontend URLs an implementation detail of the micro applications that\n * provide the microfrontends.\n *\n * Note that if the microfrontend is provided by another micro app, the navigating app must manifest an intention. Also, the navigating\n * app can only navigate to public microfrontend capabilities.\n *\n * The following code snippet illustrates how to display the _product_ microfrontend in the \"aside\" outlet. Note that you only need to pass\n * the qualifier of the microfrontend capability and not its type. The capability type, which is always `microfrontend`, is implicitly set\n * by the router.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate({entity: 'product'}, {\n *   outlet: 'aside',\n *   params: {id: 123},\n * });\n * ```\n *\n * Applications can provide microfrontend capabilities through their manifest. A microfrontend can be either application private or exposed to\n * other micro applications. The platform requires all microfrontend capabilities to be of type `microfrontend`. A particular microfrontend can\n * be identified using its qualifier.\n *\n * ```json\n * {\n *   \"type\": \"microfrontend\",\n *   \"qualifier\": {\n *     \"entity\": \"product\"\n *   },\n *   \"description\": \"Displays a product.\",\n *   \"params\": [\n *     {\"name\": \"id\", \"required\": true}\n *   ],\n *   \"private\": false,\n *   \"properties\": {\n *     \"path\": \"product/:id\",\n *   }\n * }\n * ```\n *\n * Note that the providing micro application does not need to install an intent handler for its microfrontend capabilities. The platform intercepts\n * microfrontend intents and performs the navigation.\n *\n * ### Persistent Navigation\n * Persistent navigation refers to the mechanism for restoring the navigational state after an application reload.\n *\n * The router does not provide an implementation for persistent navigation out-of-the-box, mostly because many persistence strategies are imaginable.\n * For example, the navigational state could be added to the top-level URL, stored in local storage, or persisted in the backend.\n * However, you can easily implement persistent navigation yourself. The router publishes navigations to the topic `sci-router-outlets/:outlet/url`;\n * thus, they can be captured and persisted. When starting the application, you can then replay persisted navigations using the router.\n *\n * ### Unloading Outlet Content\n * To unload an outlet’s content, use null as the URL when routing, as follows:\n *\n * ```ts\n * Beans.get(OutletRouter).navigate(null, {outlet: 'aside'});\n * ```\n *\n * ### Browsing History and Session History\n * Routing does not add an entry to the browsing history, and, by default, not push a navigational state to the browser’s session history stack.\n *\n * You can instruct the router to add a navigational state to the browser’s session history stack, allowing the user to use the back button of the browser to\n * navigate back in an outlet.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {\n *   outlet: 'aside',\n *   pushStateToSessionHistoryStack: true,\n * });\n * ```\n *\n * @see {@link SciRouterOutletElement}\n *\n * @category Routing\n */ class $146947066e10b00e$export$7fb6e18939c89ffa {\n    async navigate(target, options) {\n        if (!target || typeof target === \"string\") await this.navigateByUrl(target, options);\n        else await this.navigateByIntent(target, options);\n    }\n    /**\n     * Navigates to specified URL.\n     */ async navigateByUrl(url, options) {\n        const outlet = options?.outlet || await this.resolveContextualOutlet() || $146947066e10b00e$export$61656ab94335dbc0;\n        const outletUrlTopic = $146947066e10b00e$var$RouterOutlets.urlTopic(outlet);\n        const navigationUrl = this.computeNavigationUrl(url, options);\n        await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(outletUrlTopic, navigationUrl, {\n            retain: true,\n            headers: new Map().set($146947066e10b00e$var$PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER, options?.pushStateToSessionHistoryStack ?? false).set($146947066e10b00e$var$SHOW_SPLASH_MESSAGE_HEADER, options?.showSplash ?? false).set($146947066e10b00e$var$CAPABILITY_ID_MESSAGE_HEADER, options?.\\u0275capabilityId)\n        });\n        // Clear retained navigation message in case of a `null` URL navigation.\n        if (url === null) await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(outletUrlTopic, undefined, {\n            retain: true\n        });\n    }\n    /**\n     * Navigates to a microfrontend available as {@link MicrofrontendCapability} matching the passed qualifier.\n     */ async navigateByIntent(qualifier, options) {\n        if (options?.relativeTo) throw Error('[OutletRouterError][UnsupportedOptionError] Unsupported navigation option \"relativeTo\". This option is not supported in intent-based routing.');\n        const contextualOutlet = await this.resolveContextualOutlet();\n        const intent = {\n            type: $146947066e10b00e$export$36e3ecc814ff657b.Microfrontend,\n            qualifier: qualifier,\n            params: (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).coerce(options?.params)\n        };\n        const navigate$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$453ace576174a6eb).request$(intent, options, {\n            headers: new Map().set($146947066e10b00e$var$ROUTING_CONTEXT_MESSAGE_HEADER, {\n                [$146947066e10b00e$var$ROUTING_CONTEXT_OUTLET]: contextualOutlet\n            })\n        });\n        try {\n            await (0, $7b246f86cff85ef0$export$a175cc82f1f2275e)(navigate$.pipe($146947066e10b00e$export$d6978861bb0c00c2()));\n        } catch (error) {\n            throw error instanceof $146947066e10b00e$export$43ee7d0e4f429743 ? error.message : error;\n        }\n    }\n    computeNavigationUrl(urlPattern, options) {\n        if (urlPattern === undefined || urlPattern === null) return \"about:blank\";\n        const params = (0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).coerce(options?.params);\n        const url = this.substituteNamedParameters(urlPattern, params);\n        if ($146947066e10b00e$var$Urls.isAbsoluteUrl(url)) return url;\n        else {\n            const relativeTo = options?.relativeTo ?? window.location.href;\n            return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$fc96cab2c66d5054).resolve(url, {\n                relativeTo: relativeTo\n            });\n        }\n    }\n    async resolveContextualOutlet() {\n        // If navigating in the context of an activator, do not use that outlet as contextual outlet.\n        if (await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).isPresent($146947066e10b00e$export$3200a3edec649cbd)) return undefined;\n        return (await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).lookup($146947066e10b00e$export$ff8ad477982f6328))?.name;\n    }\n    /**\n     * Replaces named parameters in the given path with values contained in the given {@link Map}.\n     * Named parameters begin with a colon (`:`) and are allowed in path segments, query parameters, matrix parameters\n     * and the fragment part.\n     *\n     * Empty query and matrix params are removed, but not empty path params.\n     *\n     * Some examples about the usage of named parameters:\n     * /segment/:param1/segment/:param2 // path params\n     * /segment/segment;matrixParam1=:param1;matrixParam2=:param2 // matrix params\n     * /segment/segment?queryParam1=:param1&queryParam2=:param2 // query params\n     */ substituteNamedParameters(path, params) {\n        return path// 1. Replace named params contained in the params map.\n        .replace(/:([^/;&?#]+)/g, (match, paramName)=>params.get(paramName) !== undefined ? params.get(paramName) : match)// 2. Remove named matrix params not contained in the params map.\n        .replace(/(?<delimiter>;)(?<paramName>[^=]+)=:(?<placeholder>[^;#?/]+)/g, ()=>{\n            return \"\";\n        })// 3. Remove named query params not contained in the params map. Replaces the first query param\n        //    with a special marker for later substitution.\n        .replace(/(?<delimiter>[?&])(?<paramName>[^=]+)=:(?<placeholder>[^&#]+)/g, (match, delimiter)=>{\n            return delimiter === \"?\" ? \"\\u0275__?__\" : \"\";\n        })// 4. Replace the marker with the question mark if at least one query parameter is present.\n        .replace(/ɵ__\\?__&/, \"?\")// 5. Remove marker if no query params are present.\n        .replace(/ɵ__\\?__/, \"\");\n    }\n}\n/**\n * Message header with information about the current context of the navigator.\n * @internal\n */ const $146947066e10b00e$var$ROUTING_CONTEXT_MESSAGE_HEADER = \"context\";\n/**\n * Name of the current outlet if navigating in the context of an outlet.\n * @internal\n */ const $146947066e10b00e$var$ROUTING_CONTEXT_OUTLET = \"outlet\";\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Handles microfrontend intents, instructing the {@link OutletRouter} to navigate to the microfrontend of the resolved microfrontend capability.\n *\n * Microfrontend intents are handled in this interceptor in order to support microfrontends not using the SCION Microfrontend Platform.\n * They are not transported to the providing application.\n *\n * @internal\n */ class $146947066e10b00e$var$MicrofrontendIntentNavigator {\n    /**\n     * Microfrontend intents are handled in this interceptor and then swallowed.\n     */ intercept(intentMessage, next) {\n        if (intentMessage.intent.type === $146947066e10b00e$export$36e3ecc814ff657b.Microfrontend) return this.consumeMicrofrontendIntent(intentMessage);\n        else return next.handle(intentMessage);\n    }\n    async consumeMicrofrontendIntent(message) {\n        const replyTo = message.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n        await this.navigate(message);\n        await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(replyTo, null, {\n            headers: new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.TERMINAL)\n        });\n    }\n    async navigate(message) {\n        const microfrontendCapability = message.capability;\n        const options = message.body;\n        const intent = message.intent;\n        const microfrontendPath = microfrontendCapability.properties?.path;\n        if (microfrontendPath === undefined || microfrontendPath === null) throw Error(`[OutletRouterError][NullPathError] Microfrontend capability has no path to the microfrontend defined. [capability=${JSON.stringify(microfrontendCapability)}]`);\n        const appSymbolicName = microfrontendCapability.metadata.appSymbolicName;\n        const application = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).getApplication(appSymbolicName, {\n            orElse: null\n        });\n        if (!application) throw Error(`[OutletRouterError][NullApplicationError] Unexpected error. No application found with the symbolic name \"${appSymbolicName}\".`);\n        await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$7fb6e18939c89ffa).navigate(microfrontendPath, {\n            ...options,\n            outlet: this.resolveTargetOutlet(message),\n            relativeTo: application.baseUrl,\n            params: {\n                ...intent.qualifier,\n                ...(0, $ccc574af478a1fb0$export$45dae21dfe837dd7).coerce(intent.params)\n            },\n            showSplash: microfrontendCapability.properties.showSplash,\n            \\u0275capabilityId: microfrontendCapability.metadata.id\n        });\n    }\n    /**\n     * Resolves the target outlet in the following order:\n     *\n     * - Outlet as specified by navigator via {@link NavigationOptions#outlet}.\n     * - Preferred outlet as specified in the microfrontend capability.\n     * - Current outlet if navigating in the context of an outlet.\n     * - {@link PRIMARY_OUTLET primary} outlet.\n     */ resolveTargetOutlet(message) {\n        const microfrontendCapability = message.capability;\n        const options = message.body;\n        if (options?.outlet) return options.outlet;\n        if (microfrontendCapability.properties.outlet) return microfrontendCapability.properties.outlet;\n        const contextualOutlet = message.headers.get($146947066e10b00e$var$ROUTING_CONTEXT_MESSAGE_HEADER)?.[$146947066e10b00e$var$ROUTING_CONTEXT_OUTLET];\n        if (contextualOutlet) return contextualOutlet;\n        return $146947066e10b00e$export$61656ab94335dbc0;\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * @internal\n */ class $146947066e10b00e$var$\\u0275ClientRegistry {\n    constructor(){\n        this._clientsById = new Map();\n        this._clientsByWindow = new Map();\n        this.register$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this.unregister$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n    }\n    registerClient(client) {\n        const staleClient = this._clientsByWindow.get(client.window);\n        if (staleClient) {\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[StaleClient] Stale client registration detected when loading application '${client.application.symbolicName}'\n        into the window of '${staleClient.application.symbolicName}'. Removing stale registration. Most likely, the client could not disconnect\n        from the broker, for example, because the client was disposed without notice, i.e., without receiving the browser's \"unload\" event, or\n        because the browser discarded the 'DISCONNECT' message, maybe due to a high load on the client during unloading.`.replace(/\\s+/g, \" \"), new $146947066e10b00e$export$cfece0898859977d(staleClient.application.symbolicName, staleClient.version));\n            this.unregisterClient(staleClient);\n        }\n        this._clientsById.set(client.id, client);\n        this._clientsByWindow.set(client.window, client);\n        this.register$.next(client);\n    }\n    unregisterClient(client) {\n        this._clientsById.delete(client.id);\n        this._clientsByWindow.delete(client.window);\n        this.unregister$.next(client);\n        client.dispose();\n    }\n    getByClientId(clientId) {\n        return this._clientsById.get(clientId);\n    }\n    getByWindow(window1) {\n        return this._clientsByWindow.get(window1);\n    }\n    getByApplication(appSymbolicName) {\n        return Array.from(this._clientsById.values()).filter((client)=>client.application.symbolicName === appSymbolicName);\n    }\n    preDestroy() {\n        this._clientsById.forEach((client)=>this.unregisterClient(client));\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Provides the config for the host app.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */ class $146947066e10b00e$var$HostAppConfigProvider {\n    constructor(){}\n    /**\n     * Creates the {@link ApplicationConfig} for the host app.\n     */ static createAppConfig(hostConfig) {\n        return {\n            symbolicName: hostConfig.symbolicName,\n            manifestUrl: $146947066e10b00e$var$provideHostManifestUrl(hostConfig.manifest),\n            scopeCheckDisabled: hostConfig.scopeCheckDisabled,\n            intentionCheckDisabled: hostConfig.intentionCheckDisabled,\n            intentionRegisterApiDisabled: hostConfig.intentionRegisterApiDisabled\n        };\n    }\n    /**\n     * Intercepts the host manifest by registered interceptors.\n     */ static interceptManifest(manifest) {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).all($146947066e10b00e$export$3af33b08f01f58a3).forEach((interceptor)=>interceptor.intercept(manifest));\n    }\n}\nfunction $146947066e10b00e$var$provideHostManifestUrl(hostManifest) {\n    if (typeof hostManifest === \"string\") return hostManifest; // URL specified\n    return $146947066e10b00e$var$serveHostManifest(hostManifest || {\n        name: \"Host Application\"\n    });\n}\nfunction $146947066e10b00e$var$serveHostManifest(manifest) {\n    const url = URL.createObjectURL(new Blob([\n        JSON.stringify(manifest)\n    ], {\n        type: \"application/json\"\n    }));\n    $146947066e10b00e$export$5cce370cfaa52f9e.whenState($146947066e10b00e$export$f677ff3cbab00a1f.Stopped).then(()=>URL.revokeObjectURL(url));\n    return url;\n}\n/*\n * Copyright (c) 2018-2021 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Represents a monitor to track the progress of some work.\n *\n * A monitor can be split into child monitors, allowing the work to be broken down into smaller units,\n * with each child monitor contributing to the overall progress of the parent monitor.\n *\n * @internal\n */ class $146947066e10b00e$var$ProgressMonitor {\n    constructor(){\n        this._progress$ = new (0, $30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b)(0);\n        this._done$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._hasSubMonitors = false;\n        /**\n         * Reports the current progress of this monitor in percent.\n         *\n         * Upon subscription, emits the current progress, and then continuously as the progress advances.\n         * At 100%, the Observable completes.\n         */ this.progress$ = this._progress$.pipe((0, $419c2da03c3ac473$export$779c5fb865a0172e)(), (0, $a344549688aae3fd$export$871de8747c9eaa88)((progress)=>Math.round(progress * 10000) / 100), (0, $54e8ed1fe60bf698$export$9384c7afe4015e42)((progress)=>progress < 100, true));\n    }\n    /**\n     * Splits this monitor into separate child monitors for breaking down this monitor's work into smaller units.\n     *\n     * Each child monitor contributes to the overall progress of this monitor. The ratio allows child monitors to be\n     * weighted differently, for example, one child monitor can contribute twice as much as another to the overall progress.\n     * After all child monitors reported \"done\", this monitor will also enter \"done\".\n     */ split(...ratio) {\n        if (this._hasSubMonitors) throw Error(\"[IllegalMonitorStateError] Monitor cannot be split multiple times.\");\n        this._hasSubMonitors = true;\n        const subMonitors = ratio.map(()=>new $146947066e10b00e$var$ProgressMonitor());\n        (0, $e9c33d8acb1fdd17$export$77fa7d86f5204e8a)(subMonitors.map((subMonitor)=>subMonitor._progress$)).pipe($146947066e10b00e$var$computeProgress(ratio), (0, $54e8ed1fe60bf698$export$9384c7afe4015e42)((progress)=>progress < 1, true), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._done$)).subscribe((progress)=>{\n            this._progress$.next(progress);\n        });\n        return subMonitors;\n    }\n    /**\n     * Like {@link split}, but creates `n` child monitors with the same weight.\n     */ splitEven(n) {\n        if (n <= 0) throw Error(`[IllegalMonitorArgumentError] Monitor split count must be greater than 0, but was ${n}.`);\n        return this.split(...new Array(n).fill(1));\n    }\n    /**\n     * Completes this monitor, setting its progress to '100%'.\n     * Has no effect if this monitor is already \"done\".\n     */ done() {\n        this._progress$.next(1);\n        this._done$.next();\n    }\n}\nfunction $146947066e10b00e$var$computeProgress(ratio) {\n    const ratioSum = ratio.reduce((sum, weight)=>sum + weight, 0);\n    return (0, $a344549688aae3fd$export$871de8747c9eaa88)((subMonitorsProgress)=>{\n        return ratio.reduce((totalProgress, subMonitorWeight, subMonitorIndex)=>{\n            return totalProgress + subMonitorsProgress[subMonitorIndex] * (subMonitorWeight / ratioSum);\n        }, 0);\n    });\n}\n/*\n * Copyright (c) 2018-2021 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Tracks the progress of loading application manifests.\n *\n * @internal\n */ class $146947066e10b00e$var$ManifestLoadProgressMonitor extends $146947066e10b00e$var$ProgressMonitor {\n}\n/**\n * Tracks the progress of loading application activators.\n *\n * @internal\n */ class $146947066e10b00e$var$ActivatorLoadProgressMonitor extends $146947066e10b00e$var$ProgressMonitor {\n}\n/**\n * @internal\n */ class $146947066e10b00e$var$StartupProgressMonitor extends $146947066e10b00e$var$ProgressMonitor {\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Installs registered applications in the platform.\n *\n * @internal\n */ class $146947066e10b00e$var$AppInstaller {\n    constructor(_hostConfig, appConfigs){\n        this._hostConfig = _hostConfig;\n        this._appConfigs = appConfigs.filter((appConfig)=>!appConfig.exclude);\n    }\n    /**\n     * Installs registered applications in the platform.\n     */ async install() {\n        // Create config for the host.\n        const hostAppConfig = $146947066e10b00e$var$HostAppConfigProvider.createAppConfig(this._hostConfig);\n        const appConfigs = [\n            hostAppConfig,\n            ...this._appConfigs\n        ];\n        const manifestLoadMonitors = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ManifestLoadProgressMonitor).splitEven(appConfigs.length);\n        // Fetch manifests and register applications.\n        await Promise.all(appConfigs.map(async (appConfig)=>{\n            const monitor = manifestLoadMonitors.shift();\n            try {\n                // Fetch the manifest.\n                const manifest = await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ManifestFetcher).fetch(appConfig);\n                // Let interceptors intercept the host manifest, for example by libraries integrating the SCION Microfrontend Platform,\n                // e.g., to contribute integrator-specific capabilities and intentions.\n                if (appConfig === hostAppConfig) $146947066e10b00e$var$HostAppConfigProvider.interceptManifest(manifest);\n                // Register application in the platform.\n                await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).registerApplication(appConfig, manifest);\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).info(`Registered application '${appConfig.symbolicName}' in the SCION Microfrontend Platform.`);\n            } catch (error) {\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).error(`[AppInstaller] Failed to install application '${appConfig.symbolicName}' in the SCION Microfrontend Platform.`, error);\n            } finally{\n                monitor.done();\n            }\n        }));\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Activates micro applications which provide an activator capability.\n *\n * Activators enable micro applications to interact with the platform for the entire platform lifecycle.\n * Activators can signal when ready for operation, causing this initializer to wait until received respective readiness messages.\n *\n * @internal\n */ class $146947066e10b00e$var$ActivatorInstaller {\n    async init() {\n        // Lookup activators.\n        const activators = await (0, $f03dcc354f8c1062$export$400f9f949cef996c)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$aafa7a6a222a9fad).lookupCapabilities$({\n            type: $146947066e10b00e$export$36e3ecc814ff657b.Activator\n        }));\n        const monitor = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ActivatorLoadProgressMonitor);\n        if (!activators.length) {\n            monitor.done();\n            return;\n        }\n        // Group activators by their providing application.\n        const activatorsGroupedByApp = activators.filter(this.skipInvalidActivators()).reduce((grouped, activator)=>(0, $ccc574af478a1fb0$export$2869c604d0a0cf9c).addListValue(grouped, activator.metadata.appSymbolicName, activator), new Map());\n        // Create Promises that wait for activators to signal ready.\n        const subMonitors = monitor.splitEven(activatorsGroupedByApp.size);\n        const activatorReadyPromises = Array.from(activatorsGroupedByApp.entries()).reduce((acc, [appSymbolicName, appActivators], index)=>{\n            return acc.concat(this.waitForActivatorsToSignalReady(appSymbolicName, appActivators, subMonitors[index]));\n        }, []);\n        // Mount activators in hidden iframes\n        activatorsGroupedByApp.forEach((sameAppActivators)=>{\n            // Nominate one activator of each app as primary activator.\n            const primaryActivator = sameAppActivators[0];\n            sameAppActivators.forEach((activator)=>this.mountActivator(activator, activator === primaryActivator));\n        });\n        // Wait until activators signal ready.\n        await Promise.all(activatorReadyPromises);\n    }\n    skipInvalidActivators() {\n        return (activator)=>{\n            if (!activator.properties || !activator.properties.path) {\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).error(`[ActivatorError] Failed to activate the application '${activator.metadata.appSymbolicName}'. Missing required 'path' property in the provided activator capability.`, activator);\n                return false;\n            }\n            return true;\n        };\n    }\n    /**\n     * Creates a Promise that resolves when given activators signal ready.\n     */ async waitForActivatorsToSignalReady(appSymbolicName, activators, monitor) {\n        const t0 = Date.now();\n        const activatorLoadTimeout = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).getApplication(appSymbolicName).activatorLoadTimeout;\n        const readinessPromises = activators.reduce((acc, activator)=>acc.concat((0, $ccc574af478a1fb0$export$3b0ccdbbdb9feaa4).coerce(activator.properties.readinessTopics)), new Array()) // concat readiness topics\n        .map((readinessTopic)=>{\n            const onReadinessTimeout = ()=>{\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).error(`[ActivatorLoadTimeoutError] Timeout elapsed while waiting for application to signal readiness [app=${appSymbolicName}, timeout=${activatorLoadTimeout}ms, readinessTopic=${readinessTopic}].`);\n                return 0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58;\n            };\n            return new Promise((resolve, reject)=>{\n                return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$(readinessTopic).pipe((0, $cbe8268c6277296f$export$43128fadae87b74a)((msg)=>msg.headers.get($146947066e10b00e$export$b23af55470b7f1e1.AppSymbolicName) === appSymbolicName), activatorLoadTimeout ? (0, $4be3df9c8b191a2f$export$83e74882c5df8fe1)({\n                    first: activatorLoadTimeout,\n                    with: onReadinessTimeout\n                }) : (0, $d964bb9c87650d9b$export$f0954fd7d5368655)).subscribe({\n                    error: reject,\n                    complete: resolve\n                });\n            });\n        });\n        if (!readinessPromises.length) {\n            monitor.done();\n            return;\n        }\n        await Promise.all(readinessPromises);\n        monitor.done();\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).info(`Activator startup of '${appSymbolicName}' took ${Date.now() - t0}ms.`);\n    }\n    /**\n     * Mounts a hidden <sci-router-outlet> and loads the activator endpoint.\n     */ mountActivator(activator, primary) {\n        const application = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).getApplication(activator.metadata.appSymbolicName);\n        // Create the router outlet and navigate to the activator endpoint.\n        const routerOutlet = document.createElement(\"sci-router-outlet\");\n        routerOutlet.name = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$7fb6e18939c89ffa).navigate(activator.properties.path, {\n            outlet: routerOutlet.name,\n            relativeTo: application.baseUrl\n        }).then();\n        // Provide the activation context\n        routerOutlet.setContextValue($146947066e10b00e$export$3200a3edec649cbd, {\n            primary: primary,\n            activator: activator\n        });\n        // Add CSS classes for debugging purposes\n        routerOutlet.classList.add(\"sci-activator\");\n        // Add custom data attribute with the application's symbolic name for debugging purposes\n        routerOutlet.dataset[\"app\"] = application.symbolicName;\n        // Make the router outlet invisible\n        routerOutlet.style.display = \"none\";\n        // Take the router outlet out of the document flow\n        routerOutlet.style.position = \"absolute\";\n        // Add the router outlet to the DOM\n        document.body.appendChild(routerOutlet);\n        // Unmount the router outlet on platform shutdown\n        $146947066e10b00e$export$5cce370cfaa52f9e.whenState($146947066e10b00e$export$f677ff3cbab00a1f.Stopped).then(()=>document.body.removeChild(routerOutlet));\n    }\n}\n/**\n * Allow observing whether the current microfrontend has received focus or contains embedded web content that has received focus.\n *\n * @category Focus\n */ class $146947066e10b00e$export$9b078e20c2505aad {\n    constructor(){\n        /**\n         * Observable that emits when the current microfrontend or any of its child microfrontends has gained or lost focus.\n         * The Observable does not emit while the focus remains within this microfrontend or any of its child microfrontends.\n         * Upon subscription, the Observable emits the current focus-within state, and then continuously emits when it changes.\n         * It never completes.\n         *\n         * This Observable is like the `:focus-within` CSS pseudo-class but operates across iframe boundaries.\n         * For example, it can be useful when implementing overlays that close upon focus loss.\n         *\n         * Note that this Observable emits only for microfrontends that are connected to the platform as registered micro app.\n         *\n         * See also the `onfocuswithin` event triggered by `<sci-router-outlet>` when embedded content has gained or lost focus.\n         */ this.focusWithin$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.IsFocusWithin).pipe($146947066e10b00e$export$d6978861bb0c00c2());\n        /**\n         * Observable that emits when the current microfrontend has gained or lost focus.\n         *\n         * Upon subscription, the Observable emits the current focus state, and then continuously emits when it changes.\n         * It never completes.\n         */ this.focus$ = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).request$($146947066e10b00e$var$PlatformTopics.HasFocus).pipe($146947066e10b00e$export$d6978861bb0c00c2());\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Sends a 'focusin' event to the topic {@link PlatformTopics.FocusIn} when this document gains focus.\n *\n * @see FocusTracker\n * @internal\n */ class $146947066e10b00e$var$FocusInEventDispatcher {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n        // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n        this.installFocusEventDispatcher().then();\n    }\n    /**\n     * Installs focus event dispatching, but only if not loaded as activator.\n     */ async installFocusEventDispatcher() {\n        if (await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).isPresent($146947066e10b00e$export$3200a3edec649cbd)) return;\n        this.publishFocusInEvent();\n        await this.notifyOutletAboutFocusChange();\n    }\n    /**\n     * Publishes 'focusin' events for the platform to track focus ownership.\n     */ publishFocusInEvent() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$9b078e20c2505aad).focus$.pipe((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((hasFocus)=>hasFocus ? (0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58) : (0, $886ab650a4e672e5$export$236c05de452bec2)((0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"focusin\", {\n                once: true\n            }), (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"mousedown\", {\n                once: true,\n                capture: true\n            }))), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe(()=>{\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish($146947066e10b00e$var$PlatformTopics.FocusIn);\n        });\n    }\n    /**\n     * Reports the embedding outlet when the current microfrontend or any of its child microfrontends has gained or lost focus.\n     * It does not report while the focus remains within this microfrontend or any of its child microfrontends.\n     */ async notifyOutletAboutFocusChange() {\n        const outletContext = await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).lookup($146947066e10b00e$export$ff8ad477982f6328);\n        if (!outletContext) return;\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$9b078e20c2505aad).focusWithin$.pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((focusWithin)=>{\n            const publishTo = $146947066e10b00e$var$RouterOutlets.focusWithinOutletTopic(outletContext.uid);\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(publishTo, focusWithin);\n        });\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Dispatches 'mousemove' events originating from other documents as synthetic 'sci-mousemove' events on the document event bus.\n * The events are only dispatched if the user has pressed the primary mouse button.\n *\n * Mouse event dispatching is important if having non-focusable scrollbars which are positioned at the iframe border. It enables the user\n * to scroll seamlessly even when the mouse cursor leaves the iframe.\n *\n * @internal\n */ class $146947066e10b00e$var$MouseMoveEventDispatcher {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._dispatcherId = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n        // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n        // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n        this.installMouseEventDispatcher().then();\n    }\n    /**\n     * Installs mouse event dispatching, but only if not loaded as activator.\n     */ async installMouseEventDispatcher() {\n        if (await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).isPresent($146947066e10b00e$export$3200a3edec649cbd)) return;\n        this.publishMouseMoveEvent();\n        this.receiveMouseMoveEvent();\n    }\n    /**\n     * Publishes 'mousemove' events if the user has pressed the primary mouse button, but only if this document does not have the focus,\n     * so that the active document can dispatch the events on its event bus.\n     */ publishMouseMoveEvent() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$9b078e20c2505aad).focus$.pipe((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((hasFocus)=>hasFocus ? (0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58) : (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(document, \"mousemove\")), (0, $827970c208304071$export$3dea766d36a8935f)((event)=>event.buttons === $146947066e10b00e$var$PRIMARY_MOUSE_BUTTON), (0, $cfad638bbde2c674$export$719c70722b10e5ff)(20), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe((event)=>{\n            const options = {\n                headers: new Map().set($146947066e10b00e$var$DISPATCHER_ID_HEADER$1, this._dispatcherId)\n            };\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish($146947066e10b00e$var$MOUSEMOVE_EVENT_TOPIC, [\n                event.screenX,\n                event.screenY\n            ], options);\n        });\n    }\n    /**\n     * Receives 'mousemove' events from other documents, but only if this document has the focus, and dispatches them on the event bus.\n     */ receiveMouseMoveEvent() {\n        // Consume synth mouse events only if owning the focus.\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$9b078e20c2505aad).focus$.pipe((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((hasFocus)=>hasFocus ? (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$MOUSEMOVE_EVENT_TOPIC) : (0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58)), (0, $827970c208304071$export$3dea766d36a8935f)((msg)=>msg.headers.get($146947066e10b00e$var$DISPATCHER_ID_HEADER$1) !== this._dispatcherId), $146947066e10b00e$export$d6978861bb0c00c2(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe(([screenX, screenY])=>{\n            const sciMouseEvent = new Event(\"sci-mousemove\");\n            sciMouseEvent.screenX = screenX;\n            sciMouseEvent.screenY = screenY;\n            document.dispatchEvent(sciMouseEvent);\n        });\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Indicates that the primary mouse button is pressed (usually left).\n */ const $146947066e10b00e$var$PRIMARY_MOUSE_BUTTON = 1;\n/**\n * Message header to pass the dispatcher's identity.\n */ const $146947066e10b00e$var$DISPATCHER_ID_HEADER$1 = \"\\u0275DISPATCHER_ID\";\n/**\n * Topic to publish 'mousemove' events so that they can be consumed by dispatchers of other documents.\n */ const $146947066e10b00e$var$MOUSEMOVE_EVENT_TOPIC = \"\\u0275MOUSEMOVE\";\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Dispatches 'mouseup' events originating from other documents as synthetic 'sci-mouseup' events on the document event bus.\n *\n * Mouse event dispatching is important if having non-focusable scrollbars which are positioned at the iframe border. It enables the user\n * to scroll seamlessly even when the mouse cursor leaves the iframe.\n *\n * @internal\n */ class $146947066e10b00e$var$MouseUpEventDispatcher {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._dispatcherId = (0, $65410acb3348d48d$export$bc35efed93511c4b).randomUUID();\n        // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n        // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n        this.installMouseEventDispatcher().then();\n    }\n    /**\n     * Installs mouse event dispatching, but only if not loaded as activator.\n     */ async installMouseEventDispatcher() {\n        if (await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).isPresent($146947066e10b00e$export$3200a3edec649cbd)) return;\n        this.publishMouseUpEvent();\n        this.receiveMouseMoveEvent();\n    }\n    /**\n     * Publishes 'mouseup' events, but only if this document does not have the focus, so that the active document can dispatch the events on its event bus.\n     */ publishMouseUpEvent() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$9b078e20c2505aad).focus$.pipe((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((hasFocus)=>hasFocus ? (0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58) : (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(window, \"mouseup\", {\n                capture: true\n            })), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe(()=>{\n            const options = {\n                headers: new Map().set($146947066e10b00e$var$DISPATCHER_ID_HEADER, this._dispatcherId)\n            };\n            (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish($146947066e10b00e$var$MOUSEUP_EVENT_TOPIC, undefined, options);\n        });\n    }\n    /**\n     * Receives 'mouseup' events from other documents, but only if this document has the focus, and dispatches them on the event bus.\n     */ receiveMouseMoveEvent() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$9b078e20c2505aad).focus$.pipe((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((hasFocus)=>hasFocus ? (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$($146947066e10b00e$var$MOUSEUP_EVENT_TOPIC) : (0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58)), (0, $827970c208304071$export$3dea766d36a8935f)((msg)=>msg.headers.get($146947066e10b00e$var$DISPATCHER_ID_HEADER) !== this._dispatcherId), $146947066e10b00e$export$d6978861bb0c00c2(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe(()=>{\n            document.dispatchEvent(new Event(\"sci-mouseup\"));\n        });\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Message header to pass the dispatcher's identity.\n */ const $146947066e10b00e$var$DISPATCHER_ID_HEADER = \"\\u0275DISPATCHER_ID\";\n/**\n * Topic to publish 'mouseup' events so that they can be consumed by dispatchers of other documents.\n */ const $146947066e10b00e$var$MOUSEUP_EVENT_TOPIC = \"\\u0275MOUSEUP\";\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Allows web content displayed in a {@link SciRouterOutletElement `<sci-router-outlet>`} to define its preferred size.\n *\n * The preferred size of an element is the minimum size that will allow it to display normally.\n * Setting a preferred size is useful if the outlet is displayed in a layout that aligns its items based on the items's content size.\n *\n * When setting a preferred size, the outlet containing this microfrontend will adapt its size to the reported preferred size.\n *\n * @category Preferred Size\n */ class $146947066e10b00e$export$a0e8060499828631 {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._fromDimensionElementChange$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._preferredSizePublisher = new $146947066e10b00e$var$PreferredSizePublisher();\n    }\n    /**\n     * Sets the preferred size of this web content.\n     * The size is reported to the router outlet embedding this web content and is used as the outlet's size.\n     */ setPreferredSize(preferredSize) {\n        this._preferredSizePublisher.publish(preferredSize);\n    }\n    /**\n     * Determines the preferred size from the given element's dimension and reports it to the router outlet embedding this web content.\n     * As the value for the preferred size, the `offset-width` and `offset-height` of the element are used, which is the total amount of space\n     * the element occupies, including the width of the visible content, scrollbars (if any), padding, and border.\n     *\n     * When the size of the element changes, the changed size is reported to the outlet, which then adaps its size accordingly.\n     * To stop the notifying of the preferred size to the outlet, pass `undefined` as the value, which also unsets the preferred size.\n     *\n     * If the element is removed from the DOM, the preferred size is reset and reporting suspended until it is attached again.\n     * If a new element is set as dimension observer, then the previous one is unsubscribed.\n     *\n     * *Prerequisites*\n     * - The element to be observed must behave as block-level box and not as inline-level box. So, if you want to observe an inline element,\n     *   set its display type to either `block` or `inline-block`.\n     * - If the element to be observed should not fill the remaining space and may change in size, we recommend taking it out of the document\n     *   element flow, i.e., position it absolutely without defining a width and height. Otherwise, once the element has reported a preferred\n     *   size, it could not shrink below that size.\n     *\n     * @param element - The element of which the preferred size is to be observed and used as the outlet's size.\n     */ fromDimension(element) {\n        this._fromDimensionElementChange$.next();\n        if (!element) {\n            this.resetPreferredSize();\n            return;\n        }\n        (0, $844621b1ac064085$export$e17d0a8e529bc2ca)(element).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)((0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(this._fromDimensionElementChange$, this._destroy$))).subscribe((dimension)=>{\n            // If the element is removed from the DOM, the preferred size is reset and reporting suspended until it is attached again.\n            if (!document.body.contains(dimension.element)) this.resetPreferredSize();\n            else this.setPreferredSize({\n                minWidth: `${dimension.offsetWidth}px`,\n                width: `${dimension.offsetWidth}px`,\n                maxWidth: `${dimension.offsetWidth}px`,\n                minHeight: `${dimension.offsetHeight}px`,\n                height: `${dimension.offsetHeight}px`,\n                maxHeight: `${dimension.offsetHeight}px`\n            });\n        });\n    }\n    /**\n     * Resets the preferred size. Has no effect if no preferred size is set.\n     */ resetPreferredSize() {\n        this._preferredSizePublisher.publish(null);\n    }\n    /** @ignore */ preDestroy() {\n        this._preferredSizePublisher.destroy();\n        this._destroy$.next();\n    }\n}\n/**\n * Publishes the preferred size to the outlet embedding this page.\n */ class $146947066e10b00e$var$PreferredSizePublisher {\n    constructor(){\n        this._preferredSize$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        this._preferredSize$.pipe((0, $1b8b5ade318bf9a9$export$2c346d97ede9fe0c)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).observe$($146947066e10b00e$export$ff8ad477982f6328).pipe((0, $827970c208304071$export$3dea766d36a8935f)(Boolean))), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe(([preferredSize, outletContext])=>$146947066e10b00e$var$runSafe(()=>{\n                const topic = $146947066e10b00e$var$RouterOutlets.preferredSizeTopic(outletContext.uid);\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(topic, preferredSize);\n            }));\n    }\n    publish(preferredSize) {\n        this._preferredSize$.next(preferredSize);\n    }\n    destroy() {\n        this._destroy$.next();\n    }\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Propagates keyboard events for keystrokes registered in the current context or any parent contexts.\n *\n * This dispatcher listens to keyboard events for keystrokes registered in parent contexts and publishes\n * them as {@link KeyboardEventInit} events to the topic {@link RouterOutlets.keyboardEventTopic}.\n *\n * @internal\n */ class $146947066e10b00e$var$KeyboardEventDispatcher {\n    constructor(){\n        this._destroy$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n        // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n        // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n        this.installKeystrokeDispatcher().then();\n    }\n    /**\n     * Dispatches keyboard events of registered keystrokes to the embedding router outlet.\n     */ async installKeystrokeDispatcher() {\n        if (!await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).isPresent($146947066e10b00e$export$ff8ad477982f6328) || await (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).isPresent($146947066e10b00e$export$3200a3edec649cbd)) return;\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).names$().pipe((0, $a344549688aae3fd$export$871de8747c9eaa88)((contextNames)=>Array.from(contextNames)), (0, $d5bd6ae9534d951f$export$8f2c8e61d147b502)((contextName)=>contextName.startsWith($146947066e10b00e$var$KEYSTROKE_CONTEXT_NAME_PREFIX)), (0, $d5bd6ae9534d951f$export$4c9116dcf1374231)((keystrokeContextName)=>keystrokeContextName.substring($146947066e10b00e$var$KEYSTROKE_CONTEXT_NAME_PREFIX.length)), (0, $d5bd6ae9534d951f$export$4c9116dcf1374231)((keystroke)=>this.observeKeyboardEvent$(keystroke)), (0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((keyboardEvents)=>(0, $30ffe4e7b3d62072$export$4950aa0f605343fb)(...keyboardEvents)), (0, $022094d06ff270cc$export$d449030e5c10edf7)((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).observe$($146947066e10b00e$export$ff8ad477982f6328)), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(this._destroy$)).subscribe(([event, outletContext])=>$146947066e10b00e$var$runSafe(()=>{\n                const eventInit = {\n                    key: event.key,\n                    ctrlKey: event.ctrlKey,\n                    shiftKey: event.shiftKey,\n                    altKey: event.altKey,\n                    metaKey: event.metaKey,\n                    bubbles: event.bubbles\n                };\n                const publishTo = $146947066e10b00e$var$RouterOutlets.keyboardEventTopic(outletContext.uid, event.type);\n                (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish(publishTo, eventInit);\n            }));\n    }\n    /**\n     * Observes keyboard events matching the given keystroke, applying flags as declared on the keystroke.\n     */ observeKeyboardEvent$(keystrokeFormat) {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).observe$($146947066e10b00e$var$KEYSTROKE_CONTEXT_NAME_PREFIX + keystrokeFormat, {\n            collect: true\n        }).pipe((0, $e8a8f4270a768261$export$9f6ea8e48bc26eab)((keystrokeFlags)=>{\n            const keystroke = $146947066e10b00e$var$Keystroke.fromString(keystrokeFormat).withFlags(keystrokeFlags.reduceRight((acc, flags)=>({\n                    ...acc,\n                    ...flags\n                }), {}));\n            return (0, $6ca17bc48d68771b$export$a36e16046ae8f1bb)(document, keystroke.eventType, {\n                capture: true\n            }).pipe((0, $827970c208304071$export$3dea766d36a8935f)((event)=>event.bubbles && !!event.key), (0, $827970c208304071$export$3dea766d36a8935f)((event)=>$146947066e10b00e$var$Keystroke.fromEvent(event).parts === keystroke.parts), $146947066e10b00e$var$applyKeystrokeFlags(keystroke.flags));\n        }));\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Applies keystroke flags on each keyboard event emitted by the source Observable.\n *\n * Note that `preventDefault()` has to be invoked on the original event, which has its `isTrusted` flag set to `true`.\n *\n * For more information about trusted events\n * @see https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events\n * @see https://www.chromestatus.com/features#istrusted\n */ function $146947066e10b00e$var$applyKeystrokeFlags(flags) {\n    return (0, $9654f9d6f3b258de$export$3f23594af5f37336)((keystrokeEvent)=>{\n        if (flags?.preventDefault) keystrokeEvent.preventDefault();\n    });\n}\n/**\n * Subscribes to messages, passing each message to the callback.\n *\n * The callback can return a response to be transported to the requestor, if any. When the final response is produced,\n * the handler terminates the communication, completing the requestor's Observable. If the callback errors, the error is\n * transported to the requestor, erroring the requestor's Observable.\n *\n * @internal\n */ class $146947066e10b00e$var$MessageHandler {\n    constructor(message$, _callback){\n        this._callback = _callback;\n        this._messageClient = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9);\n        /**\n         * Represents this handler's subscription for receiving messages. Calling {@link Subscription.unsubscribe} will also complete\n         * the Observable of all requestors, if any.\n         */ this.subscription = new (0, $5124a93ca0cff8ae$export$f55210826850c514)();\n        this.subscription.add(message$.subscribe((message)=>{\n            if (message.headers.has($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo)) this.handleMessage(message);\n            else this.consumeMessage(message);\n        }));\n    }\n    /**\n     * The requestor has initiated a fire-and-forget communication, thus we simply pass the message to the callback and ignore response(s).\n     */ consumeMessage(message) {\n        $146947066e10b00e$var$runSafe(()=>this._callback(message));\n    }\n    /**\n     * The requestor has initiated a request-response communication, thus we pass the request to the callback and send response(s)\n     * or a potential completion or error to the requestor.\n     */ handleMessage(request) {\n        const replyTo = request.headers.get($146947066e10b00e$export$b23af55470b7f1e1.ReplyTo);\n        const platformStopping$ = $146947066e10b00e$export$5cce370cfaa52f9e.state$.pipe((0, $827970c208304071$export$3dea766d36a8935f)((state)=>state === $146947066e10b00e$export$f677ff3cbab00a1f.Stopping));\n        // Invoke the callback to produce value(s).\n        let reply;\n        try {\n            reply = this._callback(request);\n        } catch (error) {\n            reply = (0, $7793e4bb10595700$export$8bf7aba4a9e09055)(()=>error);\n        }\n        // Send response(s) or a potential completion or error back to the requestor.\n        let observableStatus = \"alive\";\n        this.subscription.add($146947066e10b00e$var$fromCallbackResult$(reply).pipe($146947066e10b00e$export$2509be367963fa45(replyTo), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(platformStopping$), (0, $970a0f030dee86ff$export$578723aef62d92f5)(()=>{\n            // Note that the `finalize` operator is also called when unsubscribing from the observable, e.g. when unsubscribing\n            // from the handler. If the observable errors or completes, the `finalize` operator is guaranteed to be called after\n            // the observer's `complete` or `error` methods; thus, the variable `observableStatus` is only `alive` when\n            // unsubscribing from the observable.\n            if (observableStatus === \"alive\") {\n                // Terminate the communication when the handler is being unsubscribed.\n                const replyHeaders = new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.TERMINAL);\n                this._messageClient.publish(replyTo, undefined, {\n                    headers: replyHeaders\n                }).then();\n            }\n        })).subscribe({\n            next: (next)=>{\n                // Transport the value to the requestor.\n                const replyHeaders = new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.OK);\n                this._messageClient.publish(replyTo, next, {\n                    headers: replyHeaders\n                }).then();\n            },\n            error: (error)=>{\n                observableStatus = \"errored\";\n                // Transport the error to the requestor.\n                const replyHeaders = new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.ERROR);\n                this._messageClient.publish(replyTo, $146947066e10b00e$var$stringifyError(error), {\n                    headers: replyHeaders\n                }).then();\n            },\n            complete: ()=>{\n                observableStatus = \"completed\";\n                // Terminate the communication when finished producing responses.\n                const replyHeaders = new Map().set($146947066e10b00e$export$b23af55470b7f1e1.Status, $146947066e10b00e$export$a499daaa5fe026d2.TERMINAL);\n                this._messageClient.publish(replyTo, undefined, {\n                    headers: replyHeaders\n                }).then();\n            }\n        }));\n    }\n}\n/**\n * Creates an Observable from the result of the callback.\n *\n * If the callback returns no value (`void`), returns `undefined`, or returns a Promise that resolves to `undefined`,\n * the returned observable will complete immediately.\n */ function $146947066e10b00e$var$fromCallbackResult$(value) {\n    if (value === undefined) return 0, $6e7e0ef18f0a3115$export$ccb33e29d92c9a58;\n    if (value instanceof (0, $157495f65d1fedd6$export$77cea355fa80b5f4)) return value;\n    if (value instanceof Promise) return (0, $cecb8b01522e9ff4$export$6788812c4e6611e6)(value).pipe((0, $827970c208304071$export$3dea766d36a8935f)((resolved)=>resolved !== undefined));\n    return (0, $ed54d2f12a6f8669$export$ba255e9e49e00608)(value);\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * @internal\n */ class $146947066e10b00e$var$\\u0275MessageClient {\n    constructor(){\n        this._brokerGateway = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$BrokerGateway);\n    }\n    publish(topic, message, options) {\n        const topicMessage = {\n            topic: topic,\n            retain: options?.retain ?? false,\n            headers: new Map(options?.headers),\n            body: message\n        };\n        return this._brokerGateway.postMessage($146947066e10b00e$var$MessagingChannel.Topic, topicMessage);\n    }\n    request$(topic, request, options) {\n        // IMPORTANT:\n        // When sending a request, the platform adds various headers to the message. Therefore, to support multiple subscriptions\n        // to the returned Observable, each subscription must have its individual message instance and headers map.\n        // In addition, the headers are copied to prevent modifications before the effective subscription.\n        const headers = new Map(options?.headers);\n        return (0, $ead8e990cfbfe279$export$260e5c0943f31606)(()=>{\n            const topicMessage = {\n                topic: topic,\n                retain: options?.retain ?? false,\n                headers: new Map(headers),\n                body: request\n            };\n            return this._brokerGateway.requestReply$($146947066e10b00e$var$MessagingChannel.Topic, topicMessage).pipe($146947066e10b00e$export$c3e6bb28c793a982());\n        });\n    }\n    observe$(topic) {\n        return this._brokerGateway.subscribe$({\n            messageChannel: $146947066e10b00e$var$MessagingChannel.Topic,\n            subscribeChannel: $146947066e10b00e$var$MessagingChannel.TopicSubscribe,\n            unsubscribeChannel: $146947066e10b00e$var$MessagingChannel.TopicUnsubscribe,\n            newSubscribeCommand: (subscriberId)=>({\n                    topic: topic,\n                    subscriberId: subscriberId,\n                    headers: new Map()\n                })\n        });\n    }\n    onMessage(topic, callback) {\n        return new $146947066e10b00e$var$MessageHandler((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).observe$(topic), callback).subscription;\n    }\n    subscriberCount$(topic) {\n        return new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            const unsubscribe$ = new (0, $489dabb836a96717$export$b6bbab5a9b109038)();\n            this.request$($146947066e10b00e$var$PlatformTopics.RequestSubscriberCount, topic).pipe($146947066e10b00e$export$d6978861bb0c00c2(), (0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(unsubscribe$)).subscribe({\n                next: (reply)=>observer.next(reply),\n                error: (error)=>observer.error(error),\n                complete: (0, $a2669f8c8173c8d3$export$8793edee2d425525)\n            });\n            return ()=>unsubscribe$.next();\n        });\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * @internal\n */ class $146947066e10b00e$var$\\u0275IntentClient {\n    constructor(){\n        this._brokerGateway = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$BrokerGateway);\n    }\n    publish(intent, body, options) {\n        const intentMessage = {\n            intent: intent,\n            retain: options?.retain ?? false,\n            headers: new Map(options?.headers),\n            capability: undefined,\n            body: body\n        };\n        return this._brokerGateway.postMessage($146947066e10b00e$var$MessagingChannel.Intent, intentMessage);\n    }\n    request$(intent, body, options) {\n        // IMPORTANT:\n        // When sending a request, the platform adds various headers to the message. Therefore, to support multiple subscriptions\n        // to the returned Observable, each subscription must have its individual message instance and headers map.\n        // In addition, the headers are copied to prevent modifications before the effective subscription.\n        const headers = new Map(options?.headers);\n        return (0, $ead8e990cfbfe279$export$260e5c0943f31606)(()=>{\n            const intentMessage = {\n                intent: intent,\n                retain: options?.retain ?? false,\n                headers: new Map(headers),\n                capability: undefined,\n                body: body\n            };\n            return this._brokerGateway.requestReply$($146947066e10b00e$var$MessagingChannel.Intent, intentMessage).pipe($146947066e10b00e$export$c3e6bb28c793a982());\n        });\n    }\n    observe$(selector) {\n        return this._brokerGateway.subscribe$({\n            messageChannel: $146947066e10b00e$var$MessagingChannel.Intent,\n            subscribeChannel: $146947066e10b00e$var$MessagingChannel.IntentSubscribe,\n            unsubscribeChannel: $146947066e10b00e$var$MessagingChannel.IntentUnsubscribe,\n            newSubscribeCommand: (subscriberId)=>({\n                    selector: selector,\n                    subscriberId: subscriberId,\n                    headers: new Map()\n                })\n        });\n    }\n    onIntent(selector, callback) {\n        return new $146947066e10b00e$var$MessageHandler((0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$453ace576174a6eb).observe$(selector), callback).subscription;\n    }\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Central point for a microfrontend to connect to the platform host in order to interact with the platform and other microfrontends.\n * This class cannot be instantiated. All functionality is provided by static methods.\n *\n * @see MicrofrontendPlatform\n * @see MicrofrontendPlatformHost\n * @see MicrofrontendPlatformClient\n *\n * @category Platform\n * @category Lifecycle\n */ class $146947066e10b00e$export$da564c49d7214465 {\n    constructor(){}\n    /**\n     * Connects this microfrontend to the platform host.\n     *\n     * A microfrontend should connect to the platform host during application bootstrapping. In Angular, for example, this is typically\n     * done in an app initializer. Since connecting to the platform host is an asynchronous operation, the microfrontend should wait\n     * for the Promise to resolve before interacting with the platform or other microfrontends.\n     *\n     * The platform connects to the host through its window hierarchy. Therefore, the microfrontend must be embedded as direct or\n     * indirect child window of the host application window.\n     *\n     * @param  symbolicName - Specifies the symbolic name of the application of this microfrontend. The application must be registered\n     *         in the platform host under this symbol.\n     * @param  connectOptions - Controls how to connect to the platform host.\n     * @return Promise that resolves when successfully connected to the platform host, or that rejects otherwise, e.g., if not allowed\n     *         to connect because not registered.\n     */ static connect(symbolicName, connectOptions) {\n        return $146947066e10b00e$export$5cce370cfaa52f9e.startPlatform(()=>{\n            // Provide environment for running the platform as client.\n            $146947066e10b00e$export$1b673bb034e791a0({\n                symbolicName: symbolicName,\n                isPlatformHost: false\n            });\n            $146947066e10b00e$export$fe97885cb43f06a8({\n                ...connectOptions,\n                connectRunlevel: $146947066e10b00e$export$63daa6aa86ffb707.Zero\n            });\n            // Provide initializers to start the platform as client.\n            $146947066e10b00e$var$provideClientStartupInitializers();\n        });\n    }\n    /**\n     * Tests whether this microfrontend is connected to the platform host.\n     */ static async isConnected() {\n        if ($146947066e10b00e$export$5cce370cfaa52f9e.state === $146947066e10b00e$export$f677ff3cbab00a1f.Stopped) return false;\n        const brokerGateway = (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).opt($146947066e10b00e$var$BrokerGateway);\n        if (!brokerGateway) return false;\n        return brokerGateway.isConnected();\n    }\n    /**\n     * Signals readiness to notify the platform that the microfrontend has completed initialization.\n     *\n     * When navigating to the microfrontend with `OutletRouter.navigate('path/to/microfrontend', {showSplash: true})`,\n     * a splash is displayed until the microfrontend signals readiness.\n     *\n     * @see SciRouterOutletElement\n     * @see NavigationOptions.showSplash\n     */ static signalReady() {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a8e56bb192edf201).lookup($146947066e10b00e$export$ff8ad477982f6328).then((outletContext)=>{\n            if (!outletContext) return Promise.reject(Error(\"[NullOutletContextError] not running in the context of a <sci-router-outlet>.\"));\n            return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish($146947066e10b00e$var$RouterOutlets.signalReadyTopic(outletContext.uid));\n        });\n    }\n}\n/**\n * Provides the environment for running the platform as client.\n *\n * @internal\n */ function $146947066e10b00e$export$fe97885cb43f06a8(connectOptions) {\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$export$a5b24081a734c6a9, {\n        useClass: $146947066e10b00e$var$\\u0275MessageClient,\n        eager: true,\n        destroyOrder: $146947066e10b00e$export$23337cc73d20200.MESSAGING\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$export$453ace576174a6eb, {\n        useClass: $146947066e10b00e$var$\\u0275IntentClient,\n        eager: true,\n        destroyOrder: $146947066e10b00e$export$23337cc73d20200.MESSAGING\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$export$7fb6e18939c89ffa);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$export$fc96cab2c66d5054);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$export$b84d9f3cc1de7d1d);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$FocusInEventDispatcher, {\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$MouseMoveEventDispatcher, {\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$MouseUpEventDispatcher, {\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$KeyboardEventDispatcher, {\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$a0e8060499828631, {\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$a8e56bb192edf201);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$aafa7a6a222a9fad);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$795435d319aa5def);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$9b078e20c2505aad);\n    $146947066e10b00e$var$provideBrokerGateway(connectOptions);\n}\n/**\n * Provide initializers to start the platform as client.\n */ function $146947066e10b00e$var$provideClientStartupInitializers() {\n    // Block until received platform properties to support synchronous access via `PlatformPropertyService#properties`.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useExisting: $146947066e10b00e$export$795435d319aa5def,\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Two\n    });\n    // Block until received list of applications to support synchronous access via `ManifestService#applications`.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useExisting: $146947066e10b00e$export$aafa7a6a222a9fad,\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Two\n    });\n    // Register router outlet, delaying its instantiation until initialized the platform.\n    // Otherwise, router outlet construction may fail or result in unexpected behavior, for example, because beans are not yet registered.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useFunction: ()=>$146947066e10b00e$export$40346ab29ce71372.define(),\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Two\n    });\n}\n/**\n * Provides the gateway to communicate with the host.\n */ function $146947066e10b00e$var$provideBrokerGateway(connectOptions) {\n    if (connectOptions.connect ?? true) {\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$\\u0275BrokerGateway, {\n            useFactory: ()=>new $146947066e10b00e$var$\\u0275BrokerGateway(connectOptions),\n            destroyOrder: $146947066e10b00e$export$23337cc73d20200.MESSAGING\n        });\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$BrokerGateway, {\n            useExisting: $146947066e10b00e$var$\\u0275BrokerGateway\n        });\n        (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n            useExisting: $146947066e10b00e$var$\\u0275BrokerGateway,\n            runlevel: connectOptions.connectRunlevel\n        });\n    } else (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$BrokerGateway, {\n        useClass: $146947066e10b00e$var$NullBrokerGateway\n    });\n}\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Main entry point for configuring and starting the platform in the host application. This class cannot be instantiated. All functionality is provided by static methods.\n *\n * The host application, sometimes also called the container application, provides the top-level integration container for microfrontends. Typically, it is the web\n * application which the user loads into the browser that provides the main application shell, defining areas to embed microfrontends.\n *\n * In the host application the SCION Microfrontend Platform is configured and web applications that want to interact with the platform are registered.\n * The host application can provide a manifest to contribute behavior to integrated applications. For more information, see {@link HostConfig.manifest}\n * in {@link MicrofrontendPlatformConfig.host}.\n *\n * If integrating the SCION Microfrontend Platform in a library, the manifest of the host can be augmented by registering a {@link HostManifestInterceptor}.\n *\n * @see MicrofrontendPlatform\n * @see MicrofrontendPlatformHost\n * @see MicrofrontendPlatformClient\n *\n * @category Platform\n * @category Lifecycle\n */ class $146947066e10b00e$export$da18e61ec521a371 {\n    constructor(){}\n    /**\n     * Starts the platform host.\n     *\n     * In the host application the SCION Microfrontend Platform is configured and web applications that want to interact with the platform are registered.\n     *\n     * The host application can provide a manifest to declare intentions and contribute behavior to integrated applications via {@link HostConfig.manifest} in\n     * {@link MicrofrontendPlatformConfig.host}. The manifest can be specified either as an object literal or as a URL to load it over the network.\n     *\n     * The platform should be started during the bootstrapping of the host application. In Angular, for example, the platform is typically\n     * started in an app initializer. Since starting the platform host may take some time, you should wait for the startup Promise to resolve\n     * before interacting with the platform.\n     *\n     * @param  config - Configures the platform and lists applications allowed to interact with the platform.\n     * @return A Promise that resolves when started the platform host.\n     */ static start(config) {\n        return $146947066e10b00e$export$5cce370cfaa52f9e.startPlatform(()=>{\n            const symbolicName = config.host?.symbolicName || \"host\";\n            // Provide environment for running the platform as host.\n            $146947066e10b00e$export$1b673bb034e791a0({\n                symbolicName: symbolicName,\n                isPlatformHost: true\n            });\n            $146947066e10b00e$export$fe97885cb43f06a8({\n                messageDeliveryTimeout: config.host?.messageDeliveryTimeout,\n                brokerDiscoverTimeout: config.host?.brokerDiscoverTimeout,\n                connectRunlevel: $146947066e10b00e$export$63daa6aa86ffb707.One\n            });\n            $146947066e10b00e$var$provideHostEnvironment(config);\n            // Provide initializers to start the platform as host.\n            $146947066e10b00e$var$provideHostStartupInitializers(symbolicName, config);\n        });\n    }\n    /**\n     * Monitors the startup progress of the platform host.\n     *\n     * Starting the platform host may take some time. During startup, the manifests of the registered applications are fetched,\n     * activator microfrontends are installed, and the platform waits until all applications have signaled readiness.\n     *\n     * Subscribe to this Observable to monitor the startup progress and provide feedback to the user like displaying a\n     * progress bar or a spinner. The Observable reports the progress as a percentage number. The Observable completes\n     * after the platform has been started.\n     */ static get startupProgress$() {\n        this._startupProgress$ = this._startupProgress$ || new (0, $157495f65d1fedd6$export$77cea355fa80b5f4)((observer)=>{\n            const unsubscribe$ = new (0, $3abb0c810830a073$export$915d2682b0aa0991)(1);\n            const progress$ = (0, $ead8e990cfbfe279$export$260e5c0943f31606)(()=>(0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$StartupProgressMonitor).progress$).pipe((0, $095ad5aa66f29705$export$ac8dfd3a7ad06e80)(unsubscribe$));\n            if ($146947066e10b00e$export$5cce370cfaa52f9e.state === $146947066e10b00e$export$f677ff3cbab00a1f.Stopped) $146947066e10b00e$export$5cce370cfaa52f9e.whenState($146947066e10b00e$export$f677ff3cbab00a1f.Starting).then(()=>progress$.subscribe(observer));\n            else progress$.subscribe(observer);\n            return ()=>unsubscribe$.next();\n        });\n        return this._startupProgress$;\n    }\n}\n/**\n * Provides the environment for running the platform as host.\n */ function $146947066e10b00e$var$provideHostEnvironment(config) {\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$2eb36f74b177828a, {\n        useValue: config\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$3af33b08f01f58a3, {\n        useClass: $146947066e10b00e$export$6b8e491f5c8f1d29,\n        multi: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$ClientRegistry, {\n        useClass: $146947066e10b00e$var$\\u0275ClientRegistry,\n        destroyOrder: $146947066e10b00e$export$23337cc73d20200.CORE\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$var$HttpClient);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$ManifestRegistry, {\n        useClass: $146947066e10b00e$var$\\u0275ManifestRegistry,\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$ApplicationRegistry, {\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$FocusTracker, {\n        eager: true\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$MessageBroker, {\n        destroyOrder: $146947066e10b00e$export$23337cc73d20200.BROKER\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$ManifestFetcher);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$TopicSubscriptionRegistry, {\n        destroyOrder: $146947066e10b00e$export$23337cc73d20200.BROKER\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$IntentSubscriptionRegistry, {\n        destroyOrder: $146947066e10b00e$export$23337cc73d20200.BROKER\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$export$93458e9b1705f47e, {\n        useClass: $146947066e10b00e$var$MicrofrontendIntentNavigator,\n        multi: true\n    });\n    $146947066e10b00e$var$provideLivenessProbeConfig(config.liveness);\n    $146947066e10b00e$var$provideStartupProgressMonitor();\n}\n/**\n * Provide initializers to start the platform as host.\n */ function $146947066e10b00e$var$provideHostStartupInitializers(symbolicName, config) {\n    // Construct message broker immediately to not lose connect requests from clients.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useExisting: $146947066e10b00e$var$MessageBroker,\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Zero\n    });\n    // Install registered applications.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useFunction: ()=>new $146947066e10b00e$var$AppInstaller({\n                ...config.host,\n                symbolicName: symbolicName\n            }, config.applications).install(),\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Zero\n    });\n    // Provide platform properties to clients.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useFunction: ()=>(0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish($146947066e10b00e$var$PlatformTopics.PlatformProperties, config.properties || {}, {\n                retain: true\n            }),\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Two\n    });\n    // Provide list of installed applications to clients.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useFunction: ()=>(0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$a5b24081a734c6a9).publish($146947066e10b00e$var$PlatformTopics.Applications, (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$var$ApplicationRegistry).getApplications(), {\n                retain: true\n            }),\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Two\n    });\n    // Register router outlet, delaying its instantiation until initialized the platform.\n    // Otherwise, router outlet construction may fail or result in unexpected behavior, for example, because beans are not yet registered.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useFunction: ()=>$146947066e10b00e$export$40346ab29ce71372.define(),\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Two\n    });\n    // Block until received platform properties to support synchronous access via `PlatformPropertyService#properties`.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useExisting: $146947066e10b00e$export$795435d319aa5def,\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Three\n    });\n    // Block until received list of applications to support synchronous access via `ManifestService#applications`.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useExisting: $146947066e10b00e$export$aafa7a6a222a9fad,\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Three\n    });\n    // Install activator microfrontends.\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerInitializer({\n        useClass: $146947066e10b00e$var$ActivatorInstaller,\n        runlevel: $146947066e10b00e$export$63daa6aa86ffb707.Three\n    });\n}\n/**\n * Provides beans to monitor the startup progress of the host.\n */ function $146947066e10b00e$var$provideStartupProgressMonitor() {\n    const monitor = new $146947066e10b00e$var$ProgressMonitor();\n    const [platformProgressMonitor, manifestLoadProgressMonitor, activatorLoadProgressMonitor] = monitor.split(1, 3, 5);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$StartupProgressMonitor, {\n        useValue: monitor\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$ManifestLoadProgressMonitor, {\n        useValue: manifestLoadProgressMonitor\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).register($146947066e10b00e$var$ActivatorLoadProgressMonitor, {\n        useValue: activatorLoadProgressMonitor\n    });\n    $146947066e10b00e$export$5cce370cfaa52f9e.whenState($146947066e10b00e$export$f677ff3cbab00a1f.Started).then(()=>platformProgressMonitor.done());\n}\n/**\n * Provides beans describing how often to check connected clients to be alive.\n */ function $146947066e10b00e$var$provideLivenessProbeConfig(config) {\n    const defaults = {\n        interval: 60,\n        timeout: 10\n    };\n    const interval = config?.interval ?? defaults.interval;\n    const timeout = config?.timeout ?? defaults.timeout;\n    const invalid = interval <= 2 * timeout;\n    if (invalid) (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get($146947066e10b00e$export$efa9a398d6368992).warn(`[LivenessProbeConfig] Illegal config provided. The interval [${interval}s] must be greater than twice the timeout period [${timeout}s]. Using platform defaults instead: [interval=${defaults.interval}s, timeout=${defaults.timeout}s]`);\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$var$CLIENT_PING_INTERVAL, {\n        useValue: (invalid ? defaults.interval : interval) * 1000\n    });\n    (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).registerIfAbsent($146947066e10b00e$var$CLIENT_PING_TIMEOUT, {\n        useValue: (invalid ? defaults.timeout : timeout) * 1000\n    });\n}\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */ /**\n * Configures the interaction of the host application with the platform.\n *\n * As with micro applications, you can provide a manifest for the host, allowing the host to contribute capabilities and declare intentions.\n *\n * @category Platform\n */ class $146947066e10b00e$export$9ec1071e9ace7b1b {\n}\n\n\n\n\nwindow[\"__SCION_RCP\"] = window[\"__SCION_RCP\"] || {};\nwindow[\"__SCION_RCP\"].refs = {\n    get MicrofrontendPlatform () {\n        return 0, $146947066e10b00e$export$5cce370cfaa52f9e;\n    },\n    get MicrofrontendPlatformHost () {\n        return 0, $146947066e10b00e$export$da18e61ec521a371;\n    },\n    get MicrofrontendPlatformClient () {\n        return 0, $146947066e10b00e$export$da564c49d7214465;\n    },\n    get MessageClient () {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get((0, $146947066e10b00e$export$a5b24081a734c6a9));\n    },\n    get IntentClient () {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get((0, $146947066e10b00e$export$453ace576174a6eb));\n    },\n    get OutletRouter () {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get((0, $146947066e10b00e$export$7fb6e18939c89ffa));\n    },\n    get ManifestService () {\n        return (0, $0d8b1f299d46dd84$export$e1272dadeadaca63).get((0, $146947066e10b00e$export$aafa7a6a222a9fad));\n    },\n    get Beans () {\n        return 0, $0d8b1f299d46dd84$export$e1272dadeadaca63;\n    },\n    get MessageInterceptor () {\n        return 0, $146947066e10b00e$export$928c6333c0fd2868;\n    },\n    get IntentInterceptor () {\n        return 0, $146947066e10b00e$export$93458e9b1705f47e;\n    },\n    get TopicMatcher () {\n        return 0, $146947066e10b00e$export$417f7cd86929f164;\n    },\n    get QualifierMatcher () {\n        return 0, $146947066e10b00e$export$26246f283d6ee833;\n    },\n    get UUID () {\n        return 0, $65410acb3348d48d$export$bc35efed93511c4b;\n    }\n};\n\n})();\n//# sourceMappingURL=refs.js.map\n","import {IntentClient, IntentInterceptor, MicrofrontendPlatform, MicrofrontendPlatformHost, MicrofrontendPlatformClient, ManifestService, MessageClient, MessageInterceptor, OutletRouter, QualifierMatcher, TopicMatcher} from '@scion/microfrontend-platform';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {UUID} from '@scion/toolkit/uuid';\n\nwindow['__SCION_RCP'] = window['__SCION_RCP'] || {};\nwindow['__SCION_RCP'].refs = {\n  get MicrofrontendPlatform() {\n    return MicrofrontendPlatform;\n  },\n  get MicrofrontendPlatformHost() {\n    return MicrofrontendPlatformHost;\n  },\n  get MicrofrontendPlatformClient() {\n    return MicrofrontendPlatformClient;\n  },\n  get MessageClient() {\n    return Beans.get(MessageClient);\n  },\n  get IntentClient() {\n    return Beans.get(IntentClient);\n  },\n  get OutletRouter() {\n    return Beans.get(OutletRouter);\n  },\n  get ManifestService() {\n    return Beans.get(ManifestService);\n  },\n  get Beans() {\n    return Beans;\n  },\n  get MessageInterceptor() {\n    return MessageInterceptor;\n  },\n  get IntentInterceptor() {\n    return IntentInterceptor;\n  },\n  get TopicMatcher() {\n    return TopicMatcher;\n  },\n  get QualifierMatcher() {\n    return QualifierMatcher;\n  },\n  get UUID() {\n    return UUID;\n  },\n};\n\n","import { Subject, race, fromEvent, BehaviorSubject, pipe, of, throwError, Observable, merge, NEVER, ReplaySubject, AsyncSubject, lastValueFrom, timeout, EMPTY, noop, firstValueFrom, timer, defer, filter as filter$1, concatWith, from, identity, retry, interval, switchMap, concat, combineLatest, withLatestFrom, Subscription } from 'rxjs';\nimport { take, takeUntil, first, mergeMap, takeWhile, filter, map, finalize, tap, expand, distinctUntilChanged, startWith, share, catchError, switchMap as switchMap$1, pairwise, skipWhile, auditTime, combineLatestWith } from 'rxjs/operators';\nimport { Beans } from '@scion/toolkit/bean-manager';\nimport { Arrays, Maps, Dictionaries, Defined } from '@scion/toolkit/util';\nimport { UUID } from '@scion/toolkit/uuid';\nimport { filterArray, bufferUntil, mapArray } from '@scion/toolkit/operators';\nimport { fromDimension$ } from '@scion/toolkit/observable';\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Lifecycle states of the microfrontend platform.\n *\n * @category Platform\n */\nvar PlatformState;\n(function (PlatformState) {\n    /**\n     * Indicates that the platform is about to start.\n     */\n    PlatformState[PlatformState[\"Starting\"] = 1] = \"Starting\";\n    /**\n     * Indicates that the platform started.\n     */\n    PlatformState[PlatformState[\"Started\"] = 2] = \"Started\";\n    /**\n     * Indicates that the platform is about to stop.\n     */\n    PlatformState[PlatformState[\"Stopping\"] = 3] = \"Stopping\";\n    /**\n     * Indicates that the platform is not yet started.\n     */\n    PlatformState[PlatformState[\"Stopped\"] = 4] = \"Stopped\";\n})(PlatformState || (PlatformState = {}));\n/**\n * Runlevels are used to control in which startup phase to execute initializers when starting the platform.\n *\n * The platform reports that it has started after all initializers have completed successfully.\n *\n * @internal\n */\nvar Runlevel;\n(function (Runlevel) {\n    /**\n     * In runlevel 0, the platform host fetches manifests of registered micro applications.\n     */\n    Runlevel[Runlevel[\"Zero\"] = 0] = \"Zero\";\n    /**\n     * In runlevel 1, the platform constructs eager beans.\n     */\n    Runlevel[Runlevel[\"One\"] = 1] = \"One\";\n    /**\n     * From runlevel 2 and above, messaging is enabled. This is the default runlevel at which initializers execute if not specifying any runlevel.\n     */\n    Runlevel[Runlevel[\"Two\"] = 2] = \"Two\";\n    /**\n     * In runlevel 3, the platform host installs activator microfrontends.\n     */\n    Runlevel[Runlevel[\"Three\"] = 3] = \"Three\";\n})(Runlevel || (Runlevel = {}));\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Built in capability types.\n *\n * @category Intention API\n */\nvar PlatformCapabilityTypes;\n(function (PlatformCapabilityTypes) {\n    /**\n     * Type for registering an activator capability.\n     *\n     * @see ActivatorCapability\n     */\n    PlatformCapabilityTypes[\"Activator\"] = \"activator\";\n    /**\n     * Type for registering a microfrontend capability.\n     *\n     * @see MicrofrontendCapability\n     */\n    PlatformCapabilityTypes[\"Microfrontend\"] = \"microfrontend\";\n})(PlatformCapabilityTypes || (PlatformCapabilityTypes = {}));\n/**\n * Symbol to determine if this app instance is running as the platform host.\n *\n * ```ts\n * const isPlatformHost: boolean = Beans.get(IS_PLATFORM_HOST);\n * ```\n *\n * @category Platform\n */\nconst IS_PLATFORM_HOST = Symbol('IS_PLATFORM_HOST');\n/**\n * Symbol to get the application's symbolic name from the bean manager.\n *\n * @category Platform\n */\nconst APP_IDENTITY = Symbol('APP_IDENTITY');\n/**\n * Key for obtaining the current activation context using {@link ContextService}.\n *\n * The activation context is only available to microfrontends loaded by an activator.\n *\n * @see {@link ActivationContext}\n * @see {@link ContextService}\n * @category Platform\n */\nconst ACTIVATION_CONTEXT = 'ɵACTIVATION_CONTEXT';\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Symbol to get the version of the SCION Microfrontend Platform.\n *\n * @internal\n */\nconst ɵVERSION = Symbol('ɵVERSION');\n/**\n * Symbol to get the topmost window in the window hierarchy from the bean manager.\n *\n * Alias for `window.top` that can be overridden in tests, e.g., to simulate\n * the client to connect to a remote host.\n *\n * @internal\n */\nconst ɵWINDOW_TOP = Symbol('ɵWINDOW_TOP');\n\n/**\n * Stops the platform and disconnects this client from the host when the browser unloads the document.\n *\n * By default, the platform initiates shutdown when the browser unloads the document, i.e., when `beforeunload` is triggered.\n * The main reason for `beforeunload` instead of `unload` is to avoid posting messages to disposed windows.\n * However, if `beforeunload` is not triggered, e.g., when an iframe is removed, we fall back to `unload`.\n *\n * @category Platform\n */\nclass MicrofrontendPlatformStopper {\n}\n/**\n * @internal\n */\nclass ɵMicrofrontendPlatformStopper {\n    constructor() {\n        this._destroy$ = new Subject();\n        race(fromEvent(window, 'beforeunload'), fromEvent(window, 'unload'))\n            .pipe(take(1), takeUntil(this._destroy$))\n            .subscribe(() => {\n            MicrofrontendPlatform.destroy();\n        });\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Logger used by the platform to log to the console.\n *\n * Replace this bean to capture the log output.\n *\n * @category Platform\n */\nclass Logger {\n}\n/**\n * Logger used by the platform to log to the console.\n *\n * Replace this bean to capture the log output.\n *\n * @internal\n */\nclass ConsoleLogger {\n    debug(message, ...args) {\n        this.log('debug', message, args);\n    }\n    info(message, ...args) {\n        this.log('info', message, args);\n    }\n    warn(message, ...args) {\n        this.log('warn', message, args);\n    }\n    error(message, ...args) {\n        this.log('error', message, args);\n    }\n    log(severity, message, args) {\n        const loggingContext = args[0] instanceof LoggingContext ? args.shift() : { appSymbolicName: Beans.get(APP_IDENTITY), version: Beans.get(ɵVERSION) };\n        const prefix = new Array()\n            .concat(loggingContext.version ? `[@scion/microfrontend-platform@${loggingContext.version}]` : '[@scion/microfrontend-platform]')\n            .concat(`[${loggingContext.appSymbolicName}]`)\n            .join('');\n        if (console && typeof console[severity] === 'function') {\n            const consoleFn = console[severity];\n            args?.length ? consoleFn(`${prefix} ${message}`, ...args) : consoleFn(`${prefix} ${message}`);\n        }\n    }\n}\n/**\n * Logger that does nothing.\n *\n * @internal\n */\nconst NULL_LOGGER = new class extends Logger {\n    debug(message, ...args) {\n        // NOOP\n    }\n    info(message, ...args) {\n        // NOOP\n    }\n    warn(message, ...args) {\n        // NOOP\n    }\n    error(message, ...args) {\n        // NOOP\n    }\n};\n/**\n * Contextual information to add to the log message.\n *\n * Pass an instance of this class as the first argument to the logger when logging a message.\n *\n * @internal\n */\nclass LoggingContext {\n    constructor(appSymbolicName, version) {\n        this.appSymbolicName = appSymbolicName;\n        this.version = version;\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Current version of the SCION Microfrontend Platform.\n */\nconst version = '1.2.2';\n/**\n * The central class of the SCION Microfrontend Platform. This class cannot be instantiated. All functionality is provided by static methods.\n *\n * To enable tree-shaking of the SCION Microfrontend Platform, the platform provides three separate entry points:\n * - {@link MicrofrontendPlatformHost} to configure and start the platform in the host\n * - {@link MicrofrontendPlatformClient} to connect to the platform from a microfrontend\n * - {@link MicrofrontendPlatform} to react to platform lifecycle events and stop the platform\n *\n * ## SCION Microfrontend Platform\n *\n * SCION Microfrontend Platform is a TypeScript-based open source library that enables the implementation of a framework-agnostic\n * microfrontend architecture using iframes. It provides fundamental APIs for microfrontends to communicate with each other across origins\n * and facilitates embedding microfrontends using a web component and a router. SCION Microfrontend Platform is a lightweight, web stack\n * agnostic library that has no user-facing components and does not dictate any form of application structure.\n *\n * You can continue using the frameworks you love since the platform integrates microfrontends via iframes. Iframes by nature provide\n * maximum isolation and allow the integration of any web application without complex adaptation. The platform aims to shield developers\n * from iframe specifics and the low-level messaging mechanism to focus instead on integrating microfrontends.\n *\n * #### Cross-microfrontend communication\n * The platform adds a pub/sub layer on top of the native `postMessage` mechanism to enable microfrontends to communicate with each other\n * easily across origins. Communication comes in two flavors: topic-based and intent-based. Both models feature request-response message\n * exchange, support retained messages for late subscribers to receive the latest messages, and provide API to intercept messages to\n * implement cross-cutting messaging concerns.\n *\n * Topic-based messaging enables you to publish messages to multiple subscribers via a common topic. Intent-based communication focuses on\n * controlled collaboration between applications. To collaborate, an application must express an intention. Manifesting intentions enables\n * us to see dependencies between applications down to the functional level.\n *\n * #### Microfrontend Integration and Routing\n * The platform makes it easy to integrate microfrontends through its router-outlet. The router-outlet is a web component that wraps an iframe.\n * It solves many of the cumbersome quirks of iframes and helps to overcome iframe restrictions. For example, it can adapt its size to the\n * preferred size of embedded content, supports keyboard event propagation and lets you pass contextual data to embedded content.\n * Using the router, you control which web content to display in an outlet. Multiple outlets can display different content, determined by\n * different outlet names, all at the same time. Routing works across application boundaries and enables features such as persistent navigation.\n *\n * ***\n *\n * A microfrontend architecture can be achieved in many ways, each with its pros and cons. The SCION Microfrontend Platform uses\n * the iframe approach primarily since iframes by nature provide the highest possible level of isolation through a separate browsing context.\n * The microfrontend design approach is very tempting and has obvious advantages, especially for large-scale and long-lasting projects, most\n * notably because we are observing an enormous dynamic in web frameworks. The SCION Microfrontend Platform provides you with the necessary\n * tools to best support you in implementing such an architecture.\n *\n * @see {@link MicrofrontendPlatformHost}\n * @see {@link MicrofrontendPlatformClient}\n *\n * @see {@link MessageClient}\n * @see {@link IntentClient}\n * @see {@link SciRouterOutletElement}\n * @see {@link OutletRouter}\n * @see {@link ContextService}\n * @see {@link PreferredSizeService}\n * @see {@link ManifestService}\n * @see {@link FocusMonitor}\n * @see {@link ActivatorCapability}\n *\n * @category Platform\n * @category Lifecycle\n */\nclass MicrofrontendPlatform {\n    static { this._state$ = new BehaviorSubject(PlatformState.Stopped); }\n    constructor() {\n    }\n    /**\n     * @internal\n     */\n    static async startPlatform(startupFn) {\n        if (this.state === PlatformState.Started) {\n            return Promise.reject(Error('[MicrofrontendPlatformStartupError] Platform already started'));\n        }\n        try {\n            startupFn?.();\n            await this.enterState(PlatformState.Starting);\n            await Beans.start({ eagerBeanConstructRunlevel: Runlevel.One, initializerDefaultRunlevel: Runlevel.Two });\n            await this.enterState(PlatformState.Started);\n            return Promise.resolve();\n        }\n        catch (error) {\n            await this.destroy();\n            return Promise.reject(Error(`[MicrofrontendPlatformStartupError] Microfrontend platform failed to start: ${error}`));\n        }\n    }\n    /**\n     * Destroys this platform and releases resources allocated.\n     *\n     * @return a Promise that resolves once the platformed stopped.\n     */\n    static async destroy() {\n        await this.enterState(PlatformState.Stopping);\n        Beans.destroy();\n        await this.enterState(PlatformState.Stopped);\n    }\n    /**\n     * @return the current platform state.\n     */\n    static get state() {\n        return this._state$.getValue();\n    }\n    /**\n     * Observable that, when subscribed, emits the current platform lifecycle state.\n     * It never completes and emits continuously when the platform enters\n     * another state.\n     */\n    static get state$() {\n        return this._state$;\n    }\n    /**\n     * Waits for the platform to enter the specified {@link PlatformState}.\n     * If already in that state, the Promise resolves instantly.\n     *\n     * @param  state - the state to wait for.\n     * @return A Promise that resolves when the platform enters the given state.\n     *         If already in that state, the Promise resolves instantly.\n     */\n    static async whenState(state) {\n        return new Promise((resolve, reject) => {\n            this._state$\n                .pipe(first(it => it === state))\n                .subscribe({\n                error: reject,\n                complete: resolve,\n            });\n        });\n    }\n    static async enterState(newState) {\n        const currentState = (this.state === PlatformState.Stopped) ? -1 : this.state;\n        if (currentState >= newState) {\n            throw Error(`[PlatformStateError] Failed to enter platform state [prevState=${PlatformState[this.state]}, newState=${PlatformState[newState]}].`);\n        }\n        this._state$.next(newState);\n        // Let microtasks waiting for entering that state to resolve first.\n        await this.whenState(newState);\n    }\n}\n/**\n * @internal\n */\nfunction providePlatformEnvironment(config) {\n    Beans.register(IS_PLATFORM_HOST, { useValue: config.isPlatformHost });\n    Beans.register(APP_IDENTITY, { useValue: config.symbolicName });\n    Beans.registerIfAbsent(ɵWINDOW_TOP, { useValue: window.top });\n    Beans.registerIfAbsent(ɵVERSION, { useValue: version, destroyOrder: BeanDestroyOrders.CORE });\n    Beans.registerIfAbsent(MicrofrontendPlatformStopper, { useClass: ɵMicrofrontendPlatformStopper, eager: true });\n    Beans.registerIfAbsent(Logger, { useClass: ConsoleLogger, destroyOrder: BeanDestroyOrders.CORE });\n}\n/**\n * Specifies destroy orders of platform-specific beans, enabling controlled termination of the platform.\n *\n * @internal\n */\nvar BeanDestroyOrders;\n(function (BeanDestroyOrders) {\n    /**\n     * Use for core platform beans which should be destroyed as the very last beans.\n     */\n    BeanDestroyOrders[BeanDestroyOrders[\"CORE\"] = Number.MAX_SAFE_INTEGER] = \"CORE\";\n    /**\n     * Use for the {@link MessageBroker}.\n     */\n    BeanDestroyOrders[BeanDestroyOrders[\"BROKER\"] = BeanDestroyOrders.CORE - 1] = \"BROKER\";\n    /**\n     * Use for messaging-related beans.\n     */\n    BeanDestroyOrders[BeanDestroyOrders[\"MESSAGING\"] = BeanDestroyOrders.BROKER - 1] = \"MESSAGING\";\n})(BeanDestroyOrders || (BeanDestroyOrders = {}));\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Configures the platform and defines the micro applications running in the platform.\n *\n * @category Platform\n */\nclass MicrofrontendPlatformConfig {\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Hook to intercept the host manifest before it is registered in the platform.\n *\n * If integrating the platform in a library, you may need to intercept the manifest of the host in order to introduce library-specific behavior.\n *\n * You can register the interceptor in the bean manager, as follows:\n *\n * ```ts\n * Beans.register(HostManifestInterceptor, {useClass: YourInterceptor, multi: true});\n * ```\n *\n * The interceptor may look as following:\n * ```ts\n *  class YourInterceptor implements HostManifestInterceptor {\n *\n *   public intercept(hostManifest: Manifest): void {\n *     hostManifest.intentions = [\n *       ...hostManifest.intentions || [],\n *       provideMicrofrontendIntention(),\n *     ];\n *     hostManifest.capabilities = [\n *       ...hostManifest.capabilities || [],\n *       provideMessageBoxCapability(),\n *     ];\n *   }\n * }\n *\n * function provideMicrofrontendIntention(): Intention {\n *    return {\n *      type: 'microfrontend',\n *      qualifier: {'*': '*'},\n *    };\n *  }\n *\n * function provideMessageBoxCapability(): Capability {\n *    return {\n *      type: 'messagebox',\n *      qualifier: {},\n *      private: false,\n *      description: 'Allows displaying a simple message to the user.',\n *    };\n *  }\n *\n * ```\n *\n * @category Platform\n * @category Intention API\n */\nclass HostManifestInterceptor {\n}\n/**\n * Intercepts the host manifest, registering platform-specific intentions and capabilities.\n *\n * @internal\n */\nclass ɵHostManifestInterceptor {\n    intercept(hostManifest) {\n        hostManifest.intentions = [\n            ...hostManifest.intentions || [],\n            ...provideActivatorIntentionIfEnabled(),\n        ];\n    }\n}\n/**\n * Provides a wildcard activator intention for the platform to read activator capabilities for installing activator microfrontends.\n */\nfunction provideActivatorIntentionIfEnabled() {\n    const activatorApiDisabled = Beans.get(MicrofrontendPlatformConfig).activatorApiDisabled ?? false;\n    if (activatorApiDisabled) {\n        return [];\n    }\n    return [{\n            type: PlatformCapabilityTypes.Activator,\n            qualifier: { '*': '*' },\n        }];\n}\n\n/**\n * Central point for managing client registrations.\n *\n * @internal\n */\nclass ClientRegistry {\n}\n\n/**\n * Message client for sending and receiving messages between microfrontends across origins.\n *\n * This client implements the topic-based pub/sub (publish/subscribe) messaging model, allowing for one message to be delivered to\n * multiple subscribers using topic addressing.\n *\n * The communication is built on top of the native `postMessage` mechanism. The host app acts as message broker.\n *\n * ### Topic Addressing\n * A publisher publishes a message to a topic, which then is transported to consumers subscribed to the topic. Topics are case-sensitive\n * and consist of one or more segments, each separated by a forward slash. When publishing a message to a topic, the topic must be exact,\n * thus not contain wildcards. Messages published to a topic are transported to all consumers subscribed to the topic. Consumers, on the\n * other hand, can subscribe to multiple topics simultaneously by using wildcard segments in the topic.\n *\n * ### Retained Message\n * You can mark a message as \"retained\" for helping newly subscribed clients to get the last message published to a topic immediately upon\n * subscription. The broker stores one retained message per topic, i.e., a later sent retained message will replace a previously sent retained\n * message. To delete a retained message, send a retained message without payload to the topic.\n *\n * ### Retained Request\n * Unlike retained messages, retained requests are not replaced by later retained requests/messages and remain in the broker until the requestor unsubscribes.\n *\n * ### Request-Response Messaging\n * Sometimes it is useful to initiate a request-response communication to wait for a response. Unlike with fire-and-forget messaging, a temporary\n * inbox is created for the sender to receive replies. If there is no consumer subscribed on the topic, the platform throws an error.\n *\n * @see {@link TopicMessage}\n * @see {@link takeUntilUnsubscribe}\n *\n * @category Messaging\n */\nclass MessageClient {\n}\n/**\n * Returns an Observable that mirrors the source Observable as long as there is at least one subscriber subscribed to the\n * given topic. When the subscription count on the given topic drops to zero, the returned Observable completes. If there\n * is no topic subscription present at the time when subscribing to the Observable, then it completes immediately.\n *\n * This operator is similar to the RxJS {@link rxjs!takeUntil takeUntil} operator, but accepts a topic instead of a notifier Observable.\n *\n * @category Messaging\n */\nfunction takeUntilUnsubscribe(topic) {\n    return takeUntil(Beans.get(MessageClient).subscriberCount$(topic).pipe(first(count => count === 0)));\n}\n\n/**\n * Declares the message transports.\n *\n * @internal\n */\nvar MessagingTransport;\n(function (MessagingTransport) {\n    /**\n     * Transport used by clients to communicate with the broker.\n     */\n    MessagingTransport[\"ClientToBroker\"] = \"sci://microfrontend-platform/client-to-broker\";\n    /**\n     * Transport used by the broker to communicate with its clients.\n     */\n    MessagingTransport[\"BrokerToClient\"] = \"sci://microfrontend-platform/broker-to-client\";\n    /**\n     * Transport used by a microfrontend to communicate with its embedding outlet.\n     */\n    MessagingTransport[\"MicrofrontendToOutlet\"] = \"sci://microfrontend-platform/microfrontend-to-outlet\";\n})(MessagingTransport || (MessagingTransport = {}));\n/**\n * Defines the channels to which messages can be sent.\n *\n * @internal\n */\nvar MessagingChannel;\n(function (MessagingChannel) {\n    /**\n     * Channel for clients to subscribe to a topic destination.\n     */\n    MessagingChannel[\"TopicSubscribe\"] = \"topic-subscribe\";\n    /**\n     * Channel for clients to unsubscribe from a topic destination.\n     */\n    MessagingChannel[\"TopicUnsubscribe\"] = \"topic-unsubscribe\";\n    /**\n     * Channel for clients to subscribe to intents.\n     */\n    MessagingChannel[\"IntentSubscribe\"] = \"intent-subscribe\";\n    /**\n     * Channel for clients to unsubscribe from intents.\n     */\n    MessagingChannel[\"IntentUnsubscribe\"] = \"intent-unsubscribe\";\n    /**\n     * Channel for the host to transport topic message to subscribed clients.\n     */\n    MessagingChannel[\"Topic\"] = \"topic\";\n    /**\n     * Channel for the host to transport intent messages to subscribed clients.\n     */\n    MessagingChannel[\"Intent\"] = \"intent\";\n    /**\n     * Channel for clients to send a connect request.\n     */\n    MessagingChannel[\"ClientConnect\"] = \"client-connect\";\n    /**\n     * Channel for clients to send a disconnect request.\n     */\n    MessagingChannel[\"ClientDisconnect\"] = \"client-disconnect\";\n})(MessagingChannel || (MessagingChannel = {}));\n/**\n * Declares internal platform topics.\n *\n * @internal\n */\nvar PlatformTopics;\n(function (PlatformTopics) {\n    /**\n     * Topic to request the subscription count on a topic.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link string}\n     * Response Type: {@link number}\n     */\n    PlatformTopics.RequestSubscriberCount = 'ɵREQUEST_SUBSCRIBER_COUNT';\n    /**\n     * Topic to signal when gained the focus.\n     *\n     * Messaging Pattern: Publish-Subscribe\n     * Payload: {@link void}\n     */\n    PlatformTopics.FocusIn = 'ɵFOCUS_IN';\n    /**\n     * Topic to request whether the requesting client (or a microfrontend embedded in the client) has gained focus.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link void}\n     * Response Type: {@link boolean}\n     */\n    PlatformTopics.IsFocusWithin = 'ɵIS_FOCUS_WITHIN';\n    /**\n     * Topic to request whether the requesting client has gained focus.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link void}\n     * Response Type: {@link boolean}\n     */\n    PlatformTopics.HasFocus = 'ɵHAS_FOCUS';\n    /**\n     * Topic to read platform properties.\n     *\n     * Messaging Pattern: Publish-Subscribe\n     * Payload: {@link Record}\n     */\n    PlatformTopics.PlatformProperties = 'ɵPLATFORM_PROPERTIES';\n    /**\n     * Topic to read platform registered applications.\n     *\n     * Messaging Pattern: Publish-Subscribe\n     * Payload: {@link ɵApplication}\n     */\n    PlatformTopics.Applications = 'ɵAPPLICATIONS';\n    /**\n     * Topic to request capabilities.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ManifestObjectFilter}\n     * Response Type: {@link Array<Capability>}\n     */\n    PlatformTopics.LookupCapabilities = 'ɵLOOKUP_CAPABILITIES';\n    /**\n     * Topic to request intentions.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ManifestObjectFilter}\n     * Response Type: {@link Array<Intention>}\n     */\n    PlatformTopics.LookupIntentions = 'ɵLOOKUP_INTENTIONS';\n    /**\n     * Topic to register a capability.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link Capability}\n     * Response Type: {@link string}\n     */\n    PlatformTopics.RegisterCapability = 'ɵREGISTER_CAPABILITY';\n    /**\n     * Topic to unregister a capability.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ManifestObjectFilter}\n     * Response Type: {@link void}\n     */\n    PlatformTopics.UnregisterCapabilities = 'ɵUNREGISTER_CAPABILITIES';\n    /**\n     * Topic to register an intentions.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link Intention}\n     * Response Type: {@link string}\n     */\n    PlatformTopics.RegisterIntention = 'ɵREGISTER_INTENTION';\n    /**\n     * Topic to unregister an intention.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ManifestObjectFilter}\n     * Response Type: {@link void}\n     */\n    PlatformTopics.UnregisterIntentions = 'ɵUNREGISTER_INTENTIONS';\n    /**\n     * Topic to check if application is qualified for the capability.\n     *\n     * Messaging Pattern: Request-Response\n     * Request Type: {@link ApplicationQualifiedForCapabilityRequest}\n     * Response Type: {@link boolean}\n     */\n    PlatformTopics.IsApplicationQualifiedForCapability = 'ɵIS_APPLICATION_QUALIFIED_FOR_CAPABILITY';\n    /**\n     * Topic to request the platform version of a specific application.\n     */\n    function platformVersion(appSymbolicName) {\n        return `ɵapplication/${appSymbolicName}/platform/version`;\n    }\n    PlatformTopics.platformVersion = platformVersion;\n    /**\n     * Topic to ping a client for liveness.\n     */\n    function ping(clientId) {\n        return `ɵclient/${clientId}/ping`;\n    }\n    PlatformTopics.ping = ping;\n})(PlatformTopics || (PlatformTopics = {}));\n\n/**\n * Declares headers set by the platform when sending a message.\n *\n * Clients are allowed to read platform-defined headers from a message.\n *\n * @category Messaging\n */\nvar MessageHeaders;\n(function (MessageHeaders) {\n    /**\n     * Identifies the sending client instance of a message.\n     * This header is set by the platform when publishing a message or intent.\n     */\n    MessageHeaders[\"ClientId\"] = \"\\u0275CLIENT_ID\";\n    /**\n     * Identifies the sending application of a message.\n     * This header is set by the platform when publishing a message or intent.\n     */\n    MessageHeaders[\"AppSymbolicName\"] = \"\\u0275APP_SYMBOLIC_NAME\";\n    /**\n     * Unique identity of the message.\n     * This header is set by the platform when publishing a message or intent.\n     */\n    MessageHeaders[\"MessageId\"] = \"\\u0275MESSAGE_ID\";\n    /**\n     * Destination to which to send a response to this message.\n     * This header is set by the platform when sending a request.\n     */\n    MessageHeaders[\"ReplyTo\"] = \"\\u0275REPLY_TO\";\n    /**\n     * The time the message was sent.\n     * This header is set by the platform when publishing a message or intent.\n     */\n    MessageHeaders[\"Timestamp\"] = \"\\u0275TIMESTAMP\";\n    /**\n     * The version of the client.\n     */\n    MessageHeaders[\"Version\"] = \"\\u0275VERSION\";\n    /**\n     * Use this header to set the request method to indicate the desired action to be performed for a given resource.\n     * @see RequestMethods\n     */\n    MessageHeaders[\"Method\"] = \"\\u0275METHOD\";\n    /**\n     * Use this header to set the response status code to indicate whether a request has been successfully completed.\n     * See {@link ResponseStatusCodes} for available status codes. Other codes are also allowed.\n     *\n     * Status codes are primarily used in request-reply communication. In request-response communication, by default,\n     * the requestor’s Observable never completes. However, the replier can include the response status code in the reply’s\n     * headers, allowing to control the lifecycle of the requestor’s Observable.\n     *\n     * For example, the status code {@link ResponseStatusCodes.TERMINAL 250} allows completing the requestor’s Observable\n     * after emitted the reply, or the status code {@link ResponseStatusCodes.ERROR 500} to error the Observable.\n     *\n     * Note that the platform evaluates status codes only in request-response communication. They are ignored when observing\n     * topics or intents in pub/sub communication but can still be used; however, they must be handled by the application,\n     * e.g., by using the {@link throwOnErrorStatus} SCION RxJS operator.\n     *\n     * @see ResponseStatusCodes\n     */\n    MessageHeaders[\"Status\"] = \"\\u0275STATUS\";\n    /**\n     * Unique identity of a message or intent subscriber.\n     *\n     * @internal\n     */\n    MessageHeaders[\"\\u0275SubscriberId\"] = \"\\u0275SUBSCRIBER_ID\";\n})(MessageHeaders || (MessageHeaders = {}));\n/**\n * Defines a set of request methods to indicate the desired action to be performed for a given resource.\n *\n * @category Messaging\n */\nvar RequestMethods;\n(function (RequestMethods) {\n    /**\n     * The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.\n     */\n    RequestMethods[\"GET\"] = \"GET\";\n    /**\n     * The DELETE method deletes the specified resource.\n     */\n    RequestMethods[\"DELETE\"] = \"DELETE\";\n    /**\n     * The PUT method replaces all current representations of the target resource with the request payload.\n     */\n    RequestMethods[\"PUT\"] = \"PUT\";\n    /**\n     * The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.\n     */\n    RequestMethods[\"POST\"] = \"POST\";\n    /**\n     * The OBSERVE method is used to observe the specified resource.\n     */\n    RequestMethods[\"OBSERVE\"] = \"OBSERVE\";\n})(RequestMethods || (RequestMethods = {}));\n/**\n * Defines a set of response status codes to indicate whether a request has been successfully completed.\n *\n * @see throwOnErrorStatus\n * @see MessageClient.request$\n * @see IntentClient.request$\n *\n * @category Messaging\n */\nvar ResponseStatusCodes;\n(function (ResponseStatusCodes) {\n    /**\n     * The request has succeeded.\n     */\n    ResponseStatusCodes[ResponseStatusCodes[\"OK\"] = 200] = \"OK\";\n    /**\n     * The request has succeeded. No further response to be expected.\n     *\n     * In request-reply communication, setting this status code will complete the requestor's Observable\n     * after emitted the reply. The reply is only emitted if not `undefined`.\n     */\n    ResponseStatusCodes[ResponseStatusCodes[\"TERMINAL\"] = 250] = \"TERMINAL\";\n    /**\n     * The receiver could not understand the request due to invalid syntax.\n     *\n     * In request-reply communication, setting this status code will error the requestor's Observable.\n     */\n    ResponseStatusCodes[ResponseStatusCodes[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\n    /**\n     * The receiver could not find the requested resource.\n     *\n     * In request-reply communication, setting this status code will error the requestor's Observable.\n     */\n    ResponseStatusCodes[ResponseStatusCodes[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\n    /**\n     * The receiver encountered an internal error. Optionally, set the error as message payload.\n     *\n     * In request-reply communication, setting this status code will error the requestor's Observable.\n     */\n    ResponseStatusCodes[ResponseStatusCodes[\"ERROR\"] = 500] = \"ERROR\";\n})(ResponseStatusCodes || (ResponseStatusCodes = {}));\n/**\n * Returns an Observable that mirrors the source Observable unless receiving a message with\n * a response status code greater than or equal to 400. Then, the stream will end with an\n * {@link RequestError error} and the source Observable unsubscribed.\n *\n * When receiving a message with the response status code {@link ResponseStatusCodes.TERMINAL},\n * the Observable emits this message and completes.\n *\n * If a message does not include a response status code, the message is emitted as is.\n *\n * Note that this operator is installed in {@link MessageClient.request$} and {@link IntentClient.request$}.\n *\n * @category Messaging\n */\nfunction throwOnErrorStatus() {\n    return pipe(mergeMap((message) => {\n        const status = message.headers.get(MessageHeaders.Status) ?? ResponseStatusCodes.OK;\n        if (status < 400) {\n            return of(message); // 1xx: informational responses, 2xx: successful responses, 4xx: client errors, 5xx: server errors\n        }\n        if (typeof message.body === 'string') {\n            const messageBody = message.body;\n            return throwError(() => new RequestError(messageBody, status, message));\n        }\n        switch (status) {\n            case ResponseStatusCodes.BAD_REQUEST: {\n                return throwError(() => new RequestError('The receiver could not understand the request due to invalid syntax.', status, message));\n            }\n            case ResponseStatusCodes.NOT_FOUND: {\n                return throwError(() => new RequestError('The receiver could not find the requested resource.', status, message));\n            }\n            case ResponseStatusCodes.ERROR: {\n                return throwError(() => new RequestError('The receiver encountered an internal error.', status, message));\n            }\n            default: {\n                return throwError(() => new RequestError('Request error.', status, message));\n            }\n        }\n    }), takeWhile((message) => {\n        return message.headers.get(MessageHeaders.Status) !== ResponseStatusCodes.TERMINAL;\n    }, true), filter((message) => {\n        const isTerminalMessage = message.headers.get(MessageHeaders.Status) === ResponseStatusCodes.TERMINAL;\n        return (!isTerminalMessage || message.body !== undefined);\n    }));\n}\n/**\n * Maps each message to its body.\n *\n * @category Messaging\n */\nfunction mapToBody() {\n    return map(message => message.body);\n}\n/**\n * Indicates that the request handler responded with an error response.\n *\n * @category Messaging\n */\nclass RequestError extends Error {\n    constructor(error, status, msg) {\n        super(error);\n        this.status = status;\n        this.msg = msg;\n        this.name = 'RequestError';\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides utilities for working with topics.\n *\n * @internal\n */\nvar Topics;\n(function (Topics) {\n    /**\n     * Tests whether given topic contains wildcard segments.\n     */\n    function containsWildcardSegments(topic) {\n        return split(topic).some(isWildcardSegment);\n    }\n    Topics.containsWildcardSegments = containsWildcardSegments;\n    /**\n     * Tests whether given topic contains empty segments.\n     */\n    function containsEmptySegments(topic) {\n        return topic.split('/').some(segment => !segment.length);\n    }\n    Topics.containsEmptySegments = containsEmptySegments;\n    /**\n     * Tests whether given segment is a wildcard segment.\n     */\n    function isWildcardSegment(segment) {\n        return segment.startsWith(':') && segment.length > 1;\n    }\n    Topics.isWildcardSegment = isWildcardSegment;\n    /**\n     * Splits given topic into its segments.\n     */\n    function split(topic) {\n        return topic?.split('/').filter(Boolean) ?? [];\n    }\n    Topics.split = split;\n    /**\n     * Returns unnamed wildcard permutations for given exact topic.\n     * These are 2^n variations, where n is the number of segments.\n     *\n     * Example:\n     * Topic: myhome/kitchen/temperature\n     *\n     * +-----------+-----------+-----------*-+\n     * | Segment 1 | Segment 2 | Segment 3   |\n     * +-----------+-----------+-*-----------+\n     * | myhome    | kitchen   | temperature |\n     * | myhome    | kitchen   | *           |\n     * | myhome    | *         | temperature |\n     * | myhome    | *         | *           |\n     * | *         | kitchen   | temperature |\n     * | *         | kitchen   | *           |\n     * | *         | *         | temperature |\n     * | *         | *         | *           |\n     * +-----------+-----------+-------------+\n     */\n    function computeWildcardSegmentPermutations(topic, wildcardCharacter) {\n        const segments = typeof topic === 'string' ? Topics.split(topic) : topic;\n        if (segments.length === 1) {\n            return [segments[0], wildcardCharacter];\n        }\n        return computeWildcardSegmentPermutations(segments.slice(1), wildcardCharacter).reduce((permutations, permutation) => {\n            permutations.push(`${segments[0]}/${permutation}`);\n            permutations.push(`${wildcardCharacter}/${permutation}`);\n            return permutations;\n        }, new Array());\n    }\n    Topics.computeWildcardSegmentPermutations = computeWildcardSegmentPermutations;\n    /**\n     * Replaces named wildcard segments with given replacement.\n     *\n     * Example: \"myhome/:room/temperature\" => \"myhome/REPLACEMENT/temperature\"\n     *\n     */\n    function replaceWildcardSegments(topic, replacement) {\n        return topic.replace(/:[^/]+/g, replacement);\n    }\n    Topics.replaceWildcardSegments = replaceWildcardSegments;\n    /**\n     * Validates given topic.\n     *\n     * @return `null` if valid, or the `Error` otherwise.\n     */\n    function validateTopic(topic, options) {\n        if (!topic) {\n            return Error('[IllegalTopicError] Topic must not be `null`, `undefined` or empty');\n        }\n        if (Topics.containsEmptySegments(topic)) {\n            return Error(`[IllegalTopicError] Topic must not contain empty segments [topic='${topic}']`);\n        }\n        if (options.exactTopic && Topics.containsWildcardSegments(topic)) {\n            return Error(`[IllegalTopicError] Topic must be exact, i.e., not contain wildcard segments [topic='${topic}']`);\n        }\n        return null;\n    }\n    Topics.validateTopic = validateTopic;\n})(Topics || (Topics = {}));\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows testing whether an exact topic matches a pattern topic. The pattern topic may contain wildcard segments.\n *\n * Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n *\n * @category Messaging\n */\nclass TopicMatcher {\n    /**\n     * Constructs a matcher that will match given topics against this pattern.\n     *\n     * @param pattern - Pattern to match topics. The pattern is a topic, not a regular expression; thus, it must consist of one or more segments,\n     *                  each separated by a forward slash. The pattern supports wildcard segments beginning with a colon (`:`). Wildcard segments\n     *                  act as a placeholder for any segment value.\n     */\n    constructor(pattern) {\n        this._patternSegments = Topics.split(pattern);\n        if (!this._patternSegments.length) {\n            throw Error('[TopicMatcherError] Invalid pattern syntax. The pattern must consist of one or more topic segments, each separated by a forward slash.');\n        }\n    }\n    /**\n     * Attempts to match the given topic against the pattern which was passed to the constructor.\n     *\n     * If the match succeeds, then {@link MatcherResult.matches} evaluates to `true`. If the pattern contains wildcard segments,\n     * the matched segments can be read using the property {@link TopicMessage.params} property.\n     *\n     * @param topic - The topic to match against the configured pattern; must be an exact topic, thus not contain wildcard segments.\n     * @return The result of the topic matcher test.\n     */\n    match(topic) {\n        const inputTopicSegments = Topics.split(topic);\n        const patternSegments = this._patternSegments;\n        if (!inputTopicSegments.length) {\n            throw Error('[TopicMatcherError] Invalid topic. The topic must consist of one or more segments, each separated by a forward slash.');\n        }\n        if (inputTopicSegments.some(Topics.isWildcardSegment)) {\n            throw Error('[TopicMatcherError] Invalid topic. Wildcard segments not allowed in an exact topic.');\n        }\n        if (patternSegments.length !== inputTopicSegments.length) {\n            return { matches: false };\n        }\n        if (Arrays.isEqual(inputTopicSegments, patternSegments, { exactOrder: true })) {\n            return { matches: true, params: new Map() };\n        }\n        if (!patternSegments.some(Topics.isWildcardSegment)) {\n            return { matches: false };\n        }\n        if (!patternSegments.every((patternSegment, i) => patternSegment === inputTopicSegments[i] || Topics.isWildcardSegment(patternSegment))) {\n            return { matches: false };\n        }\n        return {\n            matches: true,\n            params: patternSegments.reduce((params, segment, i) => {\n                if (Topics.isWildcardSegment(segment)) {\n                    return params.set(segment.substring(1), inputTopicSegments[i]);\n                }\n                return params;\n            }, new Map()),\n        };\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/** @internal */\nfunction filterByTransport(transport) {\n    return filter((event) => {\n        const envelope = event.data;\n        return envelope?.transport === transport && !!envelope.channel && !!envelope.message?.headers;\n    });\n}\n/** @internal */\nfunction filterByChannel(...channel) {\n    const channels = new Set(Arrays.coerce(channel));\n    return filter((event) => {\n        return channels.has(event.data.channel);\n    });\n}\n/** @internal */\nfunction filterByTopicChannel(topic) {\n    return pipe(filterByChannel(MessagingChannel.Topic), filter((event) => {\n        const messageTopic = event.data.message.topic;\n        return !!messageTopic && new TopicMatcher(topic).match(messageTopic).matches;\n    }));\n}\n/** @internal */\nfunction filterByOrigin(origin) {\n    return filter((event) => {\n        return event.origin === origin;\n    });\n}\n/** @internal */\nfunction filterByWindow(window) {\n    return filter((event) => {\n        return event.source === window;\n    });\n}\n/** @internal */\nfunction pluckMessage() {\n    return map((messageEvent) => {\n        return messageEvent.data.message;\n    });\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Runs the given function. Errors are caught and logged.\n *\n * If producing a Promise, returns that Promise, but with a catch handler installed.\n *\n * @internal\n */\nfunction runSafe(runnable) {\n    let result;\n    try {\n        result = runnable();\n    }\n    catch (error) {\n        Beans.opt(Logger)?.error('[UnexpectedError] An unexpected error occurred.', error);\n        return undefined;\n    }\n    if (result instanceof Promise) {\n        return result.catch(error => {\n            Beans.opt(Logger)?.error('[UnexpectedError] An unexpected error occurred.', error);\n            return undefined;\n        });\n    }\n    return result;\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Returns the error message if given an error object, or the `toString` representation otherwise.\n *\n * @internal\n */\nfunction stringifyError(error) {\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return `${error}`;\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Enables the decoration of RxJS Observables provided by the SCION Microfrontend Platform to control their emission context.\n *\n * The emission context of an Observables may be different than the subscription context, which can lead to unexpected behavior\n * on the subscriber side. For example, Angular uses zones (Zone.js) to trigger change detection. Angular applications expect\n * an RxJS Observable to emit in the same Angular zone in which subscribed to the Observable. That is, if subscribing inside\n * the Angular zone, emissions are expected to be received inside the Angular zone. Otherwise, the UI may not be updated as\n * expected but delayed until the next change detection cycle. Similarly, if subscribing outside the Angular zone, emissions\n * are expected to be received outside the Angular zone. Otherwise, this would cause unnecessary change detection cycles\n * resulting in potential performance degradation.\n *\n * ### Example for Angular Applications\n *\n * For Angular applications, we reommend installing the following decorator:\n *\n * ```ts\n * import {NgZone} from '@angular/core';\n * import {ObservableDecorator} from '@scion/microfrontend-platform';\n * import {Observable} from 'rxjs';\n * import {observeInside, subscribeInside} from '@scion/toolkit/operators';\n *\n * export class NgZoneObservableDecorator implements ObservableDecorator {\n *\n *   constructor(private zone: NgZone) {\n *   }\n *\n *   public decorate$<T>(source$: Observable<T>): Observable<T> {\n *      return new Observable<T>(observer => {\n *        const insideAngular = NgZone.isInAngularZone();\n *        const subscription = source$\n *          .pipe(\n *            subscribeInside(fn => this.zone.runOutsideAngular(fn)),\n *            observeInside(fn => insideAngular ? this.zone.run(fn) : this.zone.runOutsideAngular(fn)),\n *          )\n *          .subscribe(observer);\n *        return () => subscription.unsubscribe();\n *      });\n *    }\n * }\n * ```\n *\n * A decorator can be registered with the bean manager under the symbol `ObservableDecorator`, as following:\n *\n * ```ts\n * Beans.register(ObservableDecorator, {useValue: new NgZoneObservableDecorator(zone)});\n * ```\n *\n * @category Messaging\n */\nclass ObservableDecorator {\n}\n/**\n * Decorates the source with registered {@link ObservableDecorator}, if any.\n *\n * @internal\n */\nfunction decorateObservable() {\n    return (source$) => Beans.opt(ObservableDecorator)?.decorate$(source$) ?? source$;\n}\n\n/*\n * Copyright (c) 2018-2023 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Selects items emitted by an Observable according to a static criterion.\n *\n * This selector was introduced to quickly filter many messages from many subscribers.\n * Instead of a predicate, a key is used to dispatch messages with O(1) complexity to the subscribers.\n *\n * Prior to this selector, performance degraded significantly when sending more than 1000 messages\n * simultaneously, since filtering of message acknowledgements per-subscriber scaled worse than linearly.\n *\n * ---\n * ### Usage\n *\n * ```ts\n * // Create message source.\n * const messages$ = new Subject<{id: string; text: string}>();\n *\n * // Create selector to filter messages by id.\n * const selectMessagesById = new MessageSelector({source$: messages$, keySelector: message => message.id});\n *\n * // Receive only messages with id '1'.\n * selectMessagesById.select$('1').subscribe(msg => {\n *   // do something\n * });\n *\n * // Emit messages.\n * messages$.next({id: '1', text: 'foo'});\n * messages$.next({id: '2', text: 'bar'});\n * ```\n *\n * @internal\n */\nclass MessageSelector {\n    /**\n     * @param config - Controls how to select messages.\n     */\n    constructor(config) {\n        this._selectors = new Map;\n        this._sourceError$ = new Subject();\n        this._sourceComplete$ = new Subject();\n        this._destroy$ = new Subject();\n        const { source$, keySelector } = config;\n        source$\n            .pipe(takeUntil(this._destroy$))\n            .subscribe({\n            next: item => {\n                const key = keySelector(item);\n                this._selectors.get(key)?.forEach(selector => selector.next(item));\n            },\n            error: error => this._sourceError$.error(error),\n            complete: () => this._sourceComplete$.next(),\n        });\n    }\n    /**\n     * Selects items emitted by the source Observable that match the given key.\n     *\n     * @param key - Specifies the key to select items.\n     */\n    select$(key) {\n        return new Observable(observer => {\n            const selector$ = new Subject();\n            Maps.addListValue(this._selectors, key, selector$);\n            const subscription = merge(selector$, this._sourceError$)\n                .pipe(takeUntil(this._sourceComplete$))\n                .subscribe(observer);\n            return () => {\n                Maps.removeListValue(this._selectors, key, selector$);\n                subscription.unsubscribe();\n            };\n        });\n    }\n    /**\n     * Returns the current subscriber count.\n     */\n    ɵsubscriberCount() {\n        return Array.from(this._selectors.values()).reduce((count, selectors) => count + selectors.length, 0);\n    }\n    /**\n     * Disconnects this selector from the source Observable.\n     */\n    disconnect() {\n        this._destroy$.next();\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * The gateway is responsible for dispatching messages between the client and the broker.\n *\n * To initiate a connection, the gateway sends a CONNECT message to the current and all parent windows. When the broker window\n * receives the CONNECT message, the broker responds with a CONNACK message. If no CONNACK message is received within the discovery\n * timeout, the gateway errors. When the gateway is being disposed, it sends a DISCONNECT message to the broker.\n *\n * @internal\n */\nclass BrokerGateway {\n}\n/**\n * Broker gateway that does nothing.\n *\n * Use this gateway in tests to not connect to the platform host.\n *\n * @internal\n */\nclass NullBrokerGateway {\n    constructor() {\n        console.log('[NullBrokerGateway] Using \\'NullBrokerGateway\\'. Messages cannot be sent or received.');\n    }\n    isConnected() {\n        return Promise.resolve(true);\n    }\n    get message$() {\n        return NEVER;\n    }\n    async postMessage(channel, message) {\n        return Promise.resolve();\n    }\n    requestReply$(channel, message) {\n        return NEVER;\n    }\n    subscribe$(subscriptionDescriptor) {\n        return NEVER;\n    }\n}\n/**\n * @internal\n */\nclass ɵBrokerGateway {\n    constructor(connectOptions) {\n        /*\n         * This Observable is primarily used as a notifier for the `takeUntil` operator to complete Observable subscriptions when the platform is shutting down.\n         * Since some subscriptions trigger subsequent broker interactions, e.g., unsubscribing from a topic subscription, the notifier must \"replay\" its state\n         * to avoid waiting for broker responses, which would never arrive and otherwise cause timeout errors.\n         */\n        this._platformStopping$ = new ReplaySubject(1);\n        this._session = null;\n        this._session$ = new AsyncSubject();\n        this._message$ = new Subject();\n        this._selectMessagesByTopic = new MessageSelector({\n            source$: this._message$.pipe(filterByChannel(MessagingChannel.Topic)),\n            keySelector: event => event.data.message.topic,\n        });\n        this._selectMessagesBySubscriberIdHeader = new MessageSelector({\n            source$: this._message$,\n            keySelector: event => event.data.message.headers.get(MessageHeaders.ɵSubscriberId),\n        });\n        this._appSymbolicName = Beans.get(APP_IDENTITY);\n        this._brokerDiscoverTimeout = connectOptions?.brokerDiscoverTimeout ?? 10000;\n        this._messageDeliveryTimeout = connectOptions?.messageDeliveryTimeout ?? 10000;\n    }\n    async init() {\n        try {\n            const session = await this.connectToBroker();\n            this.installBrokerMessageListener(session);\n            this.installPingReplier(session);\n            this._session = session;\n            this._session$.next(session);\n            this._session$.complete();\n        }\n        catch (error) {\n            this._session$.error(error);\n            throw error;\n        }\n    }\n    isConnected() {\n        return lastValueFrom(this._session$).then(() => true).catch(() => false);\n    }\n    get session() {\n        return this._session;\n    }\n    async postMessage(channel, message) {\n        if (isPlatformStopped()) {\n            throw GatewayErrors.PLATFORM_STOPPED_ERROR;\n        }\n        // If not connected to the broker, wait until connected. If connected, continue execution immediately\n        // without spawning a microtask. Otherwise, messages cannot be published during platform shutdown.\n        const session = this._session || await lastValueFrom(this._session$);\n        const messageId = UUID.randomUUID();\n        const envelope = {\n            transport: MessagingTransport.ClientToBroker,\n            channel: channel,\n            message: message,\n        };\n        envelope.message.headers\n            .set(MessageHeaders.MessageId, messageId)\n            .set(MessageHeaders.Timestamp, Date.now())\n            .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n            .set(MessageHeaders.ClientId, session.clientId);\n        // Install Promise that resolves once the broker has acknowledged the message, or that rejects otherwise.\n        const postError$ = new Subject();\n        const whenPosted = new Promise((resolve, reject) => {\n            merge(this._selectMessagesByTopic.select$(messageId), postError$)\n                .pipe(take(1), pluckMessage(), timeout({ first: this._messageDeliveryTimeout, with: () => throwError(() => GatewayErrors.MESSAGE_DISPATCH_ERROR(this._messageDeliveryTimeout, envelope)) }), mergeMap(statusMessage => statusMessage.body.ok ? EMPTY : throwError(() => Error(statusMessage.body.details))), takeUntil(this._platformStopping$))\n                .subscribe({\n                error: reject,\n                complete: resolve,\n            });\n        });\n        try {\n            session.broker.window.postMessage(envelope, session.broker.origin);\n        }\n        catch (error) {\n            postError$.error(error);\n        }\n        await whenPosted;\n    }\n    requestReply$(channel, request) {\n        return new Observable((observer) => {\n            if (isPlatformStopped()) {\n                observer.error(GatewayErrors.PLATFORM_STOPPED_ERROR);\n                return noop;\n            }\n            const replyTo = UUID.randomUUID();\n            const subscriberId = UUID.randomUUID();\n            const unsubscribe$ = new Subject();\n            const requestError$ = new Subject();\n            request.headers\n                .set(MessageHeaders.ReplyTo, replyTo) // message header for the replier where to send replies to\n                .set(MessageHeaders.ɵSubscriberId, subscriberId); // message header to subscribe for replies\n            // Receive replies sent to the reply topic.\n            merge(this._selectMessagesBySubscriberIdHeader.select$(subscriberId), requestError$)\n                .pipe(filterByChannel(MessagingChannel.Topic), pluckMessage(), decorateObservable(), takeUntil(merge(this._platformStopping$, unsubscribe$)), finalize(() => this.unsubscribe({ unsubscribeChannel: MessagingChannel.TopicUnsubscribe, subscriberId, logContext: `[subscriberId=${subscriberId}, topic=${replyTo}]` })))\n                .subscribe({\n                next: reply => observer.next(reply),\n                error: error => observer.error(error),\n                complete: noop, // As per the API, the Observable never completes.\n            });\n            // Post the request to the broker.\n            this.postMessage(channel, request)\n                .catch(error => requestError$.error(error));\n            return () => unsubscribe$.next();\n        });\n    }\n    subscribe$(subscriptionDescriptor) {\n        const { messageChannel, subscribeChannel, unsubscribeChannel, newSubscribeCommand } = subscriptionDescriptor;\n        return new Observable((observer) => {\n            if (isPlatformStopped()) {\n                observer.error(GatewayErrors.PLATFORM_STOPPED_ERROR);\n                return noop;\n            }\n            const subscriberId = UUID.randomUUID();\n            const unsubscribe$ = new Subject();\n            const subscribeError$ = new Subject();\n            // Receive messages of given subscription.\n            merge(this._selectMessagesBySubscriberIdHeader.select$(subscriberId), subscribeError$)\n                .pipe(filterByChannel(messageChannel), pluckMessage(), decorateObservable(), takeUntil(merge(this._platformStopping$, unsubscribe$)), finalize(() => this.unsubscribe({ unsubscribeChannel, subscriberId, logContext: JSON.stringify(newSubscribeCommand(subscriberId)) })))\n                .subscribe({\n                next: message => observer.next(message),\n                error: error => observer.error(error),\n                complete: noop, // As per the API, the Observable never completes.\n            });\n            // Post the subscription to the broker.\n            this.postMessage(subscribeChannel, newSubscribeCommand(subscriberId))\n                .catch(error => subscribeError$.error(error));\n            return () => unsubscribe$.next();\n        });\n    }\n    /**\n     * Unsubscribes from described destination. Does nothing if the platform is stopped.\n     */\n    async unsubscribe(descriptor) {\n        if (isPlatformStopped()) {\n            return;\n        }\n        const { unsubscribeChannel, subscriberId, logContext } = descriptor;\n        const unsubscribeCommand = { subscriberId, headers: new Map() };\n        try {\n            await this.postMessage(unsubscribeChannel, unsubscribeCommand);\n        }\n        catch (error) {\n            Beans.get(Logger, { orElseGet: NULL_LOGGER }).error(`[UnsubscribeError] Failed to unsubscribe from destination: '${logContext}'. Caused by: ${error}`); // Fall back using NULL_LOGGER, e.g., when the platform is stopping.\n        }\n    }\n    /**\n     * Subscribes to messages sent to this client.\n     * Messages are dispatched to {@link _message$}.\n     */\n    installBrokerMessageListener(session) {\n        fromEvent(window, 'message')\n            .pipe(filterByWindow(session.broker.window), filterByOrigin(session.broker.origin), filterByTransport(MessagingTransport.BrokerToClient), fixMapObjects(), takeUntil(this._platformStopping$))\n            .subscribe(this._message$);\n    }\n    /**\n     * Installs a ping replier to indicate that this client is connected to the host.\n     *\n     * Note that no ping replier is installed if running in the context of the host application.\n     */\n    installPingReplier(session) {\n        if (Beans.get(IS_PLATFORM_HOST)) {\n            return; // The host app client does not reply to pings.\n        }\n        Beans.get(MessageClient).observe$(PlatformTopics.ping(session.clientId))\n            .pipe(takeUntil(this._platformStopping$))\n            .subscribe(request => runSafe(() => {\n            const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n            Beans.get(MessageClient).publish(replyTo, undefined, { headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL) }).then();\n        }));\n    }\n    /**\n     * Connects this client to the broker by sending a CONNECT message to the current and all parent windows.\n     *\n     * When the broker receives the CONNECT message and trusts this client, the broker responds with a CONNACK message,\n     * or rejects the connect attempt otherwise.\n     *\n     * @return A Promise that, when connected, resolves to information about the connected client and broker, or that rejects if the connect attempt\n     * failed, either because the broker could not be found or because the application is not allowed to connect.\n     */\n    connectToBroker() {\n        const replyTo = UUID.randomUUID();\n        const connectPromise = firstValueFrom(fromEvent(window, 'message')\n            .pipe(filterByTransport(MessagingTransport.BrokerToClient), filterByTopicChannel(replyTo), mergeMap((messageEvent) => {\n            const response = messageEvent.data.message.body;\n            if (response?.returnCode !== 'accepted') {\n                return throwError(() => Error(`${response?.returnMessage ?? 'UNEXPECTED: Empty broker discovery response'} [code: '${response?.returnCode ?? 'n/a'}']`));\n            }\n            return of({\n                clientId: response.clientId,\n                broker: {\n                    window: messageEvent.source,\n                    origin: messageEvent.origin,\n                },\n            });\n        }), timeout({ first: this._brokerDiscoverTimeout, with: () => throwError(() => GatewayErrors.BROKER_DISCOVER_ERROR(this._brokerDiscoverTimeout)) }), tap({ error: error => Beans.get(Logger, { orElseGet: NULL_LOGGER }).error(stringifyError(error)) }), // Fall back using NULL_LOGGER, e.g., when the platform is stopping.\n        takeUntil(this._platformStopping$)));\n        const connectMessage = {\n            transport: MessagingTransport.ClientToBroker,\n            channel: MessagingChannel.ClientConnect,\n            message: {\n                headers: new Map()\n                    .set(MessageHeaders.MessageId, UUID.randomUUID())\n                    .set(MessageHeaders.Timestamp, Date.now())\n                    .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n                    .set(MessageHeaders.ReplyTo, replyTo)\n                    .set(MessageHeaders.Version, Beans.get(ɵVERSION)),\n            },\n        };\n        if (Beans.get(IS_PLATFORM_HOST)) {\n            window.postMessage(connectMessage, window.origin);\n        }\n        else if (window === Beans.get(ɵWINDOW_TOP)) {\n            // If loading the client into the topmost window it may be integrated into a rich client, with the host running in a different browser window (remote host).\n            // The rich client then bridges messages between the windows of the client and the remote host. Since the rich client may not be able to bridge messages\n            // right away when the client loads, the client repeatedly sends a connect request until acknowledged by the remote host.\n            const windowHierarchy = this.collectWindowHierarchy();\n            timer(0, 25)\n                .pipe(takeUntil(connectPromise.catch(() => null)))\n                .subscribe(() => {\n                windowHierarchy.forEach(window => window.postMessage(connectMessage, '*'));\n            });\n        }\n        else {\n            this.collectWindowHierarchy().forEach(window => window.postMessage(connectMessage, '*'));\n        }\n        return connectPromise;\n    }\n    /**\n     * Disconnects this client from the broker by sending a DISCONNECT message.\n     * Has no effect if not connected to the broker. If this operation fails, the error is logged as\n     * a warning, but not thrown.\n     */\n    disconnectFromBroker() {\n        if (!this._session) {\n            return;\n        }\n        const disconnectMessage = {\n            transport: MessagingTransport.ClientToBroker,\n            channel: MessagingChannel.ClientDisconnect,\n            message: {\n                headers: new Map()\n                    .set(MessageHeaders.MessageId, UUID.randomUUID())\n                    .set(MessageHeaders.Timestamp, Date.now())\n                    .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n                    .set(MessageHeaders.ClientId, this._session.clientId),\n            },\n        };\n        try {\n            this._session.broker.window.postMessage(disconnectMessage, this._session.broker.origin);\n        }\n        catch (error) {\n            Beans.get(Logger, { orElseGet: NULL_LOGGER }).warn(`[ClientDisconnectError] Failed to disconnect from the broker. Caused by: ${error}`);\n        }\n    }\n    /**\n     * Returns an array of the current `Window` hierarchy.\n     * Windows are sorted in top-down order, i.e., parent windows precede child windows.\n     */\n    collectWindowHierarchy() {\n        const candidates = [];\n        for (let candidate = window; candidate !== Beans.get(ɵWINDOW_TOP); candidate = candidate.parent) {\n            candidates.unshift(candidate);\n        }\n        candidates.unshift(Beans.get(ɵWINDOW_TOP));\n        return candidates;\n    }\n    /**\n     * Method invoked when the platform enters state {@link PlatformState.Stopping}.\n     *\n     * Since this gateway is registered in the bean manager with the maximum destruction order `{destroyOrder: Number.MAX_SAFE_INTEGER}`,\n     * the platform will destroy this bean after destroying other beans, which is important so that other beans can send messages\n     * when the platform shuts down.\n     */\n    preDestroy() {\n        this.disconnectFromBroker();\n        this._platformStopping$.next();\n        this._selectMessagesByTopic.disconnect();\n        this._selectMessagesBySubscriberIdHeader.disconnect();\n    }\n}\n/**\n * Replaces `Map` objects contained in the message with a `Map` object of the current JavaScript realm.\n *\n * Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n * Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n * This is most likely because the serialization takes place in a different realm.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n * @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n */\nfunction fixMapObjects() {\n    return map((event) => {\n        const envelope = event.data;\n        envelope.message.headers = new Map(envelope.message.headers || []);\n        if (envelope.channel === MessagingChannel.Intent) {\n            const intentMessage = envelope.message;\n            intentMessage.intent.params = new Map(intentMessage.intent.params || []);\n        }\n        if (envelope.channel === MessagingChannel.Topic) {\n            const topicMessage = envelope.message;\n            topicMessage.params = new Map(topicMessage.params || []);\n        }\n        return event;\n    });\n}\n/**\n * Creates a string representation of the given {@link MessageEnvelope}.\n */\nfunction stringifyEnvelope(envelope) {\n    return JSON.stringify(envelope, (key, value) => (value instanceof Map) ? Dictionaries.coerce(value) : value);\n}\nfunction isPlatformStopped() {\n    return MicrofrontendPlatform.state >= PlatformState.Stopped;\n}\nvar GatewayErrors;\n(function (GatewayErrors) {\n    GatewayErrors.PLATFORM_STOPPED_ERROR = Error('[GatewayError] Platform is stopped. Messages cannot be published or received.');\n    function MESSAGE_DISPATCH_ERROR(timeout, message) {\n        return Error(`[GatewayError] No acknowledgement received within ${timeout}ms for a message sent to the broker. [msg=${stringifyEnvelope(message)}]`);\n    }\n    GatewayErrors.MESSAGE_DISPATCH_ERROR = MESSAGE_DISPATCH_ERROR;\n    function BROKER_DISCOVER_ERROR(timeout) {\n        return Error(`[GatewayError] Message broker not discovered within ${timeout}ms. Messages cannot be published or received.`);\n    }\n    GatewayErrors.BROKER_DISCOVER_ERROR = BROKER_DISCOVER_ERROR;\n})(GatewayErrors || (GatewayErrors = {}));\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows looking up properties defined in the platform host.\n *\n * @category Platform\n */\nclass PlatformPropertyService {\n    constructor() {\n        this._properties = new Map();\n    }\n    async init() {\n        const messagingDisabled = Beans.get(BrokerGateway) instanceof NullBrokerGateway;\n        if (messagingDisabled) {\n            return;\n        }\n        // Wait until obtained platform properties so that they can be accessed synchronously by the application via `PlatformPropertyService#properties`.\n        const properties$ = Beans.get(MessageClient).observe$(PlatformTopics.PlatformProperties);\n        this._properties = await firstValueFrom(properties$.pipe(mapToBody(), map(properties => Maps.coerce(properties))));\n    }\n    /**\n     * Indicates whether a property with the specified key exists or not.\n     */\n    contains(key) {\n        return this._properties.has(key);\n    }\n    /**\n     * Returns the property of the given key, or `defaultValue` if the property does not exist.\n     *\n     * Throws an error if `defaultValue` is not specified and the property does not exist.\n     */\n    get(key, defaultValue) {\n        if (this._properties.has(key)) {\n            return this._properties.get(key);\n        }\n        if (defaultValue !== undefined) {\n            return defaultValue;\n        }\n        throw Error(`[PropertyNotFoundError] No property of given name found [prop=${key}]`);\n    }\n    /**\n     * Returns the properties map.\n     */\n    properties() {\n        return this._properties;\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Uses the native Web Fetch API to fetch a resource from the network.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n * @internal\n */\nclass HttpClient {\n    /**\n     * Allows fetching a resource from the network, returning a promise which is fulfilled once the response is available. The promise resolves\n     * to the Response object representing the response to your request. The promise does not reject on HTTP errors — instead it only rejects on\n     * network errors; then handlers must check for HTTP errors.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n     *\n     * @param  input - Defines the resource that you wish to fetch.\n     * @param  init - Options object containing any custom settings that you want to apply to the request.\n     * @return A Promise that resolves to a Response object.\n     */\n    fetch(input, init) {\n        return fetch(input, init); // native call\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Central point for looking up or managing capabilities or intentions available in the platform.\n *\n * @internal\n */\nclass ManifestRegistry {\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nconst ABSOLUTE_URL_REGEX = /^(https?:\\/\\/)|(blob:)/;\n/**\n * @internal\n */\nvar Urls;\n(function (Urls) {\n    /**\n     * Returns `true` if the given URL is an absolute URL, a blob or the 'about:blank' page.\n     */\n    function isAbsoluteUrl(url) {\n        return url === 'about:blank' || ABSOLUTE_URL_REGEX.test(url);\n    }\n    Urls.isAbsoluteUrl = isAbsoluteUrl;\n    /**\n     * Constructs the {@link URL} for the given url and optional base, applying relative navigational symbols if contained in the url.\n     *\n     * Following rules apply:\n     * - base is required if providing a relative url\n     * - search and fragment parts of the base are ignored\n     * - relative navigational symbols are only applied if passing a base (native support)\n     *\n     * This function is similar to `new URL(url, base)` except that it works for bases that do not have a trailing slash.\n     * If you use `new URL(url, base)` without a trailing slash in the base, the last segment is discarded.\n     *\n     * // new URL('x/y', 'http://localhost:4200/a/b/').toString() -> \"http://localhost:4200/a/b/x/y\" // what we expect\n     * // new URL('x/y', 'http://localhost:4200/a/b').toString() -> \"http://localhost:4200/a/x/y\" // not what we expect\n     *\n     * We observed this behavior in Chromium and Firefox browsers.\n     */\n    function newUrl(url, base) {\n        if (base) {\n            const baseUrl = new URL(base);\n            if (baseUrl.pathname && !baseUrl.pathname.endsWith('/')) {\n                baseUrl.pathname += '/';\n            }\n            return new URL(url, baseUrl);\n        }\n        return new URL(url);\n    }\n    Urls.newUrl = newUrl;\n    /**\n     * Adds a trailing slash to the given URL, if not already present.\n     */\n    function ensureTrailingSlash(url) {\n        if (!url.endsWith('/')) {\n            return url + '/';\n        }\n        return url;\n    }\n    Urls.ensureTrailingSlash = ensureTrailingSlash;\n})(Urls || (Urls = {}));\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Registry with all registered applications.\n *\n * @internal\n */\nclass ApplicationRegistry {\n    constructor() {\n        this._applications = new Map();\n    }\n    static { this.SYMBOLIC_NAME_REGEXP = /^[a-z0-9-]+$/; }\n    /**\n     * Registers the given application.\n     *\n     * Throws an error if the application's symbolic name is not unique or contains illegal characters.\n     */\n    async registerApplication(applicationConfig, manifest) {\n        Defined.orElseThrow(applicationConfig.symbolicName, () => Error(`[ApplicationRegistrationError] Invalid application config. Missing required property 'symbolicName'. [appConfig=\"${JSON.stringify(applicationConfig)}\", manifest=\"${JSON.stringify(manifest)}\"]`));\n        Defined.orElseThrow(applicationConfig.manifestUrl, () => Error(`[ApplicationRegistrationError] Invalid application config. Missing required property 'manifestUrl'. [appConfig=\"${JSON.stringify(applicationConfig)}\", manifest=\"${JSON.stringify(manifest)}\"]`));\n        if (!ApplicationRegistry.SYMBOLIC_NAME_REGEXP.test(applicationConfig.symbolicName)) {\n            throw Error(`[ApplicationRegistrationError] Symbolic name must be lowercase and contain alphanumeric and dash characters [symbolicName='${applicationConfig.symbolicName}'].`);\n        }\n        const notUniqueSymbolicName = Array.from(this._applications.values()).some(application => application.symbolicName === applicationConfig.symbolicName);\n        if (notUniqueSymbolicName) {\n            throw Error(`[ApplicationRegistrationError] Symbolic name must be unique [symbolicName='${applicationConfig.symbolicName}'].`);\n        }\n        const baseUrl = this.computeBaseUrl(applicationConfig, manifest);\n        this._applications.set(applicationConfig.symbolicName, {\n            symbolicName: applicationConfig.symbolicName,\n            name: manifest.name ?? applicationConfig.symbolicName,\n            baseUrl: baseUrl,\n            manifestUrl: Urls.newUrl(applicationConfig.manifestUrl, Urls.isAbsoluteUrl(applicationConfig.manifestUrl) ? applicationConfig.manifestUrl : window.origin).toString(),\n            manifestLoadTimeout: applicationConfig.manifestLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).manifestLoadTimeout,\n            activatorLoadTimeout: applicationConfig.activatorLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).activatorLoadTimeout,\n            allowedMessageOrigins: new Set(Arrays.coerce(applicationConfig.secondaryOrigin)).add(Urls.newUrl(baseUrl).origin),\n            scopeCheckDisabled: Defined.orElse(applicationConfig.scopeCheckDisabled, false),\n            intentionCheckDisabled: Defined.orElse(applicationConfig.intentionCheckDisabled, false),\n            intentionRegisterApiDisabled: Defined.orElse(applicationConfig.intentionRegisterApiDisabled, true),\n        });\n        for (const capability of manifest.capabilities ?? []) {\n            try {\n                await Beans.get(ManifestRegistry).registerCapability(capability, applicationConfig.symbolicName);\n            }\n            catch (error) {\n                Beans.get(Logger).error(`[CapabilityRegisterError] Failed to register capability for application '${applicationConfig.symbolicName}'. [capability=${JSON.stringify(capability)}]`, error);\n            }\n        }\n        manifest.intentions?.forEach(intention => {\n            try {\n                Beans.get(ManifestRegistry).registerIntention(intention, applicationConfig.symbolicName);\n            }\n            catch (error) {\n                Beans.get(Logger).error(`[IntentionRegisterError] Failed to register intention for application '${applicationConfig.symbolicName}' [intention=${JSON.stringify(intention)}].`, error);\n            }\n        });\n    }\n    getApplication(symbolicName, options) {\n        const application = this._applications.get(symbolicName);\n        if (!application && !options) {\n            throw Error(`[NullApplicationError] No application registered under the symbolic name '${symbolicName}'.`);\n        }\n        return application ?? null;\n    }\n    getApplications() {\n        return Array.from(this._applications.values());\n    }\n    /**\n     * Returns whether the specified application can interact with private capabilities of other applications.\n     */\n    isScopeCheckDisabled(appSymbolicName) {\n        return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).scopeCheckDisabled;\n    }\n    /**\n     * Returns whether the specified application can register and unregister intentions dynamically at runtime.\n     */\n    isIntentionRegisterApiDisabled(appSymbolicName) {\n        return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).intentionRegisterApiDisabled;\n    }\n    /**\n     * Returns whether the specified application can interact with capabilities of other applications without having to declare respective intentions.\n     */\n    isIntentionCheckDisabled(appSymbolicName) {\n        return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).intentionCheckDisabled;\n    }\n    /**\n     * Computes the base URL as following:\n     *\n     * - if base URL is specified in the manifest, that URL is used (either as an absolute URL, or relative to the origin of 'manifestUrl')\n     * - if base URL is not specified in the manifest, the origin from 'manifestUrl' is used as the base URL, or the origin from the current window if the 'manifestUrl' is relative\n     * - if base URL has no trailing slash, adds a trailing slash\n     */\n    computeBaseUrl(applicationConfig, manifest) {\n        const manifestURL = Urls.isAbsoluteUrl(applicationConfig.manifestUrl) ? Urls.newUrl(applicationConfig.manifestUrl) : Urls.newUrl(applicationConfig.manifestUrl, window.origin);\n        if (!manifest.baseUrl) {\n            return Urls.ensureTrailingSlash(manifestURL.origin);\n        }\n        if (Urls.isAbsoluteUrl(manifest.baseUrl)) {\n            return Urls.ensureTrailingSlash(manifest.baseUrl);\n        }\n        else {\n            return Urls.ensureTrailingSlash(Urls.newUrl(manifest.baseUrl, manifestURL.origin).toString());\n        }\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows testing whether a qualifier matches a qualifier pattern.\n *\n * @category Intention API\n */\nclass QualifierMatcher {\n    /**\n     * Constructs a matcher that will match given qualifiers against a pattern.\n     *\n     * @param pattern - Pattern to match qualifiers. If `null` or `undefined`, uses an empty qualifier pattern.\n     */\n    constructor(pattern) {\n        this._pattern = pattern || {};\n        this._patternKeys = Object.keys(this._pattern);\n    }\n    /**\n     * Attempts to match the given qualifier against the pattern which was passed to the constructor.\n     */\n    matches(qualifier) {\n        const testee = qualifier || {};\n        const testeeKeys = Object.keys(testee);\n        const { _patternKeys: patternKeys, _pattern: pattern } = this;\n        // Test if the testee has no additional entries\n        if (!patternKeys.includes('*') && testeeKeys.some(key => !patternKeys.includes(key))) {\n            return false;\n        }\n        return patternKeys\n            .filter(key => key !== '*')\n            .every(key => {\n            if (pattern[key] === testee[key]) {\n                return true;\n            }\n            if (pattern[key] === '*' && testee[key] !== undefined && testee[key] !== null) {\n                return true;\n            }\n            return false;\n        });\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides an in-memory store for provided capabilities and registered intentions.\n *\n * @internal\n */\nclass ManifestObjectStore {\n    constructor() {\n        this._objectById = new Map();\n        this._objectsByType = new Map();\n        this._objectsByApplication = new Map();\n        this._add$ = new Subject();\n        this._remove$ = new Subject();\n    }\n    /**\n     * Adds the given {@link ManifestObject} to this store.\n     */\n    add(object) {\n        this._objectById.set(object.metadata.id, object);\n        Maps.addListValue(this._objectsByType, object.type, object);\n        Maps.addListValue(this._objectsByApplication, object.metadata.appSymbolicName, object);\n        this._add$.next(object);\n    }\n    /**\n     * Removes manifest objects from this store that match the given filter.\n     *\n     * @param filter - Control which manifest objects to remove by specifying filter criteria which are \"AND\"ed together.\n     *        Wildcards in the qualifier criterion, if any, are interpreted as such.\n     */\n    remove(filter) {\n        const objectsToRemove = this.find(filter);\n        this._remove(objectsToRemove);\n    }\n    /**\n     * Finds manifest objects that match the given filter.\n     *\n     * @param filter - Control which manifest objects to return.\n     *        Specified filter criteria are \"AND\"ed together. If no filter criteria are specified, all objects will be returned.\n     */\n    find(filter) {\n        const filterById = filter.id !== undefined;\n        const filterByType = filter.type !== undefined;\n        const filterByApp = filter.appSymbolicName !== undefined;\n        return Arrays\n            .intersect(filterById ? Arrays.coerce(this._objectById.get(filter.id)) : undefined, filterByType ? Arrays.coerce(this._objectsByType.get(filter.type)) : undefined, filterByApp ? Arrays.coerce(this._objectsByApplication.get(filter.appSymbolicName)) : undefined, (filterById || filterByType || filterByApp) ? undefined : Array.from(this._objectById.values()))\n            .filter(object => {\n            if (filter.qualifier === undefined) {\n                return true;\n            }\n            if (typeof filter.qualifier === 'function') {\n                return filter.qualifier(object.qualifier || {});\n            }\n            return new QualifierMatcher(filter.qualifier).matches(object.qualifier);\n        });\n    }\n    findById(id, options) {\n        const object = this._objectById.get(id);\n        if (!object && !options) {\n            throw Error(`[NullManifestObjectError] Manifest object '${id}' not found.`);\n        }\n        return object ?? null;\n    }\n    /**\n     * Emits when an object is added to or removed from this store.\n     */\n    get change$() {\n        return merge(this.add$, this.remove$).pipe(map(() => undefined));\n    }\n    /**\n     * Emits when an object is added to this store.\n     */\n    get add$() {\n        return this._add$;\n    }\n    /**\n     * Emits when object(s) are removed from this store.\n     */\n    get remove$() {\n        return this._remove$;\n    }\n    /**\n     * Removes the given objects from all internal maps.\n     */\n    _remove(objects) {\n        const deleted = new Set();\n        objects.forEach(object => {\n            const objectId = object.metadata.id;\n            if (this._objectById.delete(objectId)) {\n                Maps.removeListValue(this._objectsByType, object.type, candidate => candidate.metadata?.id === objectId);\n                Maps.removeListValue(this._objectsByApplication, object.metadata.appSymbolicName, candidate => candidate.metadata?.id === objectId);\n                deleted.add(object);\n            }\n        });\n        deleted.size && this._remove$.next(objects);\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows intercepting capabilities before their registration.\n *\n * Interceptors allow intercepting capabilities before they are registered, for example,\n * to perform validation checks, add metadata, or change properties.\n *\n * The following interceptor assigns a stable identifier to each microfrontend capability.\n *\n * ```ts\n * class MicrofrontendCapabilityInterceptor implements CapabilityInterceptor {\n *\n *   public async intercept(capability: Capability): Promise<Capability> {\n *     if (capability.type === 'microfrontend') {\n *       return {\n *         ...capability,\n *         metadata: {...capability.metadata, id: hash(capability)},\n *       };\n *     }\n *     return capability;\n *   }\n * }\n * ```\n *\n * #### Registering Interceptors\n * Interceptors are registered in the bean manager of the host application under the symbol `CapabilityInterceptor` as multi bean.\n * Multiple interceptors can be registered, forming a chain in which each interceptor is called one by one in registration order.\n *\n * ```ts\n * Beans.register(CapabilityInterceptor, {useClass: MicrofrontendCapabilityInterceptor, multi: true});\n * ```\n *\n * @category Intention API\n */\nclass CapabilityInterceptor {\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides utilities for working with qualifiers.\n *\n * @internal\n */\nvar Qualifiers;\n(function (Qualifiers) {\n    const ALLOWED_VALUE_TYPES = new Set().add('string').add('number').add('boolean');\n    /**\n     * Validates given qualifier.\n     *\n     * @return `null` if valid, or the `Error` otherwise.\n     */\n    function validateQualifier(qualifier, options) {\n        if (!qualifier || Object.keys(qualifier).length === 0) {\n            return null;\n        }\n        if (options.exactQualifier && Object.entries(qualifier).some(([key, value]) => key === '*' || value === '*')) {\n            return Error(`[IllegalQualifierError] Qualifier must be exact, i.e., not contain wildcards. [qualifier='${JSON.stringify(qualifier)}']`);\n        }\n        if (Object.values(qualifier).some(value => value === '' || value === null || value === undefined)) {\n            return Error(`[IllegalQualifierError] Qualifier must not contain empty, \\`null\\`, or \\`undefined\\` entries. [qualifier='${JSON.stringify(qualifier)}']`);\n        }\n        if (Object.values(qualifier).some(value => !ALLOWED_VALUE_TYPES.has(typeof value))) {\n            return Error(`[IllegalQualifierError] Qualifier contains entries with an illegal data type. Supported data types are [${[...ALLOWED_VALUE_TYPES].join(', ')}]. [qualifier='${JSON.stringify(qualifier)}']`);\n        }\n        return null;\n    }\n    Qualifiers.validateQualifier = validateQualifier;\n})(Qualifiers || (Qualifiers = {}));\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * @internal\n */\nclass ɵManifestRegistry {\n    constructor() {\n        this._subscriptions = new Set();\n        this._capabilityStore = new ManifestObjectStore();\n        this._intentionStore = new ManifestObjectStore();\n        this.capabilityRegister$ = this._capabilityStore.add$;\n        this.capabilityUnregister$ = this._capabilityStore.remove$;\n        this.installCapabilityRegisterRequestHandler();\n        this.installCapabilityUnregisterRequestHandler();\n        this.installIntentionRegisterRequestHandler();\n        this.installIntentionUnregisterRequestHandler();\n        this.installCapabilitiesLookupRequestHandler();\n        this.installIntentionsLookupRequestHandler();\n        this.installIsApplicationQualifiedRequestHandler();\n        this.installVersionLookupHandler();\n    }\n    /**\n     * @inheritDoc\n     */\n    resolveCapabilitiesByIntent(intent, appSymbolicName) {\n        const illegalQualifierError = Qualifiers.validateQualifier(intent.qualifier, { exactQualifier: true });\n        if (illegalQualifierError) {\n            throw illegalQualifierError;\n        }\n        const filter = { type: intent.type, qualifier: intent.qualifier || {} };\n        return this._capabilityStore.find(filter)\n            .filter(capability => this.isApplicationQualifiedForCapability(appSymbolicName, capability));\n    }\n    /**\n     * @inheritDoc\n     */\n    hasIntention(intent, appSymbolicName) {\n        const illegalQualifierError = Qualifiers.validateQualifier(intent.qualifier, { exactQualifier: true });\n        if (illegalQualifierError) {\n            throw illegalQualifierError;\n        }\n        const filter = { appSymbolicName, type: intent.type };\n        return (Beans.get(ApplicationRegistry).isIntentionCheckDisabled(appSymbolicName) ||\n            this._intentionStore.find({ ...filter, qualifier: intentionQualifier => new QualifierMatcher(intentionQualifier).matches(intent.qualifier) }).length > 0 ||\n            this._capabilityStore.find({ ...filter, qualifier: intent.qualifier || {} }).length > 0 // An app has an implicit intention if it provides the capability itself\n        );\n    }\n    /**\n     * Tests if the specified micro app is qualified to interact with the given capability.\n     *\n     * A micro app is qualified if it meets either of the following criteria:\n     * - The capability is provided by the application itself.\n     * - The capability is provided by another application, but only if the capability is publicly visible (1),\n     *   and the micro app has declared an intention (2) to use the capability.\n     *\n     * (1) Unless 'scope check' is disabled for the specified micro app.\n     * (2) Unless 'intention check' is disabled for the specified micro app.\n     */\n    isApplicationQualifiedForCapability(appSymbolicName, capability) {\n        if (capability.metadata.appSymbolicName === appSymbolicName) {\n            return true;\n        }\n        const isScopeCheckDisabled = Beans.get(ApplicationRegistry).isScopeCheckDisabled(appSymbolicName);\n        const isIntentionCheckDisabled = Beans.get(ApplicationRegistry).isIntentionCheckDisabled(appSymbolicName);\n        return (isScopeCheckDisabled || !capability.private) && (isIntentionCheckDisabled || this.hasIntentionForCapability(appSymbolicName, capability));\n    }\n    /**\n     * Tests whether the given app has declared a matching intention for the given capability.\n     */\n    hasIntentionForCapability(appSymbolicName, capability) {\n        return this._intentionStore.find({\n            appSymbolicName,\n            type: capability.type,\n            qualifier: intentionQualifier => new QualifierMatcher(intentionQualifier).matches(capability.qualifier),\n        }).length > 0;\n    }\n    async registerCapability(capability, appSymbolicName) {\n        if (!capability) {\n            throw Error('[CapabilityRegisterError] Capability must not be null or undefined.');\n        }\n        if (!capability.type) {\n            throw Error('[CapabilityRegisterError] Missing capability property: type');\n        }\n        const illegalQualifierError = Qualifiers.validateQualifier(capability.qualifier, { exactQualifier: true });\n        if (illegalQualifierError) {\n            throw illegalQualifierError;\n        }\n        assertCapabilityParamDefinitions(capability.params);\n        // Let the host app intercept the capability to register.\n        const capabilityToRegister = await interceptCapability({\n            ...capability,\n            qualifier: capability.qualifier ?? {},\n            params: capability.params ?? [],\n            private: capability.private ?? true,\n            metadata: {\n                id: UUID.randomUUID(),\n                appSymbolicName: appSymbolicName,\n            },\n        });\n        // Register the capability.\n        this._capabilityStore.add(capabilityToRegister);\n        return capabilityToRegister.metadata.id;\n    }\n    unregisterCapabilities(appSymbolicName, filter) {\n        this._capabilityStore.remove({ ...filter, appSymbolicName });\n    }\n    registerIntention(intention, appSymbolicName) {\n        if (!intention) {\n            throw Error('[IntentionRegisterError] Intention must not be null or undefined.');\n        }\n        if (!intention.type) {\n            throw Error('[IntentionRegisterError] Missing intention property: type');\n        }\n        const illegalQualifierError = Qualifiers.validateQualifier(intention.qualifier, { exactQualifier: false });\n        if (illegalQualifierError) {\n            throw illegalQualifierError;\n        }\n        const intentionToRegister = {\n            ...intention,\n            metadata: {\n                id: UUID.randomUUID(),\n                appSymbolicName: appSymbolicName,\n            },\n        };\n        // Register the intention.\n        this._intentionStore.add(intentionToRegister);\n        return intentionToRegister.metadata.id;\n    }\n    unregisterIntention(appSymbolicName, filter) {\n        this._intentionStore.remove({ ...filter, appSymbolicName });\n    }\n    installCapabilityRegisterRequestHandler() {\n        this._subscriptions.add(Beans.get(MessageClient).onMessage(PlatformTopics.RegisterCapability, (request) => {\n            const capability = request.body;\n            const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n            return this.registerCapability(capability, appSymbolicName);\n        }));\n    }\n    installCapabilityUnregisterRequestHandler() {\n        this._subscriptions.add(Beans.get(MessageClient).onMessage(PlatformTopics.UnregisterCapabilities, (request) => {\n            const capabilityFilter = request.body || {};\n            const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n            this.unregisterCapabilities(appSymbolicName, capabilityFilter);\n        }));\n    }\n    installIntentionRegisterRequestHandler() {\n        this._subscriptions.add(Beans.get(MessageClient).onMessage(PlatformTopics.RegisterIntention, (request) => {\n            const intention = request.body;\n            const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n            assertIntentionRegisterApiEnabled(appSymbolicName);\n            return this.registerIntention(intention, appSymbolicName);\n        }));\n    }\n    installIntentionUnregisterRequestHandler() {\n        this._subscriptions.add(Beans.get(MessageClient).onMessage(PlatformTopics.UnregisterIntentions, (request) => {\n            const intentFilter = request.body || {};\n            const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n            assertIntentionRegisterApiEnabled(appSymbolicName);\n            this.unregisterIntention(appSymbolicName, intentFilter);\n        }));\n    }\n    installCapabilitiesLookupRequestHandler() {\n        this._subscriptions.add(Beans.get(MessageClient).onMessage(PlatformTopics.LookupCapabilities, (request) => {\n            const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n            const lookupFilter = request.body || {};\n            const illegalQualifierError = Qualifiers.validateQualifier(lookupFilter.qualifier, { exactQualifier: false });\n            if (illegalQualifierError) {\n                throw illegalQualifierError;\n            }\n            // The queried capabilities may change on both, capability or intention change, because the computation\n            // of visible and qualified capabilities depends on registered capabilities and manifested intentions.\n            const registryChange$ = merge(this._capabilityStore.change$, this._intentionStore.change$);\n            const finder$ = defer(() => of(this._capabilityStore.find(lookupFilter)));\n            return finder$\n                .pipe(expand(() => registryChange$.pipe(take(1), mergeMap(() => finder$))), filterArray(capability => this.isApplicationQualifiedForCapability(appSymbolicName, capability)), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        }));\n    }\n    installIntentionsLookupRequestHandler() {\n        this._subscriptions.add(Beans.get(MessageClient).onMessage(PlatformTopics.LookupIntentions, (request) => {\n            const lookupFilter = request.body || {};\n            const illegalQualifierError = Qualifiers.validateQualifier(lookupFilter.qualifier, { exactQualifier: false });\n            if (illegalQualifierError) {\n                throw illegalQualifierError;\n            }\n            const finder$ = defer(() => of(this._intentionStore.find(lookupFilter)));\n            return finder$\n                .pipe(expand(() => this._intentionStore.change$.pipe(take(1), mergeMap(() => finder$))), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)));\n        }));\n    }\n    installIsApplicationQualifiedRequestHandler() {\n        this._subscriptions.add(Beans.get(MessageClient).onMessage(PlatformTopics.IsApplicationQualifiedForCapability, (request) => {\n            return merge(this._intentionStore.change$, this._capabilityStore.change$)\n                .pipe(startWith(undefined), map(() => {\n                const application = Beans.get(ApplicationRegistry).getApplication(request.body.appSymbolicName);\n                const capability = this._capabilityStore.findById(request.body.capabilityId);\n                return this.isApplicationQualifiedForCapability(application.symbolicName, capability);\n            }), distinctUntilChanged());\n        }));\n    }\n    installVersionLookupHandler() {\n        this._subscriptions.add(Beans.get(MessageClient).onMessage(PlatformTopics.platformVersion(':appSymbolicName'), message => {\n            const appSymbolicName = message.params.get('appSymbolicName');\n            const clientRegister$ = Beans.get(ClientRegistry).register$.pipe(filter$1(client => client.application.symbolicName === appSymbolicName));\n            const platformVersion$ = defer(() => {\n                const clients = Beans.get(ClientRegistry).getByApplication(appSymbolicName);\n                return clients.length ? of(clients[0].version) : EMPTY;\n            });\n            return platformVersion$\n                .pipe(concatWith(clientRegister$.pipe(mergeMap(() => platformVersion$))), take(1));\n        }));\n    }\n    preDestroy() {\n        this._subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n}\n/**\n * Checks if the 'Intention Registration API' is enabled for the given app. If not, an error is thrown.\n */\nfunction assertIntentionRegisterApiEnabled(appSymbolicName) {\n    if (Beans.get(ApplicationRegistry).isIntentionRegisterApiDisabled(appSymbolicName)) {\n        throw Error(`[IntentionRegisterError] The 'Intention Registration API' is disabled for the application '${appSymbolicName}'. Contact the platform administrator to enable this API.`);\n    }\n}\n/**\n * Asserts given parameter definitions to be valid.\n */\nfunction assertCapabilityParamDefinitions(params) {\n    if (!params?.length) {\n        return;\n    }\n    const validSubstitutes = params.filter(param => !param.deprecated).map(param => param.name);\n    params.forEach(param => {\n        if (param.required === undefined) {\n            throw Error(`[CapabilityParamError] Parameter '${param.name}' must be explicitly defined as required or optional.`);\n        }\n        if (param.deprecated !== undefined) {\n            // Ensure deprecated param to be optional\n            if (param.required) {\n                throw Error(`[CapabilityParamError] Deprecated parameters must be optional, not required. Alternatively, deprecated parameters can define a mapping to a required parameter via the 'useInstead' property. [param='${param.name}']`);\n            }\n            // Ensure existing substitute\n            if (typeof param.deprecated === 'object' && param.deprecated.useInstead && !validSubstitutes.includes(param.deprecated.useInstead)) {\n                throw Error(`[CapabilityParamError] The deprecated parameter '${param.name}' defines an invalid substitute '${param.deprecated.useInstead}'. Valid substitutes are: [${validSubstitutes}]`);\n            }\n        }\n        return param;\n    });\n}\n/**\n * Intercepts capability before its registration.\n */\nasync function interceptCapability(capability) {\n    const interceptors = Beans.all(CapabilityInterceptor);\n    for (const interceptor of interceptors) {\n        capability = await interceptor.intercept(capability);\n    }\n    return capability;\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Tracks the focus across microfrontends and answers {@link PlatformTopics.IsFocusWithin} and {@link PlatformTopics.HasFocus} requests.\n *\n * @see FocusInEventDispatcher\n * @see FocusMonitor\n * @internal\n */\nclass FocusTracker {\n    constructor() {\n        this._focusOwner$ = new BehaviorSubject(undefined);\n        this._subscriptions = new Set();\n        this._subscriptions.add(this.monitorFocusInEvents());\n        this._subscriptions.add(this.replyToIsFocusWithinRequests());\n        this._subscriptions.add(this.replyToHasFocusRequests());\n    }\n    /**\n     * Monitors when a client gains the focus.\n     */\n    monitorFocusInEvents() {\n        return Beans.get(MessageClient).observe$(PlatformTopics.FocusIn)\n            .pipe(map(event => event.headers.get(MessageHeaders.ClientId)), distinctUntilChanged())\n            .subscribe(clientId => runSafe(() => {\n            this._focusOwner$.next(Beans.get(ClientRegistry).getByClientId(clientId) || undefined);\n        }));\n    }\n    /**\n     * Replies to 'focus-within' requests.\n     */\n    replyToIsFocusWithinRequests() {\n        return Beans.get(MessageClient).onMessage(PlatformTopics.IsFocusWithin, request => {\n            const clientId = request.headers.get(MessageHeaders.ClientId);\n            return this._focusOwner$\n                .pipe(map(focusOwner => this.isFocusWithin(clientId, focusOwner)), distinctUntilChanged());\n        });\n    }\n    /**\n     * Replies to 'focus' requests.\n     */\n    replyToHasFocusRequests() {\n        return Beans.get(MessageClient).onMessage(PlatformTopics.HasFocus, request => {\n            const clientId = request.headers.get(MessageHeaders.ClientId);\n            return this._focusOwner$\n                .pipe(map(focusOwner => focusOwner?.id === clientId), distinctUntilChanged());\n        });\n    }\n    /**\n     * Tests whether the given client has received focus or contains embedded web content that has received focus.\n     */\n    isFocusWithin(clientId, focusOwner) {\n        for (let client = focusOwner; client !== undefined; client = this.getParentClient(client)) {\n            if (client.id === clientId) {\n                return true;\n            }\n        }\n        return false;\n    }\n    getParentClient(client) {\n        if (client.window.parent === client.window) {\n            return undefined; // window has no parent as it is the top-level window\n        }\n        return Beans.get(ClientRegistry).getByWindow(client.window.parent);\n    }\n    preDestroy() {\n        this._subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Fetches the manifest of an application.\n *\n * @internal\n */\nclass ManifestFetcher {\n    /**\n     * Fetches the manifest for given application.\n     *\n     * @return Promise that resolves to the manifest after successful retrieval, or that rejects if the manifest could not be fetched\n     *         or the maximum retrieval time has elapsed.\n     *         See https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful.\n     */\n    async fetch(appConfig) {\n        if (!appConfig.symbolicName) {\n            throw Error('[ManifestFetchError] Invalid application config. Missing required property \\'symbolicName\\'.');\n        }\n        if (!appConfig.manifestUrl) {\n            throw Error('[ManifestFetchError] Invalid application config. Missing required property \\'manifestUrl\\'.');\n        }\n        const fetchManifest$ = from(Beans.get(HttpClient).fetch(appConfig.manifestUrl));\n        const manifestFetchTimeout = appConfig.manifestLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).manifestLoadTimeout;\n        const onManifestFetchTimeout = () => throwError(() => Error(`[ManifestFetchError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Timeout of ${manifestFetchTimeout}ms elapsed.`));\n        const manifestFetchResponse = await firstValueFrom(fetchManifest$.pipe(manifestFetchTimeout ? timeout({ first: manifestFetchTimeout, with: onManifestFetchTimeout }) : identity));\n        if (!manifestFetchResponse.ok) {\n            throw Error(`[ManifestFetchError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Maybe the application is currently unavailable. [httpStatusCode=${manifestFetchResponse.status}, httpStatusText=${manifestFetchResponse.statusText}]`);\n        }\n        return await manifestFetchResponse.json();\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Central point for managing message subscriptions.\n *\n * @internal\n */\nclass MessageSubscriptionRegistry {\n    constructor() {\n        this._destroy$ = new Subject();\n        this._subscriptions = new Map();\n        this._subscriptionsByApp = new Map();\n        this._subscriptionsByClient = new Map();\n        this._register$ = new Subject();\n        this._unregister$ = new Subject();\n        Beans.get(ClientRegistry).unregister$\n            .pipe(takeUntil(this._destroy$))\n            .subscribe((client) => runSafe(() => {\n            this.unregister({ clientId: client.id });\n        }));\n    }\n    /**\n     * Registers given subscription.\n     */\n    register(subscription) {\n        this._subscriptions.set(subscription.subscriberId, subscription);\n        Maps.addSetValue(this._subscriptionsByApp, subscription.client.application.symbolicName, subscription);\n        Maps.addSetValue(this._subscriptionsByClient, subscription.client.id, subscription);\n        this.onRegister?.(subscription);\n        this._register$.next(subscription);\n    }\n    /**\n     * Unregisters matching subscriptions.\n     *\n     * @param filter - Control which subscriptions to remove by specifying filter criteria which are \"AND\"ed together.\n     */\n    unregister(filter) {\n        const subscriptions = this.subscriptions(filter);\n        subscriptions.forEach(subscription => {\n            this._subscriptions.delete(subscription.subscriberId);\n            Maps.removeSetValue(this._subscriptionsByApp, subscription.client.application.symbolicName, subscription);\n            Maps.removeSetValue(this._subscriptionsByClient, subscription.client.id, subscription);\n            this.onUnregister?.(subscription);\n            subscription.notifyUnsubscribe();\n        });\n        this._unregister$.next(subscriptions);\n    }\n    /**\n     * Returns subscriptions matching the passed filter.\n     *\n     * @param filter - Control which subscriptions to return by specifying filter criteria which are \"AND\"ed together.\n     *                 If not specified, returns all subscriptions.\n     */\n    subscriptions(filter) {\n        const filterById = filter?.subscriberId;\n        const filterByClient = filter?.clientId;\n        const filterByApp = filter?.appSymbolicName;\n        return Arrays.intersect(filterById ? this.subscriptionById(filterById) : undefined, filterByClient ? this.subscriptionsByClient(filterByClient) : undefined, filterByApp ? this.subscriptionsByApp(filterByApp) : undefined, (filterById || filterByApp || filterByClient) ? undefined : Array.from(this._subscriptions.values()));\n    }\n    /**\n     * Returns the subscription of given subscriber.\n     */\n    subscriptionById(subscriberId) {\n        const subscription = this._subscriptions.get(subscriberId);\n        return subscription ? [subscription] : [];\n    }\n    /**\n     * Returns the subscriptions of given client.\n     */\n    subscriptionsByClient(clientId) {\n        const subscriptions = this._subscriptionsByClient.get(clientId);\n        return subscriptions ? Array.from(subscriptions) : [];\n    }\n    /**\n     * Returns the subscriptions of given application.\n     */\n    subscriptionsByApp(appSymbolicName) {\n        const subscriptions = this._subscriptionsByApp.get(appSymbolicName);\n        return subscriptions ? Array.from(subscriptions) : [];\n    }\n    /**\n     * Emits when registered a subscription via {@link MessageSubscriptionRegistry#register}.\n     */\n    get register$() {\n        return this._register$;\n    }\n    /**\n     * Emits when unregistered a subscription via {@link MessageSubscriptionRegistry#unregister}.\n     */\n    get unregister$() {\n        return this._unregister$;\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Represents a subscription for a given subscriber.\n *\n * @internal\n */\nclass MessageSubscription {\n    constructor(subscriberId, client) {\n        this.subscriberId = subscriberId;\n        this.client = client;\n        /**\n         * Promise that resolves when the subscriber unsubscribes.\n         */\n        this.whenUnsubscribe = new Promise(resolve => this.notifyUnsubscribe = resolve);\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nconst ASTERISK = ':ɵANY';\n/**\n * Central point for managing topic subscriptions.\n *\n * @internal\n */\nclass TopicSubscriptionRegistry extends MessageSubscriptionRegistry {\n    constructor() {\n        super(...arguments);\n        this._subscriptionsByTopic = new Map();\n    }\n    onRegister(subscription) {\n        const topic = Topics.replaceWildcardSegments(subscription.topic, ASTERISK);\n        Maps.addSetValue(this._subscriptionsByTopic, topic, subscription);\n    }\n    onUnregister(subscription) {\n        const topic = Topics.replaceWildcardSegments(subscription.topic, ASTERISK);\n        Maps.removeSetValue(this._subscriptionsByTopic, topic, subscription);\n    }\n    subscriptions(filter) {\n        // Note that we need to identify matching subscriptions very quickly, otherwise the broker's throughput would decrease massively.\n        // Therefore, we must never iterate over all subscriptions, but resolve subscriptions by index.\n        const filterByTopic = filter?.topic;\n        const filterById = filter?.subscriberId;\n        const filterByClient = filter?.clientId;\n        const filterByApp = filter?.appSymbolicName;\n        return Arrays.intersect(filterByTopic ? this.subscriptionsByTopic(filterByTopic) : undefined, (filterById || filterByApp || filterByClient) ? super.subscriptions(filter) : undefined, (filterById || filterByApp || filterByClient || filterByTopic) ? undefined : super.subscriptions());\n    }\n    /**\n     * Returns the subscription of given topic.\n     */\n    subscriptionsByTopic(topic) {\n        const subscriptions = new Array();\n        Topics.computeWildcardSegmentPermutations(topic, ASTERISK).forEach(permutation => {\n            subscriptions.push(...this._subscriptionsByTopic.get(permutation) || []);\n        });\n        return subscriptions;\n    }\n    /**\n     * Allows observing the number of subscriptions on a topic. It is not allowed to use wildcards in the topic to observe.\n     *\n     * @param  topic - Specifies the topic to observe.\n     * @return An Observable that, when subscribed, emits the current number of subscribers on it. It never completes and\n     *         emits continuously when the number of subscribers changes.\n     */\n    subscriptionCount$(topic) {\n        const illegalTopicError = Topics.validateTopic(topic, { exactTopic: true });\n        if (illegalTopicError) {\n            return throwError(() => illegalTopicError);\n        }\n        return new Observable(observer => {\n            const unsubscribe$ = new Subject();\n            // Emit current subscription count.\n            let count = this.subscriptions({ topic }).length;\n            observer.next(count);\n            // Increment count when matching subscriptions are added.\n            this.register$\n                .pipe(filter$1(subscription => subscription.matches(topic)), takeUntil(unsubscribe$))\n                .subscribe(() => {\n                count++;\n                observer.next(count);\n            });\n            // Decrement count when matching subscriptions are removed.\n            this.unregister$\n                .pipe(filterArray(subscription => subscription.matches(topic)), filter$1(subscriptions => subscriptions.length > 0), takeUntil(unsubscribe$))\n                .subscribe(subscriptions => {\n                count -= subscriptions.length;\n                observer.next(count);\n            });\n            return () => unsubscribe$.next();\n        });\n    }\n}\n/**\n * Represents a subscription on a topic. The topic may contain wildcard segments.\n *\n * @internal\n */\nclass TopicSubscription extends MessageSubscription {\n    constructor(topic, subscriberId, client) {\n        super(subscriberId, client);\n        this.topic = topic;\n    }\n    /**\n     * Tests whether the given topic matches this subscription.\n     */\n    matches(topic) {\n        return topic === this.topic || new TopicMatcher(this.topic).match(topic).matches;\n    }\n}\n\n/**\n * Allows intercepting messages before their publication.\n *\n * An interceptor can reject or modify messages. Multiple interceptors can be registered, forming a chain in which each interceptor\n * is called one by one in registration order.\n *\n * For each message, the platform invokes the intercept method of the first registered interceptor, passing the message and the next\n * handler as arguments. By calling the next handler in the intercept method, message dispatching is continued. If there is no more\n * interceptor in the chain, the message is transported to the receivers, if any. But, if throwing an error in the intercept method,\n * message dispatching is aborted, and the error transported back to the sender.\n *\n * #### Registering Interceptors\n * You register interceptors with the bean manager when the host application starts. Interceptors can be registered only in the host\n * application. They are invoked in registration order.\n *\n * ```ts\n * Beans.register(MessageInterceptor, {useClass: MessageLoggerInterceptor, multi: true});\n * ```\n *\n * #### Filtering Messages for Interception\n * The platform passes all messages to the interceptors, including platform messages vital for its operation.\n * You can use the TopicMatcher to filter messages, allowing you to test whether a topic matches a pattern. The pattern must be a topic,\n * not a regular expression; thus, it must consist of one or more segments, each separated by a forward slash. The pattern can contain\n * wildcard segments. Wildcard segments start with a colon (:), acting act as a placeholder for any segment value.\n *\n * ```ts\n * class ProductValidatorInterceptor implements MessageInterceptor {\n *\n *   private topicMatcher = new TopicMatcher('product/:id');\n *\n *   public intercept(message: TopicMessage, next: Handler<TopicMessage>): Promise<void> {\n *     // Pass messages sent to other topics.\n *     if (!this.topicMatcher.match(message.topic).matches) {\n *       return next.handle(message);\n *     }\n *\n *     // Validate the payload of the message.\n *     if (isValid(message.body)) {\n *       return next.handle(message);\n *     }\n *\n *     throw Error('Message failed schema validation');\n *   }\n * }\n * ```\n *\n * @category Messaging\n */\nclass MessageInterceptor {\n}\n/**\n * Allows intercepting intents before their publication.\n *\n * An interceptor can reject or modify intents. Multiple interceptors can be registered, forming a chain in which each interceptor\n * is called one by one in registration order.\n *\n * For each intent, the platform invokes the intercept method of the first registered interceptor, passing the intent and the next\n * handler as arguments. By calling the next handler in the intercept method, intent dispatching is continued. If there is no more\n * interceptor in the chain, the intent is transported to the receivers, if any. But, if throwing an error in the intercept method,\n * intent dispatching is aborted, and the error transported back to the sender.\n *\n * #### Registering Interceptors\n * You register interceptors with the bean manager when the host application starts. Interceptors can be registered only in the host\n * application. They are invoked in registration order.\n *\n * ```ts\n * Beans.register(IntentInterceptor, {useClass: IntentLoggerInterceptor, multi: true});\n * ```\n *\n * #### Filtering intents for Interception\n * The platform passes all intents to the interceptors. The interceptor must filter intents of interest.\n *\n * @category Messaging\n * @category Intention API\n */\nclass IntentInterceptor {\n}\n/**\n * Assembles the given interceptors to a chain of handlers which are called one after another. The publisher is added as terminal handler.\n *\n * @param interceptors - interceptors to be assembled to a chain\n * @param publisher - terminal handler to publish messages\n * @internal\n */\nfunction chainInterceptors(interceptors, publisher) {\n    const terminalHandler = new class extends Handler {\n        handle(message) {\n            return publisher(message);\n        }\n    };\n    const handlerChain = interceptors.reduceRight((next, interceptor) => new class extends Handler {\n        handle(element) {\n            return interceptor.intercept(element, next);\n        }\n    }, terminalHandler);\n    return new class {\n        interceptAndPublish(element) {\n            return handlerChain.handle(element);\n        }\n    };\n}\n/**\n * Represents a handler in the chain of interceptors.\n *\n * @category Messaging\n */\nclass Handler {\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n// See semantic versioning specification: https://semver.org/#semantic-versioning-specification-semver\nconst SEMVER_REGEX = /(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(-(?<prerelease>.+))?/;\n/*\n * Allows working with semantic versions (semver).\n *\n * ### Why not using `semver` NPM package (as of 2022-04)\n * We no longer depend on the NPM package `semver` as not yet been published as an ECMAScript module (ESM).\n * It is recommended to avoid dependencies on CommonJS modules as bundlers and minifiers may not be able to\n * optimize the application code, resulting in larger bundle size.\n *\n * For example, the Angular compiler would generate the following warning when using `semver`:\n * `Warning: ... depends on 'semver'. CommonJS or AMD dependencies can cause optimization bailouts.`\n *\n * ---\n *\n * The following rules for comparing two semantic versions are copied directly from the semantic versioning specification,\n * which can be found here: https://semver.org/#semantic-versioning-specification-semver\n *\n * ```\n * Precedence refers to how versions are compared to each other when ordered.\n *\n * 1. Precedence MUST be calculated by separating the version into major, minor, patch and pre-release identifiers\n *    in that order (Build metadata does not figure into precedence).\n *\n * 2. Precedence is determined by the first difference when comparing each of these identifiers from left to right as follows:\n *    Major, minor, and patch versions are always compared numerically.\n *    Example: 1.0.0 < 2.0.0 < 2.1.0 < 2.1.1.\n *\n * 3. When major, minor, and patch are equal, a pre-release version has lower precedence than a normal version:\n *    Example: 1.0.0-alpha < 1.0.0.\n *\n * 4. Precedence for two pre-release versions with the same major, minor, and patch version MUST be determined by comparing\n *    each dot separated identifier from left to right until a difference is found as follows:\n *\n *    1. Identifiers consisting of only digits are compared numerically.\n *    2. Identifiers with letters or hyphens are compared lexically in ASCII sort order.\n *    3. Numeric identifiers always have lower precedence than non-numeric identifiers.\n *    4. A larger set of pre-release fields has a higher precedence than a smaller set, if all of the preceding identifiers are equal.\n *\n *   Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.\n * ```\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nclass semver {\n    constructor() {\n    }\n    /**\n     * Return the major version number.\n     */\n    static major(version) {\n        return parseVersion(version ?? '0.0.0').major;\n    }\n    /**\n     * Tests if `version1` is lower than `version2`.\n     *\n     * @return `true` if `version1` is lower than `version2`, or `false` otherwise.\n     *         The values `null` and `undefined` have lower precedence than a normal version.\n     * @throws throws if passed version is not a valid semantic version.\n     */\n    static lt(version1, version2) {\n        return compare(version1, version2) < 0;\n    }\n}\n/**\n * Compares given two versions.\n *\n * @return -1: if `v1` is lower than `v2`\n *          0: if both version are identical\n *         +1: if `v1` is greater than `v2`\n */\nfunction compare(v1, v2) {\n    if (!v1 && v2) {\n        return -1;\n    }\n    if (!v1 && !v2) {\n        return 0;\n    }\n    if (v1 && !v2) {\n        return +1;\n    }\n    const semVer1 = parseVersion(v1);\n    const semVer2 = parseVersion(v2);\n    // Compare major version\n    const majorCompare = Math.sign(semVer1.major - semVer2.major);\n    if (majorCompare !== 0) {\n        return majorCompare;\n    }\n    // Compare minor version\n    const minorCompare = Math.sign(semVer1.minor - semVer2.minor);\n    if (minorCompare !== 0) {\n        return minorCompare;\n    }\n    // Compare patch version\n    const patchCompare = Math.sign(semVer1.patch - semVer2.patch);\n    if (patchCompare !== 0) {\n        return patchCompare;\n    }\n    // Compare pre-release portion.\n    return comparePreRelease(semVer1, semVer2);\n}\n/**\n * Compares the prerelease portion of two versions.\n *\n * @return -1: if `version1` is lower than `version2`\n *          0: if both version are identical\n *         +1: if `version1` is greater than `version2`\n */\nfunction comparePreRelease(v1, v2) {\n    if (v1.preRelease && !v2.preRelease) {\n        return -1;\n    }\n    if (!v1.preRelease && !v2.preRelease) {\n        return 0;\n    }\n    if (!v1.preRelease && v2.preRelease) {\n        return 1;\n    }\n    for (let i = 0; i < Math.max(v1.preRelease.length, v2.preRelease.length); i++) {\n        const identifier1 = v1.preRelease[i];\n        const identifier2 = v2.preRelease[i];\n        if (identifier1 === undefined) {\n            return -1;\n        }\n        if (identifier2 === undefined) {\n            return +1;\n        }\n        if (typeof identifier1 === 'number' && typeof identifier2 === 'string') {\n            return -1;\n        }\n        if (typeof identifier1 === 'string' && typeof identifier2 === 'number') {\n            return +1;\n        }\n        if (identifier1 < identifier2) {\n            return -1;\n        }\n        if (identifier1 > identifier2) {\n            return +1;\n        }\n    }\n    return 0;\n}\n/**\n * Parses given version into a {@link SemVer} instance.\n *\n * @throws throws if passed version is not a valid semantic version.\n */\nfunction parseVersion(version) {\n    const match = version.match(SEMVER_REGEX);\n    if (!match) {\n        throw Error(`[SemVerError] Version '${version}' is not a valid semantic version (semver).`);\n    }\n    return {\n        major: +match.groups['major'],\n        minor: +match.groups['minor'],\n        patch: +match.groups['patch'],\n        preRelease: match.groups['prerelease']?.split('.').map(identifier => {\n            const numericIdentifier = +identifier;\n            return Number.isNaN(numericIdentifier) ? identifier : numericIdentifier;\n        }),\n    };\n}\n\n/**\n * Specifies the interval (in milliseconds) at which the host pings connected clients.\n *\n * By default, if not set, a ping interval of 60s is used.\n *\n * NOTE: Use pure inline comment to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nconst CLIENT_PING_INTERVAL = /*@__PURE__*/ Symbol('CLIENT_PING_INTERVAL');\n/**\n * Specifies the ping timeout (in milliseconds) for unregistering a client.\n *\n * By default, if not set, clients are unregistered if not answering the ping within 10 seconds.\n *\n * NOTE: Use pure inline comment to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nconst CLIENT_PING_TIMEOUT = /*@__PURE__*/ Symbol('CLIENT_PING_TIMEOUT');\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * @internal\n */\nclass ɵClient {\n    constructor(id, window, origin, application, version) {\n        this.id = id;\n        this.window = window;\n        this.origin = origin;\n        this.application = application;\n        this.version = version ?? '0.0.0';\n        this.installLivenessDetector();\n    }\n    /**\n     * Starts performing liveness tests to detect when this client is no longer connected to the host.\n     *\n     * Liveness is detected by sending ping requests at regular intervals.\n     *\n     * A client may fail to disconnect from the broker for a number of reasons:\n     * - The client was disposed without notice, i.e., without receiving the browser's \"unload\" event.\n     * - The browser discarded the \"DISCONNECT\" message because the client window became stale.\n     *   Typically, the browser discards messages for windows that are already closed or if another page\n     *   has been loaded into the window, both indicating a high load on the client during unloading.\n     */\n    installLivenessDetector() {\n        // The client of the host app needs not to be checked for liveness as it is part of the host.\n        if (this.application.symbolicName === Beans.get(APP_IDENTITY)) {\n            return;\n        }\n        // Observable to perform the ping. If the client does not respond, we ping the client again to account for the rare situation where\n        // the computer goes into standby immediately after sending the ping. Upon resumption, the timeout would expire immediately without\n        // the client being able to send the response.\n        const performPing$ = Beans.get(MessageClient).request$(PlatformTopics.ping(this.id))\n            .pipe(timeout(Beans.get(CLIENT_PING_TIMEOUT)), retry(1));\n        this._livenessDetector = interval(Beans.get(CLIENT_PING_INTERVAL))\n            .pipe(switchMap(() => performPing$))\n            .subscribe({\n            error: () => {\n                this.logStaleClientWarning();\n                Beans.get(ClientRegistry).unregisterClient(this);\n            },\n        });\n    }\n    get stale() {\n        return this.window.closed;\n    }\n    dispose() {\n        this._livenessDetector?.unsubscribe();\n    }\n    logStaleClientWarning() {\n        Beans.get(Logger).warn(`[StaleClient] Stale client registration of application '${this.application.symbolicName}' detected.\n       Removing stale registration. Most likely, the client could not disconnect from the broker, for example, because the client was\n       disposed without notice, i.e., without receiving the browser's \"unload\" event, or because the browser discarded the 'DISCONNECT'\n       message. Typically, the browser discards messages for windows that are already closed or if another page has been loaded into the\n       window, both indicating a high load on the client during unloading.`.replace(/\\s+/g, ' '), new LoggingContext(this.application.symbolicName, this.version));\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Central point for managing intent subscriptions.\n *\n * @internal\n */\nclass IntentSubscriptionRegistry extends MessageSubscriptionRegistry {\n    subscriptions(filter) {\n        return super.subscriptions(filter).filter(subscription => filter?.intent ? subscription.matches(filter.intent) : true);\n    }\n}\n/**\n * Represents a subscription for intents matching the passed selector.\n *\n * @internal\n */\nclass IntentSubscription extends MessageSubscription {\n    constructor(selector, subscriberId, client) {\n        super(subscriberId, client);\n        this.selector = selector;\n    }\n    /**\n     * Tests whether the given intent matches this subscription.\n     *\n     * Note that only a type and qualifier check is performed, but not whether the application is eligible\n     * to receive matching intents, i.e., provides a fulfilling capability.\n     */\n    matches(intent) {\n        if (this.selector.type && this.selector.type !== intent.type) {\n            return false;\n        }\n        if (this.selector.qualifier && !new QualifierMatcher(this.selector.qualifier).matches(intent.qualifier)) {\n            return false;\n        }\n        return true;\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides utilities for working with predicates.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nclass Predicates {\n    constructor() {\n    }\n    /**\n     * Negates the given predicate.\n     */\n    static not(predicate) {\n        return (value) => !predicate(value);\n    }\n    /**\n     * Represents a predicate that always evaluates to `true`.\n     */\n    static { this.alwaysTrue = () => true; }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows testing whether params match the param definitions.\n *\n * @internal\n */\nclass ParamMatcher {\n    constructor(definitions) {\n        this._requiredParamDefs = new Array();\n        this._optionalParamDefs = new Array();\n        this._deprecatedParamDefs = new Array();\n        definitions.forEach(paramDef => {\n            if (paramDef.required ?? true) {\n                this._requiredParamDefs.push(paramDef);\n            }\n            else {\n                this._optionalParamDefs.push(paramDef);\n            }\n            if (paramDef.deprecated) {\n                this._deprecatedParamDefs.push(paramDef);\n            }\n        });\n    }\n    /**\n     * Tests if the given params match the param definitions.\n     */\n    match(parameters) {\n        const params = new Map(parameters);\n        const matcherResult = {\n            matches: true,\n            params,\n            missingParams: [],\n            unexpectedParams: [],\n            deprecatedParams: [],\n        };\n        // Test if deprecated params are passed and map them to their substitute, if any.\n        this._deprecatedParamDefs\n            .filter(paramDef => params.has(paramDef.name))\n            .forEach(paramDef => {\n            matcherResult.deprecatedParams.push(paramDef);\n            // Try mapping the deprecated param to its substitute.\n            const deprecation = paramDef.deprecated;\n            if (typeof deprecation === 'object' && deprecation.useInstead) {\n                params.set(deprecation.useInstead, params.get(paramDef.name));\n                params.delete(paramDef.name);\n            }\n        });\n        // Test if required params are passed.\n        this._requiredParamDefs\n            .filter(paramDef => !params.has(paramDef.name) || params.get(paramDef.name) === undefined)\n            .filter(paramDef => !this._deprecatedParamDefs.includes(paramDef))\n            .forEach(paramDef => {\n            matcherResult.matches = false;\n            matcherResult.missingParams.push(paramDef);\n        });\n        // Test if no additional params are passed.\n        Array.from(params.keys())\n            .filter(param => !this._requiredParamDefs.some(paramDef => paramDef.name === param) && !this._optionalParamDefs.some(paramDef => paramDef.name === param))\n            .forEach(param => {\n            matcherResult.matches = false;\n            matcherResult.unexpectedParams.push(param);\n        });\n        if (!matcherResult.matches) {\n            matcherResult.params = undefined;\n        }\n        return matcherResult;\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides utilities for working with intent params.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nclass IntentParams {\n    constructor() {\n    }\n    /**\n     * Validates params of given intent.\n     *\n     * @throws if the message contains invalid params.\n     */\n    static validateParams(intentMessage) {\n        const { intent, capability } = intentMessage;\n        const sender = intentMessage.headers.get(MessageHeaders.AppSymbolicName);\n        intent.params = new Map(intent.params);\n        // Remove params with `undefined` as value.\n        intent.params.forEach((value, key) => {\n            if (value === undefined) {\n                intent.params.delete(key);\n            }\n        });\n        // Test params passed with the intent to match expected params as declared on the capability.\n        const paramMatcherResult = new ParamMatcher(capability.params || []).match(intent.params);\n        if (!paramMatcherResult.matches) {\n            const error = toParamValidationError(paramMatcherResult, intent);\n            throw Error(`[IntentParamValidationError] ${error}`);\n        }\n        // Warn about the usage of deprecated params.\n        if (paramMatcherResult.deprecatedParams.length) {\n            paramMatcherResult.deprecatedParams.forEach(deprecatedParam => {\n                const warning = toDeprecatedParamWarning(deprecatedParam, { appSymbolicName: sender });\n                Beans.get(Logger).warn(`[DEPRECATION][4EAC5956] ${warning}`, new LoggingContext(sender), intent);\n            });\n            // Use the matcher's parameters to have deprecated params mapped to their replacement.\n            intent.params = paramMatcherResult.params;\n        }\n    }\n}\nfunction toParamValidationError(paramsMatcherResult, intent) {\n    const intentStringified = JSON.stringify(intent, (key, value) => (key === 'params') ? undefined : value);\n    const missingParams = paramsMatcherResult.missingParams.map(param => param.name);\n    const unexpectedParams = paramsMatcherResult.unexpectedParams;\n    return `Params of intent do not match expected params of capability. The intent must have required params and not have additional params. [intent=${intentStringified}, missingParams=[${missingParams}], unexpectedParams=[${unexpectedParams}]].`;\n}\nfunction toDeprecatedParamWarning(param, metadata) {\n    const deprecation = param.deprecated;\n    const useInstead = typeof deprecation === 'object' && deprecation.useInstead || undefined;\n    const message = typeof deprecation === 'object' && deprecation.message || undefined;\n    return new Array()\n        .concat(`Application '${metadata.appSymbolicName}' passes a deprecated parameter in the intent: '${param.name}'.`)\n        .concat(useInstead ? `Pass parameter '${useInstead}' instead.` : [])\n        .concat(message || [])\n        .join(' ');\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * The broker is responsible for receiving all messages, filtering the messages, determining who is\n * subscribed to each message, and sending the message to these subscribed clients.\n *\n * The broker allows topic-based and intent-based messaging and supports retained messages.\n *\n * When the broker receives a message from a client, the broker identifies the sending client using the {@Window}\n * contained in the {@link MessageEvent}. The user agent sets the window, which cannot be tampered by the client.\n * However, when the client unloads, the window is not set because already been destroyed. Then, the broker identifies\n * the client using the unique client id. In both cases, the broker checks the origin of the message to match the\n * origin of the registered application.\n *\n * The broker processes client connect requests in runlevel 1 or higher. Message dispatching is enabled in runlevel 2.\n * Prior requests are buffered until entering the respective runlevel.\n *\n * @internal\n */\nclass MessageBroker {\n    constructor() {\n        this._destroy$ = new Subject();\n        this._clientRegistry = Beans.get(ClientRegistry);\n        this._topicSubscriptionRegistry = Beans.get(TopicSubscriptionRegistry);\n        this._intentSubscriptionRegistry = Beans.get(IntentSubscriptionRegistry);\n        this._retainedMessageStore = new Map();\n        this._retainedIntentStore = new Map();\n        this._applicationRegistry = Beans.get(ApplicationRegistry);\n        this._manifestRegistry = Beans.get(ManifestRegistry);\n        // Construct a stream of messages sent by clients.\n        this._clientMessage$ = fromEvent(window, 'message')\n            .pipe(filterByTransport(MessagingTransport.ClientToBroker), filterByChannel(MessagingChannel.Intent, MessagingChannel.Topic, MessagingChannel.TopicSubscribe, MessagingChannel.TopicUnsubscribe, MessagingChannel.IntentSubscribe, MessagingChannel.IntentUnsubscribe), bufferUntil(Beans.whenRunlevel(Runlevel.Two)), checkOriginTrusted(), catchErrorAndRetry(), share());\n        // Install client connect listeners.\n        this.installClientConnectListener();\n        this.installClientDisconnectListener();\n        // Install message handling.\n        this.installMessageDispatcher();\n        this.installTopicSubscribeListener();\n        this.installTopicUnsubscribeListener();\n        this.installTopicSubscriberCountObserver();\n        this.sendRetainedMessageOnSubscribe();\n        // Install intent handling.\n        this.installIntentDispatcher();\n        this.installIntentSubscribeListener();\n        this.installIntentUnsubscribeListener();\n        this.sendRetainedIntentOnSubscribe();\n        this.deleteRetainedIntentOnCapabilityUnregister();\n        // Assemble message interceptors to a chain of handlers which are called one after another. The publisher is added as terminal handler.\n        this._messagePublisher = this.createMessagePublisher();\n        this._intentPublisher = this.createIntentPublisher();\n    }\n    init() {\n        return Promise.resolve();\n    }\n    installClientConnectListener() {\n        fromEvent(window, 'message')\n            .pipe(filterByTransport(MessagingTransport.ClientToBroker), filterByChannel(MessagingChannel.ClientConnect), bufferUntil(Beans.whenRunlevel(Runlevel.One)), catchErrorAndRetry(), takeUntil(this._destroy$))\n            .subscribe((event) => runSafe(() => {\n            // Ignore stale CONNECT request, e.g. if the origin window has been closed or a page with a different origin has been loaded.\n            if (!event.source) {\n                Beans.get(Logger).debug(`[CONNECT] Ignoring stale connect request from \"${event.origin}\".`);\n                return;\n            }\n            const eventSource = event.source;\n            const envelope = event.data;\n            const clientAppName = envelope.message.headers.get(MessageHeaders.AppSymbolicName);\n            const clientMessageTarget = new MessageTarget(event);\n            const replyTo = envelope.message.headers.get(MessageHeaders.ReplyTo);\n            if (!clientAppName) {\n                const warning = `Client connect attempt rejected: Bad request. [origin='${event.origin}']`;\n                Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n                sendTopicMessage(clientMessageTarget, {\n                    topic: replyTo,\n                    body: { returnCode: 'refused:bad-request', returnMessage: `[ClientConnectError] ${warning}` },\n                    headers: new Map(),\n                });\n                return;\n            }\n            const application = this._applicationRegistry.getApplication(clientAppName, { orElse: null });\n            if (!application) {\n                const warning = `Client connect attempt rejected: Unknown client. [app='${clientAppName}']`;\n                Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n                sendTopicMessage(clientMessageTarget, {\n                    topic: replyTo,\n                    body: { returnCode: 'refused:rejected', returnMessage: `[ClientConnectError] ${warning}` },\n                    headers: new Map(),\n                });\n                return;\n            }\n            if (!application.allowedMessageOrigins.has(event.origin)) {\n                const warning = `Client connect attempt blocked: Wrong origin [actual='${event.origin}', expected='${Array.from(application.allowedMessageOrigins)}', app='${application.symbolicName}']`;\n                Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n                sendTopicMessage(clientMessageTarget, {\n                    topic: replyTo,\n                    body: { returnCode: 'refused:blocked', returnMessage: `[ClientConnectError] ${warning}` },\n                    headers: new Map(),\n                });\n                return;\n            }\n            // Check if the client is already connected. If already connected, do nothing. A client can potentially initiate multiple connect requests, for example,\n            // when not receiving connect confirmation in time.\n            const currentClient = this._clientRegistry.getByWindow(eventSource);\n            if (currentClient && currentClient.origin === event.origin && currentClient.application.symbolicName === application.symbolicName) {\n                sendTopicMessage(currentClient, {\n                    topic: replyTo,\n                    body: {\n                        returnCode: 'accepted',\n                        clientId: currentClient.id,\n                    },\n                    headers: new Map(),\n                });\n                return;\n            }\n            const client = new ɵClient(UUID.randomUUID(), eventSource, event.origin, application, envelope.message.headers.get(MessageHeaders.Version));\n            this._clientRegistry.registerClient(client);\n            // Check if the client is compatible with the platform version of the host.\n            if (semver.major(client.version) !== semver.major(Beans.get(ɵVERSION))) {\n                Beans.get(Logger).warn(`[VersionMismatch] Application '${application.symbolicName}' uses a different major version of the @scion/microfrontend-platform than the host application, which may not be compatible. Please upgrade @scion/microfrontend-platform of application '${application.symbolicName}' from version '${(client.version)}' to version '${(Beans.get(ɵVERSION))}'.`, new LoggingContext(application.symbolicName, client.version));\n            }\n            sendTopicMessage(client, {\n                topic: replyTo,\n                body: {\n                    returnCode: 'accepted',\n                    clientId: client.id,\n                },\n                headers: new Map(),\n            });\n        }));\n    }\n    /**\n     * Listens for client disconnect requests.\n     */\n    installClientDisconnectListener() {\n        fromEvent(window, 'message')\n            .pipe(filterByTransport(MessagingTransport.ClientToBroker), filterByChannel(MessagingChannel.ClientDisconnect), bufferUntil(Beans.whenRunlevel(Runlevel.One)), checkOriginTrusted(), catchErrorAndRetry(), takeUntil(this._destroy$))\n            .subscribe((event) => runSafe(() => {\n            const client = getSendingClient(event);\n            this._clientRegistry.unregisterClient(client);\n        }));\n    }\n    /**\n     * Replies to requests to observe the number of subscribers on a topic.\n     */\n    installTopicSubscriberCountObserver() {\n        Beans.get(MessageClient).observe$(PlatformTopics.RequestSubscriberCount)\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(request => runSafe(() => {\n            const topic = request.body;\n            const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n            const unsubscribe$ = this._topicSubscriptionRegistry.subscriptionCount$(replyTo).pipe(filter(count => count === 0));\n            this._topicSubscriptionRegistry.subscriptionCount$(topic)\n                .pipe(takeUntil(merge(this._destroy$, unsubscribe$)))\n                .subscribe({\n                next: count => Beans.get(MessageClient).publish(replyTo, count),\n                error: error => Beans.get(MessageClient).publish(replyTo, stringifyError(error), { headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR) }),\n            });\n        }));\n    }\n    /**\n     * Dispatches topic messages to subscribed clients.\n     */\n    installMessageDispatcher() {\n        this._clientMessage$\n            .pipe(filterByChannel(MessagingChannel.Topic), takeUntil(this._destroy$))\n            .subscribe((event) => runSafe(async () => {\n            const client = getSendingClient(event);\n            const message = event.data.message;\n            const messageId = message.headers.get(MessageHeaders.MessageId);\n            const illegalTopicError = Topics.validateTopic(message.topic, { exactTopic: true });\n            if (illegalTopicError) {\n                sendDeliveryStatusError(client, messageId, illegalTopicError);\n                return;\n            }\n            // If a retained message without payload, remove any stored retained message on that topic, if any.\n            if (message.retain && !isRequest(message) && message.body === undefined) {\n                Maps.removeListValue(this._retainedMessageStore, message.topic, Predicates.not(isRequest));\n                sendDeliveryStatusSuccess(client, messageId);\n                return;\n            }\n            try {\n                // If a request of a request-response communication, create a subscription for the requestor to receive replies.\n                const requestorReplySubscription = this.subscribeForRepliesIfRequest(message, client);\n                // Ensure the message header 'ɵSUBSCRIBER_ID' to be removed; is set in request-response communication by the client gateway.\n                message.headers.delete(MessageHeaders.ɵSubscriberId);\n                // Dispatch the message.\n                await this._messagePublisher.interceptAndPublish(message);\n                // If a retained message or request, store it for late subscribers.\n                this.storeMessageIfRetained(message, requestorReplySubscription);\n                sendDeliveryStatusSuccess(client, messageId);\n            }\n            catch (error) {\n                sendDeliveryStatusError(client, messageId, error);\n            }\n        }));\n    }\n    /**\n     * Dispatches intents to qualified clients.\n     */\n    installIntentDispatcher() {\n        this._clientMessage$\n            .pipe(filterByChannel(MessagingChannel.Intent), takeUntil(this._destroy$))\n            .subscribe((event) => runSafe(async () => {\n            const client = getSendingClient(event);\n            const message = event.data.message;\n            const messageId = message.headers.get(MessageHeaders.MessageId);\n            if (!message.intent) {\n                const error = '[MessagingError] Missing message property: intent';\n                sendDeliveryStatusError(client, messageId, error);\n                return;\n            }\n            if (!message.intent.type) {\n                const error = '[MessagingError] Missing message property: type';\n                sendDeliveryStatusError(client, messageId, error);\n                return;\n            }\n            const illegalQualifierError = Qualifiers.validateQualifier(message.intent.qualifier, { exactQualifier: true });\n            if (illegalQualifierError) {\n                sendDeliveryStatusError(client, messageId, illegalQualifierError);\n                return;\n            }\n            if (!this._manifestRegistry.hasIntention(message.intent, client.application.symbolicName)) {\n                const error = `[NotQualifiedError] Application '${client.application.symbolicName}' is not qualified to publish intents of the type '${message.intent.type}' and qualifier '${JSON.stringify(message.intent.qualifier || {})}'. Ensure to have listed the intention in the application manifest.`;\n                sendDeliveryStatusError(client, messageId, error);\n                return;\n            }\n            // Find capabilities fulfilling the intent, or send an error otherwise.\n            const capabilities = this._manifestRegistry.resolveCapabilitiesByIntent(message.intent, client.application.symbolicName);\n            if (capabilities.length === 0) {\n                const error = `[NullProviderError] No application found to provide a capability of the type '${message.intent.type}' and qualifiers '${JSON.stringify(message.intent.qualifier || {})}'. Maybe, the capability is not public API or the providing application not available.`;\n                sendDeliveryStatusError(client, messageId, error);\n                return;\n            }\n            // If a retained message without payload, remove any stored retained message for the resolved capabilities.\n            if (message.retain && !isRequest(message) && message.body === undefined) {\n                capabilities.forEach(capability => {\n                    Maps.removeListValue(this._retainedIntentStore, capability.metadata.id, Predicates.not(isRequest));\n                    sendDeliveryStatusSuccess(client, messageId);\n                });\n                return;\n            }\n            try {\n                // If a request of a request-response communication, create a subscription for the requestor to receive replies.\n                const requestorReplySubscription = this.subscribeForRepliesIfRequest(message, client);\n                // Ensure the message header 'ɵSUBSCRIBER_ID' to be removed; is set in request-response communication by the client gateway.\n                message.headers.delete(MessageHeaders.ɵSubscriberId);\n                // Dispatch the message.\n                await Promise.all(capabilities\n                    // Associate capability with the intent.\n                    .map(capability => ({ ...message, capability }))\n                    .map(async (message) => {\n                    // Validate intent params.\n                    IntentParams.validateParams(message);\n                    // Publish the intent.\n                    await this._intentPublisher.interceptAndPublish(message);\n                    // If a retained message or request, store it for late subscribers.\n                    this.storeIntentIfRetained(message, requestorReplySubscription);\n                }));\n                sendDeliveryStatusSuccess(client, messageId);\n            }\n            catch (error) {\n                sendDeliveryStatusError(client, messageId, error);\n            }\n        }));\n    }\n    /**\n     * Installs a listener that sends retained messages to new subscribers.\n     */\n    sendRetainedMessageOnSubscribe() {\n        this._topicSubscriptionRegistry.register$\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(subscription => runSafe(() => {\n            Array.from(this._retainedMessageStore.values())\n                .flat()\n                .filter(retainedMessage => subscription.matches(retainedMessage.topic))\n                .forEach(retainedMessage => this._messagePublisher.interceptAndPublish({\n                ...retainedMessage,\n                headers: new Map(retainedMessage.headers).set(MessageHeaders.ɵSubscriberId, subscription.subscriberId),\n            }));\n        }));\n    }\n    /**\n     * Installs a listener that sends retained intents to new subscribers.\n     */\n    sendRetainedIntentOnSubscribe() {\n        this._intentSubscriptionRegistry.register$\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(subscription => runSafe(() => {\n            Array.from(this._retainedIntentStore.values())\n                .flat()\n                .filter(retainedMessage => subscription.client.application.symbolicName === retainedMessage.capability.metadata.appSymbolicName)\n                .filter(retainedMessage => subscription.matches(retainedMessage.intent))\n                .forEach(retainedMessage => this._intentPublisher.interceptAndPublish({\n                ...retainedMessage,\n                headers: new Map(retainedMessage.headers).set(MessageHeaders.ɵSubscriberId, subscription.subscriberId),\n            }));\n        }));\n    }\n    /**\n     * Installs a listener that removes retained intent(s) when associated capability is removed.\n     */\n    deleteRetainedIntentOnCapabilityUnregister() {\n        this._manifestRegistry.capabilityUnregister$\n            .pipe(mergeMap(capabilities => from(capabilities)), takeUntil(this._destroy$))\n            .subscribe(capability => runSafe(() => {\n            Maps.removeListValue(this._retainedIntentStore, capability.metadata.id, Predicates.alwaysTrue);\n        }));\n    }\n    /**\n     * Listens for topic subscription requests.\n     */\n    installTopicSubscribeListener() {\n        this._clientMessage$\n            .pipe(filterByChannel(MessagingChannel.TopicSubscribe), takeUntil(this._destroy$))\n            .subscribe((event) => runSafe(() => {\n            const client = getSendingClient(event);\n            const envelope = event.data;\n            const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n            const topic = envelope.message.topic;\n            const illegalTopicError = Topics.validateTopic(topic, { exactTopic: false });\n            if (illegalTopicError) {\n                sendDeliveryStatusError(client, messageId, illegalTopicError);\n                return;\n            }\n            try {\n                const subscriberId = Defined.orElseThrow(envelope.message.subscriberId, () => Error('[TopicSubscribeError] Missing property: subscriberId'));\n                this._topicSubscriptionRegistry.register(new TopicSubscription(topic, subscriberId, client));\n                sendDeliveryStatusSuccess(client, messageId);\n            }\n            catch (error) {\n                sendDeliveryStatusError(client, messageId, error);\n            }\n        }));\n    }\n    /**\n     * Listens for topic unsubscription requests.\n     */\n    installTopicUnsubscribeListener() {\n        this._clientMessage$\n            .pipe(filterByChannel(MessagingChannel.TopicUnsubscribe), takeUntil(this._destroy$))\n            .subscribe((event) => runSafe(() => {\n            const client = getSendingClient(event);\n            const envelope = event.data;\n            const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n            try {\n                const subscriberId = Defined.orElseThrow(envelope.message.subscriberId, () => Error('[TopicUnsubscribeError] Missing property: subscriberId'));\n                this._topicSubscriptionRegistry.unregister({ subscriberId });\n                sendDeliveryStatusSuccess(client, messageId);\n            }\n            catch (error) {\n                sendDeliveryStatusError(client, messageId, error);\n            }\n        }));\n    }\n    /**\n     * Listens for intent subscription requests.\n     */\n    installIntentSubscribeListener() {\n        this._clientMessage$\n            .pipe(filterByChannel(MessagingChannel.IntentSubscribe), takeUntil(this._destroy$))\n            .subscribe((event) => runSafe(() => {\n            const client = getSendingClient(event);\n            const envelope = event.data;\n            const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n            const illegalQualifierError = Qualifiers.validateQualifier(envelope.message.selector?.qualifier, { exactQualifier: false });\n            if (illegalQualifierError) {\n                sendDeliveryStatusError(client, messageId, illegalQualifierError);\n                return;\n            }\n            try {\n                const subscriberId = Defined.orElseThrow(envelope.message.subscriberId, () => Error('[IntentSubscribeError] Missing property: subscriberId'));\n                this._intentSubscriptionRegistry.register(new IntentSubscription(envelope.message.selector || {}, subscriberId, client));\n                sendDeliveryStatusSuccess(client, messageId);\n            }\n            catch (error) {\n                sendDeliveryStatusError(client, messageId, error);\n            }\n        }));\n    }\n    /**\n     * Listens for intent unsubscription requests.\n     */\n    installIntentUnsubscribeListener() {\n        this._clientMessage$\n            .pipe(filterByChannel(MessagingChannel.IntentUnsubscribe), takeUntil(this._destroy$))\n            .subscribe((event) => runSafe(() => {\n            const client = getSendingClient(event);\n            const envelope = event.data;\n            const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n            try {\n                const subscriberId = Defined.orElseThrow(envelope.message.subscriberId, () => Error('[IntentUnsubscribeError] Missing property: subscriberId'));\n                this._intentSubscriptionRegistry.unregister({ subscriberId });\n                sendDeliveryStatusSuccess(client, messageId);\n            }\n            catch (error) {\n                sendDeliveryStatusError(client, messageId, error);\n            }\n        }));\n    }\n    /**\n     * Creates the interceptor chain to intercept message publishing. The publisher is added as terminal handler.\n     */\n    createMessagePublisher() {\n        return chainInterceptors(Beans.all(MessageInterceptor), async (message) => {\n            const subscribers = this._topicSubscriptionRegistry.subscriptions({\n                subscriberId: message.headers.get(MessageHeaders.ɵSubscriberId),\n                topic: message.topic,\n            });\n            // If request-reply communication, reply with an error if no subscriber is registered to answer the request.\n            if (isRequest(message) && !message.retain && !subscribers.length) {\n                throw Error(`[MessagingError] No subscriber registered to answer the request [topic=${message.topic}]`);\n            }\n            subscribers.forEach(subscriber => runSafe(() => sendTopicMessage(subscriber, message)));\n        });\n    }\n    /**\n     * Creates the interceptor chain to intercept intent publishing. The publisher is added as terminal handler.\n     */\n    createIntentPublisher() {\n        return chainInterceptors(Beans.all(IntentInterceptor), async (message) => {\n            const subscribers = this._intentSubscriptionRegistry.subscriptions({\n                subscriberId: message.headers.get(MessageHeaders.ɵSubscriberId),\n                appSymbolicName: message.capability.metadata.appSymbolicName,\n                intent: message.intent,\n            });\n            // If request-reply communication, reply with an error if no subscriber is registered to answer the intent.\n            if (isRequest(message) && !message.retain && !subscribers.length) {\n                throw Error(`[MessagingError] No subscriber registered to answer the intent [intent=${JSON.stringify(message.intent)}]`);\n            }\n            subscribers.forEach(subscriber => runSafe(() => sendIntentMessage(subscriber, message)));\n        });\n    }\n    /**\n     * Create a subscription for the sender to receive replies if request-response communication.\n     */\n    subscribeForRepliesIfRequest(message, sender) {\n        if (!isRequest(message)) {\n            return null;\n        }\n        const subscriberId = Defined.orElseThrow(message.headers.get(MessageHeaders.ɵSubscriberId), () => Error('[MessagingError] Missing message header: subscriberId'));\n        const replyTo = message.headers.get(MessageHeaders.ReplyTo);\n        const subscription = new TopicSubscription(replyTo, subscriberId, sender);\n        this._topicSubscriptionRegistry.register(subscription);\n        return subscription;\n    }\n    /**\n     * Stores the message if retained.\n     *\n     * Unlike a regular message, a retained message remains in the broker and is delivered to new subscribers, even if they subscribe\n     * after the request has been sent. The broker stores one retained message per topic, i.e., a later sent retained message will replace\n     * a previously sent retained message. This, however, does not apply to retained requests in request-response communication.\n     * Retained requests are NEVER replaced and remain in the broker until the requestor unsubscribes.\n     *\n     * @param message - Message to be stored if retained.\n     * @param requestorReplySubscription - Subscription of the requestor to receive replies; only set in request-response communication.\n     */\n    storeMessageIfRetained(message, requestorReplySubscription) {\n        if (!message.retain) {\n            return;\n        }\n        // If a retained request, store it. Retained requests are not replaced and are retained until the requestor unsubscribes.\n        if (isRequest(message)) {\n            Defined.orElseThrow(requestorReplySubscription, () => Error('[InternalMessagingError] An unexpected error occurred. Expected subscription not to be null.'));\n            Maps.addListValue(this._retainedMessageStore, message.topic, message);\n            requestorReplySubscription.whenUnsubscribe.then(() => Maps.removeListValue(this._retainedMessageStore, message.topic, message));\n        }\n        // If a retained message (not a request), replace any previously stored retained message on that topic, if any.\n        else {\n            Maps.removeListValue(this._retainedMessageStore, message.topic, Predicates.not(isRequest));\n            Maps.addListValue(this._retainedMessageStore, message.topic, message);\n        }\n    }\n    storeIntentIfRetained(message, requestorReplySubscription) {\n        if (!message.retain) {\n            return;\n        }\n        const capabilityId = message.capability.metadata.id;\n        // If a retained request, store it. Retained requests are not replaced and are retained until the requestor unsubscribes.\n        if (isRequest(message)) {\n            Defined.orElseThrow(requestorReplySubscription, () => Error('[InternalMessagingError] An unexpected error occurred. Expected subscription not to be null.'));\n            Maps.addListValue(this._retainedIntentStore, capabilityId, message);\n            requestorReplySubscription.whenUnsubscribe.then(() => Maps.removeListValue(this._retainedIntentStore, capabilityId, message));\n        }\n        // If a retained message (i.e. not a request), replace any previously stored retained message for that capability, if any.\n        else {\n            Maps.removeListValue(this._retainedIntentStore, capabilityId, Predicates.not(isRequest));\n            Maps.addListValue(this._retainedIntentStore, capabilityId, message);\n        }\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Resolves to the client that sent the passed message.\n *\n * Throws an error if the client could not be resolved.\n */\nfunction getSendingClient(event) {\n    const clientId = event.data.message.headers.get(MessageHeaders.ClientId);\n    const client = Beans.get(ClientRegistry).getByClientId(clientId);\n    if (!client) {\n        throw Error(`[NullClientError] Client not found in client registry. [clientId=${clientId}]`);\n    }\n    return client;\n}\n/**\n * Passes only messages originating from trusted and registered clients.\n */\nfunction checkOriginTrusted() {\n    return mergeMap((event) => {\n        const envelope = event.data;\n        const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n        const clientId = envelope.message.headers.get(MessageHeaders.ClientId);\n        const client = Beans.get(ClientRegistry).getByClientId(clientId);\n        // Assert client registration.\n        if (!client) {\n            if (event.source !== null) {\n                const sender = new MessageTarget(event);\n                const error = `[MessagingError] Message rejected: Client not registered [origin=${event.origin}]`;\n                sendDeliveryStatusError(sender, messageId, error);\n            }\n            return EMPTY;\n        }\n        // Assert source origin.\n        if (event.origin !== client.origin) {\n            if (event.source !== null) {\n                const sender = new MessageTarget(event);\n                const error = `[MessagingError] Message rejected: Wrong origin [actual=${event.origin}, expected=${client.origin}, application=${client.application.symbolicName}]`;\n                sendDeliveryStatusError(sender, messageId, error);\n            }\n            return EMPTY;\n        }\n        // Assert the source window unless it is `null`, that is, it has been closed or a page from another origin has been loaded into the window.\n        // We still process requests of stale clients to enable proper disconnection, such as delivery of messages published by the client during shutdown.\n        if (event.source !== null && event.source !== client.window) {\n            const sender = new MessageTarget(event);\n            const error = `[MessagingError] Message rejected: Wrong window [origin=${event.origin}]`;\n            sendDeliveryStatusError(sender, messageId, error);\n            return EMPTY;\n        }\n        return of(event);\n    });\n}\nfunction sendDeliveryStatusSuccess(target, topic) {\n    sendTopicMessage(target, {\n        topic: topic,\n        body: { ok: true },\n        headers: new Map(),\n    });\n}\nfunction sendDeliveryStatusError(target, topic, error) {\n    sendTopicMessage(target, {\n        topic: topic,\n        body: { ok: false, details: stringifyError(error) },\n        headers: new Map(),\n    });\n}\nfunction sendTopicMessage(target, message) {\n    const envelope = {\n        transport: MessagingTransport.BrokerToClient,\n        channel: MessagingChannel.Topic,\n        message: {\n            ...message,\n            params: new Map(message.params),\n            headers: new Map(message.headers)\n                .set(MessageHeaders.MessageId, message.headers.get(MessageHeaders.MessageId) ?? UUID.randomUUID())\n                .set(MessageHeaders.AppSymbolicName, message.headers.get(MessageHeaders.AppSymbolicName) ?? Beans.get(APP_IDENTITY)),\n        },\n    };\n    if (target instanceof MessageTarget) {\n        !target.window.closed && target.window.postMessage(envelope, target.origin);\n    }\n    else if (target instanceof TopicSubscription) {\n        const subscription = target;\n        const client = subscription.client;\n        envelope.message.headers.set(MessageHeaders.ɵSubscriberId, target.subscriberId);\n        envelope.message.params = new TopicMatcher(subscription.topic).match(message.topic).params;\n        !client.stale && client.window.postMessage(envelope, client.origin);\n    }\n    else {\n        !target.stale && target.window.postMessage(envelope, target.origin);\n    }\n}\nfunction sendIntentMessage(subscription, message) {\n    const envelope = {\n        transport: MessagingTransport.BrokerToClient,\n        channel: MessagingChannel.Intent,\n        message: {\n            ...message,\n            headers: new Map(message.headers)\n                .set(MessageHeaders.ɵSubscriberId, subscription.subscriberId)\n                .set(MessageHeaders.MessageId, message.headers.get(MessageHeaders.MessageId) ?? UUID.randomUUID())\n                .set(MessageHeaders.AppSymbolicName, message.headers.get(MessageHeaders.AppSymbolicName) ?? Beans.get(APP_IDENTITY)),\n        },\n    };\n    const client = subscription.client;\n    !client.stale && client.window.postMessage(envelope, client.origin);\n}\n/**\n * Catches and logs errors, and resubscribes to the source observable.\n */\nfunction catchErrorAndRetry() {\n    return catchError((error, caught) => {\n        Beans.get(Logger).error('[UnexpectedError] An unexpected error occurred.', error);\n        return caught;\n    });\n}\n/**\n * Tests whether given message is a request of a request-response communication.\n * That is a message that contains the {@link MessageHeaders#ReplyTo} message header.\n */\nfunction isRequest(message) {\n    return message.headers.has(MessageHeaders.ReplyTo);\n}\n/**\n * Represents the target where to send a message.\n */\nclass MessageTarget {\n    constructor(event) {\n        this.window = event.source;\n        this.origin = event.origin;\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows browsing the catalog of capabilities and managing the capabilities of the application.\n *\n * The app can browse only capabilities which are visible to it, i.e., for which the app has declared an intention and\n * which are also publicly available. Capabilities that the app provides itself are always visible to the app.\n *\n * The app can also provide new capabilities or remove existing ones. If the *Intention Registration API* is enabled\n * for the app, the app can also manage its intentions, which, however, is strongly discouraged. Instead, apps should\n * declare the required functionality in their manifests using wildcard intentions.\n *\n * @category Intention API\n */\nclass ManifestService {\n    constructor() {\n        this._applications = [];\n    }\n    async init() {\n        const messagingDisabled = Beans.get(BrokerGateway) instanceof NullBrokerGateway;\n        if (messagingDisabled) {\n            return;\n        }\n        // Wait until obtained registered applications so that they can be accessed synchronously by the application via `ManifestService#applications`.\n        const applications$ = Beans.get(MessageClient).observe$(PlatformTopics.Applications);\n        this._applications = await firstValueFrom(applications$.pipe(mapToBody(), mapToApplication()));\n    }\n    /**\n     * Applications installed in the platform.\n     */\n    get applications() {\n        return this._applications;\n    }\n    /**\n     * Allows browsing the catalog of capabilities that match the given filter.\n     *\n     * <strong>\n     * You can only browse capabilities that are visible to your application, that is, capabilities that you provide yourself or that are\n     * publicly available and for which you have declared an intention in your manifest.\n     * </strong>\n     *\n     * @param  filter - Control which capabilities to browse. If no or an empty filter is given, all capabilities visible to the requesting\n     *         app are returned. Specified filter criteria are \"AND\"ed together.\\\n     *         <p>\n     *         If specifying a qualifier filter, the capabilities must match that filter exactly. The filter supports the asterisk wildcard\n     *         to match any value, e.g., `{property: '*'}`, or partial matching to find capabilities with at least the specified qualifier\n     *         properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n     * @return An Observable that, when subscribed, emits the requested capabilities.\n     *         It never completes and emits continuously when fulfilling capabilities are registered or unregistered.\n     */\n    lookupCapabilities$(filter) {\n        return Beans.get(MessageClient).request$(PlatformTopics.LookupCapabilities, filter)\n            .pipe(mapToBody());\n    }\n    /**\n     * Allows browsing the catalog of intentions that match the given filter.\n     *\n     * @param  filter - Control which intentions to return. If no or an empty filter is given, no filtering takes place. Specified filter\n     *         criteria are \"AND\"ed together.\\\n     *         <p>\n     *         If specifying a qualifier filter, the intentions must match that filter exactly. The filter supports the asterisk wildcard\n     *         to match any value, e.g., `{property: '*'}`, or partial matching to find intentions with at least the specified qualifier\n     *         properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n     * @return An Observable that, when subscribed, emits the requested intentions.\n     *         It never completes and emits continuously when matching intentions are registered or unregistered.\n     */\n    lookupIntentions$(filter) {\n        return Beans.get(MessageClient).request$(PlatformTopics.LookupIntentions, filter)\n            .pipe(mapToBody());\n    }\n    /**\n     * Registers given capability. If the capability has public visibility, other applications can browse the capability and interact with it.\n     *\n     * @return A Promise that resolves to the identity of the registered capability,\n     *         or that rejects if the registration failed.\n     */\n    registerCapability(capability) {\n        const register$ = Beans.get(MessageClient).request$(PlatformTopics.RegisterCapability, capability);\n        return lastValueFrom(register$.pipe(mapToBody()));\n    }\n    /**\n     * Unregisters capabilities matching the given filter.\n     *\n     * <strong>You can only unregister capabilities of your application.</strong>\n     *\n     * @param  filter - Control which capabilities to unregister by specifying filter criteria which are \"AND\"ed together. If not passing a filter,\n     *         all capabilities of the requesting app are unregistered.\\\n     *         <p>\n     *         If specifying a qualifier filter, the capabilities to unregister must match that filter exactly. The filter supports the asterisk\n     *         wildcard to match any value, e.g., `{property: '*'}`, or partial matching to unregister capabilities with at least the specified\n     *         qualifier properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n     *         Note that specifying a symbolic app name in the filter has no effect.\n     * @return A Promise that resolves when unregistered the capability,\n     *         or that rejects if the unregistration failed.\n     */\n    unregisterCapabilities(filter) {\n        return new Promise((resolve, reject) => {\n            Beans.get(MessageClient).request$(PlatformTopics.UnregisterCapabilities, filter).subscribe({\n                error: reject,\n                complete: resolve,\n            });\n        });\n    }\n    /**\n     * Registers the given intention, allowing the application to interact with public capabilities matching the intention.\n     *\n     * The intention can match multiple capabilities by using the asterisk wildcard in the qualifier.\n     *\n     * <strong>This operation requires that the 'Intention Registration API' is enabled for your application.</strong>\n     *\n     * @return A Promise that resolves to the identity of the registered intention,\n     *         or that rejects if the registration failed.\n     */\n    registerIntention(intention) {\n        const register$ = Beans.get(MessageClient).request$(PlatformTopics.RegisterIntention, intention);\n        return lastValueFrom(register$.pipe(mapToBody()));\n    }\n    /**\n     * Unregisters intentions matching the given filter.\n     *\n     * <strong>You can only unregister intentions of your application.</strong>\n     * <strong>This operation requires that the 'Intention Registration API' is enabled for your application.</strong>\n     *\n     * @param  filter - Control which intentions to unregister by specifying filter criteria which are \"AND\"ed together. If not passing a filter,\n     *         all intentions of the requesting app are unregistered.\\\n     *         <p>\n     *         If specifying a qualifier filter, the intentions to unregister must match that filter exactly. The filter supports the asterisk\n     *         wildcard to match any value, e.g., `{property: '*'}`, or partial matching to unregister intentions with at least the specified\n     *         qualifier properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n     *         Note that specifying a symbolic app name in the filter has no effect.\n     * @return A Promise that resolves when unregistered the intention,\n     *         or that rejects if the unregistration failed.\n     */\n    unregisterIntentions(filter) {\n        return new Promise((resolve, reject) => {\n            Beans.get(MessageClient).request$(PlatformTopics.UnregisterIntentions, filter).subscribe({\n                error: reject,\n                complete: resolve,\n            });\n        });\n    }\n    /**\n     * Tests if the specified micro app is qualified to interact with the given capability.\n     *\n     * A micro app is qualified if it meets either of the following criteria:\n     * - The capability is provided by the application itself.\n     * - The capability is provided by another application, but only if the capability is publicly visible (1),\n     *   and the micro app has declared an intention (2) to use the capability.\n     *\n     * (1) Unless 'scope check' is disabled for the specified micro app.\n     * (2) Unless 'intention check' is disabled for the specified micro app.\n     *\n     * @param appSymbolicName - Specifies the symbolic name of the application under test.\n     * @param qualifiedFor\n     *        @property capabilityId - Identifies the capability to test.\n     * @return An Observable that, when subscribed, emits the qualification of specified application.\n     *         It never completes and emits continuously when capabilites or intentions are registered or unregistered.\n     */\n    isApplicationQualified$(appSymbolicName, qualifiedFor) {\n        const request = { appSymbolicName, capabilityId: qualifiedFor.capabilityId };\n        return Beans.get(MessageClient).request$(PlatformTopics.IsApplicationQualifiedForCapability, request)\n            .pipe(mapToBody());\n    }\n}\nfunction mapToApplication() {\n    return mapArray(application => {\n        return {\n            ...application,\n            platformVersion: firstValueFrom(Beans.get(MessageClient).request$(PlatformTopics.platformVersion(application.symbolicName)).pipe(mapToBody())),\n        };\n    });\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Context lookup options header to control if values should be collected.\n *\n * @internal\n */\nconst CONTEXT_LOOKUP_OPTIONS = 'ɵCONTEXT_LOOKUP_OPTIONS';\n/**\n * Provides the API to lookup context related information.\n *\n * @internal\n */\nvar Contexts;\n(function (Contexts) {\n    /**\n     * Returns the request-reply topic to lookup the names of associated context values in the context tree.\n     */\n    function contextTreeNamesLookupTopic() {\n        return 'contexttree/names';\n    }\n    Contexts.contextTreeNamesLookupTopic = contextTreeNamesLookupTopic;\n    /**\n     * Returns the request-reply topic to get notified when some context changes at any level in the context tree.\n     */\n    function contextTreeChangeTopic() {\n        return 'contexttree/change';\n    }\n    Contexts.contextTreeChangeTopic = contextTreeChangeTopic;\n    /**\n     * Computes the request-reply topic to lookup a context value from embedded router outlet web content.\n     */\n    function contextValueLookupTopic(name) {\n        return `context/${name}`;\n    }\n    Contexts.contextValueLookupTopic = contextValueLookupTopic;\n    /**\n     * Creates a message envelope to request the context value associated with the given name.\n     *\n     * @param name - The name of the value to lookup.\n     * @param replyTo - The 'replyTo' topic where to send the reply.\n     * @param options - Options to control context lookup.\n     * @param values - The collected values passed to the parent context during a context lookup.\n     *                 Used to collect all values associated with the context name in the context hierarchy.\n     */\n    function newContextValueLookupRequest(name, replyTo, options, values) {\n        return {\n            transport: MessagingTransport.MicrofrontendToOutlet,\n            channel: MessagingChannel.Topic,\n            message: {\n                topic: contextValueLookupTopic(encodeURIComponent(name)),\n                body: values || [],\n                headers: new Map()\n                    .set(MessageHeaders.MessageId, UUID.randomUUID())\n                    .set(MessageHeaders.ReplyTo, replyTo)\n                    .set(CONTEXT_LOOKUP_OPTIONS, options),\n            },\n        };\n    }\n    Contexts.newContextValueLookupRequest = newContextValueLookupRequest;\n    /**\n     * Creates a message envelope to lookup the names of associated context values in the context tree.\n     *\n     * @param replyTo - The 'replyTo' topic where to send the reply.\n     * @param names - The names of the current context to be combined with the names of the parent contexts.\n     */\n    function newContextTreeNamesLookupRequest(replyTo, names) {\n        return {\n            transport: MessagingTransport.MicrofrontendToOutlet,\n            channel: MessagingChannel.Topic,\n            message: {\n                topic: Contexts.contextTreeNamesLookupTopic(),\n                body: names || new Set(),\n                headers: new Map()\n                    .set(MessageHeaders.MessageId, UUID.randomUUID())\n                    .set(MessageHeaders.ReplyTo, replyTo),\n            },\n        };\n    }\n    Contexts.newContextTreeNamesLookupRequest = newContextTreeNamesLookupRequest;\n    /**\n     * Creates a message envelope to get notified when some context changes at any level in the context tree.\n     *\n     * @param replyTo - The 'replyTo' topic where to send the reply.\n     */\n    function newContextTreeObserveRequest(replyTo) {\n        return {\n            transport: MessagingTransport.MicrofrontendToOutlet,\n            channel: MessagingChannel.Topic,\n            message: {\n                topic: Contexts.contextTreeChangeTopic(),\n                headers: new Map()\n                    .set(MessageHeaders.MessageId, UUID.randomUUID())\n                    .set(MessageHeaders.ReplyTo, replyTo),\n            },\n        };\n    }\n    Contexts.newContextTreeObserveRequest = newContextTreeObserveRequest;\n    /**\n     * Event emitted by the root context when subscribed to it.\n     */\n    Contexts.RootContextSubscribeEvent = 'RootContextSubscribeEvent';\n})(Contexts || (Contexts = {}));\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides a context to the {@link SciRouterOutletElement} allowing the outlet to associate values with that context.\n * For embedded outlet web content, it allows looking up context names and values.\n *\n * A context is a hierarchical key-value map which are linked together to form a tree structure. When a key is not found\n * in a context, the lookup is retried on the parent, repeating until either a value is found or the root of the tree has\n * been reached.\n *\n * @internal\n */\nclass RouterOutletContextProvider {\n    constructor(iframe) {\n        this._entries$ = new BehaviorSubject(new Map());\n        this._entryChange$ = new Subject();\n        this._outletDisconnect$ = new Subject();\n        // Listen for requests from embedded web content of the outlet.\n        this._microfrontendRequest$ = fromEvent(window, 'message')\n            .pipe(filter(event => event.source === iframe.contentWindow), filterByTransport(MessagingTransport.MicrofrontendToOutlet), filterByChannel(MessagingChannel.Topic), share());\n    }\n    /**\n     * Sets a value to be associated with a given name in this context.\n     *\n     * @param name - Specifies the name to store a value for.\n     * @param value - Specifies the value to be stored. It can be any object which\n     *        is serializable with the structured clone algorithm.\n     */\n    set(name, value) {\n        this._entries$.next(new Map(this._entries$.getValue()).set(name, value));\n        this._entryChange$.next({ name, value, type: 'set' });\n    }\n    /**\n     * Removes the given name and any corresponding value from this context.\n     *\n     * Removal does not affect parent contexts, so it is possible that a subsequent call to {@link ContextService#observe$} with the same name\n     * will return a non-null result, due to a value being stored in a parent context.\n     *\n     * @param  name - Specifies the name to remove.\n     * @return `true` if the value in the outlet context has been removed successfully; otherwise `false`.\n     */\n    remove(name) {\n        const entries = new Map(this._entries$.getValue());\n        if (entries.delete(name)) {\n            this._entries$.next(entries);\n            this._entryChange$.next({ name, type: 'remove' });\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns an Observable that emits the values registered in this outlet. Values inherited from parent contexts are not returned.\n     * The Observable never completes, and emits when a context value is added or removed.\n     */\n    get entries$() {\n        return this._entries$;\n    }\n    /**\n     * Method invoked when the outlet is mounted to the DOM.\n     */\n    onOutletMount() {\n        this.installContextValueLookupListener();\n        this.installContextTreeNamesLookupListener();\n        this.installContextTreeObserveListener();\n    }\n    /**\n     * Method invoked when the outlet is removed from the DOM.\n     */\n    onOutletUnmount() {\n        this._outletDisconnect$.next();\n    }\n    /**\n     * Installs a listener to reply to context value lookup requests from embedded content.\n     * When a key is not found in this context, the lookup is passed on to the parent context.\n     */\n    installContextValueLookupListener() {\n        this._microfrontendRequest$\n            .pipe(filterByTopicChannel(Contexts.contextValueLookupTopic(':name')), pluckMessage(), takeUntil(this._outletDisconnect$))\n            .subscribe((lookupRequest) => runSafe(() => {\n            const encodedName = new TopicMatcher(Contexts.contextValueLookupTopic(':name')).match(lookupRequest.topic).params.get('name');\n            // The name has to be decoded here because it was encoded in `newContextValueLookupRequest` where the topic was created.\n            const name = decodeURIComponent(encodedName);\n            const replyTo = lookupRequest.headers.get(MessageHeaders.ReplyTo);\n            const options = lookupRequest.headers.get(CONTEXT_LOOKUP_OPTIONS);\n            const entries = this._entries$.getValue();\n            if (options?.collect) {\n                const collectedValues = lookupRequest.body || [];\n                if (entries.has(name) && entries.get(name) !== undefined) {\n                    collectedValues.push(entries.get(name));\n                }\n                if (Beans.get(IS_PLATFORM_HOST)) {\n                    // Reply with the collected context values.\n                    Beans.get(MessageClient).publish(replyTo, collectedValues, { headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK) });\n                }\n                else {\n                    // Pass on the lookup request to the parent context.\n                    window.parent.postMessage(Contexts.newContextValueLookupRequest(name, replyTo, options, collectedValues), '*');\n                }\n            }\n            else {\n                if (entries.has(name) && entries.get(name) !== undefined) {\n                    // Reply with the found context value.\n                    Beans.get(MessageClient).publish(replyTo, entries.get(name), { headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK) });\n                }\n                else if (Beans.get(IS_PLATFORM_HOST)) {\n                    // No context value found; the root of the context tree has been reached; reply with `NOT_FOUND` status code.\n                    Beans.get(MessageClient).publish(replyTo, undefined, { headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.NOT_FOUND) });\n                }\n                else {\n                    // Pass on the lookup request to the parent context.\n                    window.parent.postMessage(Contexts.newContextValueLookupRequest(name, replyTo, options), '*');\n                }\n            }\n        }));\n    }\n    /**\n     * Installs a listener to reply to context names lookup requests from embedded content.\n     *\n     * The context names are accumulated in the lookup request and passed on to the parent context.\n     * When the root context is reached, the request is finally answered with all collected context names.\n     */\n    installContextTreeNamesLookupListener() {\n        this._microfrontendRequest$\n            .pipe(filterByTopicChannel(Contexts.contextTreeNamesLookupTopic()), pluckMessage(), takeUntil(this._outletDisconnect$))\n            .subscribe((lookupRequest) => runSafe(() => {\n            const replyTo = lookupRequest.headers.get(MessageHeaders.ReplyTo);\n            const entries = this._entries$.getValue();\n            const collectedNames = new Set([...entries.keys(), ...(lookupRequest.body || [])]);\n            if (Beans.get(IS_PLATFORM_HOST)) {\n                // Answer the request when reaching the root of the context tree.\n                Beans.get(MessageClient).publish(replyTo, collectedNames, { headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK) });\n            }\n            else {\n                // Pass on the lookup request to the parent context.\n                window.parent.postMessage(Contexts.newContextTreeNamesLookupRequest(replyTo, collectedNames), '*');\n            }\n        }));\n    }\n    /**\n     * Installs a listener to publish a context change event when this context changes.\n     *\n     * For every request a replier is installed which emits when this context changes. It stops replying\n     * when the requestor unsubscribes. The request is also passed on to the parent context.\n     */\n    installContextTreeObserveListener() {\n        this._microfrontendRequest$\n            .pipe(filterByTopicChannel(Contexts.contextTreeChangeTopic()), pluckMessage(), takeUntil(this._outletDisconnect$))\n            .subscribe((observeRequest) => runSafe(() => {\n            const replyTo = observeRequest.headers.get(MessageHeaders.ReplyTo);\n            this._entryChange$\n                .pipe(takeUntilUnsubscribe(replyTo), takeUntil(this._outletDisconnect$))\n                .subscribe((event) => {\n                Beans.get(MessageClient).publish(replyTo, event);\n            });\n            if (Beans.get(IS_PLATFORM_HOST)) {\n                // Notify that the subscriber subscribed to the root context.\n                Beans.get(MessageClient).publish(replyTo, Contexts.RootContextSubscribeEvent);\n            }\n            else {\n                // Pass on the registration request to the parent context.\n                window.parent.postMessage(Contexts.newContextTreeObserveRequest(replyTo), '*');\n            }\n        }));\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Assigns a URL to the iframe of a {@link SciRouterOutletElement `<sci-router-outlet>`}.\n *\n * @category Routing\n */\nclass RouterOutletUrlAssigner {\n    /**\n     * Assigns a URL to the iframe of a {@link SciRouterOutletElement `<sci-router-outlet>`}.\n     *\n     * @param iframe - Iframe for which to set the URL.\n     * @param currNavigation - Current navigation.\n     * @param prevNavigation - Previous navigation, if any.\n     */\n    assign(iframe, currNavigation, prevNavigation) {\n        // Patch the URL to force Chrome to load the content of specified URL.\n        const patchedUrl = this.patchUrl(currNavigation.url, prevNavigation?.url);\n        if (currNavigation.pushStateToSessionHistoryStack) {\n            iframe.contentWindow.location.assign(patchedUrl);\n        }\n        else {\n            iframe.contentWindow.location.replace(patchedUrl);\n        }\n    }\n    /**\n     * Patches the URL to force Chrome to load the content of the given URL into an iframe.\n     *\n     * #### Problem:\n     * Chrome browser does not load the content of a nested iframe if already loaded a document from the same origin and path in a parent iframe.\n     * The problem does not occur if the URL contains query parameters. Also, the hash fragment of the URL does not matter.\n     *\n     * This problem could not be observed in Firefox and Edge.\n     *\n     * #### Motivation:\n     * If using hash-based routing, the microfrontends of an application are served under the same origin and path, and routing is based on the URL hash fragment only.\n     * This Chrome issue would prevent a microfrontend from embedding other microfrontends of its application.\n     *\n     * #### Fix:\n     * If the URL does not contain a query parameter, an arbitrary query parameter is appended to the URL to force Chrome to load the content.\n     * The name and value of the query param do not matter. However, it is crucial always to use the same param to allow the browser to cache the request.\n     *\n     * The only exception to appending a query param is when replacing an outlet's content with content from the same app. Then, the browser already loaded\n     * the application. Otherwise, if appending a query param, the application would load anew.\n     *\n     * #### Alternative fix:\n     * An alternative (but partial) fix would be to initialize the iframe with a `null` source. This fix is partial because only working when setting the initial URL\n     * of the iframe and not when changing it. Also, it has the drawback of temporarily loading the main entry point of the outlet host.\n     *\n     * @param currUrl - Specifies the URL to be patched.\n     * @param prevUrl - Specifies the previous URL, if any.\n     *\n     * @see https://stackoverflow.com/q/36985731\n     * @internal\n     */\n    patchUrl(currUrl, prevUrl) {\n        const patchedUrl = runSafe(() => {\n            const prevURL = prevUrl ? Urls.newUrl(prevUrl) : undefined;\n            const currURL = Urls.newUrl(currUrl);\n            // Do not apply the fix for the \"about\" and \"blob\" protocol.\n            if (currURL.protocol === 'about:' || currURL.protocol === 'blob:') {\n                return currUrl;\n            }\n            // Do not apply the fix for top-level iframes.\n            if (window === Beans.get(ɵWINDOW_TOP)) {\n                return currUrl;\n            }\n            // Do not apply the fix if the URL already contains query params.\n            if (currURL.search) {\n                return currUrl;\n            }\n            // Do not apply the fix when navigating within the same application using hash-based routing.\n            if (prevURL?.origin === currURL.origin && prevURL?.pathname === currURL.pathname) {\n                return currUrl;\n            }\n            // Add an arbitrary but fixed query param to the URL.\n            const patchedURL = Urls.newUrl(currUrl);\n            patchedURL.searchParams.set('_', '');\n            return patchedURL.toString();\n        });\n        return patchedUrl ?? currUrl;\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Describes a user interaction with the keyboard.\n *\n * @internal\n */\nclass Keystroke {\n    constructor(eventType, key, modifiers, flags) {\n        this.eventType = eventType;\n        const parts = [];\n        parts.push(eventType);\n        if (modifiers) {\n            modifiers.control && parts.push('control');\n            modifiers.alt && parts.push('alt');\n            modifiers.shift && parts.push('shift');\n            modifiers.meta && parts.push('meta');\n        }\n        parts.push(key.toLowerCase());\n        this.parts = parts.join('.');\n        this.flags = flags;\n    }\n    withFlags(flags) {\n        this.flags = flags;\n        return this;\n    }\n    /**\n     * Creates a {@link Keystroke} from the given keyboard event.\n     */\n    static fromEvent(event) {\n        if (!event) {\n            throw Error('[KeystrokeParseError] Cannot create the keystroke from `null` or `undefined`.');\n        }\n        return new Keystroke(event.type, escapeKeyboardEventKey(event.key), { control: event.ctrlKey, shift: event.shiftKey, alt: event.altKey, meta: event.metaKey });\n    }\n    /**\n     * Parses the textual representation of a keystroke into a {@link Keystroke} object.\n     *\n     * keydown.control.alt.enter{preventDefault=true}\n     * |<--1->|<----2---->|<-3->|<--------4--------->|\n     *\n     * 1: Event type\n     * 2: Modifier part(s) (optional)\n     * 3. Key as defined in https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\n     *    Two keys are an exception to the value of the {@link KeyboardEvent#key} property: dot and space.\n     * 4. flags (optional)\n     */\n    static fromString(value) {\n        if (!value) {\n            throw Error('[KeystrokeParseError] Cannot parse the keystroke from \\'null\\' or \\'undefined\\'.');\n        }\n        const flags = parseFlags(value);\n        if (flags !== undefined) {\n            value = value.substring(0, value.indexOf('{'));\n        }\n        const parts = value.split('.');\n        if (parts.length < 2) {\n            throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Requires at least the event type and keyboard key, and optionally some modifiers. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n        }\n        const eventType = parts[0];\n        if (eventType !== 'keydown' && eventType !== 'keyup') {\n            throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Unsupported event type. Supported event types are: 'keydown' or 'keyup'. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n        }\n        const key = parts[parts.length - 1];\n        if (!key || new Set().add('alt').add('shift').add('control').add('meta').has(key.toLowerCase())) {\n            throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. The keyboard key must be the last part. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n        }\n        const modifiers = new Set(parts.slice(1, -1));\n        const keystroke = new Keystroke(eventType, key, { control: modifiers.delete('control'), shift: modifiers.delete('shift'), alt: modifiers.delete('alt'), meta: modifiers.delete('meta') }, flags);\n        if (modifiers.size > 0) {\n            throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Illegal modifier found. Supported modifiers are: 'alt', 'shift', 'control' or 'meta'. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n        }\n        return keystroke;\n    }\n}\nfunction escapeKeyboardEventKey(key) {\n    switch (key) {\n        case '.':\n            return 'dot';\n        case ' ':\n            return 'space';\n        default:\n            return key;\n    }\n}\nfunction parseFlags(keystroke) {\n    const flagsStr = keystroke.match(/{(?<flagsDictionary>.*)}/)?.groups['flagsDictionary'] ?? null;\n    if (flagsStr === null) {\n        return undefined;\n    }\n    if (flagsStr === '') {\n        return {};\n    }\n    return flagsStr\n        .split(';')\n        .map(flag => flag.split('='))\n        .reduce((flags, [flagName, flagValue]) => {\n        switch (flagName) {\n            case 'preventDefault':\n                return { ...flags, preventDefault: flagValue === 'true' };\n            default: {\n                Beans.get(Logger).warn(`[KeystrokeParseError] Ignore unkown flag '${keystroke}'. Supported flags are: 'preventDefault'.`);\n                return flags;\n            }\n        }\n    }, {});\n}\n\n/**\n * Routing message header to control if to push a state to the browser's session history stack.\n *\n * @internal\n */\nconst PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER = 'ɵPUSH_STATE_TO_SESSION_HISTORY_STACK';\n/**\n * Routing message header to control if to show a splash until the microfrontend signals readiness.\n *\n * @internal\n */\nconst SHOW_SPLASH_MESSAGE_HEADER = 'ɵSHOW_SPLASH';\n/**\n * Routing message header that contains the microfrontend capability when navigating via intent.\n *\n * @internal\n */\nconst CAPABILITY_ID_MESSAGE_HEADER = 'ɵCAPABILITY_ID';\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nconst ELEMENT_NAME = 'sci-router-outlet';\nconst ATTR_NAME = 'name';\nconst ATTR_SCROLLABLE = 'scrollable';\nconst ATTR_KEYSTROKES = 'keystrokes';\nconst HTML_TEMPLATE = `\n  <style>\n    :host {\n      display: block;\n      overflow: hidden;\n      position: relative; /* positioning context for splash */\n    }\n\n    iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n      margin: 0;\n    }\n    \n    /* Ensure transparent router-outlet if empty.\n     *\n     * An iframe is transparent only if the embedded content has the same color scheme as the embedding document.\n     * An empty router-outlet loads the 'about:blank' page. This page has the user's preferred OS color scheme,\n     * which may be different from the application's color scheme, making the iframe opaque. Therefore, we hide\n     * the iframe to make the router-outlet transparent again.\n     *\n     * More information about iframe transparency:\n     * - https://github.com/w3c/csswg-drafts/issues/4772#issuecomment-591553929\n     * - https://fvsch.com/transparent-iframes\n     */\n    :host-context(.sci-empty) iframe {\n      display: none;\n    }\n\n    div[part=\"splash\"] {\n      position: absolute;\n      inset: 0;\n    }\n  </style>\n  <iframe src=\"about:blank\" scrolling=\"yes\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n  \n  <template id=\"splash\">\n    <div part=\"splash\" class=\"e2e-splash\">\n      <slot></slot>\n    </div>  \n  </template>\n`;\n/**\n * Web component that allows embedding web content using the {@link OutletRouter}. The content is displayed inside\n * an iframe to achieve the highest possible level of isolation between the microfrontends via a separate browsing context.\n *\n * To embed a microfrontend, place this custom HMTL element `<sci-router-outlet></sci-router-outlet>` in an HTML\n * template, give it a name via its `name` attribute and navigate via {@link OutletRouter} to instruct the outlet to\n * load the microfrontend.\n *\n * 1. Place the web component in an HTML template:\n * ```html\n * <sci-router-outlet name=\"detail\"></sci-router-outlet>\n * ```\n *\n * 2. Control the outlet's content:\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {outlet: 'detail'});\n * ```\n *\n * Outlets can be nested, allowing a microfrontend to embed another microfrontend. There is no limit to the number of\n * nested outlets. However, be aware that nested content is loaded cascaded, that is, only loaded once its parent content\n * finished loading.\n *\n * When adding the outlet to the DOM, the outlet displays the last URL routed for it, if any. When repeating routing for\n * an outlet, its content is replaced.\n *\n * ***\n *\n * ### Outlet Context\n * The router outlet allows associating contextual data, which then is available to embedded content at any nesting level.\n * Data must be serializable with the structured clone algorithm. Embedded content can look up contextual data using the\n * {@link ContextService}. Typically, contextual data is  used to provide microfrontends with information about their embedding\n * environment. Looking up contextual data requires the embedded microfrontend to be a registered micro application.\n *\n * Each outlet spans a new context. A context is like a `Map` with key-value entries. Contexts form a hierarchical tree structure.\n * When looking up a value and if the value is not found in the current context, the lookup is retried on the parent context,\n * repeating until either a value is found, or the root of the context tree has been reached.\n *\n * You can set contextual data as following:\n * ```ts\n *  const outlet: SciRouterOutletElement = document.querySelector('sci-router-outlet');\n *  outlet.setContextValue('key', 'value');\n * ```\n *\n * Embedded content can look up contextual data as following:\n * ```ts\n * Beans.get(ContextService).observe$('key').subscribe(value => {\n *   ...\n * });\n * ```\n *\n * ### Outlet size\n * The router outlet can adapt its size to the preferred size of its embedded content. The preferred size is set by the microfrontend embedded\n * in the router outlet, which, therefore, requires the embedded microfrontend to be connected to the platform.\n *\n * Embedded content can report its preferred size using the {@link PreferredSizeService}, causing the outlet to adapt its size.\n *\n * ### Keystroke Bubbling\n * The router outlet allows the registration of keystrokes, instructing embedded content at any nesting level to propagate corresponding keyboard events\n * to this outlet. The outlet dispatches keyboard events for registered keystrokes as synthetic keyboard events via its event dispatcher. They bubble up\n * the DOM tree like regular events. Propagated events are of the original type, meaning that when the user presses a key on the keyboard, a `keydown`\n * keyboard event is dispatched, or a `keyup` event when releasing a key, respectively. Keystroke bubbling requires the embedded microfrontend to be a\n * registered micro application.\n *\n * A keystroke is a `string` that has several parts, each separated with a dot. The first part specifies the event type (`keydown` or `keyup`), followed\n * by optional modifier part(s) (`alt`, `shift`, `control`, `meta`, or a combination thereof) and with the keyboard key as the last part. The key is a\n * case-insensitive value of the `KeyboardEvent.key` property. Two keys are an exception to the value of the `KeyboardEvent.key` property: `dot` and `space`.\n * For a complete list of valid key values, see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\n *\n * You can register keystrokes via the `keystrokes` attribute in the HTML template, or via the `keystrokes` property on the DOM\n * element. If setting keystrokes via the HTML template, multiple keystrokes are separated by a comma.\n *\n * If you want to prevent the default action of a keystroke, add the `preventDefault` flag. If not specifying the flag, the default action won't be prevented.\n *\n * HTML template:\n * ```html\n * <sci-router-outlet keystrokes=\"keydown.control.alt.enter{preventDefault=true},keydown.escape,keydown.control.space\"></sci-router-outlet>\n * ```\n *\n * Alternatively, you can register keystrokes on the DOM element as shown below.\n *\n * TypeScript:\n * ```ts\n *  const outlet: SciRouterOutletElement = document.querySelector('sci-router-outlet');\n *  outlet.keystrokes = [\n *      'keydown.control.alt.enter{preventDefault=true}',\n *      'keydown.escape',\n *      'keydown.control.space'\n *  ];\n * ```\n *\n * ### Scrollable Content\n * By default, page scrolling is enabled for the embedded content, displaying a scrollbar when it overflows. If disabled, overflowing content is clipped,\n * unless the embedded content uses a viewport, or reports its preferred size to the outlet.\n *\n * The below code snippet illustrates how to disable page scrolling for the embedded content.\n * ```html\n * <sci-router-outlet scrollable=\"false\"></sci-router-outlet>\n * ```\n *\n * ### Router Outlet Events\n *\n * The router outlet emits the following events as custom DOM events. You can attach an event listener declaratively in the HTML template using the `onevent`\n * handler syntax, or programmatically using the `addEventListener` method.\n *\n * - `activate`\n *   The `activate` custom DOM event is fired when a microfrontend is mounted. It contains the URL of the mounted microfrontend in its `details` property as `string`\n *   value. The microfrontend may not be fully loaded yet.\n * - `deactivate`\n *   The `deactivate` custom DOM event is fired when a microfrontend is about to be unmounted. It contains the URL of the unmounted microfrontend in its `details`\n *   property as `string` value.\n * - `focuswithin`\n *   The `focuswithin` custom DOM event is fired when the microfrontend loaded into the outlet, or any of its child microfrontends, has gained or lost focus.\n *   It contains the current focus-within state in its `details` property as a `boolean` value: `true` if focus was gained, or `false` if focus was lost.\n *   The event does not bubble up through the DOM. After gaining focus, the event is not triggered again until embedded content loses focus completely, i.e.,\n *   when focus does not remain in the embedded content at any nesting level. This event behaves like the `:focus-within` CSS pseudo-class but operates across iframe\n *   boundaries. For example, it can be useful when implementing overlays that close upon focus loss.\n *\n *   Note that SCION can only monitor microfrontends of registered micro apps that are connected to the platform.\n *\n * Usage:\n *\n * ```html\n * <sci-router-outlet onfocuswithin=\"onFocusWithin()\"></sci-router-outlet>\n * ```\n *\n * For an Angular application, it would look as follows:\n * ```html\n * <sci-router-outlet (focuswithin)=\"onFocusWithin($event)\"></sci-router-outlet>\n * ```\n *\n * ### Splash\n *\n * Loading and bootstrapping a microfrontend can take some time, at worst, only displaying content once initialized.\n *\n * To indicate the loading of a microfrontend, the navigator can instruct the router outlet to display a splash until the microfrontend signals readiness.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('path/to/microfrontend', {showSplash: true});\n * ```\n *\n * The splash is the markup between the opening and closing tags of the router outlet element.\n *\n * ```html\n * <sci-router-outlet>\n *   Loading...\n * </sci-router-outlet>\n * ```\n *\n * The splash is displayed until the embedded microfrontend signals readiness.\n *\n * ```ts\n * MicrofrontendPlatformClient.signalReady();\n * ```\n *\n * #### Layouting the Splash\n *\n * To lay out the content of the splash use the pseudo-element selector `::part(splash)`.\n *\n * Example of centering splash content in a CSS grid container:\n * ```css\n * sci-router-outlet::part(splash) {\n *   display: grid;\n *   place-content: center;\n * }\n * ```\n *\n * ### Web component\n * The outlet is registered as a custom element in the browser's custom element registry as defined by the Web Components standard.\n * See https://developer.mozilla.org/en-US/docs/Web/Web_Components for more information.\n *\n * ### Miscellaneous\n * If no content is routed for display in the router outlet, the CSS class `sci-empty` is added to the outlet. An outlet will not display content if\n * either there has not yet been any navigation for the outlet or the outlet content has been cleared.\n *\n * @see {@link OutletRouter}\n * @see {@link PreferredSizeService}\n * @see {@link ContextService}\n *\n * @category Routing\n */\nclass SciRouterOutletElement extends HTMLElement {\n    constructor() {\n        super();\n        this._disconnect$ = new Subject();\n        this._uid = UUID.randomUUID();\n        this._empty$ = new BehaviorSubject(true);\n        this._outletName$ = new BehaviorSubject(PRIMARY_OUTLET);\n        this._shadowRoot = this.attachShadow({ mode: 'open' });\n        this._shadowRoot.innerHTML = HTML_TEMPLATE.trim();\n        this._iframe = this._shadowRoot.querySelector('iframe');\n        this._contextProvider = new RouterOutletContextProvider(this._iframe);\n        this._splash = new Splash(this._shadowRoot, this._iframe);\n        this.empty$ = this._empty$.pipe(distinctUntilChanged());\n    }\n    /**\n     * Sets the name of this outlet.\n     *\n     * By giving the outlet a name, you can reference the outlet when navigating. The name is optional;\n     * if not set, it defaults to {@link PRIMARY_OUTLET primary}\n     */\n    set name(name) {\n        if (name) {\n            this.setAttribute(ATTR_NAME, name);\n        }\n        else {\n            this.removeAttribute(ATTR_NAME);\n        }\n    }\n    /**\n     * Returns the name of this outlet.\n     */\n    get name() {\n        return this.getAttribute(ATTR_NAME) ?? undefined;\n    }\n    /**\n     * Specifies whether to enable or disable native page scrolling in the embedded document.\n     *\n     * By default, page scrolling is enabled for the embedded content, displaying a scrollbar when it overflows.\n     * If disabled, overflowing content is clipped, unless the embedded content uses a viewport, or reports\n     * its preferred size to the outlet.\n     */\n    set scrollable(scrollable) {\n        if (scrollable) {\n            this.setAttribute(ATTR_SCROLLABLE, 'true');\n        }\n        else {\n            this.removeAttribute(ATTR_SCROLLABLE);\n        }\n    }\n    /**\n     * Returns whether the embedded document is natively page scrollable.\n     */\n    get scrollable() {\n        return this.getAttribute(ATTR_SCROLLABLE) === 'true';\n    }\n    /**\n     * Instructs embedded content at any nesting level to propagate keyboard events to this outlet. The outlet dispatches keyboard events for registered\n     * keystrokes as synthetic keyboard events via its event dispatcher. They bubble up the DOM tree like regular events. Propagated events are of the\n     * original type, meaning that when the user presses a key on the keyboard, a `keydown` keyboard event is dispatched, or a `keyup` event when releasing\n     * a key, respectively.\n     *\n     * @param keystrokes - A keystroke is specified as a string that has several parts, each separated with a dot. The first part specifies the event type\n     *                   (`keydown` or `keyup`), followed by optional modifier part(s) (`alt`, `shift`, `control`, `meta`, or a combination thereof) and\n     *                   with the keyboard key as the last part. The key is a case-insensitive value of the `KeyboardEvent#key` property. For a complete\n     *                   list of valid key values, see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values. Two keys are an\n     *                   exception to the value of the `KeyboardEvent#key` property: `dot` and `space`.\n     *                   <br>\n     *                   To prevent the default action of a keystroke, the `preventDefault` flag can be added.\n     *                   <br>\n     *                   Examples: `keydown.control.z{preventDefault=true}`, `keydown.escape`, `keyup.enter`, `keydown.control.alt.enter`, `keydown.control.space`.\n     */\n    set keystrokes(keystrokes) {\n        if (keystrokes && keystrokes.length) {\n            this.setAttribute(ATTR_KEYSTROKES, KeystrokesAttributeUtil.join(keystrokes));\n        }\n        else {\n            this.removeAttribute(ATTR_KEYSTROKES);\n        }\n    }\n    /**\n     * Returns the keystrokes which to bubble across the iframe boundaries.\n     */\n    get keystrokes() {\n        return KeystrokesAttributeUtil.split(this.getAttribute(ATTR_KEYSTROKES));\n    }\n    /**\n     * Makes contextual data available to embedded content. Embedded content can lookup contextual data using the {@link ContextService}.\n     * Contextual data must be serializable with the structured clone algorithm.\n     */\n    setContextValue(name, value) {\n        this._contextProvider.set(name, value);\n    }\n    /**\n     * Removes data registered under the given key from the context.\n     *\n     * Removal does not affect parent contexts, so it is possible that a subsequent call to {@link ContextService.observe$} with the same name\n     * will return a non-null result, due to a value being stored in a parent context.\n     *\n     * @return `true` if removed the value from the outlet context; otherwise `false`.\n     */\n    removeContextValue(name) {\n        return this._contextProvider.remove(name);\n    }\n    /**\n     * Returns an Observable that emits the context of this outlet. Context values inherited from parent contexts are not returned.\n     * The Observable never completes, and emits when a context value is added to or removed from the outlet context.\n     */\n    get contextValues$() {\n        return this._contextProvider.entries$;\n    }\n    /**\n     * Resets the preferred size which may have been set by the embedded content.\n     */\n    resetPreferredSize() {\n        Beans.get(MessageClient).publish(RouterOutlets.preferredSizeTopic(this._uid), null);\n    }\n    /**\n     * Returns the preferred size, if any, or `undefined` otherwise.\n     */\n    get preferredSize() {\n        const preferredSize = {\n            minWidth: this.style.minWidth || undefined,\n            width: this.style.width || undefined,\n            maxWidth: this.style.maxWidth || undefined,\n            minHeight: this.style.minHeight || undefined,\n            height: this.style.height || undefined,\n            maxHeight: this.style.maxHeight || undefined,\n        };\n        if (Object.values(preferredSize).some(Boolean)) {\n            return preferredSize;\n        }\n        return undefined;\n    }\n    /**\n     * Returns the reference to the iframe of this outlet.\n     */\n    get iframe() {\n        return this._iframe;\n    }\n    installOutletContext() {\n        this._outletName$\n            .pipe(takeUntil(this._disconnect$))\n            .subscribe((name) => {\n            const outletContext = { name: name, uid: this._uid };\n            this.iframe.name = name;\n            this.setContextValue(OUTLET_CONTEXT, outletContext);\n        });\n    }\n    installOutletUrlListener() {\n        this._outletName$\n            .pipe(switchMap$1(outlet => outletNavigate$(outlet).pipe(startWith(null))), // start with a `null` navigation in case no navigation took place yet\n        tap(navigation => this._empty$.next(!navigation || navigation.url === 'about:blank')), pairwise(), takeUntil(this._disconnect$))\n            .subscribe(([prevNavigation, currNavigation]) => runSafe(() => {\n            // Display splash if instructed by the navigator, but only if not navigating to the same capability, if any.\n            // Otherwise, the micro app would have to signal readiness not only after loading the microfrontend, but also when the parameters change.\n            // For example, the same microfrontend that displays data based on a path or query parameter.\n            if (!currNavigation?.capabilityId || currNavigation?.capabilityId !== prevNavigation?.capabilityId) {\n                currNavigation?.showSplash ? this._splash.attach() : this._splash.detach();\n            }\n            // Emit a page deactivate event, unless not having a previous navigation\n            prevNavigation && this.dispatchEvent(new CustomEvent('deactivate', { detail: prevNavigation.url }));\n            // Change the outlet URL\n            Beans.get(RouterOutletUrlAssigner).assign(this._iframe, currNavigation || { url: 'about:blank' }, prevNavigation);\n            // Emit a page activate event, unless not having a current navigation\n            currNavigation && this.dispatchEvent(new CustomEvent('activate', { detail: currNavigation.url }));\n        }));\n    }\n    installPreferredSizeListener() {\n        Beans.get(MessageClient).observe$(RouterOutlets.preferredSizeTopic(this._uid))\n            .pipe(mapToBody(), takeUntil(this._disconnect$))\n            .subscribe((preferredSize) => {\n            setStyle(this, {\n                'min-width': preferredSize?.minWidth ?? null,\n                'width': preferredSize?.width ?? null,\n                'max-width': preferredSize?.maxWidth ?? null,\n                'min-height': preferredSize?.minHeight ?? null,\n                'height': preferredSize?.height ?? null,\n                'max-height': preferredSize?.maxHeight ?? null,\n            });\n        });\n    }\n    /**\n     * Dispatches synthetic keyboard events that bubble up the DOM like regular events.\n     * Note that synthetic events have the `isTrusted` flag set to `false`, preventing them of triggering default actions.\n     *\n     * Therefore, if default actions should be prevented, it has to be done where the original event is listened to.\n     * @see KeyboardEventDispatcher\n     *\n     * For more information about trusted events\n     * @see https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events\n     * @see https://www.chromestatus.com/features#istrusted\n     */\n    installKeyboardEventDispatcher() {\n        Beans.get(MessageClient).observe$(RouterOutlets.keyboardEventTopic(this._uid, ':eventType'))\n            .pipe(takeUntil(this._disconnect$))\n            .subscribe((event) => {\n            const type = event.params.get('eventType');\n            this.dispatchEvent(new KeyboardEvent(type, event.body));\n        });\n    }\n    installFocusWithinEventDispatcher() {\n        Beans.get(MessageClient).observe$(RouterOutlets.focusWithinOutletTopic(this._uid))\n            .pipe(mapToBody(), skipWhile(focusWithin => focusWithin === false), // wait until first receiving the focus, otherwise, it would emit immediately.\n        takeUntil(this._disconnect$))\n            .subscribe((focusWithin) => {\n            this.dispatchEvent(new CustomEvent('focuswithin', {\n                detail: focusWithin,\n                bubbles: false,\n                cancelable: false,\n            }));\n        });\n    }\n    installHostElementDecorator() {\n        this._empty$\n            .pipe(takeUntil(this._disconnect$))\n            .subscribe((empty) => {\n            if (empty) {\n                this._shadowRoot.host.classList.add('sci-empty');\n            }\n            else {\n                this._shadowRoot.host.classList.remove('sci-empty');\n            }\n        });\n    }\n    /**\n     * Disposes the splash when receiving a readiness signal of the embedded microfrontend.\n     */\n    installSplashDisposer() {\n        Beans.get(MessageClient).observe$(RouterOutlets.signalReadyTopic(this._uid))\n            .pipe(takeUntil(this._disconnect$))\n            .subscribe(() => {\n            this._splash.detach();\n        });\n    }\n    /**\n     * Lifecycle callback of the 'Custom element' Web Component standard.\n     *\n     * Invoked each time the custom element is appended into a document-connected element.\n     * This will happen each time the node is moved, and may happen before the element's contents have been fully parsed.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     * @internal\n     */\n    connectedCallback() {\n        this.installOutletUrlListener();\n        this.installOutletContext();\n        this.installPreferredSizeListener();\n        this.installFocusWithinEventDispatcher();\n        this.installKeyboardEventDispatcher();\n        this.installHostElementDecorator();\n        this.installSplashDisposer();\n        this._contextProvider.onOutletMount();\n    }\n    /**\n     * Lifecycle callback of the 'Custom element' Web Component standard.\n     *\n     * Invoked each time the custom element is disconnected from the document's DOM.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     * @internal\n     */\n    disconnectedCallback() {\n        this._disconnect$.next();\n        this._contextProvider.onOutletUnmount();\n    }\n    /**\n     * Lifecycle callback of the 'Custom element' Web Component standard.\n     *\n     * Specifies the attributes which to observe in {@link attributeChangedCallback} method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     * @internal\n     */\n    static { this.observedAttributes = [ATTR_NAME, ATTR_SCROLLABLE, ATTR_KEYSTROKES]; } // eslint-disable-line @typescript-eslint/member-ordering\n    /**\n     * Lifecycle callback of the 'Custom element' Web Component standard.\n     *\n     * Invoked each time one of the custom element's attributes is added, removed, or changed.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     * @internal\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        switch (name) {\n            case ATTR_NAME: {\n                this._outletName$.next(newValue || PRIMARY_OUTLET);\n                break;\n            }\n            case ATTR_SCROLLABLE: {\n                this._iframe.setAttribute('scrolling', coerceBooleanProperty(newValue) ? 'yes' : 'no');\n                break;\n            }\n            case ATTR_KEYSTROKES: {\n                KeystrokesAttributeUtil.split(oldValue).forEach(keystroke => this.removeContextValue(KEYSTROKE_CONTEXT_NAME_PREFIX + Keystroke.fromString(keystroke).parts));\n                KeystrokesAttributeUtil.split(newValue).forEach(keystrokeStr => {\n                    const keystroke = Keystroke.fromString(keystrokeStr);\n                    this.setContextValue(KEYSTROKE_CONTEXT_NAME_PREFIX + keystroke.parts, keystroke.flags);\n                });\n                break;\n            }\n        }\n    }\n    /**\n     * Defines this outlet as custom element in the browser custom element registry; has no effect if the element was already defined.\n     *\n     * @return A Promise that resolves once this custom element is defined.\n     * @internal\n     */\n    static define() {\n        if (customElements.get(ELEMENT_NAME)) {\n            return Promise.resolve();\n        }\n        else {\n            customElements.define(ELEMENT_NAME, SciRouterOutletElement);\n            return customElements.whenDefined(ELEMENT_NAME).then(() => Promise.resolve());\n        }\n    }\n}\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n */\nfunction coerceBooleanProperty(value) {\n    return value !== null && value !== undefined && `${value}` !== 'false';\n}\n/**\n * Key for obtaining the current outlet context using {@link ContextService}.\n *\n * @category Context\n * @see {@link OutletContext}\n * @see {@link ContextService}\n */\nconst OUTLET_CONTEXT = 'ɵOUTLET';\n/**\n * Default name for an outlet if no explicit name is specified.\n * @category Routing\n */\nconst PRIMARY_OUTLET = 'primary';\n/**\n * Defines constants for {@link SciRouterOutletElement} and {@link OutletRouter}.\n *\n * @internal\n */\nvar RouterOutlets;\n(function (RouterOutlets) {\n    /**\n     * Computes the topic via which the URL for an outlet is exchanged as retained message.\n     */\n    function urlTopic(outletName) {\n        return `sci-router-outlets/${outletName}/url`;\n    }\n    RouterOutlets.urlTopic = urlTopic;\n    /**\n     * Computes the topic via which a microfrontend signals readiness.\n     */\n    function signalReadyTopic(outletUid) {\n        return `sci-router-outlets/${outletUid}/ready`;\n    }\n    RouterOutlets.signalReadyTopic = signalReadyTopic;\n    /**\n     * Computes the topic where to post keyboard events to be dispatched.\n     */\n    function keyboardEventTopic(outletUid, eventType) {\n        return `sci-router-outlets/${outletUid}/keyboard-events/${eventType}`;\n    }\n    RouterOutlets.keyboardEventTopic = keyboardEventTopic;\n    /**\n     * Computes the topic to which the preferred outlet size can be published to.\n     */\n    function preferredSizeTopic(outletUid) {\n        return `sci-router-outlets/${outletUid}/preferred-size`;\n    }\n    RouterOutlets.preferredSizeTopic = preferredSizeTopic;\n    /**\n     * Computes the topic to which the focus-within event can be published to.\n     */\n    function focusWithinOutletTopic(outletUid) {\n        return `sci-router-outlets/${outletUid}/focus-within`;\n    }\n    RouterOutlets.focusWithinOutletTopic = focusWithinOutletTopic;\n})(RouterOutlets || (RouterOutlets = {}));\nvar KeystrokesAttributeUtil;\n(function (KeystrokesAttributeUtil) {\n    const delimiter = ',';\n    function split(attributeValue) {\n        return attributeValue ? attributeValue.split(delimiter) : [];\n    }\n    KeystrokesAttributeUtil.split = split;\n    function join(keystrokes) {\n        return keystrokes.join(delimiter);\n    }\n    KeystrokesAttributeUtil.join = join;\n})(KeystrokesAttributeUtil || (KeystrokesAttributeUtil = {}));\n/**\n * Keystroke bindings are prefixed with `keystroke:` when registered in the outlet context.\n *\n * @internal\n */\nconst KEYSTROKE_CONTEXT_NAME_PREFIX = 'keystroke:';\n/**\n * Emits when a navigation for the given outlet occurs.\n */\nfunction outletNavigate$(outlet) {\n    const outletNavigationTopic = RouterOutlets.urlTopic(outlet);\n    return Beans.get(MessageClient).observe$(outletNavigationTopic)\n        .pipe(map((navigateMessage) => {\n        return {\n            url: navigateMessage.body || 'about:blank',\n            pushStateToSessionHistoryStack: Defined.orElse(navigateMessage.headers.get(PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER), false),\n            showSplash: Defined.orElse(navigateMessage.headers.get(SHOW_SPLASH_MESSAGE_HEADER), false),\n            capabilityId: navigateMessage.headers.get(CAPABILITY_ID_MESSAGE_HEADER),\n        };\n    }));\n}\n/**\n * Applies the given style(s) to the given element.\n *\n * Specify styles to be modified by passing a dictionary containing CSS property names (hyphen case).\n * To remove a style, set its value to `null`.\n */\nfunction setStyle(element, style) {\n    Object.keys(style).forEach(key => element.style.setProperty(key, style[key]));\n}\n/**\n * Represents the splash of the router outlet element.\n *\n * The splash is created from the template with the id \"splash\" contained in the shadow DOM and is placed over the iframe.\n * When displaying the splash, we hide the iframe so that the splash does not have to set the background color.\n */\nclass Splash {\n    constructor(_shadowRoot, _iframeElement) {\n        this._shadowRoot = _shadowRoot;\n        this._iframeElement = _iframeElement;\n        this._template = this._shadowRoot.querySelector('template#splash');\n    }\n    /**\n     * Attaches the splash if not already attached.\n     */\n    attach() {\n        if (this._element) {\n            return;\n        }\n        const documentFragment = this._template.content.cloneNode(true);\n        this._element = this._shadowRoot.appendChild(documentFragment.querySelector('div[part=\"splash\"]'));\n        this._iframeElement.style.setProperty('visibility', 'hidden');\n    }\n    /**\n     * Detaches the splash if attached.\n     */\n    detach() {\n        if (!this._element) {\n            return;\n        }\n        this._element.remove();\n        this._element = undefined;\n        this._iframeElement.style.removeProperty('visibility');\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows looking up contextual data set on a {@link SciRouterOutletElement `<sci-router-outlet>`} at any parent level.\n *\n * The platform allows associating contextual data with an outlet, which then is available in embedded content using {@link ContextService}.\n * Contextual data must be serializable with the structured clone algorithm.\n *\n * Each outlet spans a new context. A context is similar to a `Map`, but is linked to its parent outlet context, if any, thus forming a hierarchical tree structure.\n * When looking up a value and if the value is not found in the outlet context, the lookup is retried on the parent context, repeating until either a value\n * is found or the root of the context tree has been reached.\n *\n * The platform sets the following context values by default:\n *\n * | Key | Value type | Description |\n * |-----|------------|-------------|\n * | {@link OUTLET_CONTEXT ɵOUTLET} | {@link OutletContext} | Information about the outlet which embeds the microfrontend. |\n * | {@link ACTIVATION_CONTEXT ɵACTIVATION_CONTEXT} | {@link ActivationContext} | Information about the activation context if loaded by an activator. See {@link ActivatorCapability} for more information about activators. |\n *\n *\n * @category Context\n */\nclass ContextService {\n    constructor() {\n        this._destroy$ = new Subject();\n        this._contextTreeChange$ = new Subject();\n        this._whenContextTreeChangeListenerInstalled = this.installContextTreeChangeListener(changeEvent => this._contextTreeChange$.next(changeEvent));\n    }\n    observe$(name, options) {\n        if (Beans.get(IS_PLATFORM_HOST)) {\n            return concat(of(options?.collect ? [] : null), NEVER);\n        }\n        return this._contextTreeChange$\n            .pipe(filter(event => event.name === name), startWith(undefined), switchMap(() => this.lookupContextValue$(name, options)), decorateObservable());\n    }\n    lookup(name, options) {\n        return firstValueFrom(this.observe$(name, options));\n    }\n    /**\n     * Checks if a context value is associated with the given name at any level in the context tree.\n     *\n     * @param name - The name of the context value to check if present.\n     * @return A Promise that resolves to `true` if a context value is associated with the given name, or that resolves to `false` otherwise.\n     */\n    isPresent(name) {\n        return this.lookup(name).then(value => value !== null);\n    }\n    /**\n     * Observes the names of context values registered at any level in the context tree.\n     *\n     * @return An Observable that emits the names of context values registered at any level in the context tree.\n     *         Upon subscription, it emits the names of context values currently registered, and then it emits whenever\n     *         some value is registered or unregistered from a context. The Observable never completes.\n     */\n    names$() {\n        if (Beans.get(IS_PLATFORM_HOST)) {\n            return concat(of(new Set()), NEVER);\n        }\n        return this._contextTreeChange$\n            .pipe(startWith(undefined), switchMap(() => this.lookupContextNames$()), decorateObservable());\n    }\n    /**\n     * Looks up the context tree for a value associated with the given name.\n     *\n     * @param  name - The name of the value to return.\n     * @param  options - Options to control context lookup.\n     * @return An Observable that emits the context value associated with the given key and then completes.\n     *         When the requested value is not found in a context, the Observable emits `null` and then completes.\n     */\n    lookupContextValue$(name, options) {\n        return new Observable((observer) => {\n            const replyTo = UUID.randomUUID();\n            const unsubscribe$ = new Subject();\n            const contextValueLookupRequest = Contexts.newContextValueLookupRequest(name, replyTo, options);\n            // Wait until the reply is received.\n            Beans.get(MessageClient).observe$(replyTo)\n                .pipe(take(1), map(reply => reply.headers.get(MessageHeaders.Status) === ResponseStatusCodes.OK ? (reply.body ?? null) : null), takeUntil(unsubscribe$))\n                .subscribe(observer);\n            // Send the request.\n            Promise.all([whenSubscribedToReplyTopic(replyTo), this._whenContextTreeChangeListenerInstalled])\n                .then(() => window.parent.postMessage(contextValueLookupRequest, '*'))\n                .catch(error => observer.error(error));\n            return () => unsubscribe$.next();\n        });\n    }\n    /**\n     * Looks up the context names of all values registered in the current and parent contexts.\n     *\n     * @return An Observable that emits the names of all values registered in the current and parent contexts and then completes.\n     */\n    lookupContextNames$() {\n        return new Observable((observer) => {\n            const replyTo = UUID.randomUUID();\n            const unsubscribe$ = new Subject();\n            const contextNamesLookupRequest = Contexts.newContextTreeNamesLookupRequest(replyTo);\n            // Wait until the reply is received.\n            Beans.get(MessageClient).observe$(replyTo)\n                .pipe(take(1), map(reply => reply.headers.get(MessageHeaders.Status) === ResponseStatusCodes.OK ? reply.body : new Set()), takeUntil(unsubscribe$))\n                .subscribe(observer);\n            // Send the request.\n            Promise.all([whenSubscribedToReplyTopic(replyTo), this._whenContextTreeChangeListenerInstalled])\n                .then(() => window.parent.postMessage(contextNamesLookupRequest, '*'))\n                .catch(error => observer.error(error));\n            return () => unsubscribe$.next();\n        });\n    }\n    /**\n     * Installs a listener to get notified about context changes at any level in the context tree.\n     *\n     * @return A Promise that resolves when installed the listener.\n     */\n    installContextTreeChangeListener(listener) {\n        const replyTo = UUID.randomUUID();\n        const contextObserveRequest = Contexts.newContextTreeObserveRequest(replyTo);\n        return new Promise((resolve, reject) => {\n            // Receive change notifications.\n            Beans.get(MessageClient).observe$(replyTo)\n                .pipe(mapToBody(), takeUntil(this._destroy$))\n                .subscribe({\n                next: (event) => {\n                    if (event === Contexts.RootContextSubscribeEvent) {\n                        resolve(); // resolve the promise as subscribed to all parent contexts.\n                    }\n                    else {\n                        listener(event);\n                    }\n                },\n                error: reject,\n            });\n            // Send the observe request.\n            whenSubscribedToReplyTopic(replyTo)\n                .then(() => window.parent.postMessage(contextObserveRequest, '*'))\n                .catch(error => reject(error));\n        });\n    }\n    /** @ignore */\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Resolves when subscribed to the given reply topic.\n */\nfunction whenSubscribedToReplyTopic(topic) {\n    return new Promise((resolve, reject) => {\n        Beans.get(MessageClient).subscriberCount$(topic)\n            .pipe(first(count => count === 1))\n            .subscribe({\n            error: reject,\n            complete: resolve,\n        });\n    });\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Used by {@link OutletRouter} to convert relative paths to absolute paths.\n *\n * Replace this bean to use a different relative path resolution strategy.\n *\n * @see {@link OutletRouter}\n * @category Routing\n */\nclass RelativePathResolver {\n    /**\n     * Converts the given relative path into a navigable URL with relative navigational symbols like `/`, `./`, or `../` resolved.\n     *\n     * @param  path - Specifies the path which to convert into an absolute path.\n     * @param  options - Specifies to which url the given path is relative to.\n     * @return the absolute path.\n     */\n    resolve(path, options) {\n        const relativeTo = Urls.newUrl(options.relativeTo);\n        // Check if hash-based routing is used\n        if (relativeTo.hash?.startsWith('#/')) {\n            // Apply navigational symbols only to the path of the hash-based route, and not to the context path before the hash, if any.\n            // For that reason, we temporarily remove the context path when constructing the URL.\n            const { pathname, search, hash } = Urls.newUrl(path, `${relativeTo.origin}${relativeTo.hash.substring(1)}`);\n            return relativeTo.origin + relativeTo.pathname + '#' + pathname + search + hash;\n        }\n        else {\n            return Urls.newUrl(path, options.relativeTo).toString();\n        }\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows sending and receiving intents between microfrontends across origins.\n * This client is part of the Intention API of the SCION Microfrontend Platform.\n *\n * Intent-based messaging enables controlled collaboration between micro applications, a mechanism known from Android development\n * where an application can start an activity via an intent (such as sending an email).\n *\n * Like topic-based communication, intent-based communication implements the pub/sub (publish/subscribe) messaging pattern, but is,\n * in contrast, more restrictive when sending messages. Sending messages is also referred to as issuing intents. It requires the sending\n * application to declare an intention in its manifest. Intents are received only by applications that provide a fulfilling capability.\n * If no application provides a fulfilling capability, the platform rejects the intent.\n *\n * The communication is built on top of the native `postMessage` mechanism. The host app acts as message broker.\n *\n * #### Intent Addressing\n * In intent-based communication, the destination are capabilities, formulated in an abstract way, consisting of a a type, and optionally\n * a qualifier. The type categorizes a capability in terms of its functional semantics. A capability may also define a qualifier to\n * differentiate the different capabilities of the same type. The type is a string literal and the qualifier a dictionary of key-value pairs.\n *\n * ### Retained Intents\n * You can mark an intent as \"retained\" for helping newly subscribed clients to get the last intent published for a capability immediately upon\n * subscription. The broker stores one retained intent per capability, i.e., a later sent retained intent will replace a previously sent retained\n * intent. To delete a retained intent, send a retained intent without payload to the same destination.\n *\n * ### Retained Request\n * Unlike retained intents, retained requests are not replaced by later retained requests/intents and remain in the broker until the requestor unsubscribes.\n *\n * ### Request-Response Messaging\n * Sometimes it is useful to initiate a request-response communication to wait for a response. Unlike with fire-and-forget intents, a temporary\n * inbox is created for the intent issuer to receive replies.\n *\n * @see {@link IntentMessage}\n * @see {@link Intent}\n * @see {@link MessageHeaders}\n *\n * @category Messaging\n * @category Intention API\n */\nclass IntentClient {\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows navigating to a web page or microfrontend in a {@link SciRouterOutletElement `<sci-router-outlet>`} element.\n *\n * In SCION Microfrontend Platform, routing means instructing a `<sci-router-outlet>` to display the content of a URL. Routing works\n * across microfrontend and micro application boundaries, allowing the URL of an outlet to be set from anywhere in the application. The\n * web content displayed in an outlet can be any HTML document that has not set the HTTP header X-Frame-Options. Routing is also referred\n * to as navigating.\n *\n * The router supports multiple outlets in the same application to co-exist. By giving an outlet a name, you can reference it as the\n * routing target. If not naming an outlet, its name defaults to {@link PRIMARY_OUTLET primary}. If multiple outlets have the same name,\n * they all show the same content. If routing in the context of a router outlet, that is inside a microfrontend, and not specifying a\n * routing target, the content of the current outlet is replaced.\n *\n * An outlet does not necessarily have to exist at the time of routing. When adding the outlet to the DOM, the outlet displays the last URL\n * routed for it. When repeating routing for an outlet, its content is replaced.\n *\n * A router outlet is defined as follows. If no navigation has been performed for the outlet yet, then its content is empty.\n *\n *  ```html\n * <sci-router-outlet name=\"aside\"></sci-router-outlet>\n * ```\n *\n * ### Navigation via URL\n * The URL of the page to be loaded into the router outlet is passed to the router, as follows:\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {outlet: 'aside'});\n * ```\n *\n * #### Relative URL Navigation\n * The router allows to use both absolute and relative paths. A relative path begins with a navigational symbol `/`, `./`, or `../`. By default,\n * relative navigation is relative to the current window location of the navigating application, unless specifying a base path for the navigation.\n *\n * ```ts\n * // Navigation relative to the root path segment\n * Beans.get(OutletRouter).navigate('/products/:id', {outlet: PRIMARY_OUTLET});\n *\n * // Navigation relative to the parent path segment\n * Beans.get(OutletRouter).navigate('../products/:id', {outlet: PRIMARY_OUTLET});\n * ```\n *\n * #### Named URL Parameters\n * The URL being passed to the router can contain named parameters which the router replaces with values of the provided params object.\n * A named parameter begins with a colon (`:`) and is allowed in path segments, query parameters, matrix parameters and the fragment part,\n * e.g., `product/:id` or `product;id=:id` or `products?id=:id`.\n *\n * ### Navigating via Intent\n * As an alternative to navigating directly to a URL, the router supports navigation to a microfrontend capability via an intent.\n * We refer to this as intent-based routing.\n *\n * We recommend using intent-based routing over url-based routing, especially for cross-application navigations, since the navigation flows\n * are explicit, i.e., declared in the manifest, and to keep the microfrontend URLs an implementation detail of the micro applications that\n * provide the microfrontends.\n *\n * Note that if the microfrontend is provided by another micro app, the navigating app must manifest an intention. Also, the navigating\n * app can only navigate to public microfrontend capabilities.\n *\n * The following code snippet illustrates how to display the _product_ microfrontend in the \"aside\" outlet. Note that you only need to pass\n * the qualifier of the microfrontend capability and not its type. The capability type, which is always `microfrontend`, is implicitly set\n * by the router.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate({entity: 'product'}, {\n *   outlet: 'aside',\n *   params: {id: 123},\n * });\n * ```\n *\n * Applications can provide microfrontend capabilities through their manifest. A microfrontend can be either application private or exposed to\n * other micro applications. The platform requires all microfrontend capabilities to be of type `microfrontend`. A particular microfrontend can\n * be identified using its qualifier.\n *\n * ```json\n * {\n *   \"type\": \"microfrontend\",\n *   \"qualifier\": {\n *     \"entity\": \"product\"\n *   },\n *   \"description\": \"Displays a product.\",\n *   \"params\": [\n *     {\"name\": \"id\", \"required\": true}\n *   ],\n *   \"private\": false,\n *   \"properties\": {\n *     \"path\": \"product/:id\",\n *   }\n * }\n * ```\n *\n * Note that the providing micro application does not need to install an intent handler for its microfrontend capabilities. The platform intercepts\n * microfrontend intents and performs the navigation.\n *\n * ### Persistent Navigation\n * Persistent navigation refers to the mechanism for restoring the navigational state after an application reload.\n *\n * The router does not provide an implementation for persistent navigation out-of-the-box, mostly because many persistence strategies are imaginable.\n * For example, the navigational state could be added to the top-level URL, stored in local storage, or persisted in the backend.\n * However, you can easily implement persistent navigation yourself. The router publishes navigations to the topic `sci-router-outlets/:outlet/url`;\n * thus, they can be captured and persisted. When starting the application, you can then replay persisted navigations using the router.\n *\n * ### Unloading Outlet Content\n * To unload an outlet’s content, use null as the URL when routing, as follows:\n *\n * ```ts\n * Beans.get(OutletRouter).navigate(null, {outlet: 'aside'});\n * ```\n *\n * ### Browsing History and Session History\n * Routing does not add an entry to the browsing history, and, by default, not push a navigational state to the browser’s session history stack.\n *\n * You can instruct the router to add a navigational state to the browser’s session history stack, allowing the user to use the back button of the browser to\n * navigate back in an outlet.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {\n *   outlet: 'aside',\n *   pushStateToSessionHistoryStack: true,\n * });\n * ```\n *\n * @see {@link SciRouterOutletElement}\n *\n * @category Routing\n */\nclass OutletRouter {\n    async navigate(target, options) {\n        if (!target || typeof target === 'string') {\n            await this.navigateByUrl(target, options);\n        }\n        else {\n            await this.navigateByIntent(target, options);\n        }\n    }\n    /**\n     * Navigates to specified URL.\n     */\n    async navigateByUrl(url, options) {\n        const outlet = options?.outlet || await this.resolveContextualOutlet() || PRIMARY_OUTLET;\n        const outletUrlTopic = RouterOutlets.urlTopic(outlet);\n        const navigationUrl = this.computeNavigationUrl(url, options);\n        await Beans.get(MessageClient).publish(outletUrlTopic, navigationUrl, {\n            retain: true,\n            headers: new Map()\n                .set(PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER, options?.pushStateToSessionHistoryStack ?? false)\n                .set(SHOW_SPLASH_MESSAGE_HEADER, options?.showSplash ?? false)\n                .set(CAPABILITY_ID_MESSAGE_HEADER, options?.ɵcapabilityId),\n        });\n        // Clear retained navigation message in case of a `null` URL navigation.\n        if (url === null) {\n            await Beans.get(MessageClient).publish(outletUrlTopic, undefined, { retain: true });\n        }\n    }\n    /**\n     * Navigates to a microfrontend available as {@link MicrofrontendCapability} matching the passed qualifier.\n     */\n    async navigateByIntent(qualifier, options) {\n        if (options?.relativeTo) {\n            throw Error('[OutletRouterError][UnsupportedOptionError] Unsupported navigation option \"relativeTo\". This option is not supported in intent-based routing.');\n        }\n        const contextualOutlet = await this.resolveContextualOutlet();\n        const intent = { type: PlatformCapabilityTypes.Microfrontend, qualifier, params: Maps.coerce(options?.params) };\n        const navigate$ = Beans.get(IntentClient).request$(intent, options, { headers: new Map().set(ROUTING_CONTEXT_MESSAGE_HEADER, { [ROUTING_CONTEXT_OUTLET]: contextualOutlet }) });\n        try {\n            await lastValueFrom(navigate$.pipe(mapToBody()));\n        }\n        catch (error) {\n            throw (error instanceof RequestError ? error.message : error);\n        }\n    }\n    computeNavigationUrl(urlPattern, options) {\n        if (urlPattern === undefined || urlPattern === null) { // empty path is a valid url\n            return 'about:blank';\n        }\n        const params = Maps.coerce(options?.params);\n        const url = this.substituteNamedParameters(urlPattern, params);\n        if (Urls.isAbsoluteUrl(url)) {\n            return url;\n        }\n        else {\n            const relativeTo = options?.relativeTo ?? window.location.href;\n            return Beans.get(RelativePathResolver).resolve(url, { relativeTo });\n        }\n    }\n    async resolveContextualOutlet() {\n        // If navigating in the context of an activator, do not use that outlet as contextual outlet.\n        if (await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n            return undefined;\n        }\n        return (await Beans.get(ContextService).lookup(OUTLET_CONTEXT))?.name;\n    }\n    /**\n     * Replaces named parameters in the given path with values contained in the given {@link Map}.\n     * Named parameters begin with a colon (`:`) and are allowed in path segments, query parameters, matrix parameters\n     * and the fragment part.\n     *\n     * Empty query and matrix params are removed, but not empty path params.\n     *\n     * Some examples about the usage of named parameters:\n     * /segment/:param1/segment/:param2 // path params\n     * /segment/segment;matrixParam1=:param1;matrixParam2=:param2 // matrix params\n     * /segment/segment?queryParam1=:param1&queryParam2=:param2 // query params\n     */\n    substituteNamedParameters(path, params) {\n        return path\n            // 1. Replace named params contained in the params map.\n            .replace(/:([^/;&?#]+)/g, (match, paramName) => params.get(paramName) !== undefined ? params.get(paramName) : match)\n            // 2. Remove named matrix params not contained in the params map.\n            .replace(/(?<delimiter>;)(?<paramName>[^=]+)=:(?<placeholder>[^;#?/]+)/g, () => {\n            return '';\n        })\n            // 3. Remove named query params not contained in the params map. Replaces the first query param\n            //    with a special marker for later substitution.\n            .replace(/(?<delimiter>[?&])(?<paramName>[^=]+)=:(?<placeholder>[^&#]+)/g, (match, delimiter) => {\n            return (delimiter === '?') ? 'ɵ__?__' : '';\n        })\n            // 4. Replace the marker with the question mark if at least one query parameter is present.\n            .replace(/ɵ__\\?__&/, '?')\n            // 5. Remove marker if no query params are present.\n            .replace(/ɵ__\\?__/, '');\n    }\n}\n/**\n * Message header with information about the current context of the navigator.\n * @internal\n */\nconst ROUTING_CONTEXT_MESSAGE_HEADER = 'context';\n/**\n * Name of the current outlet if navigating in the context of an outlet.\n * @internal\n */\nconst ROUTING_CONTEXT_OUTLET = 'outlet';\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Handles microfrontend intents, instructing the {@link OutletRouter} to navigate to the microfrontend of the resolved microfrontend capability.\n *\n * Microfrontend intents are handled in this interceptor in order to support microfrontends not using the SCION Microfrontend Platform.\n * They are not transported to the providing application.\n *\n * @internal\n */\nclass MicrofrontendIntentNavigator {\n    /**\n     * Microfrontend intents are handled in this interceptor and then swallowed.\n     */\n    intercept(intentMessage, next) {\n        if (intentMessage.intent.type === PlatformCapabilityTypes.Microfrontend) {\n            return this.consumeMicrofrontendIntent(intentMessage);\n        }\n        else {\n            return next.handle(intentMessage);\n        }\n    }\n    async consumeMicrofrontendIntent(message) {\n        const replyTo = message.headers.get(MessageHeaders.ReplyTo);\n        await this.navigate(message);\n        await Beans.get(MessageClient).publish(replyTo, null, { headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL) });\n    }\n    async navigate(message) {\n        const microfrontendCapability = message.capability;\n        const options = message.body;\n        const intent = message.intent;\n        const microfrontendPath = microfrontendCapability.properties?.path;\n        if (microfrontendPath === undefined || microfrontendPath === null) { // empty path is a valid path\n            throw Error(`[OutletRouterError][NullPathError] Microfrontend capability has no path to the microfrontend defined. [capability=${JSON.stringify(microfrontendCapability)}]`);\n        }\n        const appSymbolicName = microfrontendCapability.metadata.appSymbolicName;\n        const application = Beans.get(ApplicationRegistry).getApplication(appSymbolicName, { orElse: null });\n        if (!application) {\n            throw Error(`[OutletRouterError][NullApplicationError] Unexpected error. No application found with the symbolic name \"${appSymbolicName}\".`);\n        }\n        await Beans.get(OutletRouter).navigate(microfrontendPath, {\n            ...options,\n            outlet: this.resolveTargetOutlet(message),\n            relativeTo: application.baseUrl,\n            params: { ...intent.qualifier, ...Dictionaries.coerce(intent.params) },\n            showSplash: microfrontendCapability.properties.showSplash,\n            ɵcapabilityId: microfrontendCapability.metadata.id,\n        });\n    }\n    /**\n     * Resolves the target outlet in the following order:\n     *\n     * - Outlet as specified by navigator via {@link NavigationOptions#outlet}.\n     * - Preferred outlet as specified in the microfrontend capability.\n     * - Current outlet if navigating in the context of an outlet.\n     * - {@link PRIMARY_OUTLET primary} outlet.\n     */\n    resolveTargetOutlet(message) {\n        const microfrontendCapability = message.capability;\n        const options = message.body;\n        if (options?.outlet) {\n            return options.outlet;\n        }\n        if (microfrontendCapability.properties.outlet) {\n            return microfrontendCapability.properties.outlet;\n        }\n        const contextualOutlet = message.headers.get(ROUTING_CONTEXT_MESSAGE_HEADER)?.[ROUTING_CONTEXT_OUTLET];\n        if (contextualOutlet) {\n            return contextualOutlet;\n        }\n        return PRIMARY_OUTLET;\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * @internal\n */\nclass ɵClientRegistry {\n    constructor() {\n        this._clientsById = new Map();\n        this._clientsByWindow = new Map();\n        this.register$ = new Subject();\n        this.unregister$ = new Subject();\n    }\n    registerClient(client) {\n        const staleClient = this._clientsByWindow.get(client.window);\n        if (staleClient) {\n            Beans.get(Logger).warn(`[StaleClient] Stale client registration detected when loading application '${client.application.symbolicName}'\n        into the window of '${staleClient.application.symbolicName}'. Removing stale registration. Most likely, the client could not disconnect\n        from the broker, for example, because the client was disposed without notice, i.e., without receiving the browser's \"unload\" event, or\n        because the browser discarded the 'DISCONNECT' message, maybe due to a high load on the client during unloading.`.replace(/\\s+/g, ' '), new LoggingContext(staleClient.application.symbolicName, staleClient.version));\n            this.unregisterClient(staleClient);\n        }\n        this._clientsById.set(client.id, client);\n        this._clientsByWindow.set(client.window, client);\n        this.register$.next(client);\n    }\n    unregisterClient(client) {\n        this._clientsById.delete(client.id);\n        this._clientsByWindow.delete(client.window);\n        this.unregister$.next(client);\n        client.dispose();\n    }\n    getByClientId(clientId) {\n        return this._clientsById.get(clientId);\n    }\n    getByWindow(window) {\n        return this._clientsByWindow.get(window);\n    }\n    getByApplication(appSymbolicName) {\n        return Array.from(this._clientsById.values()).filter(client => client.application.symbolicName === appSymbolicName);\n    }\n    preDestroy() {\n        this._clientsById.forEach(client => this.unregisterClient(client));\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides the config for the host app.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nclass HostAppConfigProvider {\n    constructor() {\n    }\n    /**\n     * Creates the {@link ApplicationConfig} for the host app.\n     */\n    static createAppConfig(hostConfig) {\n        return {\n            symbolicName: hostConfig.symbolicName,\n            manifestUrl: provideHostManifestUrl(hostConfig.manifest),\n            scopeCheckDisabled: hostConfig.scopeCheckDisabled,\n            intentionCheckDisabled: hostConfig.intentionCheckDisabled,\n            intentionRegisterApiDisabled: hostConfig.intentionRegisterApiDisabled,\n        };\n    }\n    /**\n     * Intercepts the host manifest by registered interceptors.\n     */\n    static interceptManifest(manifest) {\n        Beans.all(HostManifestInterceptor).forEach(interceptor => interceptor.intercept(manifest));\n    }\n}\nfunction provideHostManifestUrl(hostManifest) {\n    if (typeof hostManifest === 'string') {\n        return hostManifest; // URL specified\n    }\n    return serveHostManifest(hostManifest || { name: 'Host Application' });\n}\nfunction serveHostManifest(manifest) {\n    const url = URL.createObjectURL(new Blob([JSON.stringify(manifest)], { type: 'application/json' }));\n    MicrofrontendPlatform.whenState(PlatformState.Stopped).then(() => URL.revokeObjectURL(url));\n    return url;\n}\n\n/*\n * Copyright (c) 2018-2021 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Represents a monitor to track the progress of some work.\n *\n * A monitor can be split into child monitors, allowing the work to be broken down into smaller units,\n * with each child monitor contributing to the overall progress of the parent monitor.\n *\n * @internal\n */\nclass ProgressMonitor {\n    constructor() {\n        this._progress$ = new BehaviorSubject(0);\n        this._done$ = new Subject();\n        this._hasSubMonitors = false;\n        /**\n         * Reports the current progress of this monitor in percent.\n         *\n         * Upon subscription, emits the current progress, and then continuously as the progress advances.\n         * At 100%, the Observable completes.\n         */\n        this.progress$ = this._progress$.pipe(distinctUntilChanged(), map(progress => Math.round(progress * 10000) / 100), takeWhile(progress => progress < 100, true));\n    }\n    /**\n     * Splits this monitor into separate child monitors for breaking down this monitor's work into smaller units.\n     *\n     * Each child monitor contributes to the overall progress of this monitor. The ratio allows child monitors to be\n     * weighted differently, for example, one child monitor can contribute twice as much as another to the overall progress.\n     * After all child monitors reported \"done\", this monitor will also enter \"done\".\n     */\n    split(...ratio) {\n        if (this._hasSubMonitors) {\n            throw Error('[IllegalMonitorStateError] Monitor cannot be split multiple times.');\n        }\n        this._hasSubMonitors = true;\n        const subMonitors = ratio.map(() => new ProgressMonitor());\n        combineLatest(subMonitors.map(subMonitor => subMonitor._progress$))\n            .pipe(computeProgress(ratio), takeWhile(progress => progress < 1, true), takeUntil(this._done$))\n            .subscribe(progress => {\n            this._progress$.next(progress);\n        });\n        return subMonitors;\n    }\n    /**\n     * Like {@link split}, but creates `n` child monitors with the same weight.\n     */\n    splitEven(n) {\n        if (n <= 0) {\n            throw Error(`[IllegalMonitorArgumentError] Monitor split count must be greater than 0, but was ${n}.`);\n        }\n        return this.split(...new Array(n).fill(1));\n    }\n    /**\n     * Completes this monitor, setting its progress to '100%'.\n     * Has no effect if this monitor is already \"done\".\n     */\n    done() {\n        this._progress$.next(1);\n        this._done$.next();\n    }\n}\nfunction computeProgress(ratio) {\n    const ratioSum = ratio.reduce((sum, weight) => sum + weight, 0);\n    return map((subMonitorsProgress) => {\n        return ratio.reduce((totalProgress, subMonitorWeight, subMonitorIndex) => {\n            return totalProgress + subMonitorsProgress[subMonitorIndex] * (subMonitorWeight / ratioSum);\n        }, 0);\n    });\n}\n\n/*\n * Copyright (c) 2018-2021 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Tracks the progress of loading application manifests.\n *\n * @internal\n */\nclass ManifestLoadProgressMonitor extends ProgressMonitor {\n}\n/**\n * Tracks the progress of loading application activators.\n *\n * @internal\n */\nclass ActivatorLoadProgressMonitor extends ProgressMonitor {\n}\n/**\n * @internal\n */\nclass StartupProgressMonitor extends ProgressMonitor {\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Installs registered applications in the platform.\n *\n * @internal\n */\nclass AppInstaller {\n    constructor(_hostConfig, appConfigs) {\n        this._hostConfig = _hostConfig;\n        this._appConfigs = appConfigs.filter(appConfig => !appConfig.exclude);\n    }\n    /**\n     * Installs registered applications in the platform.\n     */\n    async install() {\n        // Create config for the host.\n        const hostAppConfig = HostAppConfigProvider.createAppConfig(this._hostConfig);\n        const appConfigs = [hostAppConfig, ...this._appConfigs];\n        const manifestLoadMonitors = Beans.get(ManifestLoadProgressMonitor).splitEven(appConfigs.length);\n        // Fetch manifests and register applications.\n        await Promise.all(appConfigs.map(async (appConfig) => {\n            const monitor = manifestLoadMonitors.shift();\n            try {\n                // Fetch the manifest.\n                const manifest = await Beans.get(ManifestFetcher).fetch(appConfig);\n                // Let interceptors intercept the host manifest, for example by libraries integrating the SCION Microfrontend Platform,\n                // e.g., to contribute integrator-specific capabilities and intentions.\n                if (appConfig === hostAppConfig) {\n                    HostAppConfigProvider.interceptManifest(manifest);\n                }\n                // Register application in the platform.\n                await Beans.get(ApplicationRegistry).registerApplication(appConfig, manifest);\n                Beans.get(Logger).info(`Registered application '${appConfig.symbolicName}' in the SCION Microfrontend Platform.`);\n            }\n            catch (error) {\n                Beans.get(Logger).error(`[AppInstaller] Failed to install application '${appConfig.symbolicName}' in the SCION Microfrontend Platform.`, error);\n            }\n            finally {\n                monitor.done();\n            }\n        }));\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Activates micro applications which provide an activator capability.\n *\n * Activators enable micro applications to interact with the platform for the entire platform lifecycle.\n * Activators can signal when ready for operation, causing this initializer to wait until received respective readiness messages.\n *\n * @internal\n */\nclass ActivatorInstaller {\n    async init() {\n        // Lookup activators.\n        const activators = await firstValueFrom(Beans.get(ManifestService).lookupCapabilities$({ type: PlatformCapabilityTypes.Activator }));\n        const monitor = Beans.get(ActivatorLoadProgressMonitor);\n        if (!activators.length) {\n            monitor.done();\n            return;\n        }\n        // Group activators by their providing application.\n        const activatorsGroupedByApp = activators\n            .filter(this.skipInvalidActivators())\n            .reduce((grouped, activator) => Maps.addListValue(grouped, activator.metadata.appSymbolicName, activator), new Map());\n        // Create Promises that wait for activators to signal ready.\n        const subMonitors = monitor.splitEven(activatorsGroupedByApp.size);\n        const activatorReadyPromises = Array\n            .from(activatorsGroupedByApp.entries())\n            .reduce((acc, [appSymbolicName, appActivators], index) => {\n            return acc.concat(this.waitForActivatorsToSignalReady(appSymbolicName, appActivators, subMonitors[index]));\n        }, []);\n        // Mount activators in hidden iframes\n        activatorsGroupedByApp.forEach((sameAppActivators) => {\n            // Nominate one activator of each app as primary activator.\n            const primaryActivator = sameAppActivators[0];\n            sameAppActivators.forEach(activator => this.mountActivator(activator, activator === primaryActivator));\n        });\n        // Wait until activators signal ready.\n        await Promise.all(activatorReadyPromises);\n    }\n    skipInvalidActivators() {\n        return (activator) => {\n            if (!activator.properties || !activator.properties.path) {\n                Beans.get(Logger).error(`[ActivatorError] Failed to activate the application '${activator.metadata.appSymbolicName}'. Missing required 'path' property in the provided activator capability.`, activator);\n                return false;\n            }\n            return true;\n        };\n    }\n    /**\n     * Creates a Promise that resolves when given activators signal ready.\n     */\n    async waitForActivatorsToSignalReady(appSymbolicName, activators, monitor) {\n        const t0 = Date.now();\n        const activatorLoadTimeout = Beans.get(ApplicationRegistry).getApplication(appSymbolicName).activatorLoadTimeout;\n        const readinessPromises = activators\n            .reduce((acc, activator) => acc.concat(Arrays.coerce(activator.properties.readinessTopics)), new Array()) // concat readiness topics\n            .map(readinessTopic => {\n            const onReadinessTimeout = () => {\n                Beans.get(Logger).error(`[ActivatorLoadTimeoutError] Timeout elapsed while waiting for application to signal readiness [app=${appSymbolicName}, timeout=${activatorLoadTimeout}ms, readinessTopic=${readinessTopic}].`);\n                return EMPTY;\n            };\n            return new Promise((resolve, reject) => {\n                return Beans.get(MessageClient).observe$(readinessTopic)\n                    .pipe(first(msg => msg.headers.get(MessageHeaders.AppSymbolicName) === appSymbolicName), activatorLoadTimeout ? timeout({ first: activatorLoadTimeout, with: onReadinessTimeout }) : identity)\n                    .subscribe({\n                    error: reject,\n                    complete: resolve,\n                });\n            });\n        });\n        if (!readinessPromises.length) {\n            monitor.done();\n            return;\n        }\n        await Promise.all(readinessPromises);\n        monitor.done();\n        Beans.get(Logger).info(`Activator startup of '${appSymbolicName}' took ${Date.now() - t0}ms.`);\n    }\n    /**\n     * Mounts a hidden <sci-router-outlet> and loads the activator endpoint.\n     */\n    mountActivator(activator, primary) {\n        const application = Beans.get(ApplicationRegistry).getApplication(activator.metadata.appSymbolicName);\n        // Create the router outlet and navigate to the activator endpoint.\n        const routerOutlet = document.createElement('sci-router-outlet');\n        routerOutlet.name = UUID.randomUUID();\n        Beans.get(OutletRouter).navigate(activator.properties.path, {\n            outlet: routerOutlet.name,\n            relativeTo: application.baseUrl,\n        }).then();\n        // Provide the activation context\n        routerOutlet.setContextValue(ACTIVATION_CONTEXT, { primary, activator });\n        // Add CSS classes for debugging purposes\n        routerOutlet.classList.add('sci-activator');\n        // Add custom data attribute with the application's symbolic name for debugging purposes\n        routerOutlet.dataset['app'] = application.symbolicName;\n        // Make the router outlet invisible\n        routerOutlet.style.display = 'none';\n        // Take the router outlet out of the document flow\n        routerOutlet.style.position = 'absolute';\n        // Add the router outlet to the DOM\n        document.body.appendChild(routerOutlet);\n        // Unmount the router outlet on platform shutdown\n        MicrofrontendPlatform.whenState(PlatformState.Stopped).then(() => document.body.removeChild(routerOutlet));\n    }\n}\n\n/**\n * Allow observing whether the current microfrontend has received focus or contains embedded web content that has received focus.\n *\n * @category Focus\n */\nclass FocusMonitor {\n    constructor() {\n        /**\n         * Observable that emits when the current microfrontend or any of its child microfrontends has gained or lost focus.\n         * The Observable does not emit while the focus remains within this microfrontend or any of its child microfrontends.\n         * Upon subscription, the Observable emits the current focus-within state, and then continuously emits when it changes.\n         * It never completes.\n         *\n         * This Observable is like the `:focus-within` CSS pseudo-class but operates across iframe boundaries.\n         * For example, it can be useful when implementing overlays that close upon focus loss.\n         *\n         * Note that this Observable emits only for microfrontends that are connected to the platform as registered micro app.\n         *\n         * See also the `onfocuswithin` event triggered by `<sci-router-outlet>` when embedded content has gained or lost focus.\n         */\n        this.focusWithin$ = Beans.get(MessageClient).request$(PlatformTopics.IsFocusWithin).pipe(mapToBody());\n        /**\n         * Observable that emits when the current microfrontend has gained or lost focus.\n         *\n         * Upon subscription, the Observable emits the current focus state, and then continuously emits when it changes.\n         * It never completes.\n         */\n        this.focus$ = Beans.get(MessageClient).request$(PlatformTopics.HasFocus).pipe(mapToBody());\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Sends a 'focusin' event to the topic {@link PlatformTopics.FocusIn} when this document gains focus.\n *\n * @see FocusTracker\n * @internal\n */\nclass FocusInEventDispatcher {\n    constructor() {\n        this._destroy$ = new Subject();\n        // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n        // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n        this.installFocusEventDispatcher().then();\n    }\n    /**\n     * Installs focus event dispatching, but only if not loaded as activator.\n     */\n    async installFocusEventDispatcher() {\n        if (await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n            return;\n        }\n        this.publishFocusInEvent();\n        await this.notifyOutletAboutFocusChange();\n    }\n    /**\n     * Publishes 'focusin' events for the platform to track focus ownership.\n     */\n    publishFocusInEvent() {\n        Beans.get(FocusMonitor).focus$\n            .pipe(switchMap(hasFocus => hasFocus ? EMPTY : race(fromEvent(window, 'focusin', { once: true }), // when gaining focus, e.g., via click on focusable element or sequential keyboard navigation\n        fromEvent(window, 'mousedown', { once: true, capture: true }))), takeUntil(this._destroy$))\n            .subscribe(() => {\n            Beans.get(MessageClient).publish(PlatformTopics.FocusIn);\n        });\n    }\n    /**\n     * Reports the embedding outlet when the current microfrontend or any of its child microfrontends has gained or lost focus.\n     * It does not report while the focus remains within this microfrontend or any of its child microfrontends.\n     */\n    async notifyOutletAboutFocusChange() {\n        const outletContext = await Beans.get(ContextService).lookup(OUTLET_CONTEXT);\n        if (!outletContext) {\n            return;\n        }\n        Beans.get(FocusMonitor).focusWithin$\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(focusWithin => {\n            const publishTo = RouterOutlets.focusWithinOutletTopic(outletContext.uid);\n            Beans.get(MessageClient).publish(publishTo, focusWithin);\n        });\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Dispatches 'mousemove' events originating from other documents as synthetic 'sci-mousemove' events on the document event bus.\n * The events are only dispatched if the user has pressed the primary mouse button.\n *\n * Mouse event dispatching is important if having non-focusable scrollbars which are positioned at the iframe border. It enables the user\n * to scroll seamlessly even when the mouse cursor leaves the iframe.\n *\n * @internal\n */\nclass MouseMoveEventDispatcher {\n    constructor() {\n        this._destroy$ = new Subject();\n        this._dispatcherId = UUID.randomUUID();\n        // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n        // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n        this.installMouseEventDispatcher().then();\n    }\n    /**\n     * Installs mouse event dispatching, but only if not loaded as activator.\n     */\n    async installMouseEventDispatcher() {\n        if (await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n            return;\n        }\n        this.publishMouseMoveEvent();\n        this.receiveMouseMoveEvent();\n    }\n    /**\n     * Publishes 'mousemove' events if the user has pressed the primary mouse button, but only if this document does not have the focus,\n     * so that the active document can dispatch the events on its event bus.\n     */\n    publishMouseMoveEvent() {\n        Beans.get(FocusMonitor).focus$\n            .pipe(switchMap(hasFocus => hasFocus ? EMPTY : fromEvent(document, 'mousemove')), filter(event => event.buttons === PRIMARY_MOUSE_BUTTON), auditTime(20), takeUntil(this._destroy$))\n            .subscribe((event) => {\n            const options = { headers: new Map().set(DISPATCHER_ID_HEADER$1, this._dispatcherId) };\n            Beans.get(MessageClient).publish(MOUSEMOVE_EVENT_TOPIC, [event.screenX, event.screenY], options);\n        });\n    }\n    /**\n     * Receives 'mousemove' events from other documents, but only if this document has the focus, and dispatches them on the event bus.\n     */\n    receiveMouseMoveEvent() {\n        // Consume synth mouse events only if owning the focus.\n        Beans.get(FocusMonitor).focus$\n            .pipe(switchMap(hasFocus => hasFocus ? Beans.get(MessageClient).observe$(MOUSEMOVE_EVENT_TOPIC) : EMPTY), filter(msg => msg.headers.get(DISPATCHER_ID_HEADER$1) !== this._dispatcherId), mapToBody(), takeUntil(this._destroy$))\n            .subscribe(([screenX, screenY]) => {\n            const sciMouseEvent = new Event('sci-mousemove');\n            sciMouseEvent.screenX = screenX;\n            sciMouseEvent.screenY = screenY;\n            document.dispatchEvent(sciMouseEvent);\n        });\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Indicates that the primary mouse button is pressed (usually left).\n */\nconst PRIMARY_MOUSE_BUTTON = 1;\n/**\n * Message header to pass the dispatcher's identity.\n */\nconst DISPATCHER_ID_HEADER$1 = 'ɵDISPATCHER_ID';\n/**\n * Topic to publish 'mousemove' events so that they can be consumed by dispatchers of other documents.\n */\nconst MOUSEMOVE_EVENT_TOPIC = 'ɵMOUSEMOVE';\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Dispatches 'mouseup' events originating from other documents as synthetic 'sci-mouseup' events on the document event bus.\n *\n * Mouse event dispatching is important if having non-focusable scrollbars which are positioned at the iframe border. It enables the user\n * to scroll seamlessly even when the mouse cursor leaves the iframe.\n *\n * @internal\n */\nclass MouseUpEventDispatcher {\n    constructor() {\n        this._destroy$ = new Subject();\n        this._dispatcherId = UUID.randomUUID();\n        // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n        // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n        this.installMouseEventDispatcher().then();\n    }\n    /**\n     * Installs mouse event dispatching, but only if not loaded as activator.\n     */\n    async installMouseEventDispatcher() {\n        if (await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n            return;\n        }\n        this.publishMouseUpEvent();\n        this.receiveMouseMoveEvent();\n    }\n    /**\n     * Publishes 'mouseup' events, but only if this document does not have the focus, so that the active document can dispatch the events on its event bus.\n     */\n    publishMouseUpEvent() {\n        Beans.get(FocusMonitor).focus$\n            .pipe(switchMap(hasFocus => hasFocus ? EMPTY : fromEvent(window, 'mouseup', { capture: true })), takeUntil(this._destroy$))\n            .subscribe(() => {\n            const options = { headers: new Map().set(DISPATCHER_ID_HEADER, this._dispatcherId) };\n            Beans.get(MessageClient).publish(MOUSEUP_EVENT_TOPIC, undefined, options);\n        });\n    }\n    /**\n     * Receives 'mouseup' events from other documents, but only if this document has the focus, and dispatches them on the event bus.\n     */\n    receiveMouseMoveEvent() {\n        Beans.get(FocusMonitor).focus$\n            .pipe(switchMap(hasFocus => hasFocus ? Beans.get(MessageClient).observe$(MOUSEUP_EVENT_TOPIC) : EMPTY), filter(msg => msg.headers.get(DISPATCHER_ID_HEADER) !== this._dispatcherId), mapToBody(), takeUntil(this._destroy$))\n            .subscribe(() => {\n            document.dispatchEvent(new Event('sci-mouseup'));\n        });\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Message header to pass the dispatcher's identity.\n */\nconst DISPATCHER_ID_HEADER = 'ɵDISPATCHER_ID';\n/**\n * Topic to publish 'mouseup' events so that they can be consumed by dispatchers of other documents.\n */\nconst MOUSEUP_EVENT_TOPIC = 'ɵMOUSEUP';\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows web content displayed in a {@link SciRouterOutletElement `<sci-router-outlet>`} to define its preferred size.\n *\n * The preferred size of an element is the minimum size that will allow it to display normally.\n * Setting a preferred size is useful if the outlet is displayed in a layout that aligns its items based on the items's content size.\n *\n * When setting a preferred size, the outlet containing this microfrontend will adapt its size to the reported preferred size.\n *\n * @category Preferred Size\n */\nclass PreferredSizeService {\n    constructor() {\n        this._destroy$ = new Subject();\n        this._fromDimensionElementChange$ = new Subject();\n        this._preferredSizePublisher = new PreferredSizePublisher();\n    }\n    /**\n     * Sets the preferred size of this web content.\n     * The size is reported to the router outlet embedding this web content and is used as the outlet's size.\n     */\n    setPreferredSize(preferredSize) {\n        this._preferredSizePublisher.publish(preferredSize);\n    }\n    /**\n     * Determines the preferred size from the given element's dimension and reports it to the router outlet embedding this web content.\n     * As the value for the preferred size, the `offset-width` and `offset-height` of the element are used, which is the total amount of space\n     * the element occupies, including the width of the visible content, scrollbars (if any), padding, and border.\n     *\n     * When the size of the element changes, the changed size is reported to the outlet, which then adaps its size accordingly.\n     * To stop the notifying of the preferred size to the outlet, pass `undefined` as the value, which also unsets the preferred size.\n     *\n     * If the element is removed from the DOM, the preferred size is reset and reporting suspended until it is attached again.\n     * If a new element is set as dimension observer, then the previous one is unsubscribed.\n     *\n     * *Prerequisites*\n     * - The element to be observed must behave as block-level box and not as inline-level box. So, if you want to observe an inline element,\n     *   set its display type to either `block` or `inline-block`.\n     * - If the element to be observed should not fill the remaining space and may change in size, we recommend taking it out of the document\n     *   element flow, i.e., position it absolutely without defining a width and height. Otherwise, once the element has reported a preferred\n     *   size, it could not shrink below that size.\n     *\n     * @param element - The element of which the preferred size is to be observed and used as the outlet's size.\n     */\n    fromDimension(element) {\n        this._fromDimensionElementChange$.next();\n        if (!element) {\n            this.resetPreferredSize();\n            return;\n        }\n        fromDimension$(element)\n            .pipe(takeUntil(merge(this._fromDimensionElementChange$, this._destroy$)))\n            .subscribe(dimension => {\n            // If the element is removed from the DOM, the preferred size is reset and reporting suspended until it is attached again.\n            if (!document.body.contains(dimension.element)) {\n                this.resetPreferredSize();\n            }\n            else {\n                this.setPreferredSize({\n                    minWidth: `${dimension.offsetWidth}px`,\n                    width: `${dimension.offsetWidth}px`,\n                    maxWidth: `${dimension.offsetWidth}px`,\n                    minHeight: `${dimension.offsetHeight}px`,\n                    height: `${dimension.offsetHeight}px`,\n                    maxHeight: `${dimension.offsetHeight}px`,\n                });\n            }\n        });\n    }\n    /**\n     * Resets the preferred size. Has no effect if no preferred size is set.\n     */\n    resetPreferredSize() {\n        this._preferredSizePublisher.publish(null);\n    }\n    /** @ignore */\n    preDestroy() {\n        this._preferredSizePublisher.destroy();\n        this._destroy$.next();\n    }\n}\n/**\n * Publishes the preferred size to the outlet embedding this page.\n */\nclass PreferredSizePublisher {\n    constructor() {\n        this._preferredSize$ = new Subject();\n        this._destroy$ = new Subject();\n        this._preferredSize$\n            .pipe(combineLatestWith(Beans.get(ContextService).observe$(OUTLET_CONTEXT).pipe(filter(Boolean))), takeUntil(this._destroy$))\n            .subscribe(([preferredSize, outletContext]) => runSafe(() => {\n            const topic = RouterOutlets.preferredSizeTopic(outletContext.uid);\n            Beans.get(MessageClient).publish(topic, preferredSize);\n        }));\n    }\n    publish(preferredSize) {\n        this._preferredSize$.next(preferredSize);\n    }\n    destroy() {\n        this._destroy$.next();\n    }\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Propagates keyboard events for keystrokes registered in the current context or any parent contexts.\n *\n * This dispatcher listens to keyboard events for keystrokes registered in parent contexts and publishes\n * them as {@link KeyboardEventInit} events to the topic {@link RouterOutlets.keyboardEventTopic}.\n *\n * @internal\n */\nclass KeyboardEventDispatcher {\n    constructor() {\n        this._destroy$ = new Subject();\n        // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n        // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n        this.installKeystrokeDispatcher().then();\n    }\n    /**\n     * Dispatches keyboard events of registered keystrokes to the embedding router outlet.\n     */\n    async installKeystrokeDispatcher() {\n        if (!await Beans.get(ContextService).isPresent(OUTLET_CONTEXT) || await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n            return;\n        }\n        Beans.get(ContextService).names$()\n            .pipe(map(contextNames => Array.from(contextNames)), filterArray(contextName => contextName.startsWith(KEYSTROKE_CONTEXT_NAME_PREFIX)), mapArray(keystrokeContextName => keystrokeContextName.substring(KEYSTROKE_CONTEXT_NAME_PREFIX.length)), mapArray(keystroke => this.observeKeyboardEvent$(keystroke)), switchMap$1(keyboardEvents => merge(...keyboardEvents)), withLatestFrom(Beans.get(ContextService).observe$(OUTLET_CONTEXT)), takeUntil(this._destroy$))\n            .subscribe(([event, outletContext]) => runSafe(() => {\n            const eventInit = {\n                key: event.key,\n                ctrlKey: event.ctrlKey,\n                shiftKey: event.shiftKey,\n                altKey: event.altKey,\n                metaKey: event.metaKey,\n                bubbles: event.bubbles,\n            };\n            const publishTo = RouterOutlets.keyboardEventTopic(outletContext.uid, event.type);\n            Beans.get(MessageClient).publish(publishTo, eventInit);\n        }));\n    }\n    /**\n     * Observes keyboard events matching the given keystroke, applying flags as declared on the keystroke.\n     */\n    observeKeyboardEvent$(keystrokeFormat) {\n        return Beans.get(ContextService).observe$(KEYSTROKE_CONTEXT_NAME_PREFIX + keystrokeFormat, { collect: true })\n            .pipe(switchMap$1((keystrokeFlags) => {\n            const keystroke = Keystroke\n                .fromString(keystrokeFormat)\n                .withFlags(keystrokeFlags.reduceRight((acc, flags) => ({ ...acc, ...flags }), {}));\n            return fromEvent(document, keystroke.eventType, { capture: true })\n                .pipe(filter(event => event.bubbles && !!event.key), filter(event => Keystroke.fromEvent(event).parts === keystroke.parts), applyKeystrokeFlags(keystroke.flags));\n        }));\n    }\n    preDestroy() {\n        this._destroy$.next();\n    }\n}\n/**\n * Applies keystroke flags on each keyboard event emitted by the source Observable.\n *\n * Note that `preventDefault()` has to be invoked on the original event, which has its `isTrusted` flag set to `true`.\n *\n * For more information about trusted events\n * @see https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events\n * @see https://www.chromestatus.com/features#istrusted\n */\nfunction applyKeystrokeFlags(flags) {\n    return tap(keystrokeEvent => {\n        if (flags?.preventDefault) {\n            keystrokeEvent.preventDefault();\n        }\n    });\n}\n\n/**\n * Subscribes to messages, passing each message to the callback.\n *\n * The callback can return a response to be transported to the requestor, if any. When the final response is produced,\n * the handler terminates the communication, completing the requestor's Observable. If the callback errors, the error is\n * transported to the requestor, erroring the requestor's Observable.\n *\n * @internal\n */\nclass MessageHandler {\n    constructor(message$, _callback) {\n        this._callback = _callback;\n        this._messageClient = Beans.get(MessageClient);\n        /**\n         * Represents this handler's subscription for receiving messages. Calling {@link Subscription.unsubscribe} will also complete\n         * the Observable of all requestors, if any.\n         */\n        this.subscription = new Subscription();\n        this.subscription.add(message$.subscribe(message => {\n            if (message.headers.has(MessageHeaders.ReplyTo)) {\n                this.handleMessage(message);\n            }\n            else {\n                this.consumeMessage(message);\n            }\n        }));\n    }\n    /**\n     * The requestor has initiated a fire-and-forget communication, thus we simply pass the message to the callback and ignore response(s).\n     */\n    consumeMessage(message) {\n        runSafe(() => this._callback(message));\n    }\n    /**\n     * The requestor has initiated a request-response communication, thus we pass the request to the callback and send response(s)\n     * or a potential completion or error to the requestor.\n     */\n    handleMessage(request) {\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const platformStopping$ = MicrofrontendPlatform.state$.pipe(filter(state => state === PlatformState.Stopping));\n        // Invoke the callback to produce value(s).\n        let reply;\n        try {\n            reply = this._callback(request);\n        }\n        catch (error) {\n            reply = throwError(() => error);\n        }\n        // Send response(s) or a potential completion or error back to the requestor.\n        let observableStatus = 'alive';\n        this.subscription.add(fromCallbackResult$(reply)\n            .pipe(takeUntilUnsubscribe(replyTo), // unsubscribe once the requestor terminates the communication\n        takeUntil(platformStopping$), // terminate the communication when the platform is shutting down.\n        finalize(() => {\n            // Note that the `finalize` operator is also called when unsubscribing from the observable, e.g. when unsubscribing\n            // from the handler. If the observable errors or completes, the `finalize` operator is guaranteed to be called after\n            // the observer's `complete` or `error` methods; thus, the variable `observableStatus` is only `alive` when\n            // unsubscribing from the observable.\n            if (observableStatus === 'alive') {\n                // Terminate the communication when the handler is being unsubscribed.\n                const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL);\n                this._messageClient.publish(replyTo, undefined, { headers: replyHeaders }).then();\n            }\n        }))\n            .subscribe({\n            next: next => {\n                // Transport the value to the requestor.\n                const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK);\n                this._messageClient.publish(replyTo, next, { headers: replyHeaders }).then();\n            },\n            error: error => {\n                observableStatus = 'errored';\n                // Transport the error to the requestor.\n                const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR);\n                this._messageClient.publish(replyTo, stringifyError(error), { headers: replyHeaders }).then();\n            },\n            complete: () => {\n                observableStatus = 'completed';\n                // Terminate the communication when finished producing responses.\n                const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL);\n                this._messageClient.publish(replyTo, undefined, { headers: replyHeaders }).then();\n            },\n        }));\n    }\n}\n/**\n * Creates an Observable from the result of the callback.\n *\n * If the callback returns no value (`void`), returns `undefined`, or returns a Promise that resolves to `undefined`,\n * the returned observable will complete immediately.\n */\nfunction fromCallbackResult$(value) {\n    if (value === undefined) {\n        return EMPTY;\n    }\n    if (value instanceof Observable) {\n        return value;\n    }\n    if (value instanceof Promise) {\n        return from(value).pipe(filter(resolved => resolved !== undefined));\n    }\n    return of(value);\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * @internal\n */\nclass ɵMessageClient {\n    constructor() {\n        this._brokerGateway = Beans.get(BrokerGateway);\n    }\n    publish(topic, message, options) {\n        const topicMessage = {\n            topic,\n            retain: options?.retain ?? false,\n            headers: new Map(options?.headers),\n            body: message,\n        };\n        return this._brokerGateway.postMessage(MessagingChannel.Topic, topicMessage);\n    }\n    request$(topic, request, options) {\n        // IMPORTANT:\n        // When sending a request, the platform adds various headers to the message. Therefore, to support multiple subscriptions\n        // to the returned Observable, each subscription must have its individual message instance and headers map.\n        // In addition, the headers are copied to prevent modifications before the effective subscription.\n        const headers = new Map(options?.headers);\n        return defer(() => {\n            const topicMessage = {\n                topic,\n                retain: options?.retain ?? false,\n                headers: new Map(headers),\n                body: request,\n            };\n            return this._brokerGateway.requestReply$(MessagingChannel.Topic, topicMessage).pipe(throwOnErrorStatus());\n        });\n    }\n    observe$(topic) {\n        return this._brokerGateway.subscribe$({\n            messageChannel: MessagingChannel.Topic,\n            subscribeChannel: MessagingChannel.TopicSubscribe,\n            unsubscribeChannel: MessagingChannel.TopicUnsubscribe,\n            newSubscribeCommand: (subscriberId) => ({ topic, subscriberId, headers: new Map() }),\n        });\n    }\n    onMessage(topic, callback) {\n        return new MessageHandler(Beans.get(MessageClient).observe$(topic), callback).subscription;\n    }\n    subscriberCount$(topic) {\n        return new Observable(observer => {\n            const unsubscribe$ = new Subject();\n            this.request$(PlatformTopics.RequestSubscriberCount, topic)\n                .pipe(mapToBody(), takeUntil(unsubscribe$))\n                .subscribe({\n                next: reply => observer.next(reply),\n                error: error => observer.error(error),\n                complete: noop, // As per the API, the Observable never completes, even if receiving a TERMINAL signal.\n            });\n            return () => unsubscribe$.next();\n        });\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * @internal\n */\nclass ɵIntentClient {\n    constructor() {\n        this._brokerGateway = Beans.get(BrokerGateway);\n    }\n    publish(intent, body, options) {\n        const intentMessage = {\n            intent,\n            retain: options?.retain ?? false,\n            headers: new Map(options?.headers),\n            capability: undefined,\n            body,\n        };\n        return this._brokerGateway.postMessage(MessagingChannel.Intent, intentMessage);\n    }\n    request$(intent, body, options) {\n        // IMPORTANT:\n        // When sending a request, the platform adds various headers to the message. Therefore, to support multiple subscriptions\n        // to the returned Observable, each subscription must have its individual message instance and headers map.\n        // In addition, the headers are copied to prevent modifications before the effective subscription.\n        const headers = new Map(options?.headers);\n        return defer(() => {\n            const intentMessage = {\n                intent,\n                retain: options?.retain ?? false,\n                headers: new Map(headers) /* make a copy for each subscription to support multiple subscriptions */,\n                capability: undefined,\n                body,\n            };\n            return this._brokerGateway.requestReply$(MessagingChannel.Intent, intentMessage).pipe(throwOnErrorStatus());\n        });\n    }\n    observe$(selector) {\n        return this._brokerGateway.subscribe$({\n            messageChannel: MessagingChannel.Intent,\n            subscribeChannel: MessagingChannel.IntentSubscribe,\n            unsubscribeChannel: MessagingChannel.IntentUnsubscribe,\n            newSubscribeCommand: (subscriberId) => ({ selector, subscriberId, headers: new Map() }),\n        });\n    }\n    onIntent(selector, callback) {\n        return new MessageHandler(Beans.get(IntentClient).observe$(selector), callback).subscription;\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Central point for a microfrontend to connect to the platform host in order to interact with the platform and other microfrontends.\n * This class cannot be instantiated. All functionality is provided by static methods.\n *\n * @see MicrofrontendPlatform\n * @see MicrofrontendPlatformHost\n * @see MicrofrontendPlatformClient\n *\n * @category Platform\n * @category Lifecycle\n */\nclass MicrofrontendPlatformClient {\n    constructor() {\n    }\n    /**\n     * Connects this microfrontend to the platform host.\n     *\n     * A microfrontend should connect to the platform host during application bootstrapping. In Angular, for example, this is typically\n     * done in an app initializer. Since connecting to the platform host is an asynchronous operation, the microfrontend should wait\n     * for the Promise to resolve before interacting with the platform or other microfrontends.\n     *\n     * The platform connects to the host through its window hierarchy. Therefore, the microfrontend must be embedded as direct or\n     * indirect child window of the host application window.\n     *\n     * @param  symbolicName - Specifies the symbolic name of the application of this microfrontend. The application must be registered\n     *         in the platform host under this symbol.\n     * @param  connectOptions - Controls how to connect to the platform host.\n     * @return Promise that resolves when successfully connected to the platform host, or that rejects otherwise, e.g., if not allowed\n     *         to connect because not registered.\n     */\n    static connect(symbolicName, connectOptions) {\n        return MicrofrontendPlatform.startPlatform(() => {\n            // Provide environment for running the platform as client.\n            providePlatformEnvironment({ symbolicName, isPlatformHost: false });\n            provideClientEnvironment({ ...connectOptions, connectRunlevel: Runlevel.Zero });\n            // Provide initializers to start the platform as client.\n            provideClientStartupInitializers();\n        });\n    }\n    /**\n     * Tests whether this microfrontend is connected to the platform host.\n     */\n    static async isConnected() {\n        if (MicrofrontendPlatform.state === PlatformState.Stopped) {\n            return false;\n        }\n        const brokerGateway = Beans.opt(BrokerGateway);\n        if (!brokerGateway) {\n            return false;\n        }\n        return brokerGateway.isConnected();\n    }\n    /**\n     * Signals readiness to notify the platform that the microfrontend has completed initialization.\n     *\n     * When navigating to the microfrontend with `OutletRouter.navigate('path/to/microfrontend', {showSplash: true})`,\n     * a splash is displayed until the microfrontend signals readiness.\n     *\n     * @see SciRouterOutletElement\n     * @see NavigationOptions.showSplash\n     */\n    static signalReady() {\n        Beans.get(ContextService).lookup(OUTLET_CONTEXT).then(outletContext => {\n            if (!outletContext) {\n                return Promise.reject(Error('[NullOutletContextError] not running in the context of a <sci-router-outlet>.'));\n            }\n            return Beans.get(MessageClient).publish(RouterOutlets.signalReadyTopic(outletContext.uid));\n        });\n    }\n}\n/**\n * Provides the environment for running the platform as client.\n *\n * @internal\n */\nfunction provideClientEnvironment(connectOptions) {\n    Beans.registerIfAbsent(MessageClient, { useClass: ɵMessageClient, eager: true, destroyOrder: BeanDestroyOrders.MESSAGING });\n    Beans.registerIfAbsent(IntentClient, { useClass: ɵIntentClient, eager: true, destroyOrder: BeanDestroyOrders.MESSAGING });\n    Beans.registerIfAbsent(OutletRouter);\n    Beans.registerIfAbsent(RelativePathResolver);\n    Beans.registerIfAbsent(RouterOutletUrlAssigner);\n    Beans.register(FocusInEventDispatcher, { eager: true });\n    Beans.register(MouseMoveEventDispatcher, { eager: true });\n    Beans.register(MouseUpEventDispatcher, { eager: true });\n    Beans.register(KeyboardEventDispatcher, { eager: true });\n    Beans.register(PreferredSizeService, { eager: true });\n    Beans.register(ContextService);\n    Beans.register(ManifestService);\n    Beans.register(PlatformPropertyService);\n    Beans.register(FocusMonitor);\n    provideBrokerGateway(connectOptions);\n}\n/**\n * Provide initializers to start the platform as client.\n */\nfunction provideClientStartupInitializers() {\n    // Block until received platform properties to support synchronous access via `PlatformPropertyService#properties`.\n    Beans.registerInitializer({\n        useExisting: PlatformPropertyService,\n        runlevel: Runlevel.Two,\n    });\n    // Block until received list of applications to support synchronous access via `ManifestService#applications`.\n    Beans.registerInitializer({\n        useExisting: ManifestService,\n        runlevel: Runlevel.Two,\n    });\n    // Register router outlet, delaying its instantiation until initialized the platform.\n    // Otherwise, router outlet construction may fail or result in unexpected behavior, for example, because beans are not yet registered.\n    Beans.registerInitializer({\n        useFunction: () => SciRouterOutletElement.define(),\n        runlevel: Runlevel.Two,\n    });\n}\n/**\n * Provides the gateway to communicate with the host.\n */\nfunction provideBrokerGateway(connectOptions) {\n    if (connectOptions.connect ?? true) {\n        Beans.register(ɵBrokerGateway, {\n            useFactory: () => new ɵBrokerGateway(connectOptions),\n            destroyOrder: BeanDestroyOrders.MESSAGING,\n        });\n        Beans.register(BrokerGateway, { useExisting: ɵBrokerGateway });\n        Beans.registerInitializer({ useExisting: ɵBrokerGateway, runlevel: connectOptions.connectRunlevel });\n    }\n    else {\n        Beans.register(BrokerGateway, { useClass: NullBrokerGateway });\n    }\n}\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Main entry point for configuring and starting the platform in the host application. This class cannot be instantiated. All functionality is provided by static methods.\n *\n * The host application, sometimes also called the container application, provides the top-level integration container for microfrontends. Typically, it is the web\n * application which the user loads into the browser that provides the main application shell, defining areas to embed microfrontends.\n *\n * In the host application the SCION Microfrontend Platform is configured and web applications that want to interact with the platform are registered.\n * The host application can provide a manifest to contribute behavior to integrated applications. For more information, see {@link HostConfig.manifest}\n * in {@link MicrofrontendPlatformConfig.host}.\n *\n * If integrating the SCION Microfrontend Platform in a library, the manifest of the host can be augmented by registering a {@link HostManifestInterceptor}.\n *\n * @see MicrofrontendPlatform\n * @see MicrofrontendPlatformHost\n * @see MicrofrontendPlatformClient\n *\n * @category Platform\n * @category Lifecycle\n */\nclass MicrofrontendPlatformHost {\n    constructor() {\n    }\n    /**\n     * Starts the platform host.\n     *\n     * In the host application the SCION Microfrontend Platform is configured and web applications that want to interact with the platform are registered.\n     *\n     * The host application can provide a manifest to declare intentions and contribute behavior to integrated applications via {@link HostConfig.manifest} in\n     * {@link MicrofrontendPlatformConfig.host}. The manifest can be specified either as an object literal or as a URL to load it over the network.\n     *\n     * The platform should be started during the bootstrapping of the host application. In Angular, for example, the platform is typically\n     * started in an app initializer. Since starting the platform host may take some time, you should wait for the startup Promise to resolve\n     * before interacting with the platform.\n     *\n     * @param  config - Configures the platform and lists applications allowed to interact with the platform.\n     * @return A Promise that resolves when started the platform host.\n     */\n    static start(config) {\n        return MicrofrontendPlatform.startPlatform(() => {\n            const symbolicName = config.host?.symbolicName || 'host';\n            // Provide environment for running the platform as host.\n            providePlatformEnvironment({ symbolicName, isPlatformHost: true });\n            provideClientEnvironment({\n                messageDeliveryTimeout: config.host?.messageDeliveryTimeout,\n                brokerDiscoverTimeout: config.host?.brokerDiscoverTimeout,\n                connectRunlevel: Runlevel.One, // Connect to the broker in runlevel 1, that is, after registration of the applications.\n            });\n            provideHostEnvironment(config);\n            // Provide initializers to start the platform as host.\n            provideHostStartupInitializers(symbolicName, config);\n        });\n    }\n    /**\n     * Monitors the startup progress of the platform host.\n     *\n     * Starting the platform host may take some time. During startup, the manifests of the registered applications are fetched,\n     * activator microfrontends are installed, and the platform waits until all applications have signaled readiness.\n     *\n     * Subscribe to this Observable to monitor the startup progress and provide feedback to the user like displaying a\n     * progress bar or a spinner. The Observable reports the progress as a percentage number. The Observable completes\n     * after the platform has been started.\n     */\n    static get startupProgress$() {\n        this._startupProgress$ = this._startupProgress$ || new Observable(observer => {\n            const unsubscribe$ = new ReplaySubject(1);\n            const progress$ = defer(() => Beans.get(StartupProgressMonitor).progress$).pipe(takeUntil(unsubscribe$));\n            if (MicrofrontendPlatform.state === PlatformState.Stopped) {\n                MicrofrontendPlatform.whenState(PlatformState.Starting).then(() => progress$.subscribe(observer));\n            }\n            else {\n                progress$.subscribe(observer);\n            }\n            return () => unsubscribe$.next();\n        });\n        return this._startupProgress$;\n    }\n}\n/**\n * Provides the environment for running the platform as host.\n */\nfunction provideHostEnvironment(config) {\n    Beans.register(MicrofrontendPlatformConfig, { useValue: config });\n    Beans.register(HostManifestInterceptor, { useClass: ɵHostManifestInterceptor, multi: true });\n    Beans.register(ClientRegistry, { useClass: ɵClientRegistry, destroyOrder: BeanDestroyOrders.CORE });\n    Beans.registerIfAbsent(HttpClient);\n    Beans.register(ManifestRegistry, { useClass: ɵManifestRegistry, eager: true });\n    Beans.register(ApplicationRegistry, { eager: true });\n    Beans.register(FocusTracker, { eager: true });\n    Beans.register(MessageBroker, { destroyOrder: BeanDestroyOrders.BROKER });\n    Beans.register(ManifestFetcher);\n    Beans.register(TopicSubscriptionRegistry, { destroyOrder: BeanDestroyOrders.BROKER });\n    Beans.register(IntentSubscriptionRegistry, { destroyOrder: BeanDestroyOrders.BROKER });\n    Beans.register(IntentInterceptor, { useClass: MicrofrontendIntentNavigator, multi: true });\n    provideLivenessProbeConfig(config.liveness);\n    provideStartupProgressMonitor();\n}\n/**\n * Provide initializers to start the platform as host.\n */\nfunction provideHostStartupInitializers(symbolicName, config) {\n    // Construct message broker immediately to not lose connect requests from clients.\n    Beans.registerInitializer({\n        useExisting: MessageBroker,\n        runlevel: Runlevel.Zero,\n    });\n    // Install registered applications.\n    Beans.registerInitializer({\n        useFunction: () => new AppInstaller({ ...config.host, symbolicName }, config.applications).install(),\n        runlevel: Runlevel.Zero,\n    });\n    // Provide platform properties to clients.\n    Beans.registerInitializer({\n        useFunction: () => Beans.get(MessageClient).publish(PlatformTopics.PlatformProperties, config.properties || {}, { retain: true }),\n        runlevel: Runlevel.Two,\n    });\n    // Provide list of installed applications to clients.\n    Beans.registerInitializer({\n        useFunction: () => Beans.get(MessageClient).publish(PlatformTopics.Applications, Beans.get(ApplicationRegistry).getApplications(), { retain: true }),\n        runlevel: Runlevel.Two,\n    });\n    // Register router outlet, delaying its instantiation until initialized the platform.\n    // Otherwise, router outlet construction may fail or result in unexpected behavior, for example, because beans are not yet registered.\n    Beans.registerInitializer({\n        useFunction: () => SciRouterOutletElement.define(),\n        runlevel: Runlevel.Two,\n    });\n    // Block until received platform properties to support synchronous access via `PlatformPropertyService#properties`.\n    Beans.registerInitializer({\n        useExisting: PlatformPropertyService,\n        runlevel: Runlevel.Three,\n    });\n    // Block until received list of applications to support synchronous access via `ManifestService#applications`.\n    Beans.registerInitializer({\n        useExisting: ManifestService,\n        runlevel: Runlevel.Three,\n    });\n    // Install activator microfrontends.\n    Beans.registerInitializer({\n        useClass: ActivatorInstaller,\n        runlevel: Runlevel.Three,\n    });\n}\n/**\n * Provides beans to monitor the startup progress of the host.\n */\nfunction provideStartupProgressMonitor() {\n    const monitor = new ProgressMonitor();\n    const [platformProgressMonitor, manifestLoadProgressMonitor, activatorLoadProgressMonitor] = monitor.split(1, 3, 5);\n    Beans.register(StartupProgressMonitor, { useValue: monitor });\n    Beans.register(ManifestLoadProgressMonitor, { useValue: manifestLoadProgressMonitor });\n    Beans.register(ActivatorLoadProgressMonitor, { useValue: activatorLoadProgressMonitor });\n    MicrofrontendPlatform.whenState(PlatformState.Started).then(() => platformProgressMonitor.done());\n}\n/**\n * Provides beans describing how often to check connected clients to be alive.\n */\nfunction provideLivenessProbeConfig(config) {\n    const defaults = { interval: 60, timeout: 10 };\n    const interval = config?.interval ?? defaults.interval;\n    const timeout = config?.timeout ?? defaults.timeout;\n    const invalid = interval <= 2 * timeout;\n    if (invalid) {\n        Beans.get(Logger).warn(`[LivenessProbeConfig] Illegal config provided. The interval [${interval}s] must be greater than twice the timeout period [${timeout}s]. Using platform defaults instead: [interval=${defaults.interval}s, timeout=${defaults.timeout}s]`);\n    }\n    Beans.registerIfAbsent(CLIENT_PING_INTERVAL, { useValue: (invalid ? defaults.interval : interval) * 1000 });\n    Beans.registerIfAbsent(CLIENT_PING_TIMEOUT, { useValue: (invalid ? defaults.timeout : timeout) * 1000 });\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Configures the interaction of the host application with the platform.\n *\n * As with micro applications, you can provide a manifest for the host, allowing the host to contribute capabilities and declare intentions.\n *\n * @category Platform\n */\nclass HostConfig {\n}\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Entry point for all public APIs of this package.\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Entry point for all public APIs of this package.\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Entry point for all public APIs of this package.\n */\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Entry point for all public APIs of this package.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACTIVATION_CONTEXT, APP_IDENTITY, BeanDestroyOrders, CapabilityInterceptor, ConsoleLogger, ContextService, FocusMonitor, Handler, HostConfig, HostManifestInterceptor, IS_PLATFORM_HOST, IntentClient, IntentInterceptor, Logger, LoggingContext, ManifestService, MessageClient, MessageHeaders, MessageInterceptor, MicrofrontendPlatform, MicrofrontendPlatformClient, MicrofrontendPlatformConfig, MicrofrontendPlatformHost, MicrofrontendPlatformStopper, NULL_LOGGER, OUTLET_CONTEXT, ObservableDecorator, OutletRouter, PRIMARY_OUTLET, PlatformCapabilityTypes, PlatformPropertyService, PlatformState, PreferredSizeService, QualifierMatcher, RelativePathResolver, RequestError, RequestMethods, ResponseStatusCodes, RouterOutletUrlAssigner, Runlevel, SciRouterOutletElement, TopicMatcher, chainInterceptors, decorateObservable, mapToBody, provideClientEnvironment, providePlatformEnvironment, takeUntilUnsubscribe, throwOnErrorStatus, ɵHostManifestInterceptor, ɵMicrofrontendPlatformStopper };\n//# sourceMappingURL=scion-microfrontend-platform.mjs.map\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Lifecycle states of the microfrontend platform.\n *\n * @category Platform\n */\nexport enum PlatformState {\n  /**\n   * Indicates that the platform is about to start.\n   */\n  Starting = 1,\n  /**\n   * Indicates that the platform started.\n   */\n  Started = 2,\n  /**\n   * Indicates that the platform is about to stop.\n   */\n  Stopping = 3,\n  /**\n   * Indicates that the platform is not yet started.\n   */\n  Stopped = 4,\n}\n\n/**\n * Runlevels are used to control in which startup phase to execute initializers when starting the platform.\n *\n * The platform reports that it has started after all initializers have completed successfully.\n *\n * @internal\n */\nexport enum Runlevel {\n  /**\n   * In runlevel 0, the platform host fetches manifests of registered micro applications.\n   */\n  Zero = 0,\n  /**\n   * In runlevel 1, the platform constructs eager beans.\n   */\n  One = 1,\n  /**\n   * From runlevel 2 and above, messaging is enabled. This is the default runlevel at which initializers execute if not specifying any runlevel.\n   */\n  Two = 2,\n  /**\n   * In runlevel 3, the platform host installs activator microfrontends.\n   */\n  Three = 3,\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Manifest of an application.\n *\n * The manifest is a special file that contains information about a micro application. A micro application declares\n * its intentions and capabilities in its manifest file. The manifest needs to be registered in the host application.\n *\n * @category Platform\n * @category Intention API\n */\nexport interface Manifest {\n  /**\n   * The name of the application, e.g. displayed in the DevTools.\n   */\n  name: string;\n  /**\n   * URL to the application root. The URL can be fully qualified, or a path relative to the origin under\n   * which serving the manifest file. If not specified, the origin of the manifest file acts as the base\n   * URL. The platform uses the base URL to resolve microfrontends such as activator endpoints.\n   * For a Single Page Application that uses hash-based routing, you typically specify the hash symbol (`#`)\n   * as the base URL.\n   */\n  baseUrl?: string;\n  /**\n   * Functionality which this application intends to use.\n   */\n  intentions?: Intention[];\n  /**\n   * Functionality which this application provides that qualified apps can call via intent.\n   */\n  capabilities?: Capability[];\n}\n\n/**\n * Represents a dictionary of key-value pairs to qualify an intention, intent or capability.\n *\n * See {@link Intention}, {@link Capability} or {@link Intent} for the usage of wildcards\n * in qualifier properties.\n *\n * @category Intention API\n */\nexport interface Qualifier {\n  [key: string]: string | number | boolean;\n}\n\n/**\n * Represents an application registered in the platform.\n *\n * @category Platform\n */\nexport interface Application {\n  /**\n   * Unique symbolic name of the application.\n   */\n  symbolicName: string;\n  /**\n   * Name of the application as specified in the manifest.\n   */\n  name: string;\n  /**\n   * URL to the application root.\n   */\n  baseUrl: string;\n  /**\n   * URL to the manifest of this application.\n   */\n  manifestUrl: string;\n  /**\n   * Maximum time (in milliseconds) that the host waits until the manifest for this application is loaded.\n   *\n   * This is the effective timeout, i.e, either the application-specific timeout as defined in {@link ApplicationConfig.manifestLoadTimeout},\n   * or the global timeout as defined in {@link MicrofrontendPlatformConfig.manifestLoadTimeout}, otherwise `undefined`.\n   */\n  manifestLoadTimeout?: number;\n  /**\n   * Maximum time (in milliseconds) that the host waits for this application to signal readiness.\n   *\n   * This is the effective timeout, i.e, either the application-specific timeout as defined in {@link ApplicationConfig.activatorLoadTimeout},\n   * or the global timeout as defined in {@link MicrofrontendPlatformConfig.activatorLoadTimeout}, otherwise `undefined`.\n   */\n  activatorLoadTimeout?: number;\n  /**\n   * Indicates whether this application can interact with private capabilities of other applications.\n   */\n  scopeCheckDisabled: boolean;\n  /**\n   * Indicates whether this application can interact with capabilities of other applications without having to declare respective intentions.\n   */\n  intentionCheckDisabled: boolean;\n  /**\n   * Indicates whether this application can register and unregister intentions dynamically at runtime.\n   */\n  intentionRegisterApiDisabled: boolean;\n  /**\n   * Version of the SCION Microfrontend Platform used by this application.\n   */\n  platformVersion: Promise<string>;\n}\n\n/**\n * The term capability refers to the Intention API of the SCION Microfrontend Platform.\n *\n * A capability represents some functionality of a micro application that is available to qualified micro applications through the Intention API.\n * A micro application declares its capabilities in its manifest. Qualified micro applications can browse capabilities similar to a catalog, or\n * interact with capabilities via intent.\n *\n * A capability is formulated in an abstract way consisting of a type and optionally a qualifier. The type categorizes a capability in terms of its\n * functional semantics. A capability may also define a qualifier to differentiate different capabilities of the same type.\n *\n * A capability can have private or public visibility. If private, which is by default, the capability is not visible to other micro\n * applications; thus, it can only be invoked or browsed by the providing micro application itself.\n *\n * A capability can specify parameters which the intent issuer can/must pass along with the intent. Parameters are part of the contract between\n * the intent publisher and the capability provider. They do not affect the intent routing, unlike the qualifier.\n *\n * Metadata can be associated with a capability in its properties section. For example, if providing a microfrontend, the URL to the\n * microfrontend can be added as property, or if the capability contributes an item to a menu, its label to be displayed.\n *\n * @category Intention API\n */\nexport interface Capability {\n  /**\n   * Categorizes the capability in terms of its functional semantics (e.g., `microfrontend` if providing a microfrontend).\n   * It can be an arbitrary `string` literal and has no meaning to the platform.\n   */\n  type: string;\n  /**\n   * The qualifier is a dictionary of arbitrary key-value pairs to differentiate capabilities of the same `type` and is like\n   * an abstract description of the capability. It should include enough information to uniquely identify the capability.\n   *\n   * Intents must exactly match the qualifier of the capability, if any.\n   */\n  qualifier?: Qualifier;\n  /**\n   * Specifies parameters which the intent issuer can/must pass along with the intent.\n   *\n   * Parameters are part of the contract between the intent publisher and the capability provider.\n   * They do not affect the intent routing, unlike the qualifier.\n   */\n  params?: ParamDefinition[];\n  /**\n   * Controls if this capability is visible to other micro applications. If private, which is by default, the capability is not visible\n   * to other micro applications; thus, it can only be invoked or looked up by the providing micro application.\n   */\n  private?: boolean;\n  /**\n   * A short description to explain the capability.\n   */\n  description?: string;\n  /**\n   * Arbitrary metadata to be associated with the capability.\n   */\n  properties?: {\n    [key: string]: any;\n  };\n  /**\n   * Metadata about the capability (read-only, exclusively managed by the platform).\n   * @ignore\n   */\n  metadata?: {\n    /**\n     * Unique identity of this capability.\n     */\n    id: string;\n    /**\n     * Symbolic name of the application which provides this capability.\n     */\n    appSymbolicName: string;\n  };\n}\n\n/**\n * The term intention refers to the Intention API of the SCION Microfrontend Platform.\n *\n * An intention refers to one or more capabilities that a micro application wants to interact with.\n *\n * Intentions are declared in the application’s manifest and are formulated in an abstract way, consisting of a type\n * and optionally a qualifier. The qualifier is used to differentiate capabilities of the same type.\n *\n * @category Intention API\n */\nexport interface Intention {\n  /**\n   * The type of capability to interact with.\n   */\n  type: string;\n  /**\n   * Qualifies the capability which to interact with.\n   *\n   * The qualifier is a dictionary of arbitrary key-value pairs to differentiate capabilities of the same `type`.\n   *\n   * The intention must exactly match the qualifier of the capability, if any. The intention qualifier allows using\n   * wildcards to match multiple capabilities simultaneously.\n   *\n   * In the intention, the following wildcards are supported:\n   * - **Asterisk wildcard character (`*`):**\\\n   *   Matches capabilities with such a qualifier property no matter of its value (except `null` or `undefined`).\n   *   Use it like this: `{property: '*'}`.\n   * - **Partial wildcard (`**`):**\n   *   Matches capabilities even if having additional properties. Use it like this: `{'*': '*'}`.\n   */\n  qualifier?: Qualifier;\n  /**\n   * Metadata about this intention (read-only, exclusively managed by the platform).\n   * @ignore\n   */\n  metadata?: {\n    /**\n     * Unique identity of this intent declaration.\n     */\n    id: string;\n    /**\n     * Symbolic name of the application which declares this intention.\n     */\n    appSymbolicName: string;\n  };\n}\n\n/**\n * Built in capability types.\n *\n * @category Intention API\n */\nexport enum PlatformCapabilityTypes {\n  /**\n   * Type for registering an activator capability.\n   *\n   * @see ActivatorCapability\n   */\n  Activator = 'activator',\n  /**\n   * Type for registering a microfrontend capability.\n   *\n   * @see MicrofrontendCapability\n   */\n  Microfrontend = 'microfrontend',\n}\n\n/**\n * An activator allows a micro application to initialize and connect to the platform upon host application's startup,\n * i.e., when the user loads the web application into the browser.\n *\n * In the broadest sense, an activator is a kind of microfrontend, i.e. an HTML page that runs in an iframe. In contrast\n * to regular microfrontends, however, at platform startup, the platform loads activator microfrontends into hidden iframes\n * for the entire platform lifecycle, thus, providing a stateful session to the micro application on the client-side.\n *\n * Some typical use cases for activators are receiving messages and intents, preloading data, or flexibly providing capabilities.\n *\n * A micro application registers an activator as public _activator_ capability in its manifest, as follows:\n *\n * ```json\n * \"capabilities\": [\n *   {\n *     \"type\": \"activator\",\n *     \"private\": false,\n *     \"properties\": {\n *       \"path\": \"path/to/the/activator\"\n *     }\n *   }\n * ]\n * ```\n *\n * #### Activation Context\n * An activator's microfrontend runs inside an activation context. The context provides access\n * to the activator capability, allowing to read properties declared on the activator capability.\n *\n * You can obtain the activation context using the {@link ContextService} as following.\n *\n * ```ts\n * // Looks up the activation context.\n * const ctx: ActivationContext = await Beans.get(ContextService).lookup(ACTIVATION_CONTEXT);\n * ```\n *\n * #### Multiple Activators\n * A micro application can register multiple activators. Note, that each activator boots the micro\n * application on its own and runs in a separate browsing context. The platform nominates one activator\n * of each micro application as its primary activator. The nomination has no relevance to the platform but\n * can help code decide whether to install singleton functionality.\n *\n * You can test if running in the primary activation context as following.\n * ```ts\n * // Looks up the activation context.\n * const ctx = await Beans.get(ContextService).lookup<ActivationContext>(ACTIVATION_CONTEXT);\n * // Checks if running in the context of the primary activator.\n * const isPrimary: boolean = ctx.primary;\n * ```\n *\n * #### Sharing State\n * Since an activator runs in a separate browsing context, microfrontends cannot directly access its state.\n * Instead, an activator could put data, for example, into session storage, so that microfrontends of its micro\n * application can access it. Alternatively, an activator could install a message listener, allowing microfrontends\n * to request data via client-side messaging.\n *\n * @category Platform\n * @category Intention API\n */\nexport interface ActivatorCapability extends Capability {\n  type: PlatformCapabilityTypes.Activator;\n  private: false;\n  properties: {\n    /**\n     * Path where the platform can load the activator microfrontend. The path is relative to the base URL\n     * of the micro application, as specified in the application manifest.\n     */\n    path: string;\n    /**\n     * Starting an activator may take some time. In order not to miss any messages or intents, you can instruct the platform host to\n     * wait to enter started state until you signal the activator to be ready. For this purpose, you can define a set of topics where\n     * to publish a ready message to signal readiness. If you specify multiple topics, the activator enters ready state after you have\n     * published a ready message to all these topics. A ready message is an event; thus, a message without payload.\n     *\n     * If not specifying a readiness topic, the platform host does not wait for this activator to become ready. However, if you specify a\n     * readiness topic, make sure that your activator has a fast startup time and signals readiness as early as possible not to delay\n     * the startup of the platform host.\n     */\n    readinessTopics?: string | string[];\n    /**\n     * Arbitrary metadata to be associated with the capability.\n     */\n    [key: string]: any;\n  };\n}\n\n/**\n * Represents a microfrontend that can be loaded into a <sci-router-outlet> using the {@link OutletRouter}.\n *\n * @category Intention API\n */\nexport interface MicrofrontendCapability extends Capability {\n  type: PlatformCapabilityTypes.Microfrontend;\n  properties: {\n    /**\n     * Specifies the path of the microfrontend.\n     *\n     * The path is relative to the base URL, as specified in the application manifest. If the\n     * application does not declare a base URL, it is relative to the origin of the manifest file.\n     *\n     * The path allows the use of navigational symbols and named parameters to reference qualifier and parameter values.\n     * A named parameter begins with a colon (`:`) followed by the qualifier or parameter name, and is allowed in path segments,\n     * query parameters, matrix parameters and the fragment part. Named query and matrix parameters without a replacement are removed,\n     * e.g., if referencing an optional parameter.\n     *\n     * #### Usage of named parameters in the path:\n     * ```json\n     * {\n     *   \"type\": \"microfrontend\",\n     *   \"qualifier\": {\n     *     \"entity\": \"product\"\n     *   },\n     *   \"params\": [\n     *     {\"name\": \"id\", \"required\": true}\n     *   ]\n     *   \"properties\": {\n     *     \"path\": \"product/:id\",\n     *   }\n     * }\n     * ```\n     *\n     * #### Path parameter example:\n     * segment/:param1/segment/:param2\n     *\n     * #### Matrix parameter example:\n     * segment/segment;matrixParam1=:param1;matrixParam2=:param2\n     *\n     * #### Query parameter example:\n     * segment/segment?queryParam1=:param1&queryParam2=:param2\n     */\n    path: string;\n    /**\n     * Specifies the preferred outlet to load this microfrontend into.\n     * Note that this preference is only a hint that will be ignored if the navigator\n     * specifies an outlet for navigation.\n     *\n     * The precedence is as follows:\n     * - Outlet as specified by navigator via {@link NavigationOptions#outlet}.\n     * - Preferred outlet as specified in the microfrontend capability.\n     * - Current outlet if navigating in the context of an outlet.\n     * - {@link PRIMARY_OUTLET primary} outlet.\n     */\n    outlet?: string;\n    /**\n     * Instructs the router outlet to show a splash, such as a skeleton or loading indicator, until the microfrontend signals readiness.\n     * The splash is the markup between the opening and closing tags of the router outlet element.\n     *\n     * @see SciRouterOutletElement\n     * @see MicrofrontendPlatformClient.signalReady\n     */\n    showSplash?: boolean;\n    /**\n     * Arbitrary metadata to be associated with the capability.\n     */\n    [key: string]: any;\n  };\n}\n\n/**\n * Describes a parameter to be passed along with an intent.\n *\n * @category Intention API\n */\nexport interface ParamDefinition {\n  /**\n   * Specifies the name of the parameter.\n   */\n  name: string;\n  /**\n   * Describes the parameter and its usage in more detail.\n   */\n  description?: string;\n  /**\n   * Specifies whether the parameter must be passed along with the intent.\n   */\n  required: boolean;\n  /**\n   * Allows deprecating the parameter.\n   *\n   * It is good practice to explain the deprecation, provide the date of removal, and how to migrate.\n   * If renaming the parameter, you can set the `useInstead` property to specify which parameter to use\n   * instead. At runtime, this will map the parameter to the specified replacement, allowing for\n   * straightforward migration on the provider side.\n   */\n  deprecated?: true | {message?: string; useInstead?: string};\n\n  /**\n   * Allows the declaration of additional metadata that can be interpreted in an interceptor, for example.\n   */\n  [property: string]: any;\n}\n\n/**\n * Symbol to determine if this app instance is running as the platform host.\n *\n * ```ts\n * const isPlatformHost: boolean = Beans.get(IS_PLATFORM_HOST);\n * ```\n *\n * @category Platform\n */\nexport const IS_PLATFORM_HOST = Symbol('IS_PLATFORM_HOST');\n\n/**\n * Symbol to get the application's symbolic name from the bean manager.\n *\n * @category Platform\n */\nexport const APP_IDENTITY = Symbol('APP_IDENTITY');\n\n/**\n * Key for obtaining the current activation context using {@link ContextService}.\n *\n * The activation context is only available to microfrontends loaded by an activator.\n *\n * @see {@link ActivationContext}\n * @see {@link ContextService}\n * @category Platform\n */\nexport const ACTIVATION_CONTEXT = 'ɵACTIVATION_CONTEXT';\n\n/**\n * Information about the activator that loaded a microfrontend.\n *\n * This context is available to a microfrontend if loaded by an application activator.\n * This object can be obtained from the {@link ContextService} using the name {@link ACTIVATION_CONTEXT}.\n *\n * ```ts\n * const ctx = await Beans.get(ContextService).lookup<ActivationContext>(ACTIVATION_CONTEXT);\n * ```\n *\n * @see {@link ACTIVATION_CONTEXT}\n * @see {@link ContextService}\n * @category Platform\n */\nexport interface ActivationContext {\n  /**\n   * Indicates whether running in the context of the primary activator.\n   * The platform nominates one activator of each app as primary activator.\n   */\n  primary: boolean;\n  /**\n   * Metadata about the activator that activated the microfrontend.\n   */\n  activator: ActivatorCapability;\n}\n\n/**\n * Allows filtering manifest objects like capabilities or intentions.\n *\n * All specified filter criteria are \"AND\"ed together. Unspecified filter criteria are ignored.\n * If no filter criterion is specified, no filtering takes place, thus all available objects are returned.\n *\n * @category Intention API\n */\nexport interface ManifestObjectFilter {\n  /**\n   * Manifest objects of the given identity.\n   */\n  id?: string;\n  /**\n   * Manifest objects of the given function type.\n   */\n  type?: string;\n  /**\n   * Manifest objects matching the given qualifier.\n   */\n  qualifier?: Qualifier;\n  /**\n   * Manifest objects provided by the given app.\n   */\n  appSymbolicName?: string;\n}\n\n/**\n * Represents a request to determine if an application is qualified to interact with a given capability.\n */\nexport interface ApplicationQualifiedForCapabilityRequest {\n  /**\n   * Specifies the symbolic name of the application under test.\n   */\n  appSymbolicName: string;\n  /**\n   * Identifies the capability for which to request the application's qualification.\n   */\n  capabilityId: string;\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Application} from './platform.model';\n\n/**\n * Represents an application registered in the platform.\n *\n * The version is omitted because not known at the time of registration, but only when first connecting to the host, e.g., in an activator.\n *\n * @internal\n */\nexport interface ɵApplication extends Omit<Application, 'platformVersion'> { // eslint-disable-line @typescript-eslint/no-empty-interface\n  /**\n   * Specifies the origin(s) where message from this application must originate from. Messages of a different origin will be rejected.\n   */\n  allowedMessageOrigins: Set<string>;\n}\n\n/**\n * Symbol to get the version of the SCION Microfrontend Platform.\n *\n * @internal\n */\nexport const ɵVERSION = Symbol('ɵVERSION');\n\n/**\n * Symbol to get the topmost window in the window hierarchy from the bean manager.\n *\n * Alias for `window.top` that can be overridden in tests, e.g., to simulate\n * the client to connect to a remote host.\n *\n * @internal\n */\nexport const ɵWINDOW_TOP = Symbol('ɵWINDOW_TOP');\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {PreDestroy} from '@scion/toolkit/bean-manager';\nimport {MicrofrontendPlatform} from './microfrontend-platform';\nimport {fromEvent, race, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\n/**\n * Stops the platform and disconnects this client from the host when the browser unloads the document.\n *\n * By default, the platform initiates shutdown when the browser unloads the document, i.e., when `beforeunload` is triggered.\n * The main reason for `beforeunload` instead of `unload` is to avoid posting messages to disposed windows.\n * However, if `beforeunload` is not triggered, e.g., when an iframe is removed, we fall back to `unload`.\n *\n * @category Platform\n */\nexport abstract class MicrofrontendPlatformStopper {\n}\n\n/**\n * @internal\n */\nexport class ɵMicrofrontendPlatformStopper implements MicrofrontendPlatformStopper, PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n\n  constructor() {\n    race(fromEvent(window, 'beforeunload'), fromEvent(window, 'unload'))\n      .pipe(\n        take(1),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        MicrofrontendPlatform.destroy();\n      });\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {APP_IDENTITY} from './platform.model';\nimport {ɵVERSION} from './ɵplatform.model';\n\n/**\n * Logger used by the platform to log to the console.\n *\n * Replace this bean to capture the log output.\n *\n * @category Platform\n */\nexport abstract class Logger {\n\n  /**\n   * Logs with severity debug.\n   */\n  public abstract debug(message?: any, ...args: any[]): void;\n\n  /**\n   * Logs with severity info.\n   */\n  public abstract info(message?: any, ...args: any[]): void;\n\n  /**\n   * Logs with severity warn.\n   */\n  public abstract warn(message?: any, ...args: any[]): void;\n\n  /**\n   * Logs with severity error.\n   */\n  public abstract error(message?: any, ...args: any[]): void;\n}\n\n/**\n * Logger used by the platform to log to the console.\n *\n * Replace this bean to capture the log output.\n *\n * @internal\n */\nexport class ConsoleLogger implements Logger {\n\n  public debug(message?: any, ...args: any[]): void {\n    this.log('debug', message, args);\n  }\n\n  public info(message?: any, ...args: any[]): void {\n    this.log('info', message, args);\n  }\n\n  public warn(message?: any, ...args: any[]): void {\n    this.log('warn', message, args);\n  }\n\n  public error(message?: any, ...args: any[]): void {\n    this.log('error', message, args);\n  }\n\n  private log(severity: 'debug' | 'info' | 'warn' | 'error', message: any, args: any[]): void {\n    const loggingContext: LoggingContext = args[0] instanceof LoggingContext ? args.shift() : {appSymbolicName: Beans.get(APP_IDENTITY), version: Beans.get(ɵVERSION)};\n    const prefix = new Array<string>()\n      .concat(loggingContext.version ? `[@scion/microfrontend-platform@${loggingContext.version}]` : '[@scion/microfrontend-platform]')\n      .concat(`[${loggingContext.appSymbolicName}]`)\n      .join('');\n\n    if (console && typeof console[severity] === 'function') {\n      const consoleFn = console[severity];\n      args?.length ? consoleFn(`${prefix} ${message}`, ...args) : consoleFn(`${prefix} ${message}`);\n    }\n  }\n}\n\n/**\n * Logger that does nothing.\n *\n * @internal\n */\nexport const NULL_LOGGER = new class extends Logger {\n\n  public debug(message?: any, ...args: any[]): void {\n    // NOOP\n  }\n\n  public info(message?: any, ...args: any[]): void {\n    // NOOP\n  }\n\n  public warn(message?: any, ...args: any[]): void {\n    // NOOP\n  }\n\n  public error(message?: any, ...args: any[]): void {\n    // NOOP\n  }\n};\n\n/**\n * Contextual information to add to the log message.\n *\n * Pass an instance of this class as the first argument to the logger when logging a message.\n *\n * @internal\n */\nexport class LoggingContext {\n\n  constructor(public appSymbolicName: string, public version?: string) {\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {first} from 'rxjs/operators';\nimport {PlatformState, Runlevel} from './platform-state';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {APP_IDENTITY, IS_PLATFORM_HOST} from './platform.model';\nimport {ɵVERSION, ɵWINDOW_TOP} from './ɵplatform.model';\nimport {MicrofrontendPlatformStopper, ɵMicrofrontendPlatformStopper} from './microfrontend-platform-stopper';\nimport {ConsoleLogger, Logger} from './logger';\n\n/**\n * Current version of the SCION Microfrontend Platform.\n */\nconst version = '1.2.2';\n\n/**\n * The central class of the SCION Microfrontend Platform. This class cannot be instantiated. All functionality is provided by static methods.\n *\n * To enable tree-shaking of the SCION Microfrontend Platform, the platform provides three separate entry points:\n * - {@link MicrofrontendPlatformHost} to configure and start the platform in the host\n * - {@link MicrofrontendPlatformClient} to connect to the platform from a microfrontend\n * - {@link MicrofrontendPlatform} to react to platform lifecycle events and stop the platform\n *\n * ## SCION Microfrontend Platform\n *\n * SCION Microfrontend Platform is a TypeScript-based open source library that enables the implementation of a framework-agnostic\n * microfrontend architecture using iframes. It provides fundamental APIs for microfrontends to communicate with each other across origins\n * and facilitates embedding microfrontends using a web component and a router. SCION Microfrontend Platform is a lightweight, web stack\n * agnostic library that has no user-facing components and does not dictate any form of application structure.\n *\n * You can continue using the frameworks you love since the platform integrates microfrontends via iframes. Iframes by nature provide\n * maximum isolation and allow the integration of any web application without complex adaptation. The platform aims to shield developers\n * from iframe specifics and the low-level messaging mechanism to focus instead on integrating microfrontends.\n *\n * #### Cross-microfrontend communication\n * The platform adds a pub/sub layer on top of the native `postMessage` mechanism to enable microfrontends to communicate with each other\n * easily across origins. Communication comes in two flavors: topic-based and intent-based. Both models feature request-response message\n * exchange, support retained messages for late subscribers to receive the latest messages, and provide API to intercept messages to\n * implement cross-cutting messaging concerns.\n *\n * Topic-based messaging enables you to publish messages to multiple subscribers via a common topic. Intent-based communication focuses on\n * controlled collaboration between applications. To collaborate, an application must express an intention. Manifesting intentions enables\n * us to see dependencies between applications down to the functional level.\n *\n * #### Microfrontend Integration and Routing\n * The platform makes it easy to integrate microfrontends through its router-outlet. The router-outlet is a web component that wraps an iframe.\n * It solves many of the cumbersome quirks of iframes and helps to overcome iframe restrictions. For example, it can adapt its size to the\n * preferred size of embedded content, supports keyboard event propagation and lets you pass contextual data to embedded content.\n * Using the router, you control which web content to display in an outlet. Multiple outlets can display different content, determined by\n * different outlet names, all at the same time. Routing works across application boundaries and enables features such as persistent navigation.\n *\n * ***\n *\n * A microfrontend architecture can be achieved in many ways, each with its pros and cons. The SCION Microfrontend Platform uses\n * the iframe approach primarily since iframes by nature provide the highest possible level of isolation through a separate browsing context.\n * The microfrontend design approach is very tempting and has obvious advantages, especially for large-scale and long-lasting projects, most\n * notably because we are observing an enormous dynamic in web frameworks. The SCION Microfrontend Platform provides you with the necessary\n * tools to best support you in implementing such an architecture.\n *\n * @see {@link MicrofrontendPlatformHost}\n * @see {@link MicrofrontendPlatformClient}\n *\n * @see {@link MessageClient}\n * @see {@link IntentClient}\n * @see {@link SciRouterOutletElement}\n * @see {@link OutletRouter}\n * @see {@link ContextService}\n * @see {@link PreferredSizeService}\n * @see {@link ManifestService}\n * @see {@link FocusMonitor}\n * @see {@link ActivatorCapability}\n *\n * @category Platform\n * @category Lifecycle\n */\nexport class MicrofrontendPlatform {\n\n  private static readonly _state$ = new BehaviorSubject<PlatformState>(PlatformState.Stopped);\n\n  private constructor() {\n  }\n\n  /**\n   * @internal\n   */\n  public static async startPlatform(startupFn?: () => void): Promise<void> {\n    if (this.state === PlatformState.Started) {\n      return Promise.reject(Error('[MicrofrontendPlatformStartupError] Platform already started'));\n    }\n\n    try {\n      startupFn?.();\n      await this.enterState(PlatformState.Starting);\n      await Beans.start({eagerBeanConstructRunlevel: Runlevel.One, initializerDefaultRunlevel: Runlevel.Two});\n      await this.enterState(PlatformState.Started);\n      return Promise.resolve();\n    }\n    catch (error) {\n      await this.destroy();\n      return Promise.reject(Error(`[MicrofrontendPlatformStartupError] Microfrontend platform failed to start: ${error}`));\n    }\n  }\n\n  /**\n   * Destroys this platform and releases resources allocated.\n   *\n   * @return a Promise that resolves once the platformed stopped.\n   */\n  public static async destroy(): Promise<void> {\n    await this.enterState(PlatformState.Stopping);\n    Beans.destroy();\n    await this.enterState(PlatformState.Stopped);\n  }\n\n  /**\n   * @return the current platform state.\n   */\n  public static get state(): PlatformState {\n    return this._state$.getValue();\n  }\n\n  /**\n   * Observable that, when subscribed, emits the current platform lifecycle state.\n   * It never completes and emits continuously when the platform enters\n   * another state.\n   */\n  public static get state$(): Observable<PlatformState> {\n    return this._state$;\n  }\n\n  /**\n   * Waits for the platform to enter the specified {@link PlatformState}.\n   * If already in that state, the Promise resolves instantly.\n   *\n   * @param  state - the state to wait for.\n   * @return A Promise that resolves when the platform enters the given state.\n   *         If already in that state, the Promise resolves instantly.\n   */\n  public static async whenState(state: PlatformState): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this._state$\n        .pipe(first(it => it === state))\n        .subscribe({\n          error: reject,\n          complete: resolve,\n        });\n    });\n  }\n\n  private static async enterState(newState: PlatformState): Promise<void> {\n    const currentState = (this.state === PlatformState.Stopped) ? -1 : this.state;\n    if (currentState >= newState) {\n      throw Error(`[PlatformStateError] Failed to enter platform state [prevState=${PlatformState[this.state]}, newState=${PlatformState[newState]}].`);\n    }\n\n    this._state$.next(newState);\n\n    // Let microtasks waiting for entering that state to resolve first.\n    await this.whenState(newState);\n  }\n}\n\n/**\n * @internal\n */\nexport function providePlatformEnvironment(config: {symbolicName: string; isPlatformHost: boolean}): void {\n  Beans.register(IS_PLATFORM_HOST, {useValue: config.isPlatformHost});\n  Beans.register(APP_IDENTITY, {useValue: config.symbolicName});\n  Beans.registerIfAbsent(ɵWINDOW_TOP, {useValue: window.top});\n  Beans.registerIfAbsent(ɵVERSION, {useValue: version, destroyOrder: BeanDestroyOrders.CORE});\n  Beans.registerIfAbsent(MicrofrontendPlatformStopper, {useClass: ɵMicrofrontendPlatformStopper, eager: true});\n  Beans.registerIfAbsent(Logger, {useClass: ConsoleLogger, destroyOrder: BeanDestroyOrders.CORE});\n}\n\n/**\n * Specifies destroy orders of platform-specific beans, enabling controlled termination of the platform.\n *\n * @internal\n */\nexport enum BeanDestroyOrders {\n  /**\n   * Use for core platform beans which should be destroyed as the very last beans.\n   */\n  CORE = Number.MAX_SAFE_INTEGER,\n  /**\n   * Use for the {@link MessageBroker}.\n   */\n  BROKER = CORE - 1,\n  /**\n   * Use for messaging-related beans.\n   */\n  MESSAGING = BROKER - 1\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {ApplicationConfig} from './application-config';\nimport {HostConfig} from './host-config';\nimport {LivenessConfig} from './liveness-config';\n\n/**\n * Configures the platform and defines the micro applications running in the platform.\n *\n * @category Platform\n */\nexport abstract class MicrofrontendPlatformConfig {\n  /**\n   * Lists the micro applications able to connect to the platform to interact with other micro applications.\n   */\n  public abstract readonly applications: ApplicationConfig[];\n  /**\n   * Configures the interaction of the host application with the platform.\n   *\n   * As with micro applications, you can provide a manifest for the host, allowing the host to contribute capabilities and declare intentions.\n   */\n  public abstract readonly host?: HostConfig;\n  /**\n   * Controls whether the Activator API is enabled.\n   *\n   * Activating the Activator API enables micro applications to contribute `activator` microfrontends. Activator microfrontends are loaded\n   * at platform startup for the entire lifecycle of the platform. An activator is a startup hook for micro applications to initialize\n   * or register message or intent handlers to provide functionality.\n   *\n   * By default, this API is enabled.\n   *\n   * @see {@link ActivatorCapability}\n   */\n  public abstract readonly activatorApiDisabled?: boolean;\n  /**\n   * Maximum time (in milliseconds) that the platform waits until the manifest of an application is loaded.\n   * You can set a different timeout per application via {@link ApplicationConfig.manifestLoadTimeout}.\n   * If not set, by default, the browser's HTTP fetch timeout applies.\n   *\n   * Consider setting this timeout if, for example, a web application firewall delays the responses of unavailable\n   * applications.\n   */\n  public abstract readonly manifestLoadTimeout?: number;\n  /**\n   * Maximum time (in milliseconds) for each application to signal readiness.\n   *\n   * If specified and activating an application takes longer, the host logs an error and continues startup.\n   * Has no effect for applications which provide no activator(s) or are not configured to signal readiness.\n   * You can set a different timeout per application via {@link ApplicationConfig.activatorLoadTimeout}.\n   *\n   * By default, no timeout is set, meaning that if an app fails to signal readiness, e.g., due to an error,\n   * that app would block the host startup process indefinitely. It is therefore recommended to specify a\n   * timeout accordingly.\n   */\n  public abstract readonly activatorLoadTimeout?: number;\n  /**\n   * Configures the liveness probe performed at regular intervals between host and clients to detect and dispose stale clients.\n   * Clients not replying to the probe are removed.\n   */\n  public abstract readonly liveness?: LivenessConfig;\n  /**\n   * Defines user-defined properties which can be read by micro applications via {@link PlatformPropertyService}.\n   */\n  public abstract readonly properties?: {\n    [key: string]: any;\n  };\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Intention, Manifest, PlatformCapabilityTypes} from '../platform.model';\nimport {MicrofrontendPlatformConfig} from './microfrontend-platform-config';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Hook to intercept the host manifest before it is registered in the platform.\n *\n * If integrating the platform in a library, you may need to intercept the manifest of the host in order to introduce library-specific behavior.\n *\n * You can register the interceptor in the bean manager, as follows:\n *\n * ```ts\n * Beans.register(HostManifestInterceptor, {useClass: YourInterceptor, multi: true});\n * ```\n *\n * The interceptor may look as following:\n * ```ts\n *  class YourInterceptor implements HostManifestInterceptor {\n *\n *   public intercept(hostManifest: Manifest): void {\n *     hostManifest.intentions = [\n *       ...hostManifest.intentions || [],\n *       provideMicrofrontendIntention(),\n *     ];\n *     hostManifest.capabilities = [\n *       ...hostManifest.capabilities || [],\n *       provideMessageBoxCapability(),\n *     ];\n *   }\n * }\n *\n * function provideMicrofrontendIntention(): Intention {\n *    return {\n *      type: 'microfrontend',\n *      qualifier: {'*': '*'},\n *    };\n *  }\n *\n * function provideMessageBoxCapability(): Capability {\n *    return {\n *      type: 'messagebox',\n *      qualifier: {},\n *      private: false,\n *      description: 'Allows displaying a simple message to the user.',\n *    };\n *  }\n *\n * ```\n *\n * @category Platform\n * @category Intention API\n */\nexport abstract class HostManifestInterceptor {\n\n  /**\n   * Allows modifying the host manifest before it is registered in the platform, e.g., to register capabilities or intentions.\n   */\n  public abstract intercept(hostManifest: Manifest): void;\n}\n\n/**\n * Intercepts the host manifest, registering platform-specific intentions and capabilities.\n *\n * @internal\n */\nexport class ɵHostManifestInterceptor implements HostManifestInterceptor {\n\n  public intercept(hostManifest: Manifest): void {\n    hostManifest.intentions = [\n      ...hostManifest.intentions || [],\n      ...provideActivatorIntentionIfEnabled(),\n    ];\n  }\n}\n\n/**\n * Provides a wildcard activator intention for the platform to read activator capabilities for installing activator microfrontends.\n */\nfunction provideActivatorIntentionIfEnabled(): Intention[] {\n  const activatorApiDisabled = Beans.get(MicrofrontendPlatformConfig).activatorApiDisabled ?? false;\n  if (activatorApiDisabled) {\n    return [];\n  }\n  return [{\n    type: PlatformCapabilityTypes.Activator,\n    qualifier: {'*': '*'},\n  }];\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Observable} from 'rxjs';\nimport {Client} from './client';\n\n/**\n * Central point for managing client registrations.\n *\n * @internal\n */\nexport abstract class ClientRegistry {\n\n  /**\n   * Emits when registered a client.\n   */\n  public abstract readonly register$: Observable<Client>;\n\n  /**\n   * Emits when unregistered a client.\n   */\n  public abstract readonly unregister$: Observable<Client>;\n\n  /**\n   * Registers given client.\n   *\n   * If another client is already registered under the same window,\n   * a warning is logged and the \"stale\" client removed.\n   */\n  public abstract registerClient(client: Client): void;\n\n  /**\n   * Unregisters given client.\n   */\n  public abstract unregisterClient(client: Client): void;\n\n  /**\n   * Returns the client associated with the given id, or `undefined` if not found.\n   */\n  public abstract getByClientId(clientId: string): Client | undefined;\n\n  /**\n   * Returns the client associated with the given {@link Window}, or `undefined` if not found.\n   */\n  public abstract getByWindow(window: Window): Client | undefined;\n\n  /**\n   * Returns the clients associated with the given application.\n   */\n  public abstract getByApplication(appSymbolicName: string): Client[];\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MonoTypeOperatorFunction, Observable, Subscription} from 'rxjs';\nimport {TopicMessage} from '../../messaging.model';\nimport {first, takeUntil} from 'rxjs/operators';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {PublishOptions, RequestOptions} from './publish-options';\n\n/**\n * Message client for sending and receiving messages between microfrontends across origins.\n *\n * This client implements the topic-based pub/sub (publish/subscribe) messaging model, allowing for one message to be delivered to\n * multiple subscribers using topic addressing.\n *\n * The communication is built on top of the native `postMessage` mechanism. The host app acts as message broker.\n *\n * ### Topic Addressing\n * A publisher publishes a message to a topic, which then is transported to consumers subscribed to the topic. Topics are case-sensitive\n * and consist of one or more segments, each separated by a forward slash. When publishing a message to a topic, the topic must be exact,\n * thus not contain wildcards. Messages published to a topic are transported to all consumers subscribed to the topic. Consumers, on the\n * other hand, can subscribe to multiple topics simultaneously by using wildcard segments in the topic.\n *\n * ### Retained Message\n * You can mark a message as \"retained\" for helping newly subscribed clients to get the last message published to a topic immediately upon\n * subscription. The broker stores one retained message per topic, i.e., a later sent retained message will replace a previously sent retained\n * message. To delete a retained message, send a retained message without payload to the topic.\n *\n * ### Retained Request\n * Unlike retained messages, retained requests are not replaced by later retained requests/messages and remain in the broker until the requestor unsubscribes.\n *\n * ### Request-Response Messaging\n * Sometimes it is useful to initiate a request-response communication to wait for a response. Unlike with fire-and-forget messaging, a temporary\n * inbox is created for the sender to receive replies. If there is no consumer subscribed on the topic, the platform throws an error.\n *\n * @see {@link TopicMessage}\n * @see {@link takeUntilUnsubscribe}\n *\n * @category Messaging\n */\nexport abstract class MessageClient {\n\n  /**\n   * Publishes a message to the given topic. The message is transported to all consumers subscribed to the topic.\n   *\n   * A message can be marked as \"retained\" by setting the {@link PublishOptions.retain} flag to `true`. It instructs the broker to store this message and\n   * deliver it to new subscribers, even if they subscribe after the message has been published. The broker stores one retained message per topic. To\n   * delete a retained message, send a retained message without payload to the topic. Deletion messages are not transported to subscribers.\n   *\n   * @param  topic - Specifies the topic to which the message should be sent.\n   *         Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n   *         The topic is required and must be exact, thus not contain wildcards.\n   * @param  message - Specifies optional transfer data to be carried along with this message.\n   *         It can be any object which is serializable with the structured clone algorithm.\n   * @param  options - Controls how to publish the message and allows setting message headers.\n   * @return A Promise that resolves when dispatched the message, or that rejects if the message could not be dispatched.\n   */\n  public abstract publish<T = any>(topic: string, message?: T, options?: PublishOptions): Promise<void>;\n\n  /**\n   * Sends a request to the given topic and receives one or more replies.\n   *\n   * A request can be marked as \"retained\" by setting the {@link RequestOptions.retain} flag to `true`. It instructs the broker to store this request and\n   * deliver it to new subscribers, even if they subscribe after the request has been sent. Retained requests are not replaced by later retained requests/\n   * messages and remain in the broker until the requestor unsubscribes.\n   *\n   * If not marking the request as \"retained\", at least one subscriber must be subscribed to the topic. Otherwise, the request is rejected.\n   *\n   * @param  topic - Specifies the topic to which the request should be sent.\n   *         Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n   *         The topic is required and must be exact, thus not contain wildcards.\n   * @param  request - Specifies optional transfer data to be carried along with the request.\n   *         It can be any object which is serializable with the structured clone algorithm.\n   * @param  options - Controls how to send the request and allows setting request headers.\n   * @return An Observable that emits when receiving a reply. It never completes unless the replier sets the status code {@link ResponseStatusCodes.TERMINAL}\n   *         in the {@link MessageHeaders.Status} message header. Then, the Observable completes immediately after emitted the reply.\n   *         The Observable errors if the request could not be dispatched. It will also error if the replier sets a status code greater than or equal to 400, e.g., {@link ResponseStatusCodes.ERROR}.\n   */\n  public abstract request$<T>(topic: string, request?: any, options?: RequestOptions): Observable<TopicMessage<T>>;\n\n  /**\n   * Receives messages published to the given topic.\n   *\n   * You can subscribe to multiple topics simultaneously by using wildcard segments in the topic. If a segment begins with a colon (`:`),\n   * then the segment acts as a placeholder for any segment value. Substituted segment values are then available via the params property\n   * of the received message.\n   *\n   * ```ts\n   * const topic: string = 'myhome/:room/temperature';\n   *\n   * Beans.get(MessageClient).observe$(topic).subscribe((message: TopicMessage) => {\n   *   console.log(message.params);\n   * });\n   * ```\n   *\n   * If the received message has the {@link MessageHeaders.ReplyTo} header field set, the publisher expects the receiver to send one or more\n   * replies to that {@link MessageHeaders.ReplyTo ReplyTo} topic. If streaming responses, you can use the {@link takeUntilUnsubscribe}\n   * operator to stop replying when the requestor unsubscribes.\n   *\n   * ```ts\n   * const topic: string = 'myhome/livingroom/temperature';\n   *\n   * Beans.get(MessageClient).observe$(topic).subscribe((request: TopicMessage) => {\n   *   const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n   *   sensor$\n   *     .pipe(takeUntilUnsubscribe(replyTo))\n   *     .subscribe(temperature => {\n   *       Beans.get(MessageClient).publish(replyTo, `${temperature}°C`);\n   *     });\n   * });\n   * ```\n   *\n   * @param  topic - Specifies the topic which to observe.\n   *         Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n   *         You can subscribe to the exact topic of a published message, or use wildcards to subscribe to multiple\n   *         topics simultaneously. If a segment begins with a colon (`:`), then the segment acts as a placeholder for any\n   *         string value. Substituted segment values are available in the {@link TopicMessage.params} on the received message.\n   * @return An Observable that emits messages sent to the given topic. It never completes.\n   */\n  public abstract observe$<T>(topic: string): Observable<TopicMessage<T>>;\n\n  /**\n   * Convenience API for handling messages.\n   *\n   * Unlike `observe$`, messages are passed to a callback function rather than emitted from an Observable. Response(s) can be returned directly\n   * from the callback. It supports error propagation and request termination. Using this method over `observe$` significantly reduces the code\n   * required to respond to requests.\n   *\n   * For each message received, the specified callback function is called. When used in request-response communication,\n   * the callback function can return the response either directly or in the form of a Promise or Observable. Returning a Promise\n   * allows the response to be computed asynchronously, and an Observable allows to return one or more responses, e.g., for\n   * streaming data.\n   * If the callback function returns no value (void), returns `undefined`, or returns a Promise that resolves to `undefined`, communication is terminated\n   * immediately without a response. If the callback returns an Observable, all its emissions are transported to the requestor and communication is not\n   * terminated until the Observable completes. Termination of communication always completes the requestor's Observable.\n   * If the callback throws an error, or the returned Promise or Observable errors, the error is\n   * transported to the requestor, erroring the requestor's Observable.\n   *\n   * @param  topic - Specifies the topic which to observe.\n   *         For more information, see the API description of {@link observe$}.\n   * @param  callback - Specifies the callback to be called for each message. When used in request-response communication,\n   *         the callback function can return the response either directly or in the form of a Promise or Observable. If returning\n   *         a response in fire-and-forget communication, it is ignored. Throwing an error in the callback does not unregister the callback.\n   * @return Subscription to unregister the callback. Calling {@link rxjs!Subscription.unsubscribe Subscription.unsubscribe} will complete the Observable of all\n   *         requestors, if any.\n   */\n  public abstract onMessage<IN = any, OUT = any>(topic: string, callback: (message: TopicMessage<IN>) => Observable<OUT> | Promise<OUT> | OUT | void): Subscription;\n\n  /**\n   * Allows observing the number of subscriptions on a topic. The Observable never completes.\n   *\n   * @param  topic - Specifies the topic to observe. The topic must be exact, thus not contain wildcards.\n   * @return An Observable that, when subscribed, emits the current number of subscribers on it. It never completes and\n   *         emits continuously when the number of subscribers changes.\n   */\n  public abstract subscriberCount$(topic: string): Observable<number>;\n}\n\n/**\n * Returns an Observable that mirrors the source Observable as long as there is at least one subscriber subscribed to the\n * given topic. When the subscription count on the given topic drops to zero, the returned Observable completes. If there\n * is no topic subscription present at the time when subscribing to the Observable, then it completes immediately.\n *\n * This operator is similar to the RxJS {@link rxjs!takeUntil takeUntil} operator, but accepts a topic instead of a notifier Observable.\n *\n * @category Messaging\n */\nexport function takeUntilUnsubscribe<T>(topic: string): MonoTypeOperatorFunction<T> {\n  return takeUntil(Beans.get(MessageClient).subscriberCount$(topic).pipe(first(count => count === 0)));\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Message} from './messaging.model';\nimport {IntentSelector} from './client/messaging/intent-client';\n\n/**\n * Declares the message transports.\n *\n * @internal\n */\nexport enum MessagingTransport {\n  /**\n   * Transport used by clients to communicate with the broker.\n   */\n  ClientToBroker = 'sci://microfrontend-platform/client-to-broker',\n  /**\n   * Transport used by the broker to communicate with its clients.\n   */\n  BrokerToClient = 'sci://microfrontend-platform/broker-to-client',\n  /**\n   * Transport used by a microfrontend to communicate with its embedding outlet.\n   */\n  MicrofrontendToOutlet = 'sci://microfrontend-platform/microfrontend-to-outlet',\n}\n\n/**\n * Defines the channels to which messages can be sent.\n *\n * @internal\n */\nexport enum MessagingChannel {\n  /**\n   * Channel for clients to subscribe to a topic destination.\n   */\n  TopicSubscribe = 'topic-subscribe',\n  /**\n   * Channel for clients to unsubscribe from a topic destination.\n   */\n  TopicUnsubscribe = 'topic-unsubscribe',\n  /**\n   * Channel for clients to subscribe to intents.\n   */\n  IntentSubscribe = 'intent-subscribe',\n  /**\n   * Channel for clients to unsubscribe from intents.\n   */\n  IntentUnsubscribe = 'intent-unsubscribe',\n  /**\n   * Channel for the host to transport topic message to subscribed clients.\n   */\n  Topic = 'topic',\n  /**\n   * Channel for the host to transport intent messages to subscribed clients.\n   */\n  Intent = 'intent',\n  /**\n   * Channel for clients to send a connect request.\n   */\n  ClientConnect = 'client-connect',\n  /**\n   * Channel for clients to send a disconnect request.\n   */\n  ClientDisconnect = 'client-disconnect'\n}\n\n/**\n * Envelope for all messages.\n *\n * @internal\n */\nexport interface MessageEnvelope<MSG extends Message = Message> {\n  transport: MessagingTransport;\n  channel: MessagingChannel;\n  message: MSG;\n}\n\n/**\n * Declares internal platform topics.\n *\n * @internal\n */\nexport namespace PlatformTopics {\n  /**\n   * Topic to request the subscription count on a topic.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link string}\n   * Response Type: {@link number}\n   */\n  export const RequestSubscriberCount = 'ɵREQUEST_SUBSCRIBER_COUNT';\n  /**\n   * Topic to signal when gained the focus.\n   *\n   * Messaging Pattern: Publish-Subscribe\n   * Payload: {@link void}\n   */\n  export const FocusIn = 'ɵFOCUS_IN';\n  /**\n   * Topic to request whether the requesting client (or a microfrontend embedded in the client) has gained focus.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link void}\n   * Response Type: {@link boolean}\n   */\n  export const IsFocusWithin = 'ɵIS_FOCUS_WITHIN';\n  /**\n   * Topic to request whether the requesting client has gained focus.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link void}\n   * Response Type: {@link boolean}\n   */\n  export const HasFocus = 'ɵHAS_FOCUS';\n  /**\n   * Topic to read platform properties.\n   *\n   * Messaging Pattern: Publish-Subscribe\n   * Payload: {@link Record}\n   */\n  export const PlatformProperties = 'ɵPLATFORM_PROPERTIES';\n  /**\n   * Topic to read platform registered applications.\n   *\n   * Messaging Pattern: Publish-Subscribe\n   * Payload: {@link ɵApplication}\n   */\n  export const Applications = 'ɵAPPLICATIONS';\n  /**\n   * Topic to request capabilities.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link ManifestObjectFilter}\n   * Response Type: {@link Array<Capability>}\n   */\n  export const LookupCapabilities = 'ɵLOOKUP_CAPABILITIES';\n  /**\n   * Topic to request intentions.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link ManifestObjectFilter}\n   * Response Type: {@link Array<Intention>}\n   */\n  export const LookupIntentions = 'ɵLOOKUP_INTENTIONS';\n  /**\n   * Topic to register a capability.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link Capability}\n   * Response Type: {@link string}\n   */\n  export const RegisterCapability = 'ɵREGISTER_CAPABILITY';\n  /**\n   * Topic to unregister a capability.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link ManifestObjectFilter}\n   * Response Type: {@link void}\n   */\n  export const UnregisterCapabilities = 'ɵUNREGISTER_CAPABILITIES';\n  /**\n   * Topic to register an intentions.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link Intention}\n   * Response Type: {@link string}\n   */\n  export const RegisterIntention = 'ɵREGISTER_INTENTION';\n  /**\n   * Topic to unregister an intention.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link ManifestObjectFilter}\n   * Response Type: {@link void}\n   */\n  export const UnregisterIntentions = 'ɵUNREGISTER_INTENTIONS';\n  /**\n   * Topic to check if application is qualified for the capability.\n   *\n   * Messaging Pattern: Request-Response\n   * Request Type: {@link ApplicationQualifiedForCapabilityRequest}\n   * Response Type: {@link boolean}\n   */\n  export const IsApplicationQualifiedForCapability = 'ɵIS_APPLICATION_QUALIFIED_FOR_CAPABILITY';\n\n  /**\n   * Topic to request the platform version of a specific application.\n   */\n  export function platformVersion(appSymbolicName: string): string {\n    return `ɵapplication/${appSymbolicName}/platform/version`;\n  }\n\n  /**\n   * Topic to ping a client for liveness.\n   */\n  export function ping(clientId: string): string {\n    return `ɵclient/${clientId}/ping`;\n  }\n}\n\n/**\n * Sent by the broker in response to a connect request from a client gateway.\n *\n * @internal\n */\nexport interface ConnackMessage {\n  returnCode: 'accepted' | 'refused:bad-request' | 'refused:rejected' | 'refused:blocked';\n  returnMessage?: string;\n  /**\n   * Unique id assigned to the client by the broker. Is only set on success.\n   */\n  clientId?: string;\n}\n\n/**\n * @internal\n */\nexport interface SubscribeCommand extends Message {\n  /**\n   * Unique identify of the subscriber.\n   */\n  subscriberId: string;\n}\n\n/**\n * @internal\n */\nexport interface TopicSubscribeCommand extends SubscribeCommand {\n  /**\n   * Topic to subscribe.\n   */\n  topic: string;\n}\n\n/**\n * @internal\n */\nexport interface IntentSubscribeCommand extends SubscribeCommand {\n  /**\n   * Selects intents that match the specified selector and for which the application provides a fulfilling capability.\n   */\n  selector?: IntentSelector;\n}\n\n/**\n * @internal\n */\nexport interface UnsubscribeCommand extends Message {\n  /**\n   * Unique identify of the subscriber.\n   */\n  subscriberId: string;\n}\n\n/**\n * @internal\n */\nexport interface MessageDeliveryStatus {\n  ok: boolean;\n  details?: string;\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Capability, Qualifier} from './platform.model';\nimport {MonoTypeOperatorFunction, Observable, of, OperatorFunction, pipe, throwError} from 'rxjs';\nimport {filter, map, mergeMap, takeWhile} from 'rxjs/operators';\n\n/**\n * Represents a message with headers to transport additional information with a message.\n *\n * @category Messaging\n */\nexport interface Message {\n  /**\n   * Additional information attached to this message.\n   *\n   * Header values must be JSON serializable. If no headers are set, the `Map` is empty.\n   */\n  headers: Map<string, any>;\n  /**\n   * Indicates whether this message is retained on the broker for late subscribers.\n   */\n  retain?: boolean;\n}\n\n/**\n * Represents an intent sent by an application.\n *\n * The intent is transported to applications that provide a fulfilling capability visible to the sending application.\n *\n * @category Messaging\n * @category Intention API\n */\nexport interface IntentMessage<BODY = any> extends Message {\n  /**\n   * Intent that represents this message.\n   */\n  intent: Intent;\n  /**\n   * Optional data passed along with the intent.\n   */\n  body?: BODY;\n  /**\n   * Capability that fulfills the intent.\n   */\n  capability: Capability;\n}\n\n/**\n * The term intention refers to the Intention API of the SCION Microfrontend Platform.\n *\n * The intent is the message that a micro application sends to interact with functionality that is available in the form of a capability.\n *\n * The platform transports the intent to the micro applications that provide the requested capability. A micro application can issue an\n * intent only if having declared an intention in its manifest. Otherwise, the platform rejects the intent.\n *\n * An intent is formulated in an abstract way, having assigned a type, and optionally a qualifier. This information is used for resolving\n * the capability; thus, it can be thought of as a form of capability addressing. See the definition of a capability for more information.\n *\n * @category Messaging\n * @category Intention API\n */\nexport interface Intent {\n  /**\n   * Type of functionality to intend.\n   */\n  type: string;\n  /**\n   * The qualifier is an abstract description of the intent and is expressed in the form of a dictionary.\n   *\n   * When issuing an intent, the qualifier must be exact, i.e. not contain wildcards.\n   */\n  qualifier?: Qualifier;\n  /**\n   * Parameters allow additional data to be passed along with the intent.\n   *\n   * They are part of the contract between the intent publisher and the capability provider. The capability provider\n   * can declare mandatory and optional parameters. No additional parameters may be included.\n   *\n   * Parameters have no effect on the intent routing, unlike the qualifier. If mandatory parameters\n   * are missing or non-specified parameters are included, the intent is rejected.\n   */\n  params?: Map<string, any>;\n}\n\n/**\n * Represents a message published to a topic.\n *\n * The message is transported to all consumers subscribed to the topic.\n *\n * @category Messaging\n */\nexport interface TopicMessage<BODY = any> extends Message {\n  /**\n   * The topic where to publish this message to.\n   */\n  topic: string;\n  /**\n   * Optional message.\n   */\n  body?: BODY;\n  /**\n   * Contains the resolved values of the wildcard segments as specified in the topic.\n   * For example: If subscribed to the topic `person/:id` and a message is published to the topic `person/5`,\n   * the resolved id with the value `5` is contained in the params map.\n   */\n  params?: Map<string, string>;\n}\n\n/**\n * Declares headers set by the platform when sending a message.\n *\n * Clients are allowed to read platform-defined headers from a message.\n *\n * @category Messaging\n */\nexport enum MessageHeaders {\n  /**\n   * Identifies the sending client instance of a message.\n   * This header is set by the platform when publishing a message or intent.\n   */\n  ClientId = 'ɵCLIENT_ID',\n  /**\n   * Identifies the sending application of a message.\n   * This header is set by the platform when publishing a message or intent.\n   */\n  AppSymbolicName = 'ɵAPP_SYMBOLIC_NAME',\n  /**\n   * Unique identity of the message.\n   * This header is set by the platform when publishing a message or intent.\n   */\n  MessageId = 'ɵMESSAGE_ID',\n  /**\n   * Destination to which to send a response to this message.\n   * This header is set by the platform when sending a request.\n   */\n  ReplyTo = 'ɵREPLY_TO',\n  /**\n   * The time the message was sent.\n   * This header is set by the platform when publishing a message or intent.\n   */\n  Timestamp = 'ɵTIMESTAMP',\n  /**\n   * The version of the client.\n   */\n  Version = 'ɵVERSION',\n  /**\n   * Use this header to set the request method to indicate the desired action to be performed for a given resource.\n   * @see RequestMethods\n   */\n  Method = 'ɵMETHOD',\n  /**\n   * Use this header to set the response status code to indicate whether a request has been successfully completed.\n   * See {@link ResponseStatusCodes} for available status codes. Other codes are also allowed.\n   *\n   * Status codes are primarily used in request-reply communication. In request-response communication, by default,\n   * the requestor’s Observable never completes. However, the replier can include the response status code in the reply’s\n   * headers, allowing to control the lifecycle of the requestor’s Observable.\n   *\n   * For example, the status code {@link ResponseStatusCodes.TERMINAL 250} allows completing the requestor’s Observable\n   * after emitted the reply, or the status code {@link ResponseStatusCodes.ERROR 500} to error the Observable.\n   *\n   * Note that the platform evaluates status codes only in request-response communication. They are ignored when observing\n   * topics or intents in pub/sub communication but can still be used; however, they must be handled by the application,\n   * e.g., by using the {@link throwOnErrorStatus} SCION RxJS operator.\n   *\n   * @see ResponseStatusCodes\n   */\n  Status = 'ɵSTATUS',\n  /**\n   * Unique identity of a message or intent subscriber.\n   *\n   * @internal\n   */\n  ɵSubscriberId = 'ɵSUBSCRIBER_ID',\n}\n\n/**\n * Defines a set of request methods to indicate the desired action to be performed for a given resource.\n *\n * @category Messaging\n */\nexport enum RequestMethods {\n  /**\n   * The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.\n   */\n  GET = 'GET',\n  /**\n   * The DELETE method deletes the specified resource.\n   */\n  DELETE = 'DELETE',\n  /**\n   * The PUT method replaces all current representations of the target resource with the request payload.\n   */\n  PUT = 'PUT',\n  /**\n   * The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.\n   */\n  POST = 'POST',\n  /**\n   * The OBSERVE method is used to observe the specified resource.\n   */\n  OBSERVE = 'OBSERVE'\n}\n\n/**\n * Defines a set of response status codes to indicate whether a request has been successfully completed.\n *\n * @see throwOnErrorStatus\n * @see MessageClient.request$\n * @see IntentClient.request$\n *\n * @category Messaging\n */\nexport enum ResponseStatusCodes {\n  /**\n   * The request has succeeded.\n   */\n  OK = 200,\n  /**\n   * The request has succeeded. No further response to be expected.\n   *\n   * In request-reply communication, setting this status code will complete the requestor's Observable\n   * after emitted the reply. The reply is only emitted if not `undefined`.\n   */\n  TERMINAL = 250,\n  /**\n   * The receiver could not understand the request due to invalid syntax.\n   *\n   * In request-reply communication, setting this status code will error the requestor's Observable.\n   */\n  BAD_REQUEST = 400,\n  /**\n   * The receiver could not find the requested resource.\n   *\n   * In request-reply communication, setting this status code will error the requestor's Observable.\n   */\n  NOT_FOUND = 404,\n  /**\n   * The receiver encountered an internal error. Optionally, set the error as message payload.\n   *\n   * In request-reply communication, setting this status code will error the requestor's Observable.\n   */\n  ERROR = 500,\n}\n\n/**\n * Returns an Observable that mirrors the source Observable unless receiving a message with\n * a response status code greater than or equal to 400. Then, the stream will end with an\n * {@link RequestError error} and the source Observable unsubscribed.\n *\n * When receiving a message with the response status code {@link ResponseStatusCodes.TERMINAL},\n * the Observable emits this message and completes.\n *\n * If a message does not include a response status code, the message is emitted as is.\n *\n * Note that this operator is installed in {@link MessageClient.request$} and {@link IntentClient.request$}.\n *\n * @category Messaging\n */\nexport function throwOnErrorStatus<BODY>(): MonoTypeOperatorFunction<TopicMessage<BODY>> {\n  return pipe(\n    mergeMap((message: TopicMessage<BODY>): Observable<TopicMessage<BODY>> => {\n      const status = message.headers.get(MessageHeaders.Status) ?? ResponseStatusCodes.OK;\n      if (status < 400) {\n        return of(message); // 1xx: informational responses, 2xx: successful responses, 4xx: client errors, 5xx: server errors\n      }\n\n      if (typeof message.body === 'string') {\n        const messageBody: string = message.body;\n        return throwError(() => new RequestError(messageBody, status, message));\n      }\n\n      switch (status) {\n        case ResponseStatusCodes.BAD_REQUEST: {\n          return throwError(() => new RequestError('The receiver could not understand the request due to invalid syntax.', status, message));\n        }\n        case ResponseStatusCodes.NOT_FOUND: {\n          return throwError(() => new RequestError('The receiver could not find the requested resource.', status, message));\n        }\n        case ResponseStatusCodes.ERROR: {\n          return throwError(() => new RequestError('The receiver encountered an internal error.', status, message));\n        }\n        default: {\n          return throwError(() => new RequestError('Request error.', status, message));\n        }\n      }\n    }),\n    takeWhile((message: TopicMessage<BODY>) => {\n      return message.headers.get(MessageHeaders.Status) !== ResponseStatusCodes.TERMINAL;\n    }, true),\n    filter((message: TopicMessage<BODY>) => {\n      const isTerminalMessage = message.headers.get(MessageHeaders.Status) === ResponseStatusCodes.TERMINAL;\n      return (!isTerminalMessage || message.body !== undefined);\n    }),\n  );\n}\n\n/**\n * Maps each message to its body.\n *\n * @category Messaging\n */\nexport function mapToBody<T>(): OperatorFunction<TopicMessage<T> | IntentMessage<T>, T> {\n  return map(message => message.body!);\n}\n\n/**\n * Indicates that the request handler responded with an error response.\n *\n * @category Messaging\n */\nexport class RequestError extends Error {\n\n  constructor(error: string, public status: number, public msg: Message) {\n    super(error);\n    this.name = 'RequestError';\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Provides utilities for working with topics.\n *\n * @internal\n */\nexport namespace Topics {\n\n  /**\n   * Tests whether given topic contains wildcard segments.\n   */\n  export function containsWildcardSegments(topic: string): boolean {\n    return split(topic).some(isWildcardSegment);\n  }\n\n  /**\n   * Tests whether given topic contains empty segments.\n   */\n  export function containsEmptySegments(topic: string): boolean {\n    return topic.split('/').some(segment => !segment.length);\n  }\n\n  /**\n   * Tests whether given segment is a wildcard segment.\n   */\n  export function isWildcardSegment(segment: string): boolean {\n    return segment.startsWith(':') && segment.length > 1;\n  }\n\n  /**\n   * Splits given topic into its segments.\n   */\n  export function split(topic: string | null | undefined): string[] {\n    return topic?.split('/').filter(Boolean) ?? [];\n  }\n\n  /**\n   * Returns unnamed wildcard permutations for given exact topic.\n   * These are 2^n variations, where n is the number of segments.\n   *\n   * Example:\n   * Topic: myhome/kitchen/temperature\n   *\n   * +-----------+-----------+-----------*-+\n   * | Segment 1 | Segment 2 | Segment 3   |\n   * +-----------+-----------+-*-----------+\n   * | myhome    | kitchen   | temperature |\n   * | myhome    | kitchen   | *           |\n   * | myhome    | *         | temperature |\n   * | myhome    | *         | *           |\n   * | *         | kitchen   | temperature |\n   * | *         | kitchen   | *           |\n   * | *         | *         | temperature |\n   * | *         | *         | *           |\n   * +-----------+-----------+-------------+\n   */\n  export function computeWildcardSegmentPermutations(topic: string | string[], wildcardCharacter: string): string[] {\n    const segments = typeof topic === 'string' ? Topics.split(topic) : topic;\n\n    if (segments.length === 1) {\n      return [segments[0], wildcardCharacter];\n    }\n\n    return computeWildcardSegmentPermutations(segments.slice(1), wildcardCharacter).reduce((permutations, permutation) => {\n      permutations.push(`${segments[0]}/${permutation}`);\n      permutations.push(`${wildcardCharacter}/${permutation}`);\n      return permutations;\n    }, new Array<string>());\n  }\n\n  /**\n   * Replaces named wildcard segments with given replacement.\n   *\n   * Example: \"myhome/:room/temperature\" => \"myhome/REPLACEMENT/temperature\"\n   *\n   */\n  export function replaceWildcardSegments(topic: string, replacement: string): string {\n    return topic.replace(/:[^/]+/g, replacement);\n  }\n\n  /**\n   * Validates given topic.\n   *\n   * @return `null` if valid, or the `Error` otherwise.\n   */\n  export function validateTopic(topic: string | null | undefined, options: {exactTopic: boolean}): Error | null {\n    if (!topic) {\n      return Error('[IllegalTopicError] Topic must not be `null`, `undefined` or empty');\n    }\n    if (Topics.containsEmptySegments(topic)) {\n      return Error(`[IllegalTopicError] Topic must not contain empty segments [topic='${topic}']`);\n    }\n    if (options.exactTopic && Topics.containsWildcardSegments(topic)) {\n      return Error(`[IllegalTopicError] Topic must be exact, i.e., not contain wildcard segments [topic='${topic}']`);\n    }\n    return null;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Arrays} from '@scion/toolkit/util';\nimport {Topics} from './topics.util';\n\n/**\n * Allows testing whether an exact topic matches a pattern topic. The pattern topic may contain wildcard segments.\n *\n * Topics are case-sensitive and consist of one or more segments, each separated by a forward slash.\n *\n * @category Messaging\n */\nexport class TopicMatcher {\n\n  private readonly _patternSegments: string[];\n\n  /**\n   * Constructs a matcher that will match given topics against this pattern.\n   *\n   * @param pattern - Pattern to match topics. The pattern is a topic, not a regular expression; thus, it must consist of one or more segments,\n   *                  each separated by a forward slash. The pattern supports wildcard segments beginning with a colon (`:`). Wildcard segments\n   *                  act as a placeholder for any segment value.\n   */\n  constructor(pattern: string) {\n    this._patternSegments = Topics.split(pattern);\n    if (!this._patternSegments.length) {\n      throw Error('[TopicMatcherError] Invalid pattern syntax. The pattern must consist of one or more topic segments, each separated by a forward slash.');\n    }\n  }\n\n  /**\n   * Attempts to match the given topic against the pattern which was passed to the constructor.\n   *\n   * If the match succeeds, then {@link MatcherResult.matches} evaluates to `true`. If the pattern contains wildcard segments,\n   * the matched segments can be read using the property {@link TopicMessage.params} property.\n   *\n   * @param topic - The topic to match against the configured pattern; must be an exact topic, thus not contain wildcard segments.\n   * @return The result of the topic matcher test.\n   */\n  public match(topic: string): MatcherResult {\n    const inputTopicSegments = Topics.split(topic);\n    const patternSegments = this._patternSegments;\n\n    if (!inputTopicSegments.length) {\n      throw Error('[TopicMatcherError] Invalid topic. The topic must consist of one or more segments, each separated by a forward slash.');\n    }\n    if (inputTopicSegments.some(Topics.isWildcardSegment)) {\n      throw Error('[TopicMatcherError] Invalid topic. Wildcard segments not allowed in an exact topic.');\n    }\n    if (patternSegments.length !== inputTopicSegments.length) {\n      return {matches: false};\n    }\n    if (Arrays.isEqual(inputTopicSegments, patternSegments, {exactOrder: true})) {\n      return {matches: true, params: new Map()};\n    }\n    if (!patternSegments.some(Topics.isWildcardSegment)) {\n      return {matches: false};\n    }\n    if (!patternSegments.every((patternSegment, i) => patternSegment === inputTopicSegments[i] || Topics.isWildcardSegment(patternSegment))) {\n      return {matches: false};\n    }\n\n    return {\n      matches: true,\n      params: patternSegments.reduce((params, segment, i) => {\n        if (Topics.isWildcardSegment(segment)) {\n          return params.set(segment.substring(1), inputTopicSegments[i]);\n        }\n        return params;\n      }, new Map()),\n    };\n  }\n}\n\n/**\n * Represents the result of a topic matcher test.\n *\n * @category Messaging\n */\nexport interface MatcherResult {\n  /**\n   * Indicates if the topic matches the pattern topic.\n   */\n  matches: boolean;\n  /**\n   * Contains the actual values for the wildcard segments as defined in the pattern topic; is only set if the match is successful.\n   */\n  params?: Map<string, string>;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MonoTypeOperatorFunction, OperatorFunction, pipe} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {MessageEnvelope, MessagingChannel, MessagingTransport} from './ɵmessaging.model';\nimport {Message, TopicMessage} from './messaging.model';\nimport {TopicMatcher} from './topic-matcher.util';\nimport {Arrays} from '@scion/toolkit/util';\n\n/** @internal */\nexport function filterByTransport(transport: MessagingTransport): OperatorFunction<MessageEvent, MessageEvent<MessageEnvelope>> {\n  return filter((event: MessageEvent): event is MessageEvent<MessageEnvelope> => {\n    const envelope: MessageEnvelope | undefined = event.data;\n    return envelope?.transport === transport && !!envelope.channel && !!envelope.message?.headers;\n  });\n}\n\n/** @internal */\nexport function filterByChannel<T extends Message>(...channel: MessagingChannel[]): OperatorFunction<MessageEvent<MessageEnvelope>, MessageEvent<MessageEnvelope<T>>> {\n  const channels = new Set(Arrays.coerce(channel));\n  return filter((event: MessageEvent<MessageEnvelope>): event is MessageEvent<MessageEnvelope<T>> => {\n    return channels.has(event.data.channel);\n  });\n}\n\n/** @internal */\nexport function filterByTopicChannel<T>(topic: string): OperatorFunction<MessageEvent<MessageEnvelope>, MessageEvent<MessageEnvelope<TopicMessage<T>>>> {\n  return pipe(\n    filterByChannel<TopicMessage<T>>(MessagingChannel.Topic),\n    filter((event: MessageEvent<MessageEnvelope<TopicMessage<T>>>): boolean => {\n      const messageTopic = event.data.message.topic;\n      return !!messageTopic && new TopicMatcher(topic).match(messageTopic).matches;\n    }),\n  );\n}\n\n/** @internal */\nexport function filterByOrigin(origin: string): MonoTypeOperatorFunction<MessageEvent> {\n  return filter((event: MessageEvent): boolean => {\n    return event.origin === origin;\n  });\n}\n\n/** @internal */\nexport function filterByWindow(window: Window): MonoTypeOperatorFunction<MessageEvent> {\n  return filter((event: MessageEvent): boolean => {\n    return event.source === window;\n  });\n}\n\n/** @internal */\nexport function pluckMessage<T extends Message>(): OperatorFunction<MessageEvent<MessageEnvelope<T>>, T> {\n  return map((messageEvent: MessageEvent<MessageEnvelope<T>>): T => {\n    return messageEvent.data.message;\n  });\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Logger} from './logger';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Runs the given function. Errors are caught and logged.\n *\n * If producing a Promise, returns that Promise, but with a catch handler installed.\n *\n * @internal\n */\nexport function runSafe<T = void>(runnable: () => T): T {\n  let result: T;\n  try {\n    result = runnable();\n  }\n  catch (error) {\n    Beans.opt(Logger)?.error('[UnexpectedError] An unexpected error occurred.', error);\n    return undefined!;\n  }\n\n  if (result instanceof Promise) {\n    return result.catch(error => {\n      Beans.opt(Logger)?.error('[UnexpectedError] An unexpected error occurred.', error);\n      return undefined;\n    }) as any;\n  }\n  return result;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Returns the error message if given an error object, or the `toString` representation otherwise.\n *\n * @internal\n */\nexport function stringifyError(error: string | Error | unknown): string {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return `${error}`;\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {MonoTypeOperatorFunction, Observable} from 'rxjs';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Enables the decoration of RxJS Observables provided by the SCION Microfrontend Platform to control their emission context.\n *\n * The emission context of an Observables may be different than the subscription context, which can lead to unexpected behavior\n * on the subscriber side. For example, Angular uses zones (Zone.js) to trigger change detection. Angular applications expect\n * an RxJS Observable to emit in the same Angular zone in which subscribed to the Observable. That is, if subscribing inside\n * the Angular zone, emissions are expected to be received inside the Angular zone. Otherwise, the UI may not be updated as\n * expected but delayed until the next change detection cycle. Similarly, if subscribing outside the Angular zone, emissions\n * are expected to be received outside the Angular zone. Otherwise, this would cause unnecessary change detection cycles\n * resulting in potential performance degradation.\n *\n * ### Example for Angular Applications\n *\n * For Angular applications, we reommend installing the following decorator:\n *\n * ```ts\n * import {NgZone} from '@angular/core';\n * import {ObservableDecorator} from '@scion/microfrontend-platform';\n * import {Observable} from 'rxjs';\n * import {observeInside, subscribeInside} from '@scion/toolkit/operators';\n *\n * export class NgZoneObservableDecorator implements ObservableDecorator {\n *\n *   constructor(private zone: NgZone) {\n *   }\n *\n *   public decorate$<T>(source$: Observable<T>): Observable<T> {\n *      return new Observable<T>(observer => {\n *        const insideAngular = NgZone.isInAngularZone();\n *        const subscription = source$\n *          .pipe(\n *            subscribeInside(fn => this.zone.runOutsideAngular(fn)),\n *            observeInside(fn => insideAngular ? this.zone.run(fn) : this.zone.runOutsideAngular(fn)),\n *          )\n *          .subscribe(observer);\n *        return () => subscription.unsubscribe();\n *      });\n *    }\n * }\n * ```\n *\n * A decorator can be registered with the bean manager under the symbol `ObservableDecorator`, as following:\n *\n * ```ts\n * Beans.register(ObservableDecorator, {useValue: new NgZoneObservableDecorator(zone)});\n * ```\n *\n * @category Messaging\n */\nexport abstract class ObservableDecorator {\n\n  /**\n   * Decorates given Observable.\n   *\n   * @param  source$ - Observable to be decorated.\n   * @return Decorated Observable.\n   */\n  public abstract decorate$<T>(source$: Observable<T>): Observable<T>;\n}\n\n/**\n * Decorates the source with registered {@link ObservableDecorator}, if any.\n *\n * @internal\n */\nexport function decorateObservable<T>(): MonoTypeOperatorFunction<T> {\n  return (source$: Observable<T>) => Beans.opt(ObservableDecorator)?.decorate$(source$) ?? source$;\n}\n","/*\n * Copyright (c) 2018-2023 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {merge, Observable, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {Maps} from '@scion/toolkit/util';\n\n/**\n * Selects items emitted by an Observable according to a static criterion.\n *\n * This selector was introduced to quickly filter many messages from many subscribers.\n * Instead of a predicate, a key is used to dispatch messages with O(1) complexity to the subscribers.\n *\n * Prior to this selector, performance degraded significantly when sending more than 1000 messages\n * simultaneously, since filtering of message acknowledgements per-subscriber scaled worse than linearly.\n *\n * ---\n * ### Usage\n *\n * ```ts\n * // Create message source.\n * const messages$ = new Subject<{id: string; text: string}>();\n *\n * // Create selector to filter messages by id.\n * const selectMessagesById = new MessageSelector({source$: messages$, keySelector: message => message.id});\n *\n * // Receive only messages with id '1'.\n * selectMessagesById.select$('1').subscribe(msg => {\n *   // do something\n * });\n *\n * // Emit messages.\n * messages$.next({id: '1', text: 'foo'});\n * messages$.next({id: '2', text: 'bar'});\n * ```\n *\n * @internal\n */\nexport class MessageSelector<T> {\n\n  private _selectors = new Map<string, Array<Subject<T>>>;\n  private _sourceError$ = new Subject<never>();\n  private _sourceComplete$ = new Subject<void>();\n  private _destroy$ = new Subject<void>();\n\n  /**\n   * @param config - Controls how to select messages.\n   */\n  constructor(config: SelectorConfig<T>) {\n    const {source$, keySelector} = config;\n\n    source$\n      .pipe(takeUntil(this._destroy$))\n      .subscribe({\n        next: item => {\n          const key = keySelector(item);\n          this._selectors.get(key)?.forEach(selector => selector.next(item));\n        },\n        error: error => this._sourceError$.error(error),\n        complete: () => this._sourceComplete$.next(),\n      });\n  }\n\n  /**\n   * Selects items emitted by the source Observable that match the given key.\n   *\n   * @param key - Specifies the key to select items.\n   */\n  public select$<R extends T>(key: string): Observable<R> {\n    return new Observable(observer => {\n      const selector$ = new Subject<any>();\n      Maps.addListValue(this._selectors, key, selector$);\n      const subscription = merge(selector$, this._sourceError$)\n        .pipe(takeUntil(this._sourceComplete$))\n        .subscribe(observer);\n\n      return () => {\n        Maps.removeListValue(this._selectors, key, selector$);\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  /**\n   * Returns the current subscriber count.\n   */\n  public ɵsubscriberCount(): number {\n    return Array.from(this._selectors.values()).reduce((count, selectors) => count + selectors.length, 0);\n  }\n\n  /**\n   * Disconnects this selector from the source Observable.\n   */\n  public disconnect(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Controls how to select items.\n *\n * @internal\n */\nexport interface SelectorConfig<T> {\n  /**\n   * Specifies the Observable to select items from.\n   */\n  source$: Observable<T>;\n  /**\n   * Specifies the function to compute the key of an item.\n   *\n   * A selector can then subscribe for items matching the key.\n   */\n  keySelector: (item: T) => string;\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {AsyncSubject, EMPTY, firstValueFrom, fromEvent, lastValueFrom, merge, MonoTypeOperatorFunction, NEVER, noop, Observable, Observer, of, ReplaySubject, Subject, TeardownLogic, throwError, timeout, timer} from 'rxjs';\nimport {ConnackMessage, MessageDeliveryStatus, MessageEnvelope, MessagingChannel, MessagingTransport, PlatformTopics, SubscribeCommand, UnsubscribeCommand} from '../../ɵmessaging.model';\nimport {finalize, map, mergeMap, take, takeUntil, tap} from 'rxjs/operators';\nimport {filterByChannel, filterByOrigin, filterByTopicChannel, filterByTransport, filterByWindow, pluckMessage} from '../../operators';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {IntentMessage, Message, MessageHeaders, ResponseStatusCodes, TopicMessage} from '../../messaging.model';\nimport {Logger, NULL_LOGGER} from '../../logger';\nimport {Dictionaries} from '@scion/toolkit/util';\nimport {Beans, Initializer, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {APP_IDENTITY, IS_PLATFORM_HOST} from '../../platform.model';\nimport {ɵVERSION, ɵWINDOW_TOP} from '../../ɵplatform.model';\nimport {PlatformState} from '../../platform-state';\nimport {ConnectOptions} from '../connect-options';\nimport {MicrofrontendPlatform} from '../../microfrontend-platform';\nimport {MessageClient} from './message-client';\nimport {runSafe} from '../../safe-runner';\nimport {stringifyError} from '../../error.util';\nimport {decorateObservable} from '../../observable-decorator';\nimport {MessageSelector} from './message-selector';\n\n/**\n * The gateway is responsible for dispatching messages between the client and the broker.\n *\n * To initiate a connection, the gateway sends a CONNECT message to the current and all parent windows. When the broker window\n * receives the CONNECT message, the broker responds with a CONNACK message. If no CONNACK message is received within the discovery\n * timeout, the gateway errors. When the gateway is being disposed, it sends a DISCONNECT message to the broker.\n *\n * @internal\n */\nexport abstract class BrokerGateway {\n\n  /**\n   * Returns whether this gateway is connected to the message broker. It never throws a broker discovery timeout error.\n   */\n  public abstract isConnected(): Promise<boolean>;\n\n  /**\n   * Posts a message to the message broker. If not connected to the broker yet, waits posting the message\n   * until established the connection to the broker.\n   *\n   * @return a Promise that resolves when successfully posted the message to the broker, or that rejects otherwise.\n   */\n  public abstract postMessage(channel: MessagingChannel, message: Message): Promise<void>;\n\n  /**\n   * Posts a message to the message broker and receives replies. The Observable never completes.\n   */\n  public abstract requestReply$<T = any>(channel: MessagingChannel, message: IntentMessage | TopicMessage): Observable<TopicMessage<T>>;\n\n  /**\n   * Subscribes to described destination, unless the platform has been stopped at the time of subscription.\n   */\n  public abstract subscribe$<T extends Message>(subscriptionDescriptor: SubscriptionDescriptor): Observable<T>;\n}\n\n/**\n * Broker gateway that does nothing.\n *\n * Use this gateway in tests to not connect to the platform host.\n *\n * @internal\n */\nexport class NullBrokerGateway implements BrokerGateway {\n\n  constructor() {\n    console.log('[NullBrokerGateway] Using \\'NullBrokerGateway\\'. Messages cannot be sent or received.');\n  }\n\n  public isConnected(): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n\n  public get message$(): Observable<MessageEvent<MessageEnvelope>> {\n    return NEVER;\n  }\n\n  public async postMessage(channel: MessagingChannel, message: Message): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public requestReply$<T = any>(channel: MessagingChannel, message: IntentMessage | TopicMessage): Observable<TopicMessage<T>> {\n    return NEVER;\n  }\n\n  public subscribe$<T extends Message>(subscriptionDescriptor: SubscriptionDescriptor): Observable<T> {\n    return NEVER;\n  }\n}\n\n/**\n * @internal\n */\nexport class ɵBrokerGateway implements BrokerGateway, PreDestroy, Initializer {\n\n  /*\n   * This Observable is primarily used as a notifier for the `takeUntil` operator to complete Observable subscriptions when the platform is shutting down.\n   * Since some subscriptions trigger subsequent broker interactions, e.g., unsubscribing from a topic subscription, the notifier must \"replay\" its state\n   * to avoid waiting for broker responses, which would never arrive and otherwise cause timeout errors.\n   */\n  private _platformStopping$ = new ReplaySubject<void>(1);\n  private _appSymbolicName: string;\n  private _brokerDiscoverTimeout: number;\n  private _messageDeliveryTimeout: number;\n  private _session: Session | null = null;\n  private _session$ = new AsyncSubject<Session>();\n  private _message$ = new Subject<MessageEvent<MessageEnvelope>>();\n\n  private _selectMessagesByTopic = new MessageSelector({\n    source$: this._message$.pipe(filterByChannel<TopicMessage>(MessagingChannel.Topic)),\n    keySelector: event => event.data.message.topic,\n  });\n  private _selectMessagesBySubscriberIdHeader = new MessageSelector({\n    source$: this._message$,\n    keySelector: event => event.data.message.headers.get(MessageHeaders.ɵSubscriberId),\n  });\n\n  constructor(connectOptions?: ConnectOptions) {\n    this._appSymbolicName = Beans.get<string>(APP_IDENTITY);\n    this._brokerDiscoverTimeout = connectOptions?.brokerDiscoverTimeout ?? 10_000;\n    this._messageDeliveryTimeout = connectOptions?.messageDeliveryTimeout ?? 10_000;\n  }\n\n  public async init(): Promise<void> {\n    try {\n      const session = await this.connectToBroker();\n      this.installBrokerMessageListener(session);\n      this.installPingReplier(session);\n      this._session = session;\n      this._session$.next(session);\n      this._session$.complete();\n    }\n    catch (error) {\n      this._session$.error(error);\n      throw error;\n    }\n  }\n\n  public isConnected(): Promise<boolean> {\n    return lastValueFrom(this._session$).then(() => true).catch(() => false);\n  }\n\n  public get session(): Session | null {\n    return this._session;\n  }\n\n  public async postMessage(channel: MessagingChannel, message: Message): Promise<void> {\n    if (isPlatformStopped()) {\n      throw GatewayErrors.PLATFORM_STOPPED_ERROR;\n    }\n\n    // If not connected to the broker, wait until connected. If connected, continue execution immediately\n    // without spawning a microtask. Otherwise, messages cannot be published during platform shutdown.\n    const session = this._session || await lastValueFrom(this._session$);\n\n    const messageId = UUID.randomUUID();\n    const envelope: MessageEnvelope = {\n      transport: MessagingTransport.ClientToBroker,\n      channel: channel,\n      message: message,\n    };\n    envelope.message.headers\n      .set(MessageHeaders.MessageId, messageId)\n      .set(MessageHeaders.Timestamp, Date.now())\n      .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n      .set(MessageHeaders.ClientId, session.clientId);\n\n    // Install Promise that resolves once the broker has acknowledged the message, or that rejects otherwise.\n    const postError$ = new Subject<never>();\n    const whenPosted = new Promise<void>((resolve, reject) => {\n      merge(this._selectMessagesByTopic.select$<MessageEvent<MessageEnvelope<TopicMessage<MessageDeliveryStatus>>>>(messageId), postError$)\n        .pipe(\n          take(1),\n          pluckMessage(),\n          timeout({first: this._messageDeliveryTimeout, with: () => throwError(() => GatewayErrors.MESSAGE_DISPATCH_ERROR(this._messageDeliveryTimeout, envelope))}),\n          mergeMap(statusMessage => statusMessage.body!.ok ? EMPTY : throwError(() => Error(statusMessage.body!.details))),\n          takeUntil(this._platformStopping$),\n        )\n        .subscribe({\n          error: reject,\n          complete: resolve,\n        });\n    });\n\n    try {\n      session.broker.window.postMessage(envelope, session.broker.origin);\n    }\n    catch (error) {\n      postError$.error(error);\n    }\n\n    await whenPosted;\n  }\n\n  public requestReply$<T = any>(channel: MessagingChannel, request: IntentMessage | TopicMessage): Observable<TopicMessage<T>> {\n    return new Observable((observer: Observer<TopicMessage>): TeardownLogic => {\n      if (isPlatformStopped()) {\n        observer.error(GatewayErrors.PLATFORM_STOPPED_ERROR);\n        return noop;\n      }\n\n      const replyTo = UUID.randomUUID();\n      const subscriberId = UUID.randomUUID();\n      const unsubscribe$ = new Subject<void>();\n      const requestError$ = new Subject<never>();\n\n      request.headers\n        .set(MessageHeaders.ReplyTo, replyTo) // message header for the replier where to send replies to\n        .set(MessageHeaders.ɵSubscriberId, subscriberId); // message header to subscribe for replies\n\n      // Receive replies sent to the reply topic.\n      merge(this._selectMessagesBySubscriberIdHeader.select$<MessageEvent<MessageEnvelope<TopicMessage>>>(subscriberId), requestError$)\n        .pipe(\n          filterByChannel<TopicMessage<T>>(MessagingChannel.Topic),\n          pluckMessage(),\n          decorateObservable(),\n          takeUntil(merge(this._platformStopping$, unsubscribe$)),\n          finalize(() => this.unsubscribe({unsubscribeChannel: MessagingChannel.TopicUnsubscribe, subscriberId, logContext: `[subscriberId=${subscriberId}, topic=${replyTo}]`})),\n        )\n        .subscribe({\n          next: reply => observer.next(reply),\n          error: error => observer.error(error),\n          complete: noop, // As per the API, the Observable never completes.\n        });\n\n      // Post the request to the broker.\n      this.postMessage(channel, request)\n        .catch(error => requestError$.error(error));\n\n      return (): void => unsubscribe$.next();\n    });\n  }\n\n  public subscribe$<T extends Message>(subscriptionDescriptor: SubscriptionDescriptor): Observable<T> {\n    const {messageChannel, subscribeChannel, unsubscribeChannel, newSubscribeCommand} = subscriptionDescriptor;\n\n    return new Observable((observer: Observer<T>): TeardownLogic => {\n      if (isPlatformStopped()) {\n        observer.error(GatewayErrors.PLATFORM_STOPPED_ERROR);\n        return noop;\n      }\n\n      const subscriberId = UUID.randomUUID();\n      const unsubscribe$ = new Subject<void>();\n      const subscribeError$ = new Subject<never>();\n\n      // Receive messages of given subscription.\n      merge(this._selectMessagesBySubscriberIdHeader.select$<MessageEvent<MessageEnvelope<T>>>(subscriberId), subscribeError$)\n        .pipe(\n          filterByChannel<T>(messageChannel),\n          pluckMessage(),\n          decorateObservable(),\n          takeUntil(merge(this._platformStopping$, unsubscribe$)),\n          finalize(() => this.unsubscribe({unsubscribeChannel, subscriberId, logContext: JSON.stringify(newSubscribeCommand(subscriberId))})),\n        )\n        .subscribe({\n          next: message => observer.next(message),\n          error: error => observer.error(error),\n          complete: noop, // As per the API, the Observable never completes.\n        });\n\n      // Post the subscription to the broker.\n      this.postMessage(subscribeChannel, newSubscribeCommand(subscriberId))\n        .catch(error => subscribeError$.error(error));\n\n      return (): void => unsubscribe$.next();\n    });\n  }\n\n  /**\n   * Unsubscribes from described destination. Does nothing if the platform is stopped.\n   */\n  private async unsubscribe(descriptor: {unsubscribeChannel: MessagingChannel; subscriberId: string; logContext: string}): Promise<void> {\n    if (isPlatformStopped()) {\n      return;\n    }\n\n    const {unsubscribeChannel, subscriberId, logContext} = descriptor;\n    const unsubscribeCommand: UnsubscribeCommand = {subscriberId, headers: new Map()};\n    try {\n      await this.postMessage(unsubscribeChannel, unsubscribeCommand);\n    }\n    catch (error) {\n      Beans.get(Logger, {orElseGet: NULL_LOGGER}).error(`[UnsubscribeError] Failed to unsubscribe from destination: '${logContext}'. Caused by: ${error}`);  // Fall back using NULL_LOGGER, e.g., when the platform is stopping.\n    }\n  }\n\n  /**\n   * Subscribes to messages sent to this client.\n   * Messages are dispatched to {@link _message$}.\n   */\n  private installBrokerMessageListener(session: Session): void {\n    fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByWindow(session.broker.window),\n        filterByOrigin(session.broker.origin),\n        filterByTransport(MessagingTransport.BrokerToClient),\n        fixMapObjects(),\n        takeUntil(this._platformStopping$),\n      )\n      .subscribe(this._message$);\n  }\n\n  /**\n   * Installs a ping replier to indicate that this client is connected to the host.\n   *\n   * Note that no ping replier is installed if running in the context of the host application.\n   */\n  private installPingReplier(session: Session): void {\n    if (Beans.get(IS_PLATFORM_HOST)) {\n      return; // The host app client does not reply to pings.\n    }\n\n    Beans.get(MessageClient).observe$(PlatformTopics.ping(session.clientId))\n      .pipe(takeUntil(this._platformStopping$))\n      .subscribe(request => runSafe(() => {\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        Beans.get(MessageClient).publish(replyTo, undefined, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL)}).then();\n      }));\n  }\n\n  /**\n   * Connects this client to the broker by sending a CONNECT message to the current and all parent windows.\n   *\n   * When the broker receives the CONNECT message and trusts this client, the broker responds with a CONNACK message,\n   * or rejects the connect attempt otherwise.\n   *\n   * @return A Promise that, when connected, resolves to information about the connected client and broker, or that rejects if the connect attempt\n   * failed, either because the broker could not be found or because the application is not allowed to connect.\n   */\n  public connectToBroker(): Promise<Session> {\n    const replyTo = UUID.randomUUID();\n    const connectPromise = firstValueFrom(fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByTransport(MessagingTransport.BrokerToClient),\n        filterByTopicChannel<ConnackMessage>(replyTo),\n        mergeMap((messageEvent: MessageEvent<MessageEnvelope<TopicMessage<ConnackMessage>>>) => {\n          const response: ConnackMessage | undefined = messageEvent.data.message.body;\n          if (response?.returnCode !== 'accepted') {\n            return throwError(() => Error(`${response?.returnMessage ?? 'UNEXPECTED: Empty broker discovery response'} [code: '${response?.returnCode ?? 'n/a'}']`));\n          }\n          return of<Session>({\n            clientId: response.clientId!,\n            broker: {\n              window: messageEvent.source as Window,\n              origin: messageEvent.origin,\n            },\n          });\n        }),\n        timeout({first: this._brokerDiscoverTimeout, with: () => throwError(() => GatewayErrors.BROKER_DISCOVER_ERROR(this._brokerDiscoverTimeout))}),\n        tap({error: error => Beans.get(Logger, {orElseGet: NULL_LOGGER}).error(stringifyError(error))}), // Fall back using NULL_LOGGER, e.g., when the platform is stopping.\n        takeUntil(this._platformStopping$),\n      ));\n\n    const connectMessage: MessageEnvelope = {\n      transport: MessagingTransport.ClientToBroker,\n      channel: MessagingChannel.ClientConnect,\n      message: {\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.Timestamp, Date.now())\n          .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n          .set(MessageHeaders.ReplyTo, replyTo)\n          .set(MessageHeaders.Version, Beans.get(ɵVERSION)),\n      },\n    };\n\n    if (Beans.get(IS_PLATFORM_HOST)) {\n      window.postMessage(connectMessage, window.origin);\n    }\n    else if (window === Beans.get(ɵWINDOW_TOP)) {\n      // If loading the client into the topmost window it may be integrated into a rich client, with the host running in a different browser window (remote host).\n      // The rich client then bridges messages between the windows of the client and the remote host. Since the rich client may not be able to bridge messages\n      // right away when the client loads, the client repeatedly sends a connect request until acknowledged by the remote host.\n      const windowHierarchy = this.collectWindowHierarchy();\n      timer(0, 25)\n        .pipe(takeUntil(connectPromise.catch(() => null)))\n        .subscribe(() => {\n          windowHierarchy.forEach(window => window.postMessage(connectMessage, '*'));\n        });\n    }\n    else {\n      this.collectWindowHierarchy().forEach(window => window.postMessage(connectMessage, '*'));\n    }\n\n    return connectPromise;\n  }\n\n  /**\n   * Disconnects this client from the broker by sending a DISCONNECT message.\n   * Has no effect if not connected to the broker. If this operation fails, the error is logged as\n   * a warning, but not thrown.\n   */\n  private disconnectFromBroker(): void {\n    if (!this._session) {\n      return;\n    }\n\n    const disconnectMessage: MessageEnvelope = {\n      transport: MessagingTransport.ClientToBroker,\n      channel: MessagingChannel.ClientDisconnect,\n      message: {\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.Timestamp, Date.now())\n          .set(MessageHeaders.AppSymbolicName, this._appSymbolicName)\n          .set(MessageHeaders.ClientId, this._session.clientId),\n      },\n    };\n\n    try {\n      this._session.broker.window.postMessage(disconnectMessage, this._session.broker.origin);\n    }\n    catch (error) {\n      Beans.get(Logger, {orElseGet: NULL_LOGGER}).warn(`[ClientDisconnectError] Failed to disconnect from the broker. Caused by: ${error}`);\n    }\n  }\n\n  /**\n   * Returns an array of the current `Window` hierarchy.\n   * Windows are sorted in top-down order, i.e., parent windows precede child windows.\n   */\n  private collectWindowHierarchy(): Window[] {\n    const candidates: Window[] = [];\n\n    for (let candidate = window as Window; candidate !== Beans.get(ɵWINDOW_TOP); candidate = candidate.parent) {\n      candidates.unshift(candidate);\n    }\n\n    candidates.unshift(Beans.get<Window>(ɵWINDOW_TOP));\n    return candidates;\n  }\n\n  /**\n   * Method invoked when the platform enters state {@link PlatformState.Stopping}.\n   *\n   * Since this gateway is registered in the bean manager with the maximum destruction order `{destroyOrder: Number.MAX_SAFE_INTEGER}`,\n   * the platform will destroy this bean after destroying other beans, which is important so that other beans can send messages\n   * when the platform shuts down.\n   */\n  public preDestroy(): void {\n    this.disconnectFromBroker();\n    this._platformStopping$.next();\n    this._selectMessagesByTopic.disconnect();\n    this._selectMessagesBySubscriberIdHeader.disconnect();\n  }\n}\n\n/**\n * Replaces `Map` objects contained in the message with a `Map` object of the current JavaScript realm.\n *\n * Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n * Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n * This is most likely because the serialization takes place in a different realm.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n * @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n */\nfunction fixMapObjects<T extends Message>(): MonoTypeOperatorFunction<MessageEvent<MessageEnvelope<T>>> {\n  return map((event: MessageEvent<MessageEnvelope<T>>): MessageEvent<MessageEnvelope<T>> => {\n    const envelope: MessageEnvelope = event.data;\n    envelope.message.headers = new Map(envelope.message.headers || []);\n\n    if (envelope.channel === MessagingChannel.Intent) {\n      const intentMessage = envelope.message as IntentMessage;\n      intentMessage.intent.params = new Map(intentMessage.intent.params || []);\n    }\n    if (envelope.channel === MessagingChannel.Topic) {\n      const topicMessage = envelope.message as TopicMessage;\n      topicMessage.params = new Map(topicMessage.params || []);\n    }\n    return event;\n  });\n}\n\n/**\n * Creates a string representation of the given {@link MessageEnvelope}.\n */\nfunction stringifyEnvelope(envelope: MessageEnvelope): string {\n  return JSON.stringify(envelope, (key, value) => (value instanceof Map) ? Dictionaries.coerce(value) : value);\n}\n\nfunction isPlatformStopped(): boolean {\n  return MicrofrontendPlatform.state >= PlatformState.Stopped;\n}\n\n/**\n * Session created after successful connection with the broker.\n */\ninterface Session {\n  clientId: string;\n  broker: {\n    origin: string;\n    window: Window;\n  };\n}\n\nnamespace GatewayErrors {\n\n  export const PLATFORM_STOPPED_ERROR = Error('[GatewayError] Platform is stopped. Messages cannot be published or received.');\n\n  export function MESSAGE_DISPATCH_ERROR(timeout: number, message: MessageEnvelope): Error {\n    return Error(`[GatewayError] No acknowledgement received within ${timeout}ms for a message sent to the broker. [msg=${stringifyEnvelope(message)}]`);\n  }\n\n  export function BROKER_DISCOVER_ERROR(timeout: number): Error {\n    return Error(`[GatewayError] Message broker not discovered within ${timeout}ms. Messages cannot be published or received.`);\n  }\n}\n\n/**\n * Describes how to subscribe for messages.\n *\n * @internal\n */\nexport interface SubscriptionDescriptor {\n  /**\n   * Channel for receiving subscribed messages.\n   */\n  messageChannel: MessagingChannel;\n  /**\n   * Channel to send the subscribe request.\n   */\n  subscribeChannel: MessagingChannel;\n  /**\n   * Channel to send the unsubscribe request.\n   */\n  unsubscribeChannel: MessagingChannel;\n  /**\n   * Callback that is invoked to create the subscription command that will be sent over the subscription channel.\n   */\n  newSubscribeCommand: (subscriberId: string) => SubscribeCommand;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {MessageClient} from './client/messaging/message-client';\nimport {PlatformTopics} from './ɵmessaging.model';\nimport {map} from 'rxjs/operators';\nimport {Dictionary, Maps} from '@scion/toolkit/util';\nimport {firstValueFrom} from 'rxjs';\nimport {mapToBody} from './messaging.model';\nimport {Beans, Initializer} from '@scion/toolkit/bean-manager';\nimport {BrokerGateway, NullBrokerGateway} from './client/messaging/broker-gateway';\n\n/**\n * Allows looking up properties defined in the platform host.\n *\n * @category Platform\n */\nexport class PlatformPropertyService implements Initializer {\n\n  private _properties = new Map<string, any>();\n\n  public async init(): Promise<void> {\n    const messagingDisabled = Beans.get(BrokerGateway) instanceof NullBrokerGateway;\n    if (messagingDisabled) {\n      return;\n    }\n\n    // Wait until obtained platform properties so that they can be accessed synchronously by the application via `PlatformPropertyService#properties`.\n    const properties$ = Beans.get(MessageClient).observe$<Dictionary>(PlatformTopics.PlatformProperties);\n    this._properties = await firstValueFrom(properties$.pipe(mapToBody(), map(properties => Maps.coerce(properties))));\n  }\n\n  /**\n   * Indicates whether a property with the specified key exists or not.\n   */\n  public contains(key: string): boolean {\n    return this._properties.has(key);\n  }\n\n  /**\n   * Returns the property of the given key, or `defaultValue` if the property does not exist.\n   *\n   * Throws an error if `defaultValue` is not specified and the property does not exist.\n   */\n  public get<T>(key: string, defaultValue?: T): T {\n    if (this._properties.has(key)) {\n      return this._properties.get(key);\n    }\n    if (defaultValue !== undefined) {\n      return defaultValue;\n    }\n    throw Error(`[PropertyNotFoundError] No property of given name found [prop=${key}]`);\n  }\n\n  /**\n   * Returns the properties map.\n   */\n  public properties(): ReadonlyMap<string, any> {\n    return this._properties;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Uses the native Web Fetch API to fetch a resource from the network.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n * @internal\n */\nexport class HttpClient {\n\n  /**\n   * Allows fetching a resource from the network, returning a promise which is fulfilled once the response is available. The promise resolves\n   * to the Response object representing the response to your request. The promise does not reject on HTTP errors — instead it only rejects on\n   * network errors; then handlers must check for HTTP errors.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n   *\n   * @param  input - Defines the resource that you wish to fetch.\n   * @param  init - Options object containing any custom settings that you want to apply to the request.\n   * @return A Promise that resolves to a Response object.\n   */\n  public fetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n    return fetch(input, init); // native call\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Capability, Intention} from '../../platform.model';\nimport {Intent} from '../../messaging.model';\nimport {Observable} from 'rxjs';\n\n/**\n * Central point for looking up or managing capabilities or intentions available in the platform.\n *\n * @internal\n */\nexport abstract class ManifestRegistry {\n\n  /**\n   * Returns capabilities which are visible to the given application and match the given intent.\n   * The intent is not allowed to contain wildcards in its qualifier.\n   */\n  public abstract resolveCapabilitiesByIntent(intent: Intent, appSymbolicName: string): Capability[];\n\n  /**\n   * Tests whether the given app has declared an intention for the given intent, or is providing a capability matching the given intent.\n   */\n  public abstract hasIntention(intent: Intent, appSymbolicName: string): boolean;\n\n  /**\n   * Registers the given capability for the given application.\n   */\n  public abstract registerCapability(capability: Capability, appSymbolicName: string): Promise<string>;\n\n  /**\n   * Registers the given intention for the given application.\n   */\n  public abstract registerIntention(intention: Intention, appSymbolicName: string): string;\n\n  /**\n   * Notifies when a capability is registered with the platform.\n   */\n  public abstract readonly capabilityRegister$: Observable<Capability>;\n\n  /**\n   * Notifies when capabilities are unregistered from the platform.\n   */\n  public abstract readonly capabilityUnregister$: Observable<Capability[]>;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nconst ABSOLUTE_URL_REGEX = /^(https?:\\/\\/)|(blob:)/;\n\n/**\n * @internal\n */\nexport namespace Urls {\n\n  /**\n   * Returns `true` if the given URL is an absolute URL, a blob or the 'about:blank' page.\n   */\n  export function isAbsoluteUrl(url: string): boolean {\n    return url === 'about:blank' || ABSOLUTE_URL_REGEX.test(url);\n  }\n\n  /**\n   * Constructs the {@link URL} for the given url and optional base, applying relative navigational symbols if contained in the url.\n   *\n   * Following rules apply:\n   * - base is required if providing a relative url\n   * - search and fragment parts of the base are ignored\n   * - relative navigational symbols are only applied if passing a base (native support)\n   *\n   * This function is similar to `new URL(url, base)` except that it works for bases that do not have a trailing slash.\n   * If you use `new URL(url, base)` without a trailing slash in the base, the last segment is discarded.\n   *\n   * // new URL('x/y', 'http://localhost:4200/a/b/').toString() -> \"http://localhost:4200/a/b/x/y\" // what we expect\n   * // new URL('x/y', 'http://localhost:4200/a/b').toString() -> \"http://localhost:4200/a/x/y\" // not what we expect\n   *\n   * We observed this behavior in Chromium and Firefox browsers.\n   */\n  export function newUrl(url: string, base?: string): URL {\n    if (base) {\n      const baseUrl = new URL(base);\n      if (baseUrl.pathname && !baseUrl.pathname.endsWith('/')) {\n        baseUrl.pathname += '/';\n      }\n      return new URL(url, baseUrl);\n    }\n\n    return new URL(url);\n  }\n\n  /**\n   * Adds a trailing slash to the given URL, if not already present.\n   */\n  export function ensureTrailingSlash(url: string): string {\n    if (!url.endsWith('/')) {\n      return url + '/';\n    }\n    return url;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Manifest} from '../platform.model';\nimport {ɵApplication} from '../ɵplatform.model';\nimport {Arrays, Defined} from '@scion/toolkit/util';\nimport {Urls} from '../url.util';\nimport {MicrofrontendPlatformConfig} from './microfrontend-platform-config';\nimport {ManifestRegistry} from './manifest-registry/manifest-registry';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {Logger} from '../logger';\nimport {ApplicationConfig} from './application-config';\n\n/**\n * Registry with all registered applications.\n *\n * @internal\n */\nexport class ApplicationRegistry {\n\n  private static readonly SYMBOLIC_NAME_REGEXP = /^[a-z0-9-]+$/;\n\n  private readonly _applications = new Map<string, ɵApplication>();\n\n  /**\n   * Registers the given application.\n   *\n   * Throws an error if the application's symbolic name is not unique or contains illegal characters.\n   */\n  public async registerApplication(applicationConfig: ApplicationConfig, manifest: Manifest): Promise<void> {\n    Defined.orElseThrow(applicationConfig.symbolicName, () => Error(`[ApplicationRegistrationError] Invalid application config. Missing required property 'symbolicName'. [appConfig=\"${JSON.stringify(applicationConfig)}\", manifest=\"${JSON.stringify(manifest)}\"]`));\n    Defined.orElseThrow(applicationConfig.manifestUrl, () => Error(`[ApplicationRegistrationError] Invalid application config. Missing required property 'manifestUrl'. [appConfig=\"${JSON.stringify(applicationConfig)}\", manifest=\"${JSON.stringify(manifest)}\"]`));\n\n    if (!ApplicationRegistry.SYMBOLIC_NAME_REGEXP.test(applicationConfig.symbolicName)) {\n      throw Error(`[ApplicationRegistrationError] Symbolic name must be lowercase and contain alphanumeric and dash characters [symbolicName='${applicationConfig.symbolicName}'].`);\n    }\n\n    const notUniqueSymbolicName = Array.from(this._applications.values()).some(application => application.symbolicName === applicationConfig.symbolicName);\n    if (notUniqueSymbolicName) {\n      throw Error(`[ApplicationRegistrationError] Symbolic name must be unique [symbolicName='${applicationConfig.symbolicName}'].`);\n    }\n\n    const baseUrl = this.computeBaseUrl(applicationConfig, manifest);\n    this._applications.set(applicationConfig.symbolicName, {\n      symbolicName: applicationConfig.symbolicName,\n      name: manifest.name ?? applicationConfig.symbolicName,\n      baseUrl: baseUrl,\n      manifestUrl: Urls.newUrl(applicationConfig.manifestUrl, Urls.isAbsoluteUrl(applicationConfig.manifestUrl) ? applicationConfig.manifestUrl : window.origin).toString(),\n      manifestLoadTimeout: applicationConfig.manifestLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).manifestLoadTimeout,\n      activatorLoadTimeout: applicationConfig.activatorLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).activatorLoadTimeout,\n      allowedMessageOrigins: new Set(Arrays.coerce(applicationConfig.secondaryOrigin)).add(Urls.newUrl(baseUrl).origin),\n      scopeCheckDisabled: Defined.orElse(applicationConfig.scopeCheckDisabled, false),\n      intentionCheckDisabled: Defined.orElse(applicationConfig.intentionCheckDisabled, false),\n      intentionRegisterApiDisabled: Defined.orElse(applicationConfig.intentionRegisterApiDisabled, true),\n    });\n\n    for (const capability of manifest.capabilities ?? []) {\n      try {\n        await Beans.get(ManifestRegistry).registerCapability(capability, applicationConfig.symbolicName);\n      }\n      catch (error) {\n        Beans.get(Logger).error(`[CapabilityRegisterError] Failed to register capability for application '${applicationConfig.symbolicName}'. [capability=${JSON.stringify(capability)}]`, error);\n      }\n    }\n\n    manifest.intentions?.forEach(intention => {\n      try {\n        Beans.get(ManifestRegistry).registerIntention(intention, applicationConfig.symbolicName);\n      }\n      catch (error) {\n        Beans.get(Logger).error(`[IntentionRegisterError] Failed to register intention for application '${applicationConfig.symbolicName}' [intention=${JSON.stringify(intention)}].`, error);\n      }\n    });\n  }\n\n  /**\n   * Finds the application of given symbolic name. If not found, by default, throws an error unless setting the `orElseNull` option.\n   */\n  public getApplication(symbolicName: string): ɵApplication;\n  public getApplication(symbolicName: string, options: {orElse: null}): ɵApplication | null;\n  public getApplication(symbolicName: string, options?: {orElse: null}): ɵApplication | null {\n    const application = this._applications.get(symbolicName);\n    if (!application && !options) {\n      throw Error(`[NullApplicationError] No application registered under the symbolic name '${symbolicName}'.`);\n    }\n    return application ?? null;\n  }\n\n  public getApplications(): ɵApplication[] {\n    return Array.from(this._applications.values());\n  }\n\n  /**\n   * Returns whether the specified application can interact with private capabilities of other applications.\n   */\n  public isScopeCheckDisabled(appSymbolicName: string): boolean {\n    return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).scopeCheckDisabled;\n  }\n\n  /**\n   * Returns whether the specified application can register and unregister intentions dynamically at runtime.\n   */\n  public isIntentionRegisterApiDisabled(appSymbolicName: string): boolean {\n    return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).intentionRegisterApiDisabled;\n  }\n\n  /**\n   * Returns whether the specified application can interact with capabilities of other applications without having to declare respective intentions.\n   */\n  public isIntentionCheckDisabled(appSymbolicName: string): boolean {\n    return Defined.orElseThrow(this._applications.get(appSymbolicName), () => Error(`[NullApplicationError] No application registered under the symbolic name '${appSymbolicName}'.`)).intentionCheckDisabled;\n  }\n\n  /**\n   * Computes the base URL as following:\n   *\n   * - if base URL is specified in the manifest, that URL is used (either as an absolute URL, or relative to the origin of 'manifestUrl')\n   * - if base URL is not specified in the manifest, the origin from 'manifestUrl' is used as the base URL, or the origin from the current window if the 'manifestUrl' is relative\n   * - if base URL has no trailing slash, adds a trailing slash\n   */\n  private computeBaseUrl(applicationConfig: ApplicationConfig, manifest: Manifest): string {\n    const manifestURL = Urls.isAbsoluteUrl(applicationConfig.manifestUrl) ? Urls.newUrl(applicationConfig.manifestUrl) : Urls.newUrl(applicationConfig.manifestUrl, window.origin);\n\n    if (!manifest.baseUrl) {\n      return Urls.ensureTrailingSlash(manifestURL.origin);\n    }\n\n    if (Urls.isAbsoluteUrl(manifest.baseUrl)) {\n      return Urls.ensureTrailingSlash(manifest.baseUrl);\n    }\n    else {\n      return Urls.ensureTrailingSlash(Urls.newUrl(manifest.baseUrl, manifestURL.origin).toString());\n    }\n  }\n}\n\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Qualifier} from './platform.model';\n\n/**\n * Allows testing whether a qualifier matches a qualifier pattern.\n *\n * @category Intention API\n */\nexport class QualifierMatcher {\n\n  private readonly _pattern: Qualifier;\n  private readonly _patternKeys: string[];\n\n  /**\n   * Constructs a matcher that will match given qualifiers against a pattern.\n   *\n   * @param pattern - Pattern to match qualifiers. If `null` or `undefined`, uses an empty qualifier pattern.\n   */\n  constructor(pattern: Qualifier | null | undefined) {\n    this._pattern = pattern || {};\n    this._patternKeys = Object.keys(this._pattern);\n  }\n\n  /**\n   * Attempts to match the given qualifier against the pattern which was passed to the constructor.\n   */\n  public matches(qualifier: Qualifier | null | undefined): boolean {\n    const testee = qualifier || {};\n    const testeeKeys = Object.keys(testee);\n    const {_patternKeys: patternKeys, _pattern: pattern} = this;\n\n    // Test if the testee has no additional entries\n    if (!patternKeys.includes('*') && testeeKeys.some(key => !patternKeys.includes(key))) {\n      return false;\n    }\n\n    return patternKeys\n      .filter(key => key !== '*')\n      .every(key => {\n        if (pattern[key] === testee[key]) {\n          return true;\n        }\n        if (pattern[key] === '*' && testee[key] !== undefined && testee[key] !== null) {\n          return true;\n        }\n        return false;\n      });\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {QualifierMatcher} from '../../qualifier-matcher';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {Arrays, Maps} from '@scion/toolkit/util';\nimport {ManifestObjectFilter, Qualifier} from '../../platform.model';\nimport {map} from 'rxjs/operators';\nimport {Predicate} from '../message-broker/predicates.util';\n\n/**\n * Provides an in-memory store for provided capabilities and registered intentions.\n *\n * @internal\n */\nexport class ManifestObjectStore<T extends ManifestObject> {\n\n  private readonly _objectById = new Map<string, T>();\n  private readonly _objectsByType = new Map<string, T[]>();\n  private readonly _objectsByApplication = new Map<string, T[]>();\n  private readonly _add$ = new Subject<T>();\n  private readonly _remove$ = new Subject<T[]>();\n\n  /**\n   * Adds the given {@link ManifestObject} to this store.\n   */\n  public add(object: T): void {\n    this._objectById.set(object.metadata!.id, object);\n    Maps.addListValue(this._objectsByType, object.type, object);\n    Maps.addListValue(this._objectsByApplication, object.metadata!.appSymbolicName, object);\n    this._add$.next(object);\n  }\n\n  /**\n   * Removes manifest objects from this store that match the given filter.\n   *\n   * @param filter - Control which manifest objects to remove by specifying filter criteria which are \"AND\"ed together.\n   *        Wildcards in the qualifier criterion, if any, are interpreted as such.\n   */\n  public remove(filter: ManifestObjectFilter): void {\n    const objectsToRemove = this.find(filter);\n    this._remove(objectsToRemove);\n  }\n\n  /**\n   * Finds manifest objects that match the given filter.\n   *\n   * @param filter - Control which manifest objects to return.\n   *        Specified filter criteria are \"AND\"ed together. If no filter criteria are specified, all objects will be returned.\n   */\n  public find(filter: Omit<ManifestObjectFilter, 'qualifier'> & {qualifier?: Qualifier | Predicate<Qualifier>}): T[] {\n    const filterById = filter.id !== undefined;\n    const filterByType = filter.type !== undefined;\n    const filterByApp = filter.appSymbolicName !== undefined;\n\n    return Arrays\n      .intersect(\n        filterById ? Arrays.coerce(this._objectById.get(filter.id!)) : undefined,\n        filterByType ? Arrays.coerce(this._objectsByType.get(filter.type!)) : undefined,\n        filterByApp ? Arrays.coerce(this._objectsByApplication.get(filter.appSymbolicName!)) : undefined,\n        (filterById || filterByType || filterByApp) ? undefined : Array.from(this._objectById.values()),\n      )\n      .filter(object => {\n        if (filter.qualifier === undefined) {\n          return true;\n        }\n        if (typeof filter.qualifier === 'function') {\n          return filter.qualifier(object.qualifier || {});\n        }\n\n        return new QualifierMatcher(filter.qualifier).matches(object.qualifier);\n      });\n  }\n\n  /**\n   * Finds the manifest object of given id. If not found, by default, throws an error unless setting the `orElseNull` option.\n   *\n   * @param id - Identifies the manifest object.\n   */\n  public findById(id: string): T;\n  public findById(id: string, options: {orElse: null}): T | null;\n  public findById(id: string, options?: {orElse: null}): T | null {\n    const object = this._objectById.get(id);\n    if (!object && !options) {\n      throw Error(`[NullManifestObjectError] Manifest object '${id}' not found.`);\n    }\n    return object ?? null;\n  }\n\n  /**\n   * Emits when an object is added to or removed from this store.\n   */\n  public get change$(): Observable<void> {\n    return merge(this.add$, this.remove$).pipe(map(() => undefined as void));\n  }\n\n  /**\n   * Emits when an object is added to this store.\n   */\n  public get add$(): Observable<T> {\n    return this._add$;\n  }\n\n  /**\n   * Emits when object(s) are removed from this store.\n   */\n  public get remove$(): Observable<T[]> {\n    return this._remove$;\n  }\n\n  /**\n   * Removes the given objects from all internal maps.\n   */\n  private _remove(objects: T[]): void {\n    const deleted = new Set<T>();\n    objects.forEach(object => {\n      const objectId = object.metadata!.id;\n      if (this._objectById.delete(objectId)) {\n        Maps.removeListValue(this._objectsByType, object.type, candidate => candidate.metadata?.id === objectId);\n        Maps.removeListValue(this._objectsByApplication, object.metadata!.appSymbolicName, candidate => candidate.metadata?.id === objectId);\n        deleted.add(object);\n      }\n    });\n    deleted.size && this._remove$.next(objects);\n  }\n}\n\n/**\n * Represents an object in the manifest registry like a capability or an intention.\n *\n * @internal\n */\nexport interface ManifestObject {\n  type: string;\n  qualifier?: Qualifier;\n  metadata?: {\n    id: string;\n    appSymbolicName: string;\n  };\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Capability} from '../../platform.model';\n\n/**\n * Allows intercepting capabilities before their registration.\n *\n * Interceptors allow intercepting capabilities before they are registered, for example,\n * to perform validation checks, add metadata, or change properties.\n *\n * The following interceptor assigns a stable identifier to each microfrontend capability.\n *\n * ```ts\n * class MicrofrontendCapabilityInterceptor implements CapabilityInterceptor {\n *\n *   public async intercept(capability: Capability): Promise<Capability> {\n *     if (capability.type === 'microfrontend') {\n *       return {\n *         ...capability,\n *         metadata: {...capability.metadata, id: hash(capability)},\n *       };\n *     }\n *     return capability;\n *   }\n * }\n * ```\n *\n * #### Registering Interceptors\n * Interceptors are registered in the bean manager of the host application under the symbol `CapabilityInterceptor` as multi bean.\n * Multiple interceptors can be registered, forming a chain in which each interceptor is called one by one in registration order.\n *\n * ```ts\n * Beans.register(CapabilityInterceptor, {useClass: MicrofrontendCapabilityInterceptor, multi: true});\n * ```\n *\n * @category Intention API\n */\nexport abstract class CapabilityInterceptor {\n\n  /**\n   * Intercepts a capability before being registered.\n   *\n   * @param capability - the capability to be intercepted\n   */\n  public abstract intercept(capability: Capability): Promise<Capability>;\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Qualifier} from './platform.model';\n\n/**\n * Provides utilities for working with qualifiers.\n *\n * @internal\n */\nexport namespace Qualifiers {\n\n  const ALLOWED_VALUE_TYPES = new Set<string>().add('string').add('number').add('boolean');\n\n  /**\n   * Validates given qualifier.\n   *\n   * @return `null` if valid, or the `Error` otherwise.\n   */\n  export function validateQualifier(qualifier: Qualifier | null | undefined, options: {exactQualifier: boolean}): Error | null {\n    if (!qualifier || Object.keys(qualifier).length === 0) {\n      return null;\n    }\n    if (options.exactQualifier && Object.entries(qualifier).some(([key, value]) => key === '*' || value === '*')) {\n      return Error(`[IllegalQualifierError] Qualifier must be exact, i.e., not contain wildcards. [qualifier='${JSON.stringify(qualifier)}']`);\n    }\n    if (Object.values(qualifier).some(value => value === '' || value === null || value === undefined)) {\n      return Error(`[IllegalQualifierError] Qualifier must not contain empty, \\`null\\`, or \\`undefined\\` entries. [qualifier='${JSON.stringify(qualifier)}']`);\n    }\n    if (Object.values(qualifier).some(value => !ALLOWED_VALUE_TYPES.has(typeof value))) {\n      return Error(`[IllegalQualifierError] Qualifier contains entries with an illegal data type. Supported data types are [${[...ALLOWED_VALUE_TYPES].join(', ')}]. [qualifier='${JSON.stringify(qualifier)}']`);\n    }\n    return null;\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {ApplicationQualifiedForCapabilityRequest, Capability, Intention, ManifestObjectFilter, ParamDefinition} from '../../platform.model';\nimport {ManifestObjectStore} from './manifest-object-store';\nimport {concatWith, defer, EMPTY, filter, merge, Observable, of, Subscription} from 'rxjs';\nimport {distinctUntilChanged, expand, map, mergeMap, startWith, take} from 'rxjs/operators';\nimport {Intent, MessageHeaders, TopicMessage} from '../../messaging.model';\nimport {MessageClient} from '../../client/messaging/message-client';\nimport {ApplicationRegistry} from '../application-registry';\nimport {filterArray} from '@scion/toolkit/operators';\nimport {ManifestRegistry} from './manifest-registry';\nimport {QualifierMatcher} from '../../qualifier-matcher';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {ClientRegistry} from '../client-registry/client.registry';\nimport {CapabilityInterceptor} from './capability-interceptors';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {Qualifiers} from '../../qualifiers.util';\nimport {PlatformTopics} from '../../ɵmessaging.model';\n\n/**\n * @internal\n */\nexport class ɵManifestRegistry implements ManifestRegistry, PreDestroy {\n\n  private _capabilityStore: ManifestObjectStore<Capability>;\n  private _intentionStore: ManifestObjectStore<Intention>;\n  private _subscriptions = new Set<Subscription>();\n\n  public capabilityRegister$: Observable<Capability>;\n  public capabilityUnregister$: Observable<Capability[]>;\n\n  constructor() {\n    this._capabilityStore = new ManifestObjectStore<Capability>();\n    this._intentionStore = new ManifestObjectStore<Intention>();\n\n    this.capabilityRegister$ = this._capabilityStore.add$;\n    this.capabilityUnregister$ = this._capabilityStore.remove$;\n\n    this.installCapabilityRegisterRequestHandler();\n    this.installCapabilityUnregisterRequestHandler();\n\n    this.installIntentionRegisterRequestHandler();\n    this.installIntentionUnregisterRequestHandler();\n\n    this.installCapabilitiesLookupRequestHandler();\n    this.installIntentionsLookupRequestHandler();\n    this.installIsApplicationQualifiedRequestHandler();\n    this.installVersionLookupHandler();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public resolveCapabilitiesByIntent(intent: Intent, appSymbolicName: string): Capability[] {\n    const illegalQualifierError = Qualifiers.validateQualifier(intent.qualifier, {exactQualifier: true});\n    if (illegalQualifierError) {\n      throw illegalQualifierError;\n    }\n\n    const filter: ManifestObjectFilter = {type: intent.type, qualifier: intent.qualifier || {}};\n    return this._capabilityStore.find(filter)\n      .filter(capability => this.isApplicationQualifiedForCapability(appSymbolicName, capability));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public hasIntention(intent: Intent, appSymbolicName: string): boolean {\n    const illegalQualifierError = Qualifiers.validateQualifier(intent.qualifier, {exactQualifier: true});\n    if (illegalQualifierError) {\n      throw illegalQualifierError;\n    }\n\n    const filter: ManifestObjectFilter = {appSymbolicName, type: intent.type};\n    return (\n      Beans.get(ApplicationRegistry).isIntentionCheckDisabled(appSymbolicName) ||\n      this._intentionStore.find({...filter, qualifier: intentionQualifier => new QualifierMatcher(intentionQualifier).matches(intent.qualifier)}).length > 0 ||\n      this._capabilityStore.find({...filter, qualifier: intent.qualifier || {}}).length > 0  // An app has an implicit intention if it provides the capability itself\n    );\n  }\n\n  /**\n   * Tests if the specified micro app is qualified to interact with the given capability.\n   *\n   * A micro app is qualified if it meets either of the following criteria:\n   * - The capability is provided by the application itself.\n   * - The capability is provided by another application, but only if the capability is publicly visible (1),\n   *   and the micro app has declared an intention (2) to use the capability.\n   *\n   * (1) Unless 'scope check' is disabled for the specified micro app.\n   * (2) Unless 'intention check' is disabled for the specified micro app.\n   */\n  private isApplicationQualifiedForCapability(appSymbolicName: string, capability: Capability): boolean {\n    if (capability.metadata!.appSymbolicName === appSymbolicName) {\n      return true;\n    }\n    const isScopeCheckDisabled = Beans.get(ApplicationRegistry).isScopeCheckDisabled(appSymbolicName);\n    const isIntentionCheckDisabled = Beans.get(ApplicationRegistry).isIntentionCheckDisabled(appSymbolicName);\n    return (isScopeCheckDisabled || !capability.private) && (isIntentionCheckDisabled || this.hasIntentionForCapability(appSymbolicName, capability));\n  }\n\n  /**\n   * Tests whether the given app has declared a matching intention for the given capability.\n   */\n  private hasIntentionForCapability(appSymbolicName: string, capability: Capability): boolean {\n    return this._intentionStore.find({\n      appSymbolicName,\n      type: capability.type,\n      qualifier: intentionQualifier => new QualifierMatcher(intentionQualifier).matches(capability.qualifier),\n    }).length > 0;\n  }\n\n  public async registerCapability(capability: Capability, appSymbolicName: string): Promise<string> {\n    if (!capability) {\n      throw Error('[CapabilityRegisterError] Capability must not be null or undefined.');\n    }\n    if (!capability.type) {\n      throw Error('[CapabilityRegisterError] Missing capability property: type');\n    }\n    const illegalQualifierError = Qualifiers.validateQualifier(capability.qualifier, {exactQualifier: true});\n    if (illegalQualifierError) {\n      throw illegalQualifierError;\n    }\n\n    assertCapabilityParamDefinitions(capability.params);\n\n    // Let the host app intercept the capability to register.\n    const capabilityToRegister = await interceptCapability({\n      ...capability,\n      qualifier: capability.qualifier ?? {},\n      params: capability.params ?? [],\n      private: capability.private ?? true,\n      metadata: {\n        id: UUID.randomUUID(),\n        appSymbolicName: appSymbolicName,\n      },\n    });\n\n    // Register the capability.\n    this._capabilityStore.add(capabilityToRegister);\n    return capabilityToRegister.metadata!.id;\n  }\n\n  public unregisterCapabilities(appSymbolicName: string, filter: ManifestObjectFilter): void {\n    this._capabilityStore.remove({...filter, appSymbolicName});\n  }\n\n  public registerIntention(intention: Intention, appSymbolicName: string): string {\n    if (!intention) {\n      throw Error('[IntentionRegisterError] Intention must not be null or undefined.');\n    }\n    if (!intention.type) {\n      throw Error('[IntentionRegisterError] Missing intention property: type');\n    }\n    const illegalQualifierError = Qualifiers.validateQualifier(intention.qualifier, {exactQualifier: false});\n    if (illegalQualifierError) {\n      throw illegalQualifierError;\n    }\n\n    const intentionToRegister: Intention = {\n      ...intention,\n      metadata: {\n        id: UUID.randomUUID(),\n        appSymbolicName: appSymbolicName,\n      },\n    };\n\n    // Register the intention.\n    this._intentionStore.add(intentionToRegister);\n    return intentionToRegister.metadata!.id;\n  }\n\n  private unregisterIntention(appSymbolicName: string, filter: ManifestObjectFilter): void {\n    this._intentionStore.remove({...filter, appSymbolicName});\n  }\n\n  private installCapabilityRegisterRequestHandler(): void {\n    this._subscriptions.add(Beans.get(MessageClient).onMessage<Capability, string>(PlatformTopics.RegisterCapability, (request: TopicMessage<Capability>) => {\n      const capability = request.body!;\n      const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n      return this.registerCapability(capability, appSymbolicName);\n    }));\n  }\n\n  private installCapabilityUnregisterRequestHandler(): void {\n    this._subscriptions.add(Beans.get(MessageClient).onMessage<ManifestObjectFilter, void>(PlatformTopics.UnregisterCapabilities, (request: TopicMessage<ManifestObjectFilter>) => {\n      const capabilityFilter = request.body || {};\n      const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n      this.unregisterCapabilities(appSymbolicName, capabilityFilter);\n    }));\n  }\n\n  private installIntentionRegisterRequestHandler(): void {\n    this._subscriptions.add(Beans.get(MessageClient).onMessage<Intention, string>(PlatformTopics.RegisterIntention, (request: TopicMessage<Intention>) => {\n      const intention = request.body!;\n      const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n      assertIntentionRegisterApiEnabled(appSymbolicName);\n      return this.registerIntention(intention, appSymbolicName);\n    }));\n  }\n\n  private installIntentionUnregisterRequestHandler(): void {\n    this._subscriptions.add(Beans.get(MessageClient).onMessage<ManifestObjectFilter, void>(PlatformTopics.UnregisterIntentions, (request: TopicMessage<ManifestObjectFilter>) => {\n      const intentFilter = request.body || {};\n      const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n      assertIntentionRegisterApiEnabled(appSymbolicName);\n      this.unregisterIntention(appSymbolicName, intentFilter);\n    }));\n  }\n\n  private installCapabilitiesLookupRequestHandler(): void {\n    this._subscriptions.add(Beans.get(MessageClient).onMessage<ManifestObjectFilter, Capability[]>(PlatformTopics.LookupCapabilities, (request: TopicMessage<ManifestObjectFilter>) => {\n      const appSymbolicName = request.headers.get(MessageHeaders.AppSymbolicName);\n      const lookupFilter = request.body || {};\n\n      const illegalQualifierError = Qualifiers.validateQualifier(lookupFilter.qualifier, {exactQualifier: false});\n      if (illegalQualifierError) {\n        throw illegalQualifierError;\n      }\n\n      // The queried capabilities may change on both, capability or intention change, because the computation\n      // of visible and qualified capabilities depends on registered capabilities and manifested intentions.\n      const registryChange$ = merge(this._capabilityStore.change$, this._intentionStore.change$);\n      const finder$ = defer(() => of(this._capabilityStore.find(lookupFilter)));\n      return finder$\n        .pipe(\n          expand(() => registryChange$.pipe(take(1), mergeMap(() => finder$))),\n          filterArray(capability => this.isApplicationQualifiedForCapability(appSymbolicName, capability)),\n          distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),\n        );\n    }));\n  }\n\n  private installIntentionsLookupRequestHandler(): void {\n    this._subscriptions.add(Beans.get(MessageClient).onMessage<ManifestObjectFilter, Intention[]>(PlatformTopics.LookupIntentions, (request: TopicMessage<ManifestObjectFilter>) => {\n      const lookupFilter = request.body || {};\n\n      const illegalQualifierError = Qualifiers.validateQualifier(lookupFilter.qualifier, {exactQualifier: false});\n      if (illegalQualifierError) {\n        throw illegalQualifierError;\n      }\n\n      const finder$ = defer(() => of(this._intentionStore.find(lookupFilter)));\n      return finder$\n        .pipe(\n          expand(() => this._intentionStore.change$.pipe(take(1), mergeMap(() => finder$))),\n          distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),\n        );\n    }));\n  }\n\n  private installIsApplicationQualifiedRequestHandler(): void {\n    this._subscriptions.add(Beans.get(MessageClient).onMessage<ApplicationQualifiedForCapabilityRequest, boolean>(PlatformTopics.IsApplicationQualifiedForCapability, (request: TopicMessage<ApplicationQualifiedForCapabilityRequest>) => {\n      return merge(this._intentionStore.change$, this._capabilityStore.change$)\n        .pipe(\n          startWith<void>(undefined),\n          map(() => {\n            const application = Beans.get(ApplicationRegistry).getApplication(request.body!.appSymbolicName);\n            const capability = this._capabilityStore.findById(request.body!.capabilityId);\n            return this.isApplicationQualifiedForCapability(application.symbolicName, capability);\n          }),\n          distinctUntilChanged(),\n        );\n    }));\n  }\n\n  private installVersionLookupHandler(): void {\n    this._subscriptions.add(Beans.get(MessageClient).onMessage<void, string>(PlatformTopics.platformVersion(':appSymbolicName'), message => {\n      const appSymbolicName = message.params!.get('appSymbolicName')!;\n      const clientRegister$ = Beans.get(ClientRegistry).register$.pipe(filter(client => client.application.symbolicName === appSymbolicName));\n      const platformVersion$ = defer(() => {\n        const clients = Beans.get(ClientRegistry).getByApplication(appSymbolicName);\n        return clients.length ? of(clients[0].version) : EMPTY;\n      });\n      return platformVersion$\n        .pipe(\n          concatWith(clientRegister$.pipe(mergeMap(() => platformVersion$))),\n          take(1),\n        );\n    }));\n  }\n\n  public preDestroy(): void {\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n}\n\n/**\n * Checks if the 'Intention Registration API' is enabled for the given app. If not, an error is thrown.\n */\nfunction assertIntentionRegisterApiEnabled(appSymbolicName: string): void {\n  if (Beans.get(ApplicationRegistry).isIntentionRegisterApiDisabled(appSymbolicName)) {\n    throw Error(`[IntentionRegisterError] The 'Intention Registration API' is disabled for the application '${appSymbolicName}'. Contact the platform administrator to enable this API.`);\n  }\n}\n\n/**\n * Asserts given parameter definitions to be valid.\n */\nfunction assertCapabilityParamDefinitions(params: ParamDefinition[] | undefined): void {\n  if (!params?.length) {\n    return;\n  }\n\n  const validSubstitutes = params.filter(param => !param.deprecated).map(param => param.name);\n\n  params.forEach(param => {\n    if (param.required === undefined) {\n      throw Error(`[CapabilityParamError] Parameter '${param.name}' must be explicitly defined as required or optional.`);\n    }\n\n    if (param.deprecated !== undefined) {\n      // Ensure deprecated param to be optional\n      if (param.required) {\n        throw Error(`[CapabilityParamError] Deprecated parameters must be optional, not required. Alternatively, deprecated parameters can define a mapping to a required parameter via the 'useInstead' property. [param='${param.name}']`);\n      }\n\n      // Ensure existing substitute\n      if (typeof param.deprecated === 'object' && param.deprecated.useInstead && !validSubstitutes.includes(param.deprecated.useInstead)) {\n        throw Error(`[CapabilityParamError] The deprecated parameter '${param.name}' defines an invalid substitute '${param.deprecated.useInstead}'. Valid substitutes are: [${validSubstitutes}]`);\n      }\n    }\n    return param;\n  });\n}\n\n/**\n * Intercepts capability before its registration.\n */\nasync function interceptCapability(capability: Capability): Promise<Capability> {\n  const interceptors = Beans.all(CapabilityInterceptor);\n  for (const interceptor of interceptors) {\n    capability = await interceptor.intercept(capability);\n  }\n  return capability;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport {MessageClient} from '../../client/messaging/message-client';\nimport {MessageHeaders} from '../../messaging.model';\nimport {runSafe} from '../../safe-runner';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {ClientRegistry} from '../client-registry/client.registry';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {Client} from '../client-registry/client';\n\n/**\n * Tracks the focus across microfrontends and answers {@link PlatformTopics.IsFocusWithin} and {@link PlatformTopics.HasFocus} requests.\n *\n * @see FocusInEventDispatcher\n * @see FocusMonitor\n * @internal\n */\nexport class FocusTracker implements PreDestroy {\n\n  private _focusOwner$ = new BehaviorSubject<Client | undefined>(undefined);\n  private _subscriptions = new Set<Subscription>();\n\n  constructor() {\n    this._subscriptions.add(this.monitorFocusInEvents());\n    this._subscriptions.add(this.replyToIsFocusWithinRequests());\n    this._subscriptions.add(this.replyToHasFocusRequests());\n  }\n\n  /**\n   * Monitors when a client gains the focus.\n   */\n  private monitorFocusInEvents(): Subscription {\n    return Beans.get(MessageClient).observe$<void>(PlatformTopics.FocusIn)\n      .pipe(\n        map(event => event.headers.get(MessageHeaders.ClientId)),\n        distinctUntilChanged(),\n      )\n      .subscribe(clientId => runSafe(() => {\n        this._focusOwner$.next(Beans.get(ClientRegistry).getByClientId(clientId) || undefined);\n      }));\n  }\n\n  /**\n   * Replies to 'focus-within' requests.\n   */\n  private replyToIsFocusWithinRequests(): Subscription {\n    return Beans.get(MessageClient).onMessage<void, boolean>(PlatformTopics.IsFocusWithin, request => {\n      const clientId = request.headers.get(MessageHeaders.ClientId);\n      return this._focusOwner$\n        .pipe(\n          map(focusOwner => this.isFocusWithin(clientId, focusOwner)),\n          distinctUntilChanged(),\n        );\n    });\n  }\n\n  /**\n   * Replies to 'focus' requests.\n   */\n  private replyToHasFocusRequests(): Subscription {\n    return Beans.get(MessageClient).onMessage<void, boolean>(PlatformTopics.HasFocus, request => {\n      const clientId = request.headers.get(MessageHeaders.ClientId);\n      return this._focusOwner$\n        .pipe(\n          map(focusOwner => focusOwner?.id === clientId),\n          distinctUntilChanged(),\n        );\n    });\n  }\n\n  /**\n   * Tests whether the given client has received focus or contains embedded web content that has received focus.\n   */\n  private isFocusWithin(clientId: string, focusOwner: Client | undefined): boolean {\n    for (let client = focusOwner; client !== undefined; client = this.getParentClient(client)) {\n      if (client.id === clientId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private getParentClient(client: Client): Client | undefined {\n    if (client.window.parent === client.window) {\n      return undefined; // window has no parent as it is the top-level window\n    }\n    return Beans.get(ClientRegistry).getByWindow(client.window.parent);\n  }\n\n  public preDestroy(): void {\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {MicrofrontendPlatformConfig} from './microfrontend-platform-config';\nimport {HttpClient} from './http-client';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {firstValueFrom, from, identity, Observable, throwError, timeout} from 'rxjs';\nimport {Manifest} from '../platform.model';\nimport {ApplicationConfig} from './application-config';\n\n/**\n * Fetches the manifest of an application.\n *\n * @internal\n */\nexport class ManifestFetcher {\n\n  /**\n   * Fetches the manifest for given application.\n   *\n   * @return Promise that resolves to the manifest after successful retrieval, or that rejects if the manifest could not be fetched\n   *         or the maximum retrieval time has elapsed.\n   *         See https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful.\n   */\n  public async fetch(appConfig: ApplicationConfig): Promise<Manifest> {\n    if (!appConfig.symbolicName) {\n      throw Error('[ManifestFetchError] Invalid application config. Missing required property \\'symbolicName\\'.');\n    }\n    if (!appConfig.manifestUrl) {\n      throw Error('[ManifestFetchError] Invalid application config. Missing required property \\'manifestUrl\\'.');\n    }\n\n    const fetchManifest$ = from(Beans.get(HttpClient).fetch(appConfig.manifestUrl));\n    const manifestFetchTimeout = appConfig.manifestLoadTimeout ?? Beans.get(MicrofrontendPlatformConfig).manifestLoadTimeout;\n    const onManifestFetchTimeout = (): Observable<never> => throwError(() => Error(`[ManifestFetchError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Timeout of ${manifestFetchTimeout}ms elapsed.`));\n    const manifestFetchResponse = await firstValueFrom(fetchManifest$.pipe(manifestFetchTimeout ? timeout({first: manifestFetchTimeout, with: onManifestFetchTimeout}) : identity));\n\n    if (!manifestFetchResponse.ok) {\n      throw Error(`[ManifestFetchError] Failed to fetch manifest for application '${appConfig.symbolicName}'. Maybe the application is currently unavailable. [httpStatusCode=${manifestFetchResponse.status}, httpStatusText=${manifestFetchResponse.statusText}]`);\n    }\n\n    return await manifestFetchResponse.json();\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Client} from '../client-registry/client';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {ClientRegistry} from '../client-registry/client.registry';\nimport {takeUntil} from 'rxjs/operators';\nimport {runSafe} from '../../safe-runner';\nimport {Observable, Subject} from 'rxjs';\nimport {Arrays, Maps} from '@scion/toolkit/util';\n\n/**\n * Central point for managing message subscriptions.\n *\n * @internal\n */\nexport class MessageSubscriptionRegistry<T extends MessageSubscription = MessageSubscription> implements PreDestroy {\n\n  private readonly _destroy$ = new Subject<void>();\n  private readonly _subscriptions = new Map<string, T>();\n  private readonly _subscriptionsByApp = new Map<string, Set<T>>();\n  private readonly _subscriptionsByClient = new Map<string, Set<T>>();\n\n  private readonly _register$ = new Subject<T>();\n  private readonly _unregister$ = new Subject<T[]>();\n\n  constructor() {\n    Beans.get(ClientRegistry).unregister$\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((client: Client) => runSafe(() => {\n        this.unregister({clientId: client.id});\n      }));\n  }\n\n  /**\n   * Registers given subscription.\n   */\n  public register(subscription: T): void {\n    this._subscriptions.set(subscription.subscriberId, subscription);\n    Maps.addSetValue(this._subscriptionsByApp, subscription.client.application.symbolicName, subscription);\n    Maps.addSetValue(this._subscriptionsByClient, subscription.client.id, subscription);\n    this.onRegister?.(subscription);\n    this._register$.next(subscription);\n  }\n\n  /**\n   * Unregisters matching subscriptions.\n   *\n   * @param filter - Control which subscriptions to remove by specifying filter criteria which are \"AND\"ed together.\n   */\n  public unregister(filter: {subscriberId?: string; clientId?: string}): void {\n    const subscriptions = this.subscriptions(filter);\n    subscriptions.forEach(subscription => {\n      this._subscriptions.delete(subscription.subscriberId);\n      Maps.removeSetValue(this._subscriptionsByApp, subscription.client.application.symbolicName, subscription);\n      Maps.removeSetValue(this._subscriptionsByClient, subscription.client.id, subscription);\n      this.onUnregister?.(subscription);\n      subscription.notifyUnsubscribe();\n    });\n    this._unregister$.next(subscriptions);\n  }\n\n  /**\n   * Returns subscriptions matching the passed filter.\n   *\n   * @param filter - Control which subscriptions to return by specifying filter criteria which are \"AND\"ed together.\n   *                 If not specified, returns all subscriptions.\n   */\n  public subscriptions(filter?: {subscriberId?: string; clientId?: string; appSymbolicName?: string}): T[] {\n    const filterById = filter?.subscriberId;\n    const filterByClient = filter?.clientId;\n    const filterByApp = filter?.appSymbolicName;\n\n    return Arrays.intersect(\n      filterById ? this.subscriptionById(filterById) : undefined,\n      filterByClient ? this.subscriptionsByClient(filterByClient) : undefined,\n      filterByApp ? this.subscriptionsByApp(filterByApp) : undefined,\n      (filterById || filterByApp || filterByClient) ? undefined : Array.from(this._subscriptions.values()),\n    );\n  }\n\n  /**\n   * Returns the subscription of given subscriber.\n   */\n  private subscriptionById(subscriberId: string): [T] | [] {\n    const subscription = this._subscriptions.get(subscriberId);\n    return subscription ? [subscription] : [];\n  }\n\n  /**\n   * Returns the subscriptions of given client.\n   */\n  private subscriptionsByClient(clientId: string): T[] {\n    const subscriptions = this._subscriptionsByClient.get(clientId);\n    return subscriptions ? Array.from(subscriptions) : [];\n  }\n\n  /**\n   * Returns the subscriptions of given application.\n   */\n  private subscriptionsByApp(appSymbolicName: string): T[] {\n    const subscriptions = this._subscriptionsByApp.get(appSymbolicName);\n    return subscriptions ? Array.from(subscriptions) : [];\n  }\n\n  /**\n   * Emits when registered a subscription via {@link MessageSubscriptionRegistry#register}.\n   */\n  public get register$(): Observable<T> {\n    return this._register$;\n  }\n\n  /**\n   * Emits when unregistered a subscription via {@link MessageSubscriptionRegistry#unregister}.\n   */\n  public get unregister$(): Observable<T[]> {\n    return this._unregister$;\n  }\n\n  /**\n   * Method invoked when registered a subscription, but before the change was emitted.\n   */\n  protected onRegister?(subscription: T): void;\n\n  /**\n   * Method invoked when unregistered a subscription, but before the change was emitted.\n   */\n  protected onUnregister?(subscription: T): void;\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Represents a subscription for a given subscriber.\n *\n * @internal\n */\nexport class MessageSubscription {\n  /**\n   * Promise that resolves when the subscriber unsubscribes.\n   */\n  public readonly whenUnsubscribe = new Promise<void>(resolve => this.notifyUnsubscribe = resolve);\n\n  /**\n   * Notify when the subscriber unsubscribes.\n   */\n  public notifyUnsubscribe!: () => void;\n\n  constructor(public readonly subscriberId: string, public readonly client: Client) {\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {TopicMatcher} from '../../topic-matcher.util';\nimport {Client} from '../client-registry/client';\nimport {MessageSubscription, MessageSubscriptionRegistry} from './message-subscription.registry';\nimport {filter, Observable, Subject, throwError} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {Arrays, Maps} from '@scion/toolkit/util';\nimport {Topics} from '../../topics.util';\nimport {filterArray} from '@scion/toolkit/operators';\n\nconst ASTERISK = ':ɵANY';\n\n/**\n * Central point for managing topic subscriptions.\n *\n * @internal\n */\nexport class TopicSubscriptionRegistry extends MessageSubscriptionRegistry<TopicSubscription> {\n\n  private readonly _subscriptionsByTopic = new Map<string, Set<TopicSubscription>>();\n\n  protected override onRegister(subscription: TopicSubscription): void {\n    const topic = Topics.replaceWildcardSegments(subscription.topic, ASTERISK);\n    Maps.addSetValue(this._subscriptionsByTopic, topic, subscription);\n  }\n\n  protected override onUnregister(subscription: TopicSubscription): void {\n    const topic = Topics.replaceWildcardSegments(subscription.topic, ASTERISK);\n    Maps.removeSetValue(this._subscriptionsByTopic, topic, subscription);\n  }\n\n  public override subscriptions(filter?: {subscriberId?: string; clientId?: string; appSymbolicName?: string; topic?: string}): TopicSubscription[] {\n    // Note that we need to identify matching subscriptions very quickly, otherwise the broker's throughput would decrease massively.\n    // Therefore, we must never iterate over all subscriptions, but resolve subscriptions by index.\n    const filterByTopic = filter?.topic;\n    const filterById = filter?.subscriberId;\n    const filterByClient = filter?.clientId;\n    const filterByApp = filter?.appSymbolicName;\n\n    return Arrays.intersect(\n      filterByTopic ? this.subscriptionsByTopic(filterByTopic) : undefined,\n      (filterById || filterByApp || filterByClient) ? super.subscriptions(filter) : undefined,\n      (filterById || filterByApp || filterByClient || filterByTopic) ? undefined : super.subscriptions(),\n    );\n  }\n\n  /**\n   * Returns the subscription of given topic.\n   */\n  private subscriptionsByTopic(topic: string): TopicSubscription[] {\n    const subscriptions = new Array<TopicSubscription>();\n    Topics.computeWildcardSegmentPermutations(topic, ASTERISK).forEach(permutation => {\n      subscriptions.push(...this._subscriptionsByTopic.get(permutation) || []);\n    });\n    return subscriptions;\n  }\n\n  /**\n   * Allows observing the number of subscriptions on a topic. It is not allowed to use wildcards in the topic to observe.\n   *\n   * @param  topic - Specifies the topic to observe.\n   * @return An Observable that, when subscribed, emits the current number of subscribers on it. It never completes and\n   *         emits continuously when the number of subscribers changes.\n   */\n  public subscriptionCount$(topic: string): Observable<number> {\n    const illegalTopicError = Topics.validateTopic(topic, {exactTopic: true});\n    if (illegalTopicError) {\n      return throwError(() => illegalTopicError);\n    }\n\n    return new Observable(observer => {\n      const unsubscribe$ = new Subject<void>();\n\n      // Emit current subscription count.\n      let count = this.subscriptions({topic}).length;\n      observer.next(count);\n\n      // Increment count when matching subscriptions are added.\n      this.register$\n        .pipe(\n          filter(subscription => subscription.matches(topic)),\n          takeUntil(unsubscribe$),\n        )\n        .subscribe(() => {\n          count++;\n          observer.next(count);\n        });\n\n      // Decrement count when matching subscriptions are removed.\n      this.unregister$\n        .pipe(\n          filterArray(subscription => subscription.matches(topic)),\n          filter(subscriptions => subscriptions.length > 0),\n          takeUntil(unsubscribe$),\n        )\n        .subscribe(subscriptions => {\n          count -= subscriptions.length;\n          observer.next(count);\n        });\n\n      return (): void => unsubscribe$.next();\n    });\n  }\n}\n\n/**\n * Represents a subscription on a topic. The topic may contain wildcard segments.\n *\n * @internal\n */\nexport class TopicSubscription extends MessageSubscription {\n\n  constructor(public readonly topic: string, subscriberId: string, client: Client) {\n    super(subscriberId, client);\n  }\n\n  /**\n   * Tests whether the given topic matches this subscription.\n   */\n  public matches(topic: string): boolean {\n    return topic === this.topic || new TopicMatcher(this.topic).match(topic).matches;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {IntentMessage, TopicMessage} from '../../messaging.model';\n\n/**\n * Allows intercepting messages before their publication.\n *\n * An interceptor can reject or modify messages. Multiple interceptors can be registered, forming a chain in which each interceptor\n * is called one by one in registration order.\n *\n * For each message, the platform invokes the intercept method of the first registered interceptor, passing the message and the next\n * handler as arguments. By calling the next handler in the intercept method, message dispatching is continued. If there is no more\n * interceptor in the chain, the message is transported to the receivers, if any. But, if throwing an error in the intercept method,\n * message dispatching is aborted, and the error transported back to the sender.\n *\n * #### Registering Interceptors\n * You register interceptors with the bean manager when the host application starts. Interceptors can be registered only in the host\n * application. They are invoked in registration order.\n *\n * ```ts\n * Beans.register(MessageInterceptor, {useClass: MessageLoggerInterceptor, multi: true});\n * ```\n *\n * #### Filtering Messages for Interception\n * The platform passes all messages to the interceptors, including platform messages vital for its operation.\n * You can use the TopicMatcher to filter messages, allowing you to test whether a topic matches a pattern. The pattern must be a topic,\n * not a regular expression; thus, it must consist of one or more segments, each separated by a forward slash. The pattern can contain\n * wildcard segments. Wildcard segments start with a colon (:), acting act as a placeholder for any segment value.\n *\n * ```ts\n * class ProductValidatorInterceptor implements MessageInterceptor {\n *\n *   private topicMatcher = new TopicMatcher('product/:id');\n *\n *   public intercept(message: TopicMessage, next: Handler<TopicMessage>): Promise<void> {\n *     // Pass messages sent to other topics.\n *     if (!this.topicMatcher.match(message.topic).matches) {\n *       return next.handle(message);\n *     }\n *\n *     // Validate the payload of the message.\n *     if (isValid(message.body)) {\n *       return next.handle(message);\n *     }\n *\n *     throw Error('Message failed schema validation');\n *   }\n * }\n * ```\n *\n * @category Messaging\n */\nexport abstract class MessageInterceptor implements Interceptor<TopicMessage, Handler<TopicMessage>> {\n\n  /**\n   * Intercepts a message before being published to its topic.\n   *\n   * Decide if to continue publishing by passing the message to the next handler, or to reject publishing by throwing an error,\n   * or to swallow the message by not calling the next handler at all. If rejecting publishing, the error is transported to the\n   * message publisher.\n   *\n   * Important: When passing the message to the next handler, either return its Promise or await it.\n   * Otherwise, errors of subsequent interceptors would not be reported to the sender.\n   *\n   * @param  message - the message to be published to its topic\n   * @param  next - the next handler in the chain; invoke its {@link Handler.handle} method to continue publishing.\n   * @throws throw an error to reject publishing; the error is transported to the message publisher.\n   */\n  public abstract intercept(message: TopicMessage, next: Handler<TopicMessage>): Promise<void>;\n}\n\n/**\n * Allows intercepting intents before their publication.\n *\n * An interceptor can reject or modify intents. Multiple interceptors can be registered, forming a chain in which each interceptor\n * is called one by one in registration order.\n *\n * For each intent, the platform invokes the intercept method of the first registered interceptor, passing the intent and the next\n * handler as arguments. By calling the next handler in the intercept method, intent dispatching is continued. If there is no more\n * interceptor in the chain, the intent is transported to the receivers, if any. But, if throwing an error in the intercept method,\n * intent dispatching is aborted, and the error transported back to the sender.\n *\n * #### Registering Interceptors\n * You register interceptors with the bean manager when the host application starts. Interceptors can be registered only in the host\n * application. They are invoked in registration order.\n *\n * ```ts\n * Beans.register(IntentInterceptor, {useClass: IntentLoggerInterceptor, multi: true});\n * ```\n *\n * #### Filtering intents for Interception\n * The platform passes all intents to the interceptors. The interceptor must filter intents of interest.\n *\n * @category Messaging\n * @category Intention API\n */\nexport abstract class IntentInterceptor implements Interceptor<IntentMessage, Handler<IntentMessage>> {\n\n  /**\n   * Intercepts an intent before being published.\n   *\n   * Decide if to continue publishing by passing the intent to the next handler, or to reject publishing by throwing an error,\n   * or to swallow the intent by not calling the next handler at all. If rejecting publishing, the error is transported to\n   * the intent issuer.\n   *\n   * Important: When passing the message to the next handler, either return its Promise or await it.\n   * Otherwise, errors of subsequent interceptors would not be reported to the sender.\n   *\n   * @param  intent - the intent to be published\n   * @param  next - the next handler in the chain; invoke its {@link Handler.handle} method to continue publishing.\n   * @throws throw an error to reject publishing; the error is transported to the intent issuer.\n   */\n  public abstract intercept(intent: IntentMessage, next: Handler<IntentMessage>): Promise<void>;\n}\n\n/**\n * Chain to intercept messages before they are published. The chain is implemented according to the 'Chain of Responsibility' design pattern.\n *\n * A message travels along the chain of interceptors. If all interceptors let the message pass, it is published.\n *\n * @internal\n */\nexport interface PublishInterceptorChain<T> {\n\n  /**\n   * Passes a message along the chain of interceptors, if any, and publishes it.\n   *\n   * Each interceptor in the chain can reject publishing by throwing an error, ignore the message by not calling the next handler,\n   * or continue the chain by calling the next handler.\n   *\n   * @throws throws an error if an interceptor rejected publishing.\n   */\n  interceptAndPublish(message: T): Promise<void>;\n}\n\n/**\n * Assembles the given interceptors to a chain of handlers which are called one after another. The publisher is added as terminal handler.\n *\n * @param interceptors - interceptors to be assembled to a chain\n * @param publisher - terminal handler to publish messages\n * @internal\n */\nexport function chainInterceptors<T>(interceptors: Interceptor<T, Handler<T>>[], publisher: (message: T) => Promise<void>): PublishInterceptorChain<T> {\n  const terminalHandler = new class extends Handler<T> {\n    public handle(message: T): Promise<void> {\n      return publisher(message);\n    }\n  };\n\n  const handlerChain = interceptors.reduceRight((next, interceptor) => new class extends Handler<T> {\n    public handle(element: T): Promise<void> {\n      return interceptor.intercept(element, next);\n    }\n  }, terminalHandler);\n\n  return new class implements PublishInterceptorChain<T> {\n    public interceptAndPublish(element: T): Promise<void> {\n      return handlerChain.handle(element);\n    }\n  };\n}\n\n/**\n * Allows the interception of messages or intents before their publication.\n *\n * @see {@link MessageInterceptor}\n * @see {@link IntentInterceptor}\n * @category Messaging\n */\nexport interface Interceptor<T, H extends Handler<T>> {\n\n  intercept(message: T, next: H): Promise<void>;\n}\n\n/**\n * Represents a handler in the chain of interceptors.\n *\n * @category Messaging\n */\nexport abstract class Handler<T> {\n  /**\n   * Invoke to continue the chain with the given message.\n   */\n  public abstract handle(message: T): Promise<void>;\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n// See semantic versioning specification: https://semver.org/#semantic-versioning-specification-semver\nconst SEMVER_REGEX = /(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(-(?<prerelease>.+))?/;\n\n/*\n * Allows working with semantic versions (semver).\n *\n * ### Why not using `semver` NPM package (as of 2022-04)\n * We no longer depend on the NPM package `semver` as not yet been published as an ECMAScript module (ESM).\n * It is recommended to avoid dependencies on CommonJS modules as bundlers and minifiers may not be able to\n * optimize the application code, resulting in larger bundle size.\n *\n * For example, the Angular compiler would generate the following warning when using `semver`:\n * `Warning: ... depends on 'semver'. CommonJS or AMD dependencies can cause optimization bailouts.`\n *\n * ---\n *\n * The following rules for comparing two semantic versions are copied directly from the semantic versioning specification,\n * which can be found here: https://semver.org/#semantic-versioning-specification-semver\n *\n * ```\n * Precedence refers to how versions are compared to each other when ordered.\n *\n * 1. Precedence MUST be calculated by separating the version into major, minor, patch and pre-release identifiers\n *    in that order (Build metadata does not figure into precedence).\n *\n * 2. Precedence is determined by the first difference when comparing each of these identifiers from left to right as follows:\n *    Major, minor, and patch versions are always compared numerically.\n *    Example: 1.0.0 < 2.0.0 < 2.1.0 < 2.1.1.\n *\n * 3. When major, minor, and patch are equal, a pre-release version has lower precedence than a normal version:\n *    Example: 1.0.0-alpha < 1.0.0.\n *\n * 4. Precedence for two pre-release versions with the same major, minor, and patch version MUST be determined by comparing\n *    each dot separated identifier from left to right until a difference is found as follows:\n *\n *    1. Identifiers consisting of only digits are compared numerically.\n *    2. Identifiers with letters or hyphens are compared lexically in ASCII sort order.\n *    3. Numeric identifiers always have lower precedence than non-numeric identifiers.\n *    4. A larger set of pre-release fields has a higher precedence than a smaller set, if all of the preceding identifiers are equal.\n *\n *   Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.\n * ```\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nexport class semver {\n\n  private constructor() {\n  }\n\n  /**\n   * Return the major version number.\n   */\n  public static major(version: string | undefined | null): number {\n    return parseVersion(version ?? '0.0.0').major;\n  }\n\n  /**\n   * Tests if `version1` is lower than `version2`.\n   *\n   * @return `true` if `version1` is lower than `version2`, or `false` otherwise.\n   *         The values `null` and `undefined` have lower precedence than a normal version.\n   * @throws throws if passed version is not a valid semantic version.\n   */\n  public static lt(version1: string | undefined | null, version2: string | undefined | null): boolean {\n    return compare(version1, version2) < 0;\n  }\n}\n\n/**\n * Compares given two versions.\n *\n * @return -1: if `v1` is lower than `v2`\n *          0: if both version are identical\n *         +1: if `v1` is greater than `v2`\n */\nfunction compare(v1: string | undefined | null, v2: string | undefined | null): number {\n  if (!v1 && v2) {\n    return -1;\n  }\n  if (!v1 && !v2) {\n    return 0;\n  }\n  if (v1 && !v2) {\n    return +1;\n  }\n\n  const semVer1 = parseVersion(v1!);\n  const semVer2 = parseVersion(v2!);\n\n  // Compare major version\n  const majorCompare = Math.sign(semVer1.major - semVer2.major);\n  if (majorCompare !== 0) {\n    return majorCompare;\n  }\n\n  // Compare minor version\n  const minorCompare = Math.sign(semVer1.minor - semVer2.minor);\n  if (minorCompare !== 0) {\n    return minorCompare;\n  }\n\n  // Compare patch version\n  const patchCompare = Math.sign(semVer1.patch - semVer2.patch);\n  if (patchCompare !== 0) {\n    return patchCompare;\n  }\n\n  // Compare pre-release portion.\n  return comparePreRelease(semVer1, semVer2);\n}\n\n/**\n * Compares the prerelease portion of two versions.\n *\n * @return -1: if `version1` is lower than `version2`\n *          0: if both version are identical\n *         +1: if `version1` is greater than `version2`\n */\nfunction comparePreRelease(v1: SemVer, v2: SemVer): number {\n  if (v1.preRelease && !v2.preRelease) {\n    return -1;\n  }\n  if (!v1.preRelease && !v2.preRelease) {\n    return 0;\n  }\n  if (!v1.preRelease && v2.preRelease) {\n    return 1;\n  }\n\n  for (let i = 0; i < Math.max(v1.preRelease!.length, v2.preRelease!.length); i++) {\n    const identifier1 = v1.preRelease![i];\n    const identifier2 = v2.preRelease![i];\n\n    if (identifier1 === undefined) {\n      return -1;\n    }\n    if (identifier2 === undefined) {\n      return +1;\n    }\n\n    if (typeof identifier1 === 'number' && typeof identifier2 === 'string') {\n      return -1;\n    }\n    if (typeof identifier1 === 'string' && typeof identifier2 === 'number') {\n      return +1;\n    }\n\n    if (identifier1 < identifier2) {\n      return -1;\n    }\n    if (identifier1 > identifier2) {\n      return +1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Parses given version into a {@link SemVer} instance.\n *\n * @throws throws if passed version is not a valid semantic version.\n */\nfunction parseVersion(version: string): SemVer {\n  const match = version.match(SEMVER_REGEX);\n  if (!match) {\n    throw Error(`[SemVerError] Version '${version}' is not a valid semantic version (semver).`);\n  }\n\n  return {\n    major: +match.groups!['major']!,\n    minor: +match.groups!['minor']!,\n    patch: +match.groups!['patch']!,\n    preRelease: match.groups!['prerelease']?.split('.').map(identifier => {\n      const numericIdentifier = +identifier;\n      return Number.isNaN(numericIdentifier) ? identifier : numericIdentifier;\n    }),\n  };\n}\n\n/**\n * Represents a parsed semantic version.\n */\ninterface SemVer {\n  major: number;\n  minor: number;\n  patch: number;\n  preRelease?: Array<string | number>;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {ɵApplication} from '../../ɵplatform.model';\n\n/**\n * Represents a client which is connected to the message broker.\n *\n * @internal\n */\nexport interface Client {\n\n  /**\n   * Unique identity of this client.\n   */\n  readonly id: string;\n\n  /**\n   * The window this client is loaded into.\n   */\n  readonly window: Window;\n\n  /**\n   * The origin of this client; is one of {@link ɵApplication.allowedMessageOrigins}.\n   */\n  readonly origin: string;\n\n  /**\n   * The application this client belongs to.\n   */\n  readonly application: ɵApplication;\n\n  /**\n   * The version of the @scion/microfrontend-platform installed on the client.\n   */\n  readonly version: string;\n\n  /**\n   * Indicates whether this client is stale and no more messages can be transported to this client.\n   */\n  readonly stale: boolean;\n\n  /**\n   * Releases resources allocated by this client.\n   */\n  dispose(): void;\n}\n\n/**\n * Specifies the interval (in milliseconds) at which the host pings connected clients.\n *\n * By default, if not set, a ping interval of 60s is used.\n *\n * NOTE: Use pure inline comment to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nexport const CLIENT_PING_INTERVAL = /*@__PURE__*/Symbol('CLIENT_PING_INTERVAL');\n\n/**\n * Specifies the ping timeout (in milliseconds) for unregistering a client.\n *\n * By default, if not set, clients are unregistered if not answering the ping within 10 seconds.\n *\n * NOTE: Use pure inline comment to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nexport const CLIENT_PING_TIMEOUT = /*@__PURE__*/Symbol('CLIENT_PING_TIMEOUT');\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {interval, retry, Subscription, switchMap, timeout} from 'rxjs';\nimport {APP_IDENTITY} from '../../platform.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {MessageClient} from '../../client/messaging/message-client';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {Logger, LoggingContext} from '../../logger';\nimport {ClientRegistry} from './client.registry';\nimport {Client, CLIENT_PING_INTERVAL, CLIENT_PING_TIMEOUT} from './client';\nimport {ɵApplication} from '../../ɵplatform.model';\n\n/**\n * @internal\n */\nexport class ɵClient implements Client {\n\n  public readonly version: string;\n  private _livenessDetector: Subscription | undefined;\n\n  constructor(public readonly id: string,\n              public readonly window: Window,\n              public readonly origin: string,\n              public readonly application: ɵApplication,\n              version: string) {\n    this.version = version ?? '0.0.0';\n    this.installLivenessDetector();\n  }\n\n  /**\n   * Starts performing liveness tests to detect when this client is no longer connected to the host.\n   *\n   * Liveness is detected by sending ping requests at regular intervals.\n   *\n   * A client may fail to disconnect from the broker for a number of reasons:\n   * - The client was disposed without notice, i.e., without receiving the browser's \"unload\" event.\n   * - The browser discarded the \"DISCONNECT\" message because the client window became stale.\n   *   Typically, the browser discards messages for windows that are already closed or if another page\n   *   has been loaded into the window, both indicating a high load on the client during unloading.\n   */\n  private installLivenessDetector(): void {\n    // The client of the host app needs not to be checked for liveness as it is part of the host.\n    if (this.application.symbolicName === Beans.get(APP_IDENTITY)) {\n      return;\n    }\n\n    // Observable to perform the ping. If the client does not respond, we ping the client again to account for the rare situation where\n    // the computer goes into standby immediately after sending the ping. Upon resumption, the timeout would expire immediately without\n    // the client being able to send the response.\n    const performPing$ = Beans.get(MessageClient).request$(PlatformTopics.ping(this.id))\n      .pipe(timeout(Beans.get<number>(CLIENT_PING_TIMEOUT)), retry(1));\n\n    this._livenessDetector = interval(Beans.get<number>(CLIENT_PING_INTERVAL))\n      .pipe(switchMap(() => performPing$))\n      .subscribe({\n        error: () => {\n          this.logStaleClientWarning();\n          Beans.get(ClientRegistry).unregisterClient(this);\n        },\n      });\n  }\n\n  public get stale(): boolean {\n    return this.window.closed;\n  }\n\n  public dispose(): void {\n    this._livenessDetector?.unsubscribe();\n  }\n\n  private logStaleClientWarning(): void {\n    Beans.get(Logger).warn(\n      `[StaleClient] Stale client registration of application '${this.application.symbolicName}' detected.\n       Removing stale registration. Most likely, the client could not disconnect from the broker, for example, because the client was\n       disposed without notice, i.e., without receiving the browser's \"unload\" event, or because the browser discarded the 'DISCONNECT'\n       message. Typically, the browser discards messages for windows that are already closed or if another page has been loaded into the\n       window, both indicating a high load on the client during unloading.`.replace(/\\s+/g, ' '),\n      new LoggingContext(this.application.symbolicName, this.version),\n    );\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Client} from '../client-registry/client';\nimport {MessageSubscription, MessageSubscriptionRegistry} from './message-subscription.registry';\nimport {Intent} from '../../messaging.model';\nimport {IntentSelector} from '../../client/messaging/intent-client';\nimport {QualifierMatcher} from '../../qualifier-matcher';\n\n/**\n * Central point for managing intent subscriptions.\n *\n * @internal\n */\nexport class IntentSubscriptionRegistry extends MessageSubscriptionRegistry<IntentSubscription> {\n\n  public override subscriptions(filter?: {subscriberId?: string; clientId?: string; appSymbolicName?: string; intent?: Intent}): IntentSubscription[] {\n    return super.subscriptions(filter).filter(subscription => filter?.intent ? subscription.matches(filter.intent) : true);\n  }\n}\n\n/**\n * Represents a subscription for intents matching the passed selector.\n *\n * @internal\n */\nexport class IntentSubscription extends MessageSubscription {\n\n  constructor(public readonly selector: IntentSelector, subscriberId: string, client: Client) {\n    super(subscriberId, client);\n  }\n\n  /**\n   * Tests whether the given intent matches this subscription.\n   *\n   * Note that only a type and qualifier check is performed, but not whether the application is eligible\n   * to receive matching intents, i.e., provides a fulfilling capability.\n   */\n  public matches(intent: Intent): boolean {\n    if (this.selector.type && this.selector.type !== intent.type) {\n      return false;\n    }\n    if (this.selector.qualifier && !new QualifierMatcher(this.selector.qualifier).matches(intent.qualifier)) {\n      return false;\n    }\n    return true;\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Provides utilities for working with predicates.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nexport class Predicates {\n\n  private constructor() {\n  }\n\n  /**\n   * Negates the given predicate.\n   */\n  public static not<T>(predicate: Predicate<T>): Predicate<T> {\n    return (value: T) => !predicate(value);\n  }\n\n  /**\n   * Represents a predicate that always evaluates to `true`.\n   */\n  public static alwaysTrue = (): true => true;\n}\n\n/**\n * Represents a predicate (boolean-valued function) of one argument.\n *\n * @internal\n */\nexport type Predicate<T> = (value: T) => boolean;\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {ParamDefinition} from '../../platform.model';\n\n/**\n * Allows testing whether params match the param definitions.\n *\n * @internal\n */\nexport class ParamMatcher {\n\n  private readonly _requiredParamDefs = new Array<ParamDefinition>();\n  private readonly _optionalParamDefs = new Array<ParamDefinition>();\n  private readonly _deprecatedParamDefs = new Array<ParamDefinition>();\n\n  constructor(definitions: ParamDefinition[]) {\n    definitions.forEach(paramDef => {\n      if (paramDef.required ?? true) {\n        this._requiredParamDefs.push(paramDef);\n      }\n      else {\n        this._optionalParamDefs.push(paramDef);\n      }\n\n      if (paramDef.deprecated) {\n        this._deprecatedParamDefs.push(paramDef);\n      }\n    });\n  }\n\n  /**\n   * Tests if the given params match the param definitions.\n   */\n  public match(parameters: Map<string, any> | null | undefined): ParamsMatcherResult {\n    const params = new Map(parameters);\n\n    const matcherResult: ParamsMatcherResult = {\n      matches: true,\n      params,\n      missingParams: [],\n      unexpectedParams: [],\n      deprecatedParams: [],\n    };\n\n    // Test if deprecated params are passed and map them to their substitute, if any.\n    this._deprecatedParamDefs\n      .filter(paramDef => params.has(paramDef.name))\n      .forEach(paramDef => {\n        matcherResult.deprecatedParams.push(paramDef);\n\n        // Try mapping the deprecated param to its substitute.\n        const deprecation = paramDef.deprecated;\n        if (typeof deprecation === 'object' && deprecation.useInstead) {\n          params.set(deprecation.useInstead, params.get(paramDef.name));\n          params.delete(paramDef.name);\n        }\n      });\n\n    // Test if required params are passed.\n    this._requiredParamDefs\n      .filter(paramDef => !params.has(paramDef.name) || params.get(paramDef.name) === undefined)\n      .filter(paramDef => !this._deprecatedParamDefs.includes(paramDef))\n      .forEach(paramDef => {\n        matcherResult.matches = false;\n        matcherResult.missingParams.push(paramDef);\n      });\n\n    // Test if no additional params are passed.\n    Array.from(params.keys())\n      .filter(param => !this._requiredParamDefs.some(paramDef => paramDef.name === param) && !this._optionalParamDefs.some(paramDef => paramDef.name === param))\n      .forEach(param => {\n        matcherResult.matches = false;\n        matcherResult.unexpectedParams.push(param);\n      });\n\n    if (!matcherResult.matches) {\n      matcherResult.params = undefined;\n    }\n\n    return matcherResult;\n  }\n}\n\n/**\n * Represents the result of a params matcher test.\n *\n * @internal\n */\nexport interface ParamsMatcherResult {\n  /**\n   * Indicates whether the params match the param definitions.\n   */\n  matches: boolean;\n  /**\n   * Params as passed to the matcher, but with deprecated params mapped to their substitute,\n   * or `undefined` if the match is not successful.\n   */\n  params: Map<string, any> | undefined;\n  /**\n   * Required params that are missing.\n   */\n  missingParams: ParamDefinition[];\n  /**\n   * Params that are not expected.\n   */\n  unexpectedParams: string[];\n  /**\n   * Params that are deprecated.\n   */\n  deprecatedParams: ParamDefinition[];\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Intent, IntentMessage, MessageHeaders} from '../../messaging.model';\nimport {ParamMatcher, ParamsMatcherResult} from './param-matcher';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {Logger, LoggingContext} from '../../logger';\nimport {ParamDefinition} from '../../platform.model';\n\n/**\n * Provides utilities for working with intent params.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nexport class IntentParams {\n\n  private constructor() {\n  }\n\n  /**\n   * Validates params of given intent.\n   *\n   * @throws if the message contains invalid params.\n   */\n  public static validateParams(intentMessage: IntentMessage): void {\n    const {intent, capability} = intentMessage;\n    const sender = intentMessage.headers.get(MessageHeaders.AppSymbolicName);\n    intent.params = new Map(intent.params);\n\n    // Remove params with `undefined` as value.\n    intent.params.forEach((value, key) => {\n      if (value === undefined) {\n        intent.params!.delete(key);\n      }\n    });\n\n    // Test params passed with the intent to match expected params as declared on the capability.\n    const paramMatcherResult = new ParamMatcher(capability.params || []).match(intent.params);\n    if (!paramMatcherResult.matches) {\n      const error = toParamValidationError(paramMatcherResult, intent);\n      throw Error(`[IntentParamValidationError] ${error}`);\n    }\n\n    // Warn about the usage of deprecated params.\n    if (paramMatcherResult.deprecatedParams.length) {\n      paramMatcherResult.deprecatedParams.forEach(deprecatedParam => {\n        const warning = toDeprecatedParamWarning(deprecatedParam, {appSymbolicName: sender});\n        Beans.get(Logger).warn(`[DEPRECATION][4EAC5956] ${warning}`, new LoggingContext(sender), intent);\n      });\n      // Use the matcher's parameters to have deprecated params mapped to their replacement.\n      intent.params = paramMatcherResult.params;\n    }\n  }\n}\n\nfunction toParamValidationError(paramsMatcherResult: ParamsMatcherResult, intent: Intent): string {\n  const intentStringified = JSON.stringify(intent, (key, value) => (key === 'params') ? undefined : value);\n  const missingParams = paramsMatcherResult.missingParams.map(param => param.name);\n  const unexpectedParams = paramsMatcherResult.unexpectedParams;\n  return `Params of intent do not match expected params of capability. The intent must have required params and not have additional params. [intent=${intentStringified}, missingParams=[${missingParams}], unexpectedParams=[${unexpectedParams}]].`;\n}\n\nfunction toDeprecatedParamWarning(param: ParamDefinition, metadata: {appSymbolicName: string}): string {\n  const deprecation = param.deprecated!;\n  const useInstead = typeof deprecation === 'object' && deprecation.useInstead || undefined;\n  const message = typeof deprecation === 'object' && deprecation.message || undefined;\n\n  return new Array<string>()\n    .concat(`Application '${metadata.appSymbolicName}' passes a deprecated parameter in the intent: '${param.name}'.`)\n    .concat(useInstead ? `Pass parameter '${useInstead}' instead.` : [])\n    .concat(message || [])\n    .join(' ');\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {EMPTY, from, fromEvent, merge, MonoTypeOperatorFunction, Observable, of, Subject} from 'rxjs';\nimport {catchError, filter, mergeMap, share, takeUntil} from 'rxjs/operators';\nimport {IntentMessage, Message, MessageHeaders, ResponseStatusCodes, TopicMessage} from '../../messaging.model';\nimport {ConnackMessage, IntentSubscribeCommand, MessageDeliveryStatus, MessageEnvelope, MessagingChannel, MessagingTransport, PlatformTopics, TopicSubscribeCommand, UnsubscribeCommand} from '../../ɵmessaging.model';\nimport {ApplicationRegistry} from '../application-registry';\nimport {ManifestRegistry} from '../manifest-registry/manifest-registry';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {Logger, LoggingContext} from '../../logger';\nimport {runSafe} from '../../safe-runner';\nimport {TopicSubscription, TopicSubscriptionRegistry} from './topic-subscription.registry';\nimport {ClientRegistry} from '../client-registry/client.registry';\nimport {chainInterceptors, IntentInterceptor, MessageInterceptor, PublishInterceptorChain} from './message-interception';\nimport {Beans, Initializer, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {Runlevel} from '../../platform-state';\nimport {APP_IDENTITY} from '../../platform.model';\nimport {ɵVERSION} from '../../ɵplatform.model';\nimport {bufferUntil} from '@scion/toolkit/operators';\nimport {filterByChannel, filterByTransport} from '../../operators';\nimport {Client} from '../client-registry/client';\nimport {semver} from '../semver';\nimport {ɵClient} from '../client-registry/ɵclient';\nimport {stringifyError} from '../../error.util';\nimport {IntentSubscription, IntentSubscriptionRegistry} from './intent-subscription.registry';\nimport {TopicMatcher} from '../../topic-matcher.util';\nimport {Defined, Maps} from '@scion/toolkit/util';\nimport {MessageClient} from '../../client/messaging/message-client';\nimport {Predicates} from './predicates.util';\nimport {Topics} from '../../topics.util';\nimport {Qualifiers} from '../../qualifiers.util';\nimport {IntentParams} from './intent-params.util';\n\n/**\n * The broker is responsible for receiving all messages, filtering the messages, determining who is\n * subscribed to each message, and sending the message to these subscribed clients.\n *\n * The broker allows topic-based and intent-based messaging and supports retained messages.\n *\n * When the broker receives a message from a client, the broker identifies the sending client using the {@Window}\n * contained in the {@link MessageEvent}. The user agent sets the window, which cannot be tampered by the client.\n * However, when the client unloads, the window is not set because already been destroyed. Then, the broker identifies\n * the client using the unique client id. In both cases, the broker checks the origin of the message to match the\n * origin of the registered application.\n *\n * The broker processes client connect requests in runlevel 1 or higher. Message dispatching is enabled in runlevel 2.\n * Prior requests are buffered until entering the respective runlevel.\n *\n * @internal\n */\nexport class MessageBroker implements Initializer, PreDestroy {\n\n  private readonly _destroy$ = new Subject<void>();\n  private readonly _clientMessage$: Observable<MessageEvent<MessageEnvelope>>;\n\n  private readonly _clientRegistry = Beans.get(ClientRegistry);\n  private readonly _topicSubscriptionRegistry = Beans.get(TopicSubscriptionRegistry);\n  private readonly _intentSubscriptionRegistry = Beans.get(IntentSubscriptionRegistry);\n\n  private readonly _retainedMessageStore = new Map<string, TopicMessage[]>();\n  private readonly _retainedIntentStore = new Map<string, IntentMessage[]>();\n\n  private readonly _applicationRegistry: ApplicationRegistry;\n  private readonly _manifestRegistry: ManifestRegistry;\n\n  private readonly _messagePublisher: PublishInterceptorChain<TopicMessage>;\n  private readonly _intentPublisher: PublishInterceptorChain<IntentMessage>;\n\n  constructor() {\n    this._applicationRegistry = Beans.get(ApplicationRegistry);\n    this._manifestRegistry = Beans.get(ManifestRegistry);\n\n    // Construct a stream of messages sent by clients.\n    this._clientMessage$ = fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByTransport(MessagingTransport.ClientToBroker),\n        filterByChannel(MessagingChannel.Intent, MessagingChannel.Topic, MessagingChannel.TopicSubscribe, MessagingChannel.TopicUnsubscribe, MessagingChannel.IntentSubscribe, MessagingChannel.IntentUnsubscribe),\n        bufferUntil(Beans.whenRunlevel(Runlevel.Two)),\n        checkOriginTrusted(),\n        catchErrorAndRetry(),\n        share(),\n      );\n\n    // Install client connect listeners.\n    this.installClientConnectListener();\n    this.installClientDisconnectListener();\n\n    // Install message handling.\n    this.installMessageDispatcher();\n    this.installTopicSubscribeListener();\n    this.installTopicUnsubscribeListener();\n    this.installTopicSubscriberCountObserver();\n    this.sendRetainedMessageOnSubscribe();\n\n    // Install intent handling.\n    this.installIntentDispatcher();\n    this.installIntentSubscribeListener();\n    this.installIntentUnsubscribeListener();\n    this.sendRetainedIntentOnSubscribe();\n    this.deleteRetainedIntentOnCapabilityUnregister();\n\n    // Assemble message interceptors to a chain of handlers which are called one after another. The publisher is added as terminal handler.\n    this._messagePublisher = this.createMessagePublisher();\n    this._intentPublisher = this.createIntentPublisher();\n  }\n\n  public init(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  private installClientConnectListener(): void {\n    fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByTransport(MessagingTransport.ClientToBroker),\n        filterByChannel(MessagingChannel.ClientConnect),\n        bufferUntil(Beans.whenRunlevel(Runlevel.One)),\n        catchErrorAndRetry(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent) => runSafe(() => {\n        // Ignore stale CONNECT request, e.g. if the origin window has been closed or a page with a different origin has been loaded.\n        if (!event.source) {\n          Beans.get(Logger).debug(`[CONNECT] Ignoring stale connect request from \"${event.origin}\".`);\n          return;\n        }\n\n        const eventSource: Window = event.source as Window;\n        const envelope: MessageEnvelope<TopicMessage<void>> = event.data;\n        const clientAppName = envelope.message.headers.get(MessageHeaders.AppSymbolicName);\n        const clientMessageTarget = new MessageTarget(event);\n        const replyTo = envelope.message.headers.get(MessageHeaders.ReplyTo);\n\n        if (!clientAppName) {\n          const warning = `Client connect attempt rejected: Bad request. [origin='${event.origin}']`;\n          Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n          sendTopicMessage<ConnackMessage>(clientMessageTarget, {\n            topic: replyTo,\n            body: {returnCode: 'refused:bad-request', returnMessage: `[ClientConnectError] ${warning}`},\n            headers: new Map(),\n          });\n          return;\n        }\n\n        const application = this._applicationRegistry.getApplication(clientAppName, {orElse: null});\n        if (!application) {\n          const warning = `Client connect attempt rejected: Unknown client. [app='${clientAppName}']`;\n          Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n          sendTopicMessage<ConnackMessage>(clientMessageTarget, {\n            topic: replyTo,\n            body: {returnCode: 'refused:rejected', returnMessage: `[ClientConnectError] ${warning}`},\n            headers: new Map(),\n          });\n          return;\n        }\n\n        if (!application.allowedMessageOrigins.has(event.origin)) {\n          const warning = `Client connect attempt blocked: Wrong origin [actual='${event.origin}', expected='${Array.from(application.allowedMessageOrigins)}', app='${application.symbolicName}']`;\n          Beans.get(Logger).warn(`[CONNECT] ${warning}`);\n\n          sendTopicMessage<ConnackMessage>(clientMessageTarget, {\n            topic: replyTo,\n            body: {returnCode: 'refused:blocked', returnMessage: `[ClientConnectError] ${warning}`},\n            headers: new Map(),\n          });\n          return;\n        }\n\n        // Check if the client is already connected. If already connected, do nothing. A client can potentially initiate multiple connect requests, for example,\n        // when not receiving connect confirmation in time.\n        const currentClient = this._clientRegistry.getByWindow(eventSource);\n        if (currentClient && currentClient.origin === event.origin && currentClient.application.symbolicName === application.symbolicName) {\n          sendTopicMessage<ConnackMessage>(currentClient, {\n            topic: replyTo,\n            body: {\n              returnCode: 'accepted',\n              clientId: currentClient.id,\n            },\n            headers: new Map(),\n          });\n          return;\n        }\n\n        const client = new ɵClient(UUID.randomUUID(), eventSource, event.origin, application, envelope.message.headers.get(MessageHeaders.Version));\n        this._clientRegistry.registerClient(client);\n\n        // Check if the client is compatible with the platform version of the host.\n        if (semver.major(client.version) !== semver.major(Beans.get<string>(ɵVERSION))) {\n          Beans.get(Logger).warn(`[VersionMismatch] Application '${application.symbolicName}' uses a different major version of the @scion/microfrontend-platform than the host application, which may not be compatible. Please upgrade @scion/microfrontend-platform of application '${application.symbolicName}' from version '${(client.version)}' to version '${(Beans.get<string>(ɵVERSION))}'.`, new LoggingContext(application.symbolicName, client.version));\n        }\n\n        sendTopicMessage<ConnackMessage>(client, {\n          topic: replyTo,\n          body: {\n            returnCode: 'accepted',\n            clientId: client.id,\n          },\n          headers: new Map(),\n        });\n      }));\n  }\n\n  /**\n   * Listens for client disconnect requests.\n   */\n  private installClientDisconnectListener(): void {\n    fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filterByTransport(MessagingTransport.ClientToBroker),\n        filterByChannel(MessagingChannel.ClientDisconnect),\n        bufferUntil(Beans.whenRunlevel(Runlevel.One)),\n        checkOriginTrusted(),\n        catchErrorAndRetry(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope>) => runSafe(() => {\n        const client = getSendingClient(event);\n        this._clientRegistry.unregisterClient(client);\n      }));\n  }\n\n  /**\n   * Replies to requests to observe the number of subscribers on a topic.\n   */\n  private installTopicSubscriberCountObserver(): void {\n    Beans.get(MessageClient).observe$<string>(PlatformTopics.RequestSubscriberCount)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(request => runSafe(() => {\n        const topic = request.body!;\n        const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n        const unsubscribe$ = this._topicSubscriptionRegistry.subscriptionCount$(replyTo).pipe(filter(count => count === 0));\n\n        this._topicSubscriptionRegistry.subscriptionCount$(topic)\n          .pipe(takeUntil(merge(this._destroy$, unsubscribe$)))\n          .subscribe({ // eslint-disable-line rxjs/no-nested-subscribe\n            next: count => Beans.get(MessageClient).publish(replyTo, count),\n            error: error => Beans.get(MessageClient).publish(replyTo, stringifyError(error), {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR)}),\n          });\n      }));\n  }\n\n  /**\n   * Dispatches topic messages to subscribed clients.\n   */\n  private installMessageDispatcher(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<TopicMessage>(MessagingChannel.Topic),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<TopicMessage>>) => runSafe(async () => {\n        const client = getSendingClient(event);\n        const message = event.data.message;\n        const messageId = message.headers.get(MessageHeaders.MessageId);\n\n        const illegalTopicError = Topics.validateTopic(message.topic, {exactTopic: true});\n        if (illegalTopicError) {\n          sendDeliveryStatusError(client, messageId, illegalTopicError);\n          return;\n        }\n\n        // If a retained message without payload, remove any stored retained message on that topic, if any.\n        if (message.retain && !isRequest(message) && message.body === undefined) {\n          Maps.removeListValue(this._retainedMessageStore, message.topic, Predicates.not(isRequest));\n          sendDeliveryStatusSuccess(client, messageId);\n          return;\n        }\n\n        try {\n          // If a request of a request-response communication, create a subscription for the requestor to receive replies.\n          const requestorReplySubscription = this.subscribeForRepliesIfRequest(message, client);\n          // Ensure the message header 'ɵSUBSCRIBER_ID' to be removed; is set in request-response communication by the client gateway.\n          message.headers.delete(MessageHeaders.ɵSubscriberId);\n          // Dispatch the message.\n          await this._messagePublisher.interceptAndPublish(message);\n          // If a retained message or request, store it for late subscribers.\n          this.storeMessageIfRetained(message, requestorReplySubscription);\n\n          sendDeliveryStatusSuccess(client, messageId);\n        }\n        catch (error) {\n          sendDeliveryStatusError(client, messageId, error);\n        }\n      }));\n  }\n\n  /**\n   * Dispatches intents to qualified clients.\n   */\n  private installIntentDispatcher(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<IntentMessage>(MessagingChannel.Intent),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<IntentMessage>>) => runSafe(async () => {\n        const client = getSendingClient(event);\n        const message = event.data.message;\n        const messageId = message.headers.get(MessageHeaders.MessageId);\n\n        if (!message.intent) {\n          const error = '[MessagingError] Missing message property: intent';\n          sendDeliveryStatusError(client, messageId, error);\n          return;\n        }\n\n        if (!message.intent.type) {\n          const error = '[MessagingError] Missing message property: type';\n          sendDeliveryStatusError(client, messageId, error);\n          return;\n        }\n\n        const illegalQualifierError = Qualifiers.validateQualifier(message.intent.qualifier, {exactQualifier: true});\n        if (illegalQualifierError) {\n          sendDeliveryStatusError(client, messageId, illegalQualifierError);\n          return;\n        }\n\n        if (!this._manifestRegistry.hasIntention(message.intent, client.application.symbolicName)) {\n          const error = `[NotQualifiedError] Application '${client.application.symbolicName}' is not qualified to publish intents of the type '${message.intent.type}' and qualifier '${JSON.stringify(message.intent.qualifier || {})}'. Ensure to have listed the intention in the application manifest.`;\n          sendDeliveryStatusError(client, messageId, error);\n          return;\n        }\n\n        // Find capabilities fulfilling the intent, or send an error otherwise.\n        const capabilities = this._manifestRegistry.resolveCapabilitiesByIntent(message.intent, client.application.symbolicName);\n        if (capabilities.length === 0) {\n          const error = `[NullProviderError] No application found to provide a capability of the type '${message.intent.type}' and qualifiers '${JSON.stringify(message.intent.qualifier || {})}'. Maybe, the capability is not public API or the providing application not available.`;\n          sendDeliveryStatusError(client, messageId, error);\n          return;\n        }\n\n        // If a retained message without payload, remove any stored retained message for the resolved capabilities.\n        if (message.retain && !isRequest(message) && message.body === undefined) {\n          capabilities.forEach(capability => {\n            Maps.removeListValue(this._retainedIntentStore, capability.metadata!.id, Predicates.not(isRequest));\n            sendDeliveryStatusSuccess(client, messageId);\n          });\n          return;\n        }\n\n        try {\n          // If a request of a request-response communication, create a subscription for the requestor to receive replies.\n          const requestorReplySubscription = this.subscribeForRepliesIfRequest(message, client);\n          // Ensure the message header 'ɵSUBSCRIBER_ID' to be removed; is set in request-response communication by the client gateway.\n          message.headers.delete(MessageHeaders.ɵSubscriberId);\n\n          // Dispatch the message.\n          await Promise.all(capabilities\n            // Associate capability with the intent.\n            .map<IntentMessage>(capability => ({...message, capability}))\n            .map(async message => {\n              // Validate intent params.\n              IntentParams.validateParams(message);\n              // Publish the intent.\n              await this._intentPublisher.interceptAndPublish(message);\n              // If a retained message or request, store it for late subscribers.\n              this.storeIntentIfRetained(message, requestorReplySubscription);\n            }));\n          sendDeliveryStatusSuccess(client, messageId);\n        }\n        catch (error) {\n          sendDeliveryStatusError(client, messageId, error);\n        }\n      }));\n  }\n\n  /**\n   * Installs a listener that sends retained messages to new subscribers.\n   */\n  private sendRetainedMessageOnSubscribe(): void {\n    this._topicSubscriptionRegistry.register$\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(subscription => runSafe(() => {\n        Array.from(this._retainedMessageStore.values())\n          .flat()\n          .filter(retainedMessage => subscription.matches(retainedMessage.topic))\n          .forEach(retainedMessage => this._messagePublisher.interceptAndPublish({\n            ...retainedMessage,\n            headers: new Map(retainedMessage.headers).set(MessageHeaders.ɵSubscriberId, subscription.subscriberId),\n          }));\n      }));\n  }\n\n  /**\n   * Installs a listener that sends retained intents to new subscribers.\n   */\n  private sendRetainedIntentOnSubscribe(): void {\n    this._intentSubscriptionRegistry.register$\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(subscription => runSafe(() => {\n        Array.from(this._retainedIntentStore.values())\n          .flat()\n          .filter(retainedMessage => subscription.client.application.symbolicName === retainedMessage.capability.metadata!.appSymbolicName)\n          .filter(retainedMessage => subscription.matches(retainedMessage.intent))\n          .forEach(retainedMessage => this._intentPublisher.interceptAndPublish({\n            ...retainedMessage,\n            headers: new Map(retainedMessage.headers).set(MessageHeaders.ɵSubscriberId, subscription.subscriberId),\n          }));\n      }));\n  }\n\n  /**\n   * Installs a listener that removes retained intent(s) when associated capability is removed.\n   */\n  private deleteRetainedIntentOnCapabilityUnregister(): void {\n    this._manifestRegistry.capabilityUnregister$\n      .pipe(\n        mergeMap(capabilities => from(capabilities)),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(capability => runSafe(() => {\n        Maps.removeListValue(this._retainedIntentStore, capability.metadata!.id, Predicates.alwaysTrue);\n      }));\n  }\n\n  /**\n   * Listens for topic subscription requests.\n   */\n  private installTopicSubscribeListener(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<TopicSubscribeCommand>(MessagingChannel.TopicSubscribe),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<TopicSubscribeCommand>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const envelope = event.data;\n        const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n        const topic = envelope.message.topic;\n\n        const illegalTopicError = Topics.validateTopic(topic, {exactTopic: false});\n        if (illegalTopicError) {\n          sendDeliveryStatusError(client, messageId, illegalTopicError);\n          return;\n        }\n\n        try {\n          const subscriberId = Defined.orElseThrow(envelope.message.subscriberId, () => Error('[TopicSubscribeError] Missing property: subscriberId'));\n          this._topicSubscriptionRegistry.register(new TopicSubscription(topic, subscriberId, client));\n          sendDeliveryStatusSuccess(client, messageId);\n        }\n        catch (error) {\n          sendDeliveryStatusError(client, messageId, error);\n        }\n      }));\n  }\n\n  /**\n   * Listens for topic unsubscription requests.\n   */\n  private installTopicUnsubscribeListener(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<UnsubscribeCommand>(MessagingChannel.TopicUnsubscribe),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<UnsubscribeCommand>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const envelope = event.data;\n        const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n\n        try {\n          const subscriberId = Defined.orElseThrow(envelope.message.subscriberId, () => Error('[TopicUnsubscribeError] Missing property: subscriberId'));\n          this._topicSubscriptionRegistry.unregister({subscriberId});\n          sendDeliveryStatusSuccess(client, messageId);\n        }\n        catch (error) {\n          sendDeliveryStatusError(client, messageId, error);\n        }\n      }));\n  }\n\n  /**\n   * Listens for intent subscription requests.\n   */\n  private installIntentSubscribeListener(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<IntentSubscribeCommand>(MessagingChannel.IntentSubscribe),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<IntentSubscribeCommand>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const envelope = event.data;\n        const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n\n        const illegalQualifierError = Qualifiers.validateQualifier(envelope.message.selector?.qualifier, {exactQualifier: false});\n        if (illegalQualifierError) {\n          sendDeliveryStatusError(client, messageId, illegalQualifierError);\n          return;\n        }\n\n        try {\n          const subscriberId = Defined.orElseThrow(envelope.message.subscriberId, () => Error('[IntentSubscribeError] Missing property: subscriberId'));\n          this._intentSubscriptionRegistry.register(new IntentSubscription(envelope.message.selector || {}, subscriberId, client));\n          sendDeliveryStatusSuccess(client, messageId);\n        }\n        catch (error) {\n          sendDeliveryStatusError(client, messageId, error);\n        }\n      }));\n  }\n\n  /**\n   * Listens for intent unsubscription requests.\n   */\n  private installIntentUnsubscribeListener(): void {\n    this._clientMessage$\n      .pipe(\n        filterByChannel<UnsubscribeCommand>(MessagingChannel.IntentUnsubscribe),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MessageEvent<MessageEnvelope<UnsubscribeCommand>>) => runSafe(() => {\n        const client = getSendingClient(event);\n        const envelope = event.data;\n        const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n\n        try {\n          const subscriberId = Defined.orElseThrow(envelope.message.subscriberId, () => Error('[IntentUnsubscribeError] Missing property: subscriberId'));\n          this._intentSubscriptionRegistry.unregister({subscriberId});\n          sendDeliveryStatusSuccess(client, messageId);\n        }\n        catch (error) {\n          sendDeliveryStatusError(client, messageId, error);\n        }\n      }));\n  }\n\n  /**\n   * Creates the interceptor chain to intercept message publishing. The publisher is added as terminal handler.\n   */\n  private createMessagePublisher(): PublishInterceptorChain<TopicMessage> {\n    return chainInterceptors(Beans.all(MessageInterceptor), async (message: TopicMessage): Promise<void> => {\n      const subscribers = this._topicSubscriptionRegistry.subscriptions({\n        subscriberId: message.headers.get(MessageHeaders.ɵSubscriberId),\n        topic: message.topic,\n      });\n\n      // If request-reply communication, reply with an error if no subscriber is registered to answer the request.\n      if (isRequest(message) && !message.retain && !subscribers.length) {\n        throw Error(`[MessagingError] No subscriber registered to answer the request [topic=${message.topic}]`);\n      }\n\n      subscribers.forEach(subscriber => runSafe(() => sendTopicMessage(subscriber, message)));\n    });\n  }\n\n  /**\n   * Creates the interceptor chain to intercept intent publishing. The publisher is added as terminal handler.\n   */\n  private createIntentPublisher(): PublishInterceptorChain<IntentMessage> {\n    return chainInterceptors(Beans.all(IntentInterceptor), async (message: IntentMessage): Promise<void> => {\n      const subscribers = this._intentSubscriptionRegistry.subscriptions({\n        subscriberId: message.headers.get(MessageHeaders.ɵSubscriberId),\n        appSymbolicName: message.capability.metadata!.appSymbolicName,\n        intent: message.intent,\n      });\n\n      // If request-reply communication, reply with an error if no subscriber is registered to answer the intent.\n      if (isRequest(message) && !message.retain && !subscribers.length) {\n        throw Error(`[MessagingError] No subscriber registered to answer the intent [intent=${JSON.stringify(message.intent)}]`);\n      }\n\n      subscribers.forEach(subscriber => runSafe(() => sendIntentMessage(subscriber, message)));\n    });\n  }\n\n  /**\n   * Create a subscription for the sender to receive replies if request-response communication.\n   */\n  private subscribeForRepliesIfRequest(message: Message, sender: Client): TopicSubscription | null {\n    if (!isRequest(message)) {\n      return null;\n    }\n\n    const subscriberId = Defined.orElseThrow(message.headers.get(MessageHeaders.ɵSubscriberId), () => Error('[MessagingError] Missing message header: subscriberId'));\n    const replyTo = message.headers.get(MessageHeaders.ReplyTo);\n    const subscription = new TopicSubscription(replyTo, subscriberId, sender);\n    this._topicSubscriptionRegistry.register(subscription);\n    return subscription;\n  }\n\n  /**\n   * Stores the message if retained.\n   *\n   * Unlike a regular message, a retained message remains in the broker and is delivered to new subscribers, even if they subscribe\n   * after the request has been sent. The broker stores one retained message per topic, i.e., a later sent retained message will replace\n   * a previously sent retained message. This, however, does not apply to retained requests in request-response communication.\n   * Retained requests are NEVER replaced and remain in the broker until the requestor unsubscribes.\n   *\n   * @param message - Message to be stored if retained.\n   * @param requestorReplySubscription - Subscription of the requestor to receive replies; only set in request-response communication.\n   */\n  private storeMessageIfRetained(message: TopicMessage, requestorReplySubscription: TopicSubscription | null): void {\n    if (!message.retain) {\n      return;\n    }\n\n    // If a retained request, store it. Retained requests are not replaced and are retained until the requestor unsubscribes.\n    if (isRequest(message)) {\n      Defined.orElseThrow(requestorReplySubscription, () => Error('[InternalMessagingError] An unexpected error occurred. Expected subscription not to be null.'));\n      Maps.addListValue(this._retainedMessageStore, message.topic, message);\n      requestorReplySubscription!.whenUnsubscribe.then(() => Maps.removeListValue(this._retainedMessageStore, message.topic, message));\n    }\n    // If a retained message (not a request), replace any previously stored retained message on that topic, if any.\n    else {\n      Maps.removeListValue(this._retainedMessageStore, message.topic, Predicates.not(isRequest));\n      Maps.addListValue(this._retainedMessageStore, message.topic, message);\n    }\n  }\n\n  private storeIntentIfRetained(message: IntentMessage, requestorReplySubscription: TopicSubscription | null): void {\n    if (!message.retain) {\n      return;\n    }\n\n    const capabilityId = message.capability.metadata!.id;\n\n    // If a retained request, store it. Retained requests are not replaced and are retained until the requestor unsubscribes.\n    if (isRequest(message)) {\n      Defined.orElseThrow(requestorReplySubscription, () => Error('[InternalMessagingError] An unexpected error occurred. Expected subscription not to be null.'));\n      Maps.addListValue(this._retainedIntentStore, capabilityId, message);\n      requestorReplySubscription!.whenUnsubscribe.then(() => Maps.removeListValue(this._retainedIntentStore, capabilityId, message));\n    }\n    // If a retained message (i.e. not a request), replace any previously stored retained message for that capability, if any.\n    else {\n      Maps.removeListValue(this._retainedIntentStore, capabilityId, Predicates.not(isRequest));\n      Maps.addListValue(this._retainedIntentStore, capabilityId, message);\n    }\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Resolves to the client that sent the passed message.\n *\n * Throws an error if the client could not be resolved.\n */\nfunction getSendingClient(event: MessageEvent<MessageEnvelope>): Client {\n  const clientId = event.data.message.headers.get(MessageHeaders.ClientId);\n  const client = Beans.get(ClientRegistry).getByClientId(clientId)!;\n  if (!client) {\n    throw Error(`[NullClientError] Client not found in client registry. [clientId=${clientId}]`);\n  }\n  return client;\n}\n\n/**\n * Passes only messages originating from trusted and registered clients.\n */\nfunction checkOriginTrusted<T extends Message>(): MonoTypeOperatorFunction<MessageEvent<MessageEnvelope<T>>> {\n  return mergeMap((event: MessageEvent<MessageEnvelope<T>>): Observable<MessageEvent<MessageEnvelope<T>>> => {\n    const envelope: MessageEnvelope = event.data;\n    const messageId = envelope.message.headers.get(MessageHeaders.MessageId);\n    const clientId = envelope.message.headers.get(MessageHeaders.ClientId);\n    const client = Beans.get(ClientRegistry).getByClientId(clientId)!;\n\n    // Assert client registration.\n    if (!client) {\n      if (event.source !== null) {\n        const sender = new MessageTarget(event);\n        const error = `[MessagingError] Message rejected: Client not registered [origin=${event.origin}]`;\n        sendDeliveryStatusError(sender, messageId, error);\n      }\n      return EMPTY;\n    }\n\n    // Assert source origin.\n    if (event.origin !== client.origin) {\n      if (event.source !== null) {\n        const sender = new MessageTarget(event);\n        const error = `[MessagingError] Message rejected: Wrong origin [actual=${event.origin}, expected=${client.origin}, application=${client.application.symbolicName}]`;\n        sendDeliveryStatusError(sender, messageId, error);\n      }\n      return EMPTY;\n    }\n\n    // Assert the source window unless it is `null`, that is, it has been closed or a page from another origin has been loaded into the window.\n    // We still process requests of stale clients to enable proper disconnection, such as delivery of messages published by the client during shutdown.\n    if (event.source !== null && event.source !== client.window) {\n      const sender = new MessageTarget(event);\n      const error = `[MessagingError] Message rejected: Wrong window [origin=${event.origin}]`;\n      sendDeliveryStatusError(sender, messageId, error);\n      return EMPTY;\n    }\n\n    return of(event);\n  });\n}\n\nfunction sendDeliveryStatusSuccess(target: MessageTarget | Client, topic: string): void {\n  sendTopicMessage<MessageDeliveryStatus>(target, {\n    topic: topic,\n    body: {ok: true},\n    headers: new Map(),\n  });\n}\n\nfunction sendDeliveryStatusError(target: MessageTarget | Client, topic: string, error: string | Error | unknown): void {\n  sendTopicMessage<MessageDeliveryStatus>(target, {\n    topic: topic,\n    body: {ok: false, details: stringifyError(error)},\n    headers: new Map(),\n  });\n}\n\nfunction sendTopicMessage<T>(target: MessageTarget | Client | TopicSubscription, message: TopicMessage<T>): void {\n  const envelope: MessageEnvelope<TopicMessage<T>> = {\n    transport: MessagingTransport.BrokerToClient,\n    channel: MessagingChannel.Topic,\n    message: {\n      ...message,\n      params: new Map(message.params),\n      headers: new Map(message.headers)\n        .set(MessageHeaders.MessageId, message.headers.get(MessageHeaders.MessageId) ?? UUID.randomUUID())\n        .set(MessageHeaders.AppSymbolicName, message.headers.get(MessageHeaders.AppSymbolicName) ?? Beans.get<string>(APP_IDENTITY)),\n    },\n  };\n\n  if (target instanceof MessageTarget) {\n    !target.window.closed && target.window.postMessage(envelope, target.origin);\n  }\n  else if (target instanceof TopicSubscription) {\n    const subscription = target;\n    const client = subscription.client;\n    envelope.message.headers.set(MessageHeaders.ɵSubscriberId, target.subscriberId);\n    envelope.message.params = new TopicMatcher(subscription.topic).match(message.topic).params;\n    !client.stale && client.window.postMessage(envelope, client.origin);\n  }\n  else {\n    !target.stale && target.window.postMessage(envelope, target.origin);\n  }\n}\n\nfunction sendIntentMessage(subscription: IntentSubscription, message: IntentMessage): void {\n  const envelope: MessageEnvelope<IntentMessage> = {\n    transport: MessagingTransport.BrokerToClient,\n    channel: MessagingChannel.Intent,\n    message: {\n      ...message,\n      headers: new Map(message.headers)\n        .set(MessageHeaders.ɵSubscriberId, subscription.subscriberId)\n        .set(MessageHeaders.MessageId, message.headers.get(MessageHeaders.MessageId) ?? UUID.randomUUID())\n        .set(MessageHeaders.AppSymbolicName, message.headers.get(MessageHeaders.AppSymbolicName) ?? Beans.get<string>(APP_IDENTITY)),\n    },\n  };\n  const client = subscription.client;\n  !client.stale && client.window.postMessage(envelope, client.origin);\n}\n\n/**\n * Catches and logs errors, and resubscribes to the source observable.\n */\nfunction catchErrorAndRetry<T>(): MonoTypeOperatorFunction<T> {\n  return catchError((error, caught) => {\n    Beans.get(Logger).error('[UnexpectedError] An unexpected error occurred.', error);\n    return caught;\n  });\n}\n\n/**\n * Tests whether given message is a request of a request-response communication.\n * That is a message that contains the {@link MessageHeaders#ReplyTo} message header.\n */\nfunction isRequest(message: Message): boolean {\n  return message.headers.has(MessageHeaders.ReplyTo);\n}\n\n/**\n * Represents the target where to send a message.\n */\nclass MessageTarget {\n\n  public readonly window: Window;\n  public readonly origin: string;\n\n  constructor(event: MessageEvent) {\n    this.window = event.source as Window;\n    this.origin = event.origin;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {firstValueFrom, lastValueFrom, Observable, OperatorFunction} from 'rxjs';\nimport {MessageClient} from '../messaging/message-client';\nimport {Application, ApplicationQualifiedForCapabilityRequest, Capability, Intention, ManifestObjectFilter} from '../../platform.model';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {mapToBody} from '../../messaging.model';\nimport {Beans, Initializer} from '@scion/toolkit/bean-manager';\nimport {BrokerGateway, NullBrokerGateway} from '../messaging/broker-gateway';\nimport {mapArray} from '@scion/toolkit/operators';\nimport {ɵApplication} from '../../ɵplatform.model';\n\n/**\n * Allows browsing the catalog of capabilities and managing the capabilities of the application.\n *\n * The app can browse only capabilities which are visible to it, i.e., for which the app has declared an intention and\n * which are also publicly available. Capabilities that the app provides itself are always visible to the app.\n *\n * The app can also provide new capabilities or remove existing ones. If the *Intention Registration API* is enabled\n * for the app, the app can also manage its intentions, which, however, is strongly discouraged. Instead, apps should\n * declare the required functionality in their manifests using wildcard intentions.\n *\n * @category Intention API\n */\nexport class ManifestService implements Initializer {\n\n  private _applications: Application[] = [];\n\n  public async init(): Promise<void> {\n    const messagingDisabled = Beans.get(BrokerGateway) instanceof NullBrokerGateway;\n    if (messagingDisabled) {\n      return;\n    }\n\n    // Wait until obtained registered applications so that they can be accessed synchronously by the application via `ManifestService#applications`.\n    const applications$ = Beans.get(MessageClient).observe$<ɵApplication[]>(PlatformTopics.Applications);\n    this._applications = await firstValueFrom(applications$.pipe(mapToBody(), mapToApplication()));\n  }\n\n  /**\n   * Applications installed in the platform.\n   */\n  public get applications(): ReadonlyArray<Application> {\n    return this._applications;\n  }\n\n  /**\n   * Allows browsing the catalog of capabilities that match the given filter.\n   *\n   * <strong>\n   * You can only browse capabilities that are visible to your application, that is, capabilities that you provide yourself or that are\n   * publicly available and for which you have declared an intention in your manifest.\n   * </strong>\n   *\n   * @param  filter - Control which capabilities to browse. If no or an empty filter is given, all capabilities visible to the requesting\n   *         app are returned. Specified filter criteria are \"AND\"ed together.\\\n   *         <p>\n   *         If specifying a qualifier filter, the capabilities must match that filter exactly. The filter supports the asterisk wildcard\n   *         to match any value, e.g., `{property: '*'}`, or partial matching to find capabilities with at least the specified qualifier\n   *         properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n   * @return An Observable that, when subscribed, emits the requested capabilities.\n   *         It never completes and emits continuously when fulfilling capabilities are registered or unregistered.\n   */\n  public lookupCapabilities$<T extends Capability>(filter?: ManifestObjectFilter): Observable<T[]> {\n    return Beans.get(MessageClient).request$<T[]>(PlatformTopics.LookupCapabilities, filter)\n      .pipe(mapToBody());\n  }\n\n  /**\n   * Allows browsing the catalog of intentions that match the given filter.\n   *\n   * @param  filter - Control which intentions to return. If no or an empty filter is given, no filtering takes place. Specified filter\n   *         criteria are \"AND\"ed together.\\\n   *         <p>\n   *         If specifying a qualifier filter, the intentions must match that filter exactly. The filter supports the asterisk wildcard\n   *         to match any value, e.g., `{property: '*'}`, or partial matching to find intentions with at least the specified qualifier\n   *         properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n   * @return An Observable that, when subscribed, emits the requested intentions.\n   *         It never completes and emits continuously when matching intentions are registered or unregistered.\n   */\n  public lookupIntentions$(filter?: ManifestObjectFilter): Observable<Intention[]> {\n    return Beans.get(MessageClient).request$<Intention[]>(PlatformTopics.LookupIntentions, filter)\n      .pipe(mapToBody());\n  }\n\n  /**\n   * Registers given capability. If the capability has public visibility, other applications can browse the capability and interact with it.\n   *\n   * @return A Promise that resolves to the identity of the registered capability,\n   *         or that rejects if the registration failed.\n   */\n  public registerCapability<T extends Capability>(capability: T): Promise<string> {\n    const register$ = Beans.get(MessageClient).request$<string>(PlatformTopics.RegisterCapability, capability);\n    return lastValueFrom(register$.pipe(mapToBody()));\n  }\n\n  /**\n   * Unregisters capabilities matching the given filter.\n   *\n   * <strong>You can only unregister capabilities of your application.</strong>\n   *\n   * @param  filter - Control which capabilities to unregister by specifying filter criteria which are \"AND\"ed together. If not passing a filter,\n   *         all capabilities of the requesting app are unregistered.\\\n   *         <p>\n   *         If specifying a qualifier filter, the capabilities to unregister must match that filter exactly. The filter supports the asterisk\n   *         wildcard to match any value, e.g., `{property: '*'}`, or partial matching to unregister capabilities with at least the specified\n   *         qualifier properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n   *         Note that specifying a symbolic app name in the filter has no effect.\n   * @return A Promise that resolves when unregistered the capability,\n   *         or that rejects if the unregistration failed.\n   */\n  public unregisterCapabilities(filter?: ManifestObjectFilter): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      Beans.get(MessageClient).request$<void>(PlatformTopics.UnregisterCapabilities, filter).subscribe({\n        error: reject,\n        complete: resolve,\n      });\n    });\n  }\n\n  /**\n   * Registers the given intention, allowing the application to interact with public capabilities matching the intention.\n   *\n   * The intention can match multiple capabilities by using the asterisk wildcard in the qualifier.\n   *\n   * <strong>This operation requires that the 'Intention Registration API' is enabled for your application.</strong>\n   *\n   * @return A Promise that resolves to the identity of the registered intention,\n   *         or that rejects if the registration failed.\n   */\n  public registerIntention(intention: Intention): Promise<string> {\n    const register$ = Beans.get(MessageClient).request$<string>(PlatformTopics.RegisterIntention, intention);\n    return lastValueFrom(register$.pipe(mapToBody()));\n  }\n\n  /**\n   * Unregisters intentions matching the given filter.\n   *\n   * <strong>You can only unregister intentions of your application.</strong>\n   * <strong>This operation requires that the 'Intention Registration API' is enabled for your application.</strong>\n   *\n   * @param  filter - Control which intentions to unregister by specifying filter criteria which are \"AND\"ed together. If not passing a filter,\n   *         all intentions of the requesting app are unregistered.\\\n   *         <p>\n   *         If specifying a qualifier filter, the intentions to unregister must match that filter exactly. The filter supports the asterisk\n   *         wildcard to match any value, e.g., `{property: '*'}`, or partial matching to unregister intentions with at least the specified\n   *         qualifier properties. Partial matching is enabled by appending the _any-more_ entry to the qualifier, as following: `{'*': '*'}`.\n   *         Note that specifying a symbolic app name in the filter has no effect.\n   * @return A Promise that resolves when unregistered the intention,\n   *         or that rejects if the unregistration failed.\n   */\n  public unregisterIntentions(filter?: ManifestObjectFilter): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      Beans.get(MessageClient).request$<void>(PlatformTopics.UnregisterIntentions, filter).subscribe({\n        error: reject,\n        complete: resolve,\n      });\n    });\n  }\n\n  /**\n   * Tests if the specified micro app is qualified to interact with the given capability.\n   *\n   * A micro app is qualified if it meets either of the following criteria:\n   * - The capability is provided by the application itself.\n   * - The capability is provided by another application, but only if the capability is publicly visible (1),\n   *   and the micro app has declared an intention (2) to use the capability.\n   *\n   * (1) Unless 'scope check' is disabled for the specified micro app.\n   * (2) Unless 'intention check' is disabled for the specified micro app.\n   *\n   * @param appSymbolicName - Specifies the symbolic name of the application under test.\n   * @param qualifiedFor\n   *        @property capabilityId - Identifies the capability to test.\n   * @return An Observable that, when subscribed, emits the qualification of specified application.\n   *         It never completes and emits continuously when capabilites or intentions are registered or unregistered.\n   */\n  public isApplicationQualified$(appSymbolicName: string, qualifiedFor: {capabilityId: string}): Observable<boolean> {\n    const request: ApplicationQualifiedForCapabilityRequest = {appSymbolicName, capabilityId: qualifiedFor.capabilityId};\n    return Beans.get(MessageClient).request$<boolean>(PlatformTopics.IsApplicationQualifiedForCapability, request)\n      .pipe(mapToBody());\n  }\n}\n\nfunction mapToApplication(): OperatorFunction<ɵApplication[], Application[]> {\n  return mapArray(application => {\n    return {\n      ...application,\n      platformVersion: firstValueFrom(Beans.get(MessageClient).request$<string>(PlatformTopics.platformVersion(application.symbolicName)).pipe(mapToBody())),\n    };\n  });\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MessageEnvelope, MessagingChannel, MessagingTransport} from '../../ɵmessaging.model';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {MessageHeaders, TopicMessage} from '../../messaging.model';\n\n/**\n * Context lookup options header to control if values should be collected.\n *\n * @internal\n */\nexport const CONTEXT_LOOKUP_OPTIONS = 'ɵCONTEXT_LOOKUP_OPTIONS';\n\n/**\n * Instructs how to look up context values.\n *\n * @category Context\n */\nexport interface ContextLookupOptions {\n  /**\n   * Controls whether to collect the most specific context value or to collect all values in the context\n   * hierarchy that are associated with a context name. Defaults to `false` if not specified.\n   *\n   * If `true`, collects all values in the context hierarchy that are associated with the context name.\n   * Collected values are returned as an array in context-descending order, i.e., values of parent contexts\n   * come after values of child contexts.\n   *\n   * If `false`, the most specific context value is returned, i.e., the value of the closest context\n   * that has a value associated with that name.\n   */\n  collect?: boolean;\n}\n\n/**\n * Provides the API to lookup context related information.\n *\n * @internal\n */\nexport namespace Contexts {\n\n  /**\n   * Returns the request-reply topic to lookup the names of associated context values in the context tree.\n   */\n  export function contextTreeNamesLookupTopic(): string {\n    return 'contexttree/names';\n  }\n\n  /**\n   * Returns the request-reply topic to get notified when some context changes at any level in the context tree.\n   */\n  export function contextTreeChangeTopic(): string {\n    return 'contexttree/change';\n  }\n\n  /**\n   * Computes the request-reply topic to lookup a context value from embedded router outlet web content.\n   */\n  export function contextValueLookupTopic(name: string): string {\n    return `context/${name}`;\n  }\n\n  /**\n   * Creates a message envelope to request the context value associated with the given name.\n   *\n   * @param name - The name of the value to lookup.\n   * @param replyTo - The 'replyTo' topic where to send the reply.\n   * @param options - Options to control context lookup.\n   * @param values - The collected values passed to the parent context during a context lookup.\n   *                 Used to collect all values associated with the context name in the context hierarchy.\n   */\n  export function newContextValueLookupRequest(name: string, replyTo: string, options?: ContextLookupOptions, values?: any[]): MessageEnvelope<TopicMessage<any[]>> {\n    return {\n      transport: MessagingTransport.MicrofrontendToOutlet,\n      channel: MessagingChannel.Topic,\n      message: {\n        topic: contextValueLookupTopic(encodeURIComponent(name)), // Encode in order to support names containing forward slashes or starting with a colon.\n        body: values || [],\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.ReplyTo, replyTo)\n          .set(CONTEXT_LOOKUP_OPTIONS, options),\n      },\n    };\n  }\n\n  /**\n   * Creates a message envelope to lookup the names of associated context values in the context tree.\n   *\n   * @param replyTo - The 'replyTo' topic where to send the reply.\n   * @param names - The names of the current context to be combined with the names of the parent contexts.\n   */\n  export function newContextTreeNamesLookupRequest(replyTo: string, names?: Set<string>): MessageEnvelope<TopicMessage<Set<string>>> {\n    return {\n      transport: MessagingTransport.MicrofrontendToOutlet,\n      channel: MessagingChannel.Topic,\n      message: {\n        topic: Contexts.contextTreeNamesLookupTopic(),\n        body: names || new Set<string>(),\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.ReplyTo, replyTo),\n      },\n    };\n  }\n\n  /**\n   * Creates a message envelope to get notified when some context changes at any level in the context tree.\n   *\n   * @param replyTo - The 'replyTo' topic where to send the reply.\n   */\n  export function newContextTreeObserveRequest(replyTo: string): MessageEnvelope<TopicMessage<void>> {\n    return {\n      transport: MessagingTransport.MicrofrontendToOutlet,\n      channel: MessagingChannel.Topic,\n      message: {\n        topic: Contexts.contextTreeChangeTopic(),\n        headers: new Map()\n          .set(MessageHeaders.MessageId, UUID.randomUUID())\n          .set(MessageHeaders.ReplyTo, replyTo),\n      },\n    };\n  }\n\n  /**\n   * Event emitted when a context value changed.\n   */\n  export interface ContextTreeChangeEvent {\n    type: 'set' | 'remove';\n    name: string;\n    value?: any;\n  }\n\n  /**\n   * Event emitted by the root context when subscribed to it.\n   */\n  export const RootContextSubscribeEvent = 'RootContextSubscribeEvent';\n  export type RootContextSubscribeEventType = 'RootContextSubscribeEvent';\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, fromEvent, Observable, Subject} from 'rxjs';\nimport {filter, share, takeUntil} from 'rxjs/operators';\nimport {filterByChannel, filterByTopicChannel, filterByTransport, pluckMessage} from '../../operators';\nimport {MessageEnvelope, MessagingChannel, MessagingTransport} from '../../ɵmessaging.model';\nimport {TopicMatcher} from '../../topic-matcher.util';\nimport {MessageHeaders, ResponseStatusCodes, TopicMessage} from '../../messaging.model';\nimport {MessageClient, takeUntilUnsubscribe} from '../messaging/message-client';\nimport {CONTEXT_LOOKUP_OPTIONS, Contexts} from './context.model';\nimport {runSafe} from '../../safe-runner';\nimport {IS_PLATFORM_HOST} from '../../platform.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Provides a context to the {@link SciRouterOutletElement} allowing the outlet to associate values with that context.\n * For embedded outlet web content, it allows looking up context names and values.\n *\n * A context is a hierarchical key-value map which are linked together to form a tree structure. When a key is not found\n * in a context, the lookup is retried on the parent, repeating until either a value is found or the root of the tree has\n * been reached.\n *\n * @internal\n */\nexport class RouterOutletContextProvider {\n\n  private _microfrontendRequest$: Observable<MessageEvent<MessageEnvelope<TopicMessage>>>;\n\n  private _entries$ = new BehaviorSubject<Map<string, any>>(new Map());\n  private _entryChange$ = new Subject<Contexts.ContextTreeChangeEvent>();\n  private _outletDisconnect$ = new Subject<void>();\n\n  constructor(iframe: HTMLIFrameElement) {\n    // Listen for requests from embedded web content of the outlet.\n    this._microfrontendRequest$ = fromEvent<MessageEvent>(window, 'message')\n      .pipe(\n        filter(event => event.source === iframe.contentWindow),\n        filterByTransport(MessagingTransport.MicrofrontendToOutlet),\n        filterByChannel<TopicMessage>(MessagingChannel.Topic),\n        share(),\n      );\n  }\n\n  /**\n   * Sets a value to be associated with a given name in this context.\n   *\n   * @param name - Specifies the name to store a value for.\n   * @param value - Specifies the value to be stored. It can be any object which\n   *        is serializable with the structured clone algorithm.\n   */\n  public set(name: string, value: any): void {\n    this._entries$.next(new Map(this._entries$.getValue()).set(name, value));\n    this._entryChange$.next({name, value, type: 'set'});\n  }\n\n  /**\n   * Removes the given name and any corresponding value from this context.\n   *\n   * Removal does not affect parent contexts, so it is possible that a subsequent call to {@link ContextService#observe$} with the same name\n   * will return a non-null result, due to a value being stored in a parent context.\n   *\n   * @param  name - Specifies the name to remove.\n   * @return `true` if the value in the outlet context has been removed successfully; otherwise `false`.\n   */\n  public remove(name: string): boolean {\n    const entries = new Map(this._entries$.getValue());\n    if (entries.delete(name)) {\n      this._entries$.next(entries);\n      this._entryChange$.next({name, type: 'remove'});\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns an Observable that emits the values registered in this outlet. Values inherited from parent contexts are not returned.\n   * The Observable never completes, and emits when a context value is added or removed.\n   */\n  public get entries$(): Observable<Map<string, any>> {\n    return this._entries$;\n  }\n\n  /**\n   * Method invoked when the outlet is mounted to the DOM.\n   */\n  public onOutletMount(): void {\n    this.installContextValueLookupListener();\n    this.installContextTreeNamesLookupListener();\n    this.installContextTreeObserveListener();\n  }\n\n  /**\n   * Method invoked when the outlet is removed from the DOM.\n   */\n  public onOutletUnmount(): void {\n    this._outletDisconnect$.next();\n  }\n\n  /**\n   * Installs a listener to reply to context value lookup requests from embedded content.\n   * When a key is not found in this context, the lookup is passed on to the parent context.\n   */\n  private installContextValueLookupListener(): void {\n    this._microfrontendRequest$\n      .pipe(\n        filterByTopicChannel<any[]>(Contexts.contextValueLookupTopic(':name')),\n        pluckMessage(),\n        takeUntil(this._outletDisconnect$),\n      )\n      .subscribe((lookupRequest: TopicMessage<any[]>) => runSafe(() => {\n        const encodedName = new TopicMatcher(Contexts.contextValueLookupTopic(':name')).match(lookupRequest.topic).params!.get('name')!;\n\n        // The name has to be decoded here because it was encoded in `newContextValueLookupRequest` where the topic was created.\n        const name = decodeURIComponent(encodedName);\n        const replyTo = lookupRequest.headers.get(MessageHeaders.ReplyTo);\n        const options = lookupRequest.headers.get(CONTEXT_LOOKUP_OPTIONS);\n        const entries = this._entries$.getValue();\n\n        if (options?.collect) {\n          const collectedValues = lookupRequest.body || [];\n          if (entries.has(name) && entries.get(name) !== undefined) {\n            collectedValues.push(entries.get(name));\n          }\n\n          if (Beans.get(IS_PLATFORM_HOST)) {\n            // Reply with the collected context values.\n            Beans.get(MessageClient).publish(replyTo, collectedValues, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK)});\n          }\n          else {\n            // Pass on the lookup request to the parent context.\n            window.parent.postMessage(Contexts.newContextValueLookupRequest(name, replyTo, options, collectedValues), '*');\n          }\n        }\n        else {\n          if (entries.has(name) && entries.get(name) !== undefined) {\n            // Reply with the found context value.\n            Beans.get(MessageClient).publish(replyTo, entries.get(name), {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK)});\n          }\n          else if (Beans.get(IS_PLATFORM_HOST)) {\n            // No context value found; the root of the context tree has been reached; reply with `NOT_FOUND` status code.\n            Beans.get(MessageClient).publish(replyTo, undefined, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.NOT_FOUND)});\n          }\n          else {\n            // Pass on the lookup request to the parent context.\n            window.parent.postMessage(Contexts.newContextValueLookupRequest(name, replyTo, options), '*');\n          }\n        }\n      }));\n  }\n\n  /**\n   * Installs a listener to reply to context names lookup requests from embedded content.\n   *\n   * The context names are accumulated in the lookup request and passed on to the parent context.\n   * When the root context is reached, the request is finally answered with all collected context names.\n   */\n  private installContextTreeNamesLookupListener(): void {\n    this._microfrontendRequest$\n      .pipe(\n        filterByTopicChannel<Set<string>>(Contexts.contextTreeNamesLookupTopic()),\n        pluckMessage(),\n        takeUntil(this._outletDisconnect$),\n      )\n      .subscribe((lookupRequest: TopicMessage<Set<string>>) => runSafe(() => {\n        const replyTo = lookupRequest.headers.get(MessageHeaders.ReplyTo);\n        const entries = this._entries$.getValue();\n        const collectedNames = new Set<string>([...entries.keys(), ...(lookupRequest.body || [])]);\n        if (Beans.get(IS_PLATFORM_HOST)) {\n          // Answer the request when reaching the root of the context tree.\n          Beans.get(MessageClient).publish(replyTo, collectedNames, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK)});\n        }\n        else {\n          // Pass on the lookup request to the parent context.\n          window.parent.postMessage(Contexts.newContextTreeNamesLookupRequest(replyTo, collectedNames), '*');\n        }\n      }));\n  }\n\n  /**\n   * Installs a listener to publish a context change event when this context changes.\n   *\n   * For every request a replier is installed which emits when this context changes. It stops replying\n   * when the requestor unsubscribes. The request is also passed on to the parent context.\n   */\n  private installContextTreeObserveListener(): void {\n    this._microfrontendRequest$\n      .pipe(\n        filterByTopicChannel<void>(Contexts.contextTreeChangeTopic()),\n        pluckMessage(),\n        takeUntil(this._outletDisconnect$),\n      )\n      .subscribe((observeRequest: TopicMessage<void>) => runSafe(() => {\n        const replyTo = observeRequest.headers.get(MessageHeaders.ReplyTo);\n\n        this._entryChange$\n          .pipe(\n            takeUntilUnsubscribe(replyTo),\n            takeUntil(this._outletDisconnect$),\n          )\n          .subscribe((event: Contexts.ContextTreeChangeEvent) => { // eslint-disable-line rxjs/no-nested-subscribe\n            Beans.get(MessageClient).publish<Contexts.ContextTreeChangeEvent>(replyTo, event);\n          });\n\n        if (Beans.get(IS_PLATFORM_HOST)) {\n          // Notify that the subscriber subscribed to the root context.\n          Beans.get(MessageClient).publish<Contexts.RootContextSubscribeEventType>(replyTo, Contexts.RootContextSubscribeEvent);\n        }\n        else {\n          // Pass on the registration request to the parent context.\n          window.parent.postMessage(Contexts.newContextTreeObserveRequest(replyTo), '*');\n        }\n      }));\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {runSafe} from '../../safe-runner';\nimport {Navigation} from './metadata';\nimport {Urls} from '../../url.util';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {ɵWINDOW_TOP} from '../../ɵplatform.model';\n\n/**\n * Assigns a URL to the iframe of a {@link SciRouterOutletElement `<sci-router-outlet>`}.\n *\n * @category Routing\n */\nexport class RouterOutletUrlAssigner {\n\n  /**\n   * Assigns a URL to the iframe of a {@link SciRouterOutletElement `<sci-router-outlet>`}.\n   *\n   * @param iframe - Iframe for which to set the URL.\n   * @param currNavigation - Current navigation.\n   * @param prevNavigation - Previous navigation, if any.\n   */\n  public assign(iframe: HTMLIFrameElement, currNavigation: Navigation, prevNavigation: Navigation | null): void {\n    // Patch the URL to force Chrome to load the content of specified URL.\n    const patchedUrl = this.patchUrl(currNavigation.url, prevNavigation?.url);\n\n    if (currNavigation.pushStateToSessionHistoryStack) {\n      iframe.contentWindow!.location.assign(patchedUrl);\n    }\n    else {\n      iframe.contentWindow!.location.replace(patchedUrl);\n    }\n  }\n\n  /**\n   * Patches the URL to force Chrome to load the content of the given URL into an iframe.\n   *\n   * #### Problem:\n   * Chrome browser does not load the content of a nested iframe if already loaded a document from the same origin and path in a parent iframe.\n   * The problem does not occur if the URL contains query parameters. Also, the hash fragment of the URL does not matter.\n   *\n   * This problem could not be observed in Firefox and Edge.\n   *\n   * #### Motivation:\n   * If using hash-based routing, the microfrontends of an application are served under the same origin and path, and routing is based on the URL hash fragment only.\n   * This Chrome issue would prevent a microfrontend from embedding other microfrontends of its application.\n   *\n   * #### Fix:\n   * If the URL does not contain a query parameter, an arbitrary query parameter is appended to the URL to force Chrome to load the content.\n   * The name and value of the query param do not matter. However, it is crucial always to use the same param to allow the browser to cache the request.\n   *\n   * The only exception to appending a query param is when replacing an outlet's content with content from the same app. Then, the browser already loaded\n   * the application. Otherwise, if appending a query param, the application would load anew.\n   *\n   * #### Alternative fix:\n   * An alternative (but partial) fix would be to initialize the iframe with a `null` source. This fix is partial because only working when setting the initial URL\n   * of the iframe and not when changing it. Also, it has the drawback of temporarily loading the main entry point of the outlet host.\n   *\n   * @param currUrl - Specifies the URL to be patched.\n   * @param prevUrl - Specifies the previous URL, if any.\n   *\n   * @see https://stackoverflow.com/q/36985731\n   * @internal\n   */\n  public patchUrl(currUrl: string, prevUrl?: string): string {\n    const patchedUrl = runSafe(() => {\n      const prevURL = prevUrl ? Urls.newUrl(prevUrl) : undefined;\n      const currURL = Urls.newUrl(currUrl);\n\n      // Do not apply the fix for the \"about\" and \"blob\" protocol.\n      if (currURL.protocol === 'about:' || currURL.protocol === 'blob:') {\n        return currUrl;\n      }\n\n      // Do not apply the fix for top-level iframes.\n      if (window === Beans.get(ɵWINDOW_TOP)) {\n        return currUrl;\n      }\n\n      // Do not apply the fix if the URL already contains query params.\n      if (currURL.search) {\n        return currUrl;\n      }\n\n      // Do not apply the fix when navigating within the same application using hash-based routing.\n      if (prevURL?.origin === currURL.origin && prevURL?.pathname === currURL.pathname) {\n        return currUrl;\n      }\n\n      // Add an arbitrary but fixed query param to the URL.\n      const patchedURL = Urls.newUrl(currUrl);\n      patchedURL.searchParams.set('_', '');\n      return patchedURL.toString();\n    });\n\n    return patchedUrl ?? currUrl;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {Logger} from '../../logger';\n\n/**\n * Describes a user interaction with the keyboard.\n *\n * @internal\n */\nexport class Keystroke {\n\n  /**\n   * Represents this keystroke as a string with its parts separated by a dot.\n   */\n  public readonly parts: string;\n\n  /**\n   * Flags to control keystroke handling.\n   */\n  public flags?: KeystrokeFlags;\n\n  constructor(public readonly eventType: string, key: string, modifiers?: {control?: boolean; shift?: boolean; alt?: boolean; meta?: boolean}, flags?: KeystrokeFlags) {\n    const parts = [];\n    parts.push(eventType);\n    if (modifiers) {\n      modifiers.control && parts.push('control');\n      modifiers.alt && parts.push('alt');\n      modifiers.shift && parts.push('shift');\n      modifiers.meta && parts.push('meta');\n    }\n    parts.push(key.toLowerCase());\n    this.parts = parts.join('.');\n    this.flags = flags;\n  }\n\n  public withFlags(flags: KeystrokeFlags): this {\n    this.flags = flags;\n    return this;\n  }\n\n  /**\n   * Creates a {@link Keystroke} from the given keyboard event.\n   */\n  public static fromEvent(event: KeyboardEvent): Keystroke {\n    if (!event) {\n      throw Error('[KeystrokeParseError] Cannot create the keystroke from `null` or `undefined`.');\n    }\n    return new Keystroke(event.type, escapeKeyboardEventKey(event.key), {control: event.ctrlKey, shift: event.shiftKey, alt: event.altKey, meta: event.metaKey});\n  }\n\n  /**\n   * Parses the textual representation of a keystroke into a {@link Keystroke} object.\n   *\n   * keydown.control.alt.enter{preventDefault=true}\n   * |<--1->|<----2---->|<-3->|<--------4--------->|\n   *\n   * 1: Event type\n   * 2: Modifier part(s) (optional)\n   * 3. Key as defined in https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\n   *    Two keys are an exception to the value of the {@link KeyboardEvent#key} property: dot and space.\n   * 4. flags (optional)\n   */\n  public static fromString(value: string): Keystroke {\n    if (!value) {\n      throw Error('[KeystrokeParseError] Cannot parse the keystroke from \\'null\\' or \\'undefined\\'.');\n    }\n\n    const flags = parseFlags(value);\n    if (flags !== undefined) {\n      value = value.substring(0, value.indexOf('{'));\n    }\n\n    const parts = value.split('.');\n    if (parts.length < 2) {\n      throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Requires at least the event type and keyboard key, and optionally some modifiers. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n    }\n\n    const eventType = parts[0];\n    if (eventType !== 'keydown' && eventType !== 'keyup') {\n      throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Unsupported event type. Supported event types are: 'keydown' or 'keyup'. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n    }\n\n    const key = parts[parts.length - 1];\n    if (!key || new Set().add('alt').add('shift').add('control').add('meta').has(key.toLowerCase())) {\n      throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. The keyboard key must be the last part. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n    }\n\n    const modifiers = new Set(parts.slice(1, -1));\n    const keystroke = new Keystroke(eventType, key, {control: modifiers.delete('control'), shift: modifiers.delete('shift'), alt: modifiers.delete('alt'), meta: modifiers.delete('meta')}, flags);\n    if (modifiers.size > 0) {\n      throw Error(`[KeystrokeParseError] Cannot parse the keystroke '${value}'. Illegal modifier found. Supported modifiers are: 'alt', 'shift', 'control' or 'meta'. Examples: 'keydown.control.z', 'keydown.escape', 'keyup.enter', 'keydown.control.alt.enter', 'keydown.control.space'`);\n    }\n\n    return keystroke;\n  }\n}\n\nfunction escapeKeyboardEventKey(key: string): string {\n  switch (key) {\n    case '.':\n      return 'dot';\n    case ' ':\n      return 'space';\n    default:\n      return key;\n  }\n}\n\nfunction parseFlags(keystroke: string): KeystrokeFlags | undefined {\n  const flagsStr = keystroke.match(/{(?<flagsDictionary>.*)}/)?.groups!['flagsDictionary'] ?? null;\n  if (flagsStr === null) {\n    return undefined;\n  }\n  if (flagsStr === '') {\n    return {};\n  }\n\n  return flagsStr\n    .split(';')\n    .map(flag => flag.split('='))\n    .reduce((flags, [flagName, flagValue]) => {\n      switch (flagName) {\n        case 'preventDefault':\n          return {...flags, preventDefault: flagValue === 'true'};\n        default: {\n          Beans.get(Logger).warn(`[KeystrokeParseError] Ignore unkown flag '${keystroke}'. Supported flags are: 'preventDefault'.`);\n          return flags;\n        }\n      }\n    }, {} as KeystrokeFlags);\n}\n\n/**\n * Flags to control keystroke handling.\n *\n * @internal\n */\nexport interface KeystrokeFlags {\n  /**\n   * If set to `true`, the default action of the keystroke is prevented.\n   */\n  preventDefault?: boolean;\n}\n","import {Dictionary} from '@scion/toolkit/util';\n\n/**\n * Options to control outlet navigation.\n *\n * @category Routing\n */\nexport interface NavigationOptions {\n  /**\n   * Specifies the routing target. If not specifying an outlet and if navigating in the context of an outlet, that outlet will be used as the\n   * navigation target, or the {@link PRIMARY_OUTLET primary} outlet otherwise.\n   */\n  outlet?: string;\n  /**\n   * Instructs the router outlet to show a splash, such as a skeleton or loading indicator, until the microfrontend signals readiness.\n   * The splash is the markup between the opening and closing tags of the router outlet element.\n   *\n   * This flag is ignored when navigating by intent as specified by the microfrontend capability in {@link MicrofrontendCapability.properties.showSplash}.\n   *\n   * @see SciRouterOutletElement\n   * @see MicrofrontendPlatformClient.signalReady\n   */\n  showSplash?: boolean;\n  /**\n   * Specifies the base URL to resolve a relative url. If not specified, the current window location is used to resolve a relative path.\n   *\n   * Note that this property has no effect if navigating via intent.\n   */\n  relativeTo?: string;\n  /**\n   * Specifies the parameters that, if navigating via URL, are used to substitute named URL parameters or that are passed along with the intent\n   * if navigating via intent.\n   */\n  params?: Map<string, any> | Dictionary;\n  /**\n   * Instructs the router to push a state to the browser's session history stack, allowing the user to use the back button to navigate back in the outlet.\n   * By default, this behavior is disabled.\n   */\n  pushStateToSessionHistoryStack?: boolean;\n  /**\n   * Reference to the microfrontend capability when navigating via intent.\n   * Internal property used by the router outlet to determine if to ignore the `showSplash` instruction when navigating to the same microfrontend capability again.\n   * @ignore\n   */\n  ɵcapabilityId?: string;\n}\n\n/**\n * Routing message header to control if to push a state to the browser's session history stack.\n *\n * @internal\n */\nexport const PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER = 'ɵPUSH_STATE_TO_SESSION_HISTORY_STACK';\n\n/**\n * Routing message header to control if to show a splash until the microfrontend signals readiness.\n *\n * @internal\n */\nexport const SHOW_SPLASH_MESSAGE_HEADER = 'ɵSHOW_SPLASH';\n\n/**\n * Routing message header that contains the microfrontend capability when navigating via intent.\n *\n * @internal\n */\nexport const CAPABILITY_ID_MESSAGE_HEADER = 'ɵCAPABILITY_ID';\n\n/**\n * Represents a navigation.\n *\n * @category Routing\n */\nexport interface Navigation {\n  /**\n   * The URL where to navigate to.\n   */\n  url: string;\n  /**\n   * If `true`, adds a state to the browser's session history stack.\n   */\n  pushStateToSessionHistoryStack?: boolean;\n  /**\n   * If `true`, instructs the router outlet to show a splash, such as a skeleton or loading indicator,\n   * until the microfrontend signals readiness.\n   *\n   * @see SciRouterOutletElement\n   * @see MicrofrontendPlatformClient.signalReady\n   */\n  showSplash?: boolean;\n  /**\n   * The microfrontend capability when navigating via intent.\n   */\n  capabilityId?: string;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {RouterOutletContextProvider} from '../context/router-outlet-context-provider';\nimport {runSafe} from '../../safe-runner';\nimport {distinctUntilChanged, map, pairwise, skipWhile, startWith, switchMap, takeUntil, tap} from 'rxjs/operators';\nimport {RouterOutletUrlAssigner} from './router-outlet-url-assigner';\nimport {MessageClient} from '../messaging/message-client';\nimport {Defined} from '@scion/toolkit/util';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {mapToBody, TopicMessage} from '../../messaging.model';\nimport {Keystroke} from '../keyboard-event/keystroke';\nimport {PreferredSize} from '../preferred-size/preferred-size';\nimport {CAPABILITY_ID_MESSAGE_HEADER, Navigation, PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER, SHOW_SPLASH_MESSAGE_HEADER} from './metadata';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\nconst ELEMENT_NAME = 'sci-router-outlet';\nconst ATTR_NAME = 'name';\nconst ATTR_SCROLLABLE = 'scrollable';\nconst ATTR_KEYSTROKES = 'keystrokes';\nconst HTML_TEMPLATE = `\n  <style>\n    :host {\n      display: block;\n      overflow: hidden;\n      position: relative; /* positioning context for splash */\n    }\n\n    iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n      margin: 0;\n    }\n    \n    /* Ensure transparent router-outlet if empty.\n     *\n     * An iframe is transparent only if the embedded content has the same color scheme as the embedding document.\n     * An empty router-outlet loads the 'about:blank' page. This page has the user's preferred OS color scheme,\n     * which may be different from the application's color scheme, making the iframe opaque. Therefore, we hide\n     * the iframe to make the router-outlet transparent again.\n     *\n     * More information about iframe transparency:\n     * - https://github.com/w3c/csswg-drafts/issues/4772#issuecomment-591553929\n     * - https://fvsch.com/transparent-iframes\n     */\n    :host-context(.sci-empty) iframe {\n      display: none;\n    }\n\n    div[part=\"splash\"] {\n      position: absolute;\n      inset: 0;\n    }\n  </style>\n  <iframe src=\"about:blank\" scrolling=\"yes\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n  \n  <template id=\"splash\">\n    <div part=\"splash\" class=\"e2e-splash\">\n      <slot></slot>\n    </div>  \n  </template>\n`;\n\n/**\n * Web component that allows embedding web content using the {@link OutletRouter}. The content is displayed inside\n * an iframe to achieve the highest possible level of isolation between the microfrontends via a separate browsing context.\n *\n * To embed a microfrontend, place this custom HMTL element `<sci-router-outlet></sci-router-outlet>` in an HTML\n * template, give it a name via its `name` attribute and navigate via {@link OutletRouter} to instruct the outlet to\n * load the microfrontend.\n *\n * 1. Place the web component in an HTML template:\n * ```html\n * <sci-router-outlet name=\"detail\"></sci-router-outlet>\n * ```\n *\n * 2. Control the outlet's content:\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {outlet: 'detail'});\n * ```\n *\n * Outlets can be nested, allowing a microfrontend to embed another microfrontend. There is no limit to the number of\n * nested outlets. However, be aware that nested content is loaded cascaded, that is, only loaded once its parent content\n * finished loading.\n *\n * When adding the outlet to the DOM, the outlet displays the last URL routed for it, if any. When repeating routing for\n * an outlet, its content is replaced.\n *\n * ***\n *\n * ### Outlet Context\n * The router outlet allows associating contextual data, which then is available to embedded content at any nesting level.\n * Data must be serializable with the structured clone algorithm. Embedded content can look up contextual data using the\n * {@link ContextService}. Typically, contextual data is  used to provide microfrontends with information about their embedding\n * environment. Looking up contextual data requires the embedded microfrontend to be a registered micro application.\n *\n * Each outlet spans a new context. A context is like a `Map` with key-value entries. Contexts form a hierarchical tree structure.\n * When looking up a value and if the value is not found in the current context, the lookup is retried on the parent context,\n * repeating until either a value is found, or the root of the context tree has been reached.\n *\n * You can set contextual data as following:\n * ```ts\n *  const outlet: SciRouterOutletElement = document.querySelector('sci-router-outlet');\n *  outlet.setContextValue('key', 'value');\n * ```\n *\n * Embedded content can look up contextual data as following:\n * ```ts\n * Beans.get(ContextService).observe$('key').subscribe(value => {\n *   ...\n * });\n * ```\n *\n * ### Outlet size\n * The router outlet can adapt its size to the preferred size of its embedded content. The preferred size is set by the microfrontend embedded\n * in the router outlet, which, therefore, requires the embedded microfrontend to be connected to the platform.\n *\n * Embedded content can report its preferred size using the {@link PreferredSizeService}, causing the outlet to adapt its size.\n *\n * ### Keystroke Bubbling\n * The router outlet allows the registration of keystrokes, instructing embedded content at any nesting level to propagate corresponding keyboard events\n * to this outlet. The outlet dispatches keyboard events for registered keystrokes as synthetic keyboard events via its event dispatcher. They bubble up\n * the DOM tree like regular events. Propagated events are of the original type, meaning that when the user presses a key on the keyboard, a `keydown`\n * keyboard event is dispatched, or a `keyup` event when releasing a key, respectively. Keystroke bubbling requires the embedded microfrontend to be a\n * registered micro application.\n *\n * A keystroke is a `string` that has several parts, each separated with a dot. The first part specifies the event type (`keydown` or `keyup`), followed\n * by optional modifier part(s) (`alt`, `shift`, `control`, `meta`, or a combination thereof) and with the keyboard key as the last part. The key is a\n * case-insensitive value of the `KeyboardEvent.key` property. Two keys are an exception to the value of the `KeyboardEvent.key` property: `dot` and `space`.\n * For a complete list of valid key values, see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\n *\n * You can register keystrokes via the `keystrokes` attribute in the HTML template, or via the `keystrokes` property on the DOM\n * element. If setting keystrokes via the HTML template, multiple keystrokes are separated by a comma.\n *\n * If you want to prevent the default action of a keystroke, add the `preventDefault` flag. If not specifying the flag, the default action won't be prevented.\n *\n * HTML template:\n * ```html\n * <sci-router-outlet keystrokes=\"keydown.control.alt.enter{preventDefault=true},keydown.escape,keydown.control.space\"></sci-router-outlet>\n * ```\n *\n * Alternatively, you can register keystrokes on the DOM element as shown below.\n *\n * TypeScript:\n * ```ts\n *  const outlet: SciRouterOutletElement = document.querySelector('sci-router-outlet');\n *  outlet.keystrokes = [\n *      'keydown.control.alt.enter{preventDefault=true}',\n *      'keydown.escape',\n *      'keydown.control.space'\n *  ];\n * ```\n *\n * ### Scrollable Content\n * By default, page scrolling is enabled for the embedded content, displaying a scrollbar when it overflows. If disabled, overflowing content is clipped,\n * unless the embedded content uses a viewport, or reports its preferred size to the outlet.\n *\n * The below code snippet illustrates how to disable page scrolling for the embedded content.\n * ```html\n * <sci-router-outlet scrollable=\"false\"></sci-router-outlet>\n * ```\n *\n * ### Router Outlet Events\n *\n * The router outlet emits the following events as custom DOM events. You can attach an event listener declaratively in the HTML template using the `onevent`\n * handler syntax, or programmatically using the `addEventListener` method.\n *\n * - `activate`\n *   The `activate` custom DOM event is fired when a microfrontend is mounted. It contains the URL of the mounted microfrontend in its `details` property as `string`\n *   value. The microfrontend may not be fully loaded yet.\n * - `deactivate`\n *   The `deactivate` custom DOM event is fired when a microfrontend is about to be unmounted. It contains the URL of the unmounted microfrontend in its `details`\n *   property as `string` value.\n * - `focuswithin`\n *   The `focuswithin` custom DOM event is fired when the microfrontend loaded into the outlet, or any of its child microfrontends, has gained or lost focus.\n *   It contains the current focus-within state in its `details` property as a `boolean` value: `true` if focus was gained, or `false` if focus was lost.\n *   The event does not bubble up through the DOM. After gaining focus, the event is not triggered again until embedded content loses focus completely, i.e.,\n *   when focus does not remain in the embedded content at any nesting level. This event behaves like the `:focus-within` CSS pseudo-class but operates across iframe\n *   boundaries. For example, it can be useful when implementing overlays that close upon focus loss.\n *\n *   Note that SCION can only monitor microfrontends of registered micro apps that are connected to the platform.\n *\n * Usage:\n *\n * ```html\n * <sci-router-outlet onfocuswithin=\"onFocusWithin()\"></sci-router-outlet>\n * ```\n *\n * For an Angular application, it would look as follows:\n * ```html\n * <sci-router-outlet (focuswithin)=\"onFocusWithin($event)\"></sci-router-outlet>\n * ```\n *\n * ### Splash\n *\n * Loading and bootstrapping a microfrontend can take some time, at worst, only displaying content once initialized.\n *\n * To indicate the loading of a microfrontend, the navigator can instruct the router outlet to display a splash until the microfrontend signals readiness.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('path/to/microfrontend', {showSplash: true});\n * ```\n *\n * The splash is the markup between the opening and closing tags of the router outlet element.\n *\n * ```html\n * <sci-router-outlet>\n *   Loading...\n * </sci-router-outlet>\n * ```\n *\n * The splash is displayed until the embedded microfrontend signals readiness.\n *\n * ```ts\n * MicrofrontendPlatformClient.signalReady();\n * ```\n *\n * #### Layouting the Splash\n *\n * To lay out the content of the splash use the pseudo-element selector `::part(splash)`.\n *\n * Example of centering splash content in a CSS grid container:\n * ```css\n * sci-router-outlet::part(splash) {\n *   display: grid;\n *   place-content: center;\n * }\n * ```\n *\n * ### Web component\n * The outlet is registered as a custom element in the browser's custom element registry as defined by the Web Components standard.\n * See https://developer.mozilla.org/en-US/docs/Web/Web_Components for more information.\n *\n * ### Miscellaneous\n * If no content is routed for display in the router outlet, the CSS class `sci-empty` is added to the outlet. An outlet will not display content if\n * either there has not yet been any navigation for the outlet or the outlet content has been cleared.\n *\n * @see {@link OutletRouter}\n * @see {@link PreferredSizeService}\n * @see {@link ContextService}\n *\n * @category Routing\n */\nexport class SciRouterOutletElement extends HTMLElement {\n\n  private _shadowRoot: ShadowRoot;\n  private _disconnect$ = new Subject<void>();\n\n  private _uid = UUID.randomUUID();\n  private _iframe: HTMLIFrameElement;\n  private _outletName$: BehaviorSubject<string>;\n  private _contextProvider: RouterOutletContextProvider;\n  private _empty$ = new BehaviorSubject<boolean>(true);\n  private _splash: Splash;\n\n  /**\n   * Emits whether content is routed for display in this router outlet.\n   * Upon subscription, the Observable emits the current empty state, and then continuously emits when it changes. It never completes.\n   *\n   * An outlet does not display content if no navigation has taken place yet, or if the outlet content has been cleared.\n   */\n  public readonly empty$: Observable<boolean>;\n\n  constructor() {\n    super();\n    this._outletName$ = new BehaviorSubject<string>(PRIMARY_OUTLET);\n    this._shadowRoot = this.attachShadow({mode: 'open'});\n    this._shadowRoot.innerHTML = HTML_TEMPLATE.trim();\n    this._iframe = this._shadowRoot.querySelector('iframe')!;\n    this._contextProvider = new RouterOutletContextProvider(this._iframe);\n    this._splash = new Splash(this._shadowRoot, this._iframe);\n    this.empty$ = this._empty$.pipe(distinctUntilChanged());\n  }\n\n  /**\n   * Sets the name of this outlet.\n   *\n   * By giving the outlet a name, you can reference the outlet when navigating. The name is optional;\n   * if not set, it defaults to {@link PRIMARY_OUTLET primary}\n   */\n  public set name(name: string | undefined) {\n    if (name) {\n      this.setAttribute(ATTR_NAME, name);\n    }\n    else {\n      this.removeAttribute(ATTR_NAME);\n    }\n  }\n\n  /**\n   * Returns the name of this outlet.\n   */\n  public get name(): string | undefined {\n    return this.getAttribute(ATTR_NAME) ?? undefined;\n  }\n\n  /**\n   * Specifies whether to enable or disable native page scrolling in the embedded document.\n   *\n   * By default, page scrolling is enabled for the embedded content, displaying a scrollbar when it overflows.\n   * If disabled, overflowing content is clipped, unless the embedded content uses a viewport, or reports\n   * its preferred size to the outlet.\n   */\n  public set scrollable(scrollable: boolean) {\n    if (scrollable) {\n      this.setAttribute(ATTR_SCROLLABLE, 'true');\n    }\n    else {\n      this.removeAttribute(ATTR_SCROLLABLE);\n    }\n  }\n\n  /**\n   * Returns whether the embedded document is natively page scrollable.\n   */\n  public get scrollable(): boolean {\n    return this.getAttribute(ATTR_SCROLLABLE) === 'true';\n  }\n\n  /**\n   * Instructs embedded content at any nesting level to propagate keyboard events to this outlet. The outlet dispatches keyboard events for registered\n   * keystrokes as synthetic keyboard events via its event dispatcher. They bubble up the DOM tree like regular events. Propagated events are of the\n   * original type, meaning that when the user presses a key on the keyboard, a `keydown` keyboard event is dispatched, or a `keyup` event when releasing\n   * a key, respectively.\n   *\n   * @param keystrokes - A keystroke is specified as a string that has several parts, each separated with a dot. The first part specifies the event type\n   *                   (`keydown` or `keyup`), followed by optional modifier part(s) (`alt`, `shift`, `control`, `meta`, or a combination thereof) and\n   *                   with the keyboard key as the last part. The key is a case-insensitive value of the `KeyboardEvent#key` property. For a complete\n   *                   list of valid key values, see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values. Two keys are an\n   *                   exception to the value of the `KeyboardEvent#key` property: `dot` and `space`.\n   *                   <br>\n   *                   To prevent the default action of a keystroke, the `preventDefault` flag can be added.\n   *                   <br>\n   *                   Examples: `keydown.control.z{preventDefault=true}`, `keydown.escape`, `keyup.enter`, `keydown.control.alt.enter`, `keydown.control.space`.\n   */\n  public set keystrokes(keystrokes: string[]) {\n    if (keystrokes && keystrokes.length) {\n      this.setAttribute(ATTR_KEYSTROKES, KeystrokesAttributeUtil.join(keystrokes));\n    }\n    else {\n      this.removeAttribute(ATTR_KEYSTROKES);\n    }\n  }\n\n  /**\n   * Returns the keystrokes which to bubble across the iframe boundaries.\n   */\n  public get keystrokes(): string[] {\n    return KeystrokesAttributeUtil.split(this.getAttribute(ATTR_KEYSTROKES));\n  }\n\n  /**\n   * Makes contextual data available to embedded content. Embedded content can lookup contextual data using the {@link ContextService}.\n   * Contextual data must be serializable with the structured clone algorithm.\n   */\n  public setContextValue<T = any>(name: string, value: T): void {\n    this._contextProvider.set(name, value);\n  }\n\n  /**\n   * Removes data registered under the given key from the context.\n   *\n   * Removal does not affect parent contexts, so it is possible that a subsequent call to {@link ContextService.observe$} with the same name\n   * will return a non-null result, due to a value being stored in a parent context.\n   *\n   * @return `true` if removed the value from the outlet context; otherwise `false`.\n   */\n  public removeContextValue(name: string): boolean {\n    return this._contextProvider.remove(name);\n  }\n\n  /**\n   * Returns an Observable that emits the context of this outlet. Context values inherited from parent contexts are not returned.\n   * The Observable never completes, and emits when a context value is added to or removed from the outlet context.\n   */\n  public get contextValues$(): Observable<Map<string, any>> {\n    return this._contextProvider.entries$;\n  }\n\n  /**\n   * Resets the preferred size which may have been set by the embedded content.\n   */\n  public resetPreferredSize(): void {\n    Beans.get(MessageClient).publish(RouterOutlets.preferredSizeTopic(this._uid), null);\n  }\n\n  /**\n   * Returns the preferred size, if any, or `undefined` otherwise.\n   */\n  public get preferredSize(): PreferredSize | undefined {\n    const preferredSize: PreferredSize = {\n      minWidth: this.style.minWidth || undefined,\n      width: this.style.width || undefined,\n      maxWidth: this.style.maxWidth || undefined,\n      minHeight: this.style.minHeight || undefined,\n      height: this.style.height || undefined,\n      maxHeight: this.style.maxHeight || undefined,\n    };\n    if (Object.values(preferredSize).some(Boolean)) {\n      return preferredSize;\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the reference to the iframe of this outlet.\n   */\n  public get iframe(): HTMLIFrameElement {\n    return this._iframe;\n  }\n\n  private installOutletContext(): void {\n    this._outletName$\n      .pipe(takeUntil(this._disconnect$))\n      .subscribe((name: string) => {\n        const outletContext: OutletContext = {name: name, uid: this._uid};\n        this.iframe.name = name;\n        this.setContextValue(OUTLET_CONTEXT, outletContext);\n      });\n  }\n\n  private installOutletUrlListener(): void {\n    this._outletName$\n      .pipe(\n        switchMap(outlet => outletNavigate$(outlet).pipe(startWith(null! as Navigation))), // start with a `null` navigation in case no navigation took place yet\n        tap(navigation => this._empty$.next(!navigation || navigation.url === 'about:blank')),\n        pairwise(),\n        takeUntil(this._disconnect$),\n      )\n      .subscribe(([prevNavigation, currNavigation]: [Navigation | null, Navigation | null]) => runSafe(() => {\n        // Display splash if instructed by the navigator, but only if not navigating to the same capability, if any.\n        // Otherwise, the micro app would have to signal readiness not only after loading the microfrontend, but also when the parameters change.\n        // For example, the same microfrontend that displays data based on a path or query parameter.\n        if (!currNavigation?.capabilityId || currNavigation?.capabilityId !== prevNavigation?.capabilityId) {\n          currNavigation?.showSplash ? this._splash.attach() : this._splash.detach();\n        }\n        // Emit a page deactivate event, unless not having a previous navigation\n        prevNavigation && this.dispatchEvent(new CustomEvent('deactivate', {detail: prevNavigation.url}));\n        // Change the outlet URL\n        Beans.get(RouterOutletUrlAssigner).assign(this._iframe, currNavigation || {url: 'about:blank'}, prevNavigation);\n        // Emit a page activate event, unless not having a current navigation\n        currNavigation && this.dispatchEvent(new CustomEvent('activate', {detail: currNavigation.url}));\n      }));\n  }\n\n  private installPreferredSizeListener(): void {\n    Beans.get(MessageClient).observe$<PreferredSize>(RouterOutlets.preferredSizeTopic(this._uid))\n      .pipe(\n        mapToBody(),\n        takeUntil(this._disconnect$),\n      )\n      .subscribe((preferredSize: PreferredSize | undefined) => {\n        setStyle(this, {\n          'min-width': preferredSize?.minWidth ?? null,\n          'width': preferredSize?.width ?? null,\n          'max-width': preferredSize?.maxWidth ?? null,\n          'min-height': preferredSize?.minHeight ?? null,\n          'height': preferredSize?.height ?? null,\n          'max-height': preferredSize?.maxHeight ?? null,\n        });\n      });\n  }\n\n  /**\n   * Dispatches synthetic keyboard events that bubble up the DOM like regular events.\n   * Note that synthetic events have the `isTrusted` flag set to `false`, preventing them of triggering default actions.\n   *\n   * Therefore, if default actions should be prevented, it has to be done where the original event is listened to.\n   * @see KeyboardEventDispatcher\n   *\n   * For more information about trusted events\n   * @see https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events\n   * @see https://www.chromestatus.com/features#istrusted\n   */\n  private installKeyboardEventDispatcher(): void {\n    Beans.get(MessageClient).observe$<KeyboardEventInit>(RouterOutlets.keyboardEventTopic(this._uid, ':eventType'))\n      .pipe(takeUntil(this._disconnect$))\n      .subscribe((event: TopicMessage<KeyboardEventInit>) => {\n        const type = event.params!.get('eventType')!;\n        this.dispatchEvent(new KeyboardEvent(type, event.body));\n      });\n  }\n\n  private installFocusWithinEventDispatcher(): void {\n    Beans.get(MessageClient).observe$<boolean>(RouterOutlets.focusWithinOutletTopic(this._uid))\n      .pipe(\n        mapToBody(),\n        skipWhile(focusWithin => focusWithin === false), // wait until first receiving the focus, otherwise, it would emit immediately.\n        takeUntil(this._disconnect$),\n      )\n      .subscribe((focusWithin: boolean) => {\n        this.dispatchEvent(new CustomEvent('focuswithin', {\n          detail: focusWithin,\n          bubbles: false,\n          cancelable: false,\n        }));\n      });\n  }\n\n  private installHostElementDecorator(): void {\n    this._empty$\n      .pipe(takeUntil(this._disconnect$))\n      .subscribe((empty: boolean) => {\n        if (empty) {\n          this._shadowRoot.host.classList.add('sci-empty');\n        }\n        else {\n          this._shadowRoot.host.classList.remove('sci-empty');\n        }\n      });\n  }\n\n  /**\n   * Disposes the splash when receiving a readiness signal of the embedded microfrontend.\n   */\n  private installSplashDisposer(): void {\n    Beans.get(MessageClient).observe$(RouterOutlets.signalReadyTopic(this._uid))\n      .pipe(takeUntil(this._disconnect$))\n      .subscribe(() => {\n        this._splash.detach();\n      });\n  }\n\n  /**\n   * Lifecycle callback of the 'Custom element' Web Component standard.\n   *\n   * Invoked each time the custom element is appended into a document-connected element.\n   * This will happen each time the node is moved, and may happen before the element's contents have been fully parsed.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n   * @internal\n   */\n  public connectedCallback(): void {\n    this.installOutletUrlListener();\n    this.installOutletContext();\n    this.installPreferredSizeListener();\n    this.installFocusWithinEventDispatcher();\n    this.installKeyboardEventDispatcher();\n    this.installHostElementDecorator();\n    this.installSplashDisposer();\n    this._contextProvider.onOutletMount();\n  }\n\n  /**\n   * Lifecycle callback of the 'Custom element' Web Component standard.\n   *\n   * Invoked each time the custom element is disconnected from the document's DOM.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n   * @internal\n   */\n  public disconnectedCallback(): void {\n    this._disconnect$.next();\n    this._contextProvider.onOutletUnmount();\n  }\n\n  /**\n   * Lifecycle callback of the 'Custom element' Web Component standard.\n   *\n   * Specifies the attributes which to observe in {@link attributeChangedCallback} method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n   * @internal\n   */\n  public static observedAttributes = [ATTR_NAME, ATTR_SCROLLABLE, ATTR_KEYSTROKES]; // eslint-disable-line @typescript-eslint/member-ordering\n\n  /**\n   * Lifecycle callback of the 'Custom element' Web Component standard.\n   *\n   * Invoked each time one of the custom element's attributes is added, removed, or changed.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n   * @internal\n   */\n  public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\n    switch (name) {\n      case ATTR_NAME: {\n        this._outletName$.next(newValue || PRIMARY_OUTLET);\n        break;\n      }\n      case ATTR_SCROLLABLE: {\n        this._iframe.setAttribute('scrolling', coerceBooleanProperty(newValue) ? 'yes' : 'no');\n        break;\n      }\n      case ATTR_KEYSTROKES: {\n        KeystrokesAttributeUtil.split(oldValue).forEach(keystroke => this.removeContextValue(KEYSTROKE_CONTEXT_NAME_PREFIX + Keystroke.fromString(keystroke).parts));\n        KeystrokesAttributeUtil.split(newValue).forEach(keystrokeStr => {\n          const keystroke = Keystroke.fromString(keystrokeStr);\n          this.setContextValue(KEYSTROKE_CONTEXT_NAME_PREFIX + keystroke.parts, keystroke.flags);\n        });\n        break;\n      }\n    }\n  }\n\n  /**\n   * Defines this outlet as custom element in the browser custom element registry; has no effect if the element was already defined.\n   *\n   * @return A Promise that resolves once this custom element is defined.\n   * @internal\n   */\n  public static define(): Promise<void> {\n    if (customElements.get(ELEMENT_NAME)) {\n      return Promise.resolve();\n    }\n    else {\n      customElements.define(ELEMENT_NAME, SciRouterOutletElement);\n      return customElements.whenDefined(ELEMENT_NAME).then(() => Promise.resolve());\n    }\n  }\n}\n\n/**\n * Information about the outlet which embeds a microfrontend.\n *\n * This object can be obtained from the {@link ContextService} using the name {@link OUTLET_CONTEXT}.\n *\n * ```ts\n * Beans.get(ContextService).observe$(OUTLET_CONTEXT).subscribe((outletContext: OutletContext) => {\n *   ...\n * });\n * ```\n *\n * @see {@link OUTLET_CONTEXT}\n * @see {@link ContextService}\n * @category Context\n */\nexport interface OutletContext {\n  name: string;\n  uid: string;\n}\n\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n */\nfunction coerceBooleanProperty(value: any): boolean {\n  return value !== null && value !== undefined && `${value}` !== 'false';\n}\n\n/**\n * Key for obtaining the current outlet context using {@link ContextService}.\n *\n * @category Context\n * @see {@link OutletContext}\n * @see {@link ContextService}\n */\nexport const OUTLET_CONTEXT = 'ɵOUTLET';\n\n/**\n * Default name for an outlet if no explicit name is specified.\n * @category Routing\n */\nexport const PRIMARY_OUTLET = 'primary';\n\n/**\n * Defines constants for {@link SciRouterOutletElement} and {@link OutletRouter}.\n *\n * @internal\n */\nexport namespace RouterOutlets {\n\n  /**\n   * Computes the topic via which the URL for an outlet is exchanged as retained message.\n   */\n  export function urlTopic(outletName: string): string {\n    return `sci-router-outlets/${outletName}/url`;\n  }\n\n  /**\n   * Computes the topic via which a microfrontend signals readiness.\n   */\n  export function signalReadyTopic(outletUid: string): string {\n    return `sci-router-outlets/${outletUid}/ready`;\n  }\n\n  /**\n   * Computes the topic where to post keyboard events to be dispatched.\n   */\n  export function keyboardEventTopic(outletUid: string, eventType: string): string {\n    return `sci-router-outlets/${outletUid}/keyboard-events/${eventType}`;\n  }\n\n  /**\n   * Computes the topic to which the preferred outlet size can be published to.\n   */\n  export function preferredSizeTopic(outletUid: string): string {\n    return `sci-router-outlets/${outletUid}/preferred-size`;\n  }\n\n  /**\n   * Computes the topic to which the focus-within event can be published to.\n   */\n  export function focusWithinOutletTopic(outletUid: string): string {\n    return `sci-router-outlets/${outletUid}/focus-within`;\n  }\n}\n\nnamespace KeystrokesAttributeUtil {\n\n  const delimiter = ',';\n\n  export function split(attributeValue: string | null): string[] {\n    return attributeValue ? attributeValue.split(delimiter) : [];\n  }\n\n  export function join(keystrokes: string[]): string {\n    return keystrokes.join(delimiter);\n  }\n}\n\n/**\n * Keystroke bindings are prefixed with `keystroke:` when registered in the outlet context.\n *\n * @internal\n */\nexport const KEYSTROKE_CONTEXT_NAME_PREFIX = 'keystroke:';\n\n/**\n * Emits when a navigation for the given outlet occurs.\n */\nfunction outletNavigate$(outlet: string): Observable<Navigation> {\n  const outletNavigationTopic = RouterOutlets.urlTopic(outlet);\n  return Beans.get(MessageClient).observe$<string>(outletNavigationTopic)\n    .pipe(map((navigateMessage: TopicMessage<string>): Navigation => {\n      return {\n        url: navigateMessage.body || 'about:blank',\n        pushStateToSessionHistoryStack: Defined.orElse(navigateMessage.headers.get(PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER), false),\n        showSplash: Defined.orElse(navigateMessage.headers.get(SHOW_SPLASH_MESSAGE_HEADER), false),\n        capabilityId: navigateMessage.headers.get(CAPABILITY_ID_MESSAGE_HEADER),\n      };\n    }));\n}\n\n/**\n * Applies the given style(s) to the given element.\n *\n * Specify styles to be modified by passing a dictionary containing CSS property names (hyphen case).\n * To remove a style, set its value to `null`.\n */\nfunction setStyle(element: HTMLElement, style: {[style: string]: any | null}): void {\n  Object.keys(style).forEach(key => element.style.setProperty(key, style[key]));\n}\n\n/**\n * Represents the splash of the router outlet element.\n *\n * The splash is created from the template with the id \"splash\" contained in the shadow DOM and is placed over the iframe.\n * When displaying the splash, we hide the iframe so that the splash does not have to set the background color.\n */\nclass Splash {\n\n  private readonly _template: HTMLTemplateElement;\n  private _element: Element | undefined;\n\n  constructor(private readonly _shadowRoot: ShadowRoot, private readonly _iframeElement: HTMLIFrameElement) {\n    this._template = this._shadowRoot.querySelector('template#splash')!;\n  }\n\n  /**\n   * Attaches the splash if not already attached.\n   */\n  public attach(): void {\n    if (this._element) {\n      return;\n    }\n    const documentFragment = this._template.content.cloneNode(true) as DocumentFragment;\n    this._element = this._shadowRoot.appendChild(documentFragment.querySelector('div[part=\"splash\"]')!);\n    this._iframeElement.style.setProperty('visibility', 'hidden');\n  }\n\n  /**\n   * Detaches the splash if attached.\n   */\n  public detach(): void {\n    if (!this._element) {\n      return;\n    }\n    this._element.remove();\n    this._element = undefined;\n    this._iframeElement.style.removeProperty('visibility');\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {concat, firstValueFrom, NEVER, Observable, Observer, of, Subject, switchMap, TeardownLogic} from 'rxjs';\nimport {filter, first, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {MessageClient} from '../messaging/message-client';\nimport {mapToBody, MessageHeaders, ResponseStatusCodes} from '../../messaging.model';\nimport {ContextLookupOptions, Contexts} from './context.model';\nimport {IS_PLATFORM_HOST} from '../../platform.model';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {decorateObservable} from '../../observable-decorator';\n\n/**\n * Allows looking up contextual data set on a {@link SciRouterOutletElement `<sci-router-outlet>`} at any parent level.\n *\n * The platform allows associating contextual data with an outlet, which then is available in embedded content using {@link ContextService}.\n * Contextual data must be serializable with the structured clone algorithm.\n *\n * Each outlet spans a new context. A context is similar to a `Map`, but is linked to its parent outlet context, if any, thus forming a hierarchical tree structure.\n * When looking up a value and if the value is not found in the outlet context, the lookup is retried on the parent context, repeating until either a value\n * is found or the root of the context tree has been reached.\n *\n * The platform sets the following context values by default:\n *\n * | Key | Value type | Description |\n * |-----|------------|-------------|\n * | {@link OUTLET_CONTEXT ɵOUTLET} | {@link OutletContext} | Information about the outlet which embeds the microfrontend. |\n * | {@link ACTIVATION_CONTEXT ɵACTIVATION_CONTEXT} | {@link ActivationContext} | Information about the activation context if loaded by an activator. See {@link ActivatorCapability} for more information about activators. |\n *\n *\n * @category Context\n */\nexport class ContextService implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _contextTreeChange$ = new Subject<Contexts.ContextTreeChangeEvent>();\n  private _whenContextTreeChangeListenerInstalled: Promise<void>;\n\n  constructor() {\n    this._whenContextTreeChangeListenerInstalled = this.installContextTreeChangeListener(changeEvent => this._contextTreeChange$.next(changeEvent));\n  }\n\n  /**\n   * Observes the context value associated with the given name.\n   *\n   * The Observable emits the most specific value, i.e., the value of the closest context that has a value associated with that name.\n   * To collect all values in the context hierarchy associated with that name, set {@link ContextLookupOptions#collect} to `true`.\n   *\n   * If not finding a value associated with the given name in the current context, the lookup is retried on the parent context, repeating\n   * until either a value is found or the root of the context tree has been reached. If not finding a value in any context, the Observable\n   * emits `null`.\n   *\n   * @param  name - The name of the context value to observe.\n   * @param  options - Instructs how to look up the context value.\n   * @return An Observable that emits the value associated with the given name, or `null` if not finding a value.\n   *         Upon subscription, the Observable emits the currently associated value, and then continuously when it changes, at any level\n   *         in the context tree. It never completes.\n   */\n  public observe$<T>(name: string, options?: ContextLookupOptions & {collect: false}): Observable<T | null>;\n  /**\n   * Observes the context values associated with the given name.\n   *\n   * The Observable emits all associated values in the context tree as array in context-descending order,\n   * i.e., more specific context values precede others, in other words, values of child contexts precede values of parent contexts.\n   * If not finding a value in any context, the Observable emits an empty array.\n   *\n   * To only obtain the most specific value, i.e., the value of the closest context that has a value associated with that name,\n   * set {@link ContextLookupOptions#collect} to `false`.\n   *\n   * @param  name - The name of the context values to observe.\n   * @param  options - Instructs how to look up context values.\n   * @return An Observable that emits the values associated with the given name, or an empty array if not finding a value.\n   *         Upon subscription, the Observable emits currently associated values, and then continuously when they change.\n   *         It never completes. Collected values are emitted as array in context-descending order, i.e., more specific\n   *         context values precede others, in other words, values of child contexts precede values of parent contexts.\n   */\n  public observe$<T>(name: string, options: ContextLookupOptions & {collect: true}): Observable<T[]>;\n\n  public observe$<T>(name: string, options?: ContextLookupOptions): Observable<T | T[] | null>;\n  public observe$<T>(name: string, options?: ContextLookupOptions): Observable<T | T[] | null> {\n    if (Beans.get(IS_PLATFORM_HOST)) {\n      return concat(of(options?.collect ? [] : null), NEVER);\n    }\n\n    return this._contextTreeChange$\n      .pipe(\n        filter(event => event.name === name),\n        startWith(undefined as void),\n        switchMap(() => this.lookupContextValue$<T>(name, options)),\n        decorateObservable(),\n      );\n  }\n\n  /**\n   * Looks up the context value associated with the given name.\n   *\n   * The Promise resolves to the most specific value, i.e., the value of the closest context that has a value associated with that name.\n   * To collect all values in the context hierarchy associated with that name, set {@link ContextLookupOptions#collect} to `true`.\n   *\n   * If not finding a value associated with the given name in the current context, the lookup is retried on the parent context, repeating\n   * until either a value is found or the root of the context tree has been reached. If not finding a value in any context, the returned\n   * Promise resolves to `null`.\n   *\n   * @param  name - The name of the context value to look up.\n   * @param  options - Instructs how to look up the context value.\n   * @return A Promise that resolves to the value associated with the given name, or `null` if not finding a value.\n   */\n  public lookup<T>(name: string, options?: ContextLookupOptions & {collect: false}): Promise<T | null>;\n  /**\n   * Looks up context values associated with the given name.\n   *\n   * The Promise resolves to all associated values in the context tree as array in context-descending order,\n   * i.e., more specific context values precede others, in other words, values of child contexts precede values of parent contexts.\n   * If not finding a value in any context, the Promise resolves to an empty array.\n   *\n   * To only obtain the most specific value, i.e., the value of the closest context that has a value associated with that name,\n   * set {@link ContextLookupOptions#collect} to `false`.\n   *\n   * @param  name - The name of the context values to look up.\n   * @param  options - Instructs how to look up context values.\n   * @return A Promise that resolves to the values associated with the given name, or an empty array if not finding a value.\n   *         Collected values are sorted in context-descending order, i.e., more specific context values precede others, in\n   *         other words, values of child contexts precede values of parent contexts.\n   */\n  public lookup<T>(name: string, options: ContextLookupOptions & {collect: true}): Promise<T[]>;\n  public lookup<T>(name: string, options?: ContextLookupOptions): Promise<T | T[] | null>;\n  public lookup<T>(name: string, options?: ContextLookupOptions): Promise<T | T[] | null> {\n    return firstValueFrom(this.observe$<T>(name, options));\n  }\n\n  /**\n   * Checks if a context value is associated with the given name at any level in the context tree.\n   *\n   * @param name - The name of the context value to check if present.\n   * @return A Promise that resolves to `true` if a context value is associated with the given name, or that resolves to `false` otherwise.\n   */\n  public isPresent(name: string): Promise<boolean> {\n    return this.lookup(name).then(value => value !== null);\n  }\n\n  /**\n   * Observes the names of context values registered at any level in the context tree.\n   *\n   * @return An Observable that emits the names of context values registered at any level in the context tree.\n   *         Upon subscription, it emits the names of context values currently registered, and then it emits whenever\n   *         some value is registered or unregistered from a context. The Observable never completes.\n   */\n  public names$(): Observable<Set<string>> {\n    if (Beans.get(IS_PLATFORM_HOST)) {\n      return concat(of(new Set<string>()), NEVER);\n    }\n\n    return this._contextTreeChange$\n      .pipe(\n        startWith(undefined as void),\n        switchMap(() => this.lookupContextNames$()),\n        decorateObservable(),\n      );\n  }\n\n  /**\n   * Looks up the context tree for a value associated with the given name.\n   *\n   * @param  name - The name of the value to return.\n   * @param  options - Options to control context lookup.\n   * @return An Observable that emits the context value associated with the given key and then completes.\n   *         When the requested value is not found in a context, the Observable emits `null` and then completes.\n   */\n  private lookupContextValue$<T>(name: string, options?: ContextLookupOptions): Observable<T | T[] | null> {\n    return new Observable((observer: Observer<T | T[] | null>): TeardownLogic => {\n      const replyTo = UUID.randomUUID();\n      const unsubscribe$ = new Subject<void>();\n      const contextValueLookupRequest = Contexts.newContextValueLookupRequest(name, replyTo, options);\n\n      // Wait until the reply is received.\n      Beans.get(MessageClient).observe$<T | T[] | null | undefined>(replyTo)\n        .pipe(\n          take(1),\n          map(reply => reply.headers.get(MessageHeaders.Status) === ResponseStatusCodes.OK ? (reply.body ?? null) : null),\n          takeUntil(unsubscribe$),\n        )\n        .subscribe(observer);\n\n      // Send the request.\n      Promise.all([whenSubscribedToReplyTopic(replyTo), this._whenContextTreeChangeListenerInstalled])\n        .then(() => window.parent.postMessage(contextValueLookupRequest, '*'))\n        .catch(error => observer.error(error));\n\n      return (): void => unsubscribe$.next();\n    });\n  }\n\n  /**\n   * Looks up the context names of all values registered in the current and parent contexts.\n   *\n   * @return An Observable that emits the names of all values registered in the current and parent contexts and then completes.\n   */\n  private lookupContextNames$(): Observable<Set<string>> {\n    return new Observable((observer: Observer<Set<string>>): TeardownLogic => {\n      const replyTo = UUID.randomUUID();\n      const unsubscribe$ = new Subject<void>();\n      const contextNamesLookupRequest = Contexts.newContextTreeNamesLookupRequest(replyTo);\n\n      // Wait until the reply is received.\n      Beans.get(MessageClient).observe$<Set<string>>(replyTo)\n        .pipe(\n          take(1),\n          map(reply => reply.headers.get(MessageHeaders.Status) === ResponseStatusCodes.OK ? reply.body! : new Set<string>()),\n          takeUntil(unsubscribe$),\n        )\n        .subscribe(observer);\n\n      // Send the request.\n      Promise.all([whenSubscribedToReplyTopic(replyTo), this._whenContextTreeChangeListenerInstalled])\n        .then(() => window.parent.postMessage(contextNamesLookupRequest, '*'))\n        .catch(error => observer.error(error));\n      return (): void => unsubscribe$.next();\n    });\n  }\n\n  /**\n   * Installs a listener to get notified about context changes at any level in the context tree.\n   *\n   * @return A Promise that resolves when installed the listener.\n   */\n  private installContextTreeChangeListener(listener: (changeEvent: Contexts.ContextTreeChangeEvent) => void): Promise<void> {\n    const replyTo = UUID.randomUUID();\n    const contextObserveRequest = Contexts.newContextTreeObserveRequest(replyTo);\n\n    return new Promise<void>((resolve, reject) => {\n      // Receive change notifications.\n      Beans.get(MessageClient).observe$<Contexts.ContextTreeChangeEvent | Contexts.RootContextSubscribeEventType>(replyTo)\n        .pipe(\n          mapToBody(),\n          takeUntil(this._destroy$),\n        )\n        .subscribe({\n          next: (event: Contexts.ContextTreeChangeEvent | Contexts.RootContextSubscribeEventType) => {\n            if (event === Contexts.RootContextSubscribeEvent) {\n              resolve(); // resolve the promise as subscribed to all parent contexts.\n            }\n            else {\n              listener(event);\n            }\n          },\n          error: reject,\n        });\n\n      // Send the observe request.\n      whenSubscribedToReplyTopic(replyTo)\n        .then(() => window.parent.postMessage(contextObserveRequest, '*'))\n        .catch(error => reject(error));\n    });\n  }\n\n  /** @ignore */\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Resolves when subscribed to the given reply topic.\n */\nfunction whenSubscribedToReplyTopic(topic: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    Beans.get(MessageClient).subscriberCount$(topic)\n      .pipe(first(count => count === 1))\n      .subscribe({\n        error: reject,\n        complete: resolve,\n      });\n  });\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Urls} from '../../url.util';\n\n/**\n * Used by {@link OutletRouter} to convert relative paths to absolute paths.\n *\n * Replace this bean to use a different relative path resolution strategy.\n *\n * @see {@link OutletRouter}\n * @category Routing\n */\nexport class RelativePathResolver {\n\n  /**\n   * Converts the given relative path into a navigable URL with relative navigational symbols like `/`, `./`, or `../` resolved.\n   *\n   * @param  path - Specifies the path which to convert into an absolute path.\n   * @param  options - Specifies to which url the given path is relative to.\n   * @return the absolute path.\n   */\n  public resolve(path: string, options: {relativeTo: string}): string {\n    const relativeTo = Urls.newUrl(options.relativeTo);\n\n    // Check if hash-based routing is used\n    if (relativeTo.hash?.startsWith('#/')) {\n      // Apply navigational symbols only to the path of the hash-based route, and not to the context path before the hash, if any.\n      // For that reason, we temporarily remove the context path when constructing the URL.\n      const {pathname, search, hash} = Urls.newUrl(path, `${relativeTo.origin}${relativeTo.hash.substring(1)}`);\n      return relativeTo.origin + relativeTo.pathname + '#' + pathname + search + hash;\n    }\n    else {\n      return Urls.newUrl(path, options.relativeTo).toString();\n    }\n  }\n}\n\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Observable, Subscription} from 'rxjs';\nimport {Intent, IntentMessage, TopicMessage} from '../../messaging.model';\nimport {Qualifier} from '../../platform.model';\nimport {PublishOptions, RequestOptions} from './publish-options';\n\n/**\n * Allows sending and receiving intents between microfrontends across origins.\n * This client is part of the Intention API of the SCION Microfrontend Platform.\n *\n * Intent-based messaging enables controlled collaboration between micro applications, a mechanism known from Android development\n * where an application can start an activity via an intent (such as sending an email).\n *\n * Like topic-based communication, intent-based communication implements the pub/sub (publish/subscribe) messaging pattern, but is,\n * in contrast, more restrictive when sending messages. Sending messages is also referred to as issuing intents. It requires the sending\n * application to declare an intention in its manifest. Intents are received only by applications that provide a fulfilling capability.\n * If no application provides a fulfilling capability, the platform rejects the intent.\n *\n * The communication is built on top of the native `postMessage` mechanism. The host app acts as message broker.\n *\n * #### Intent Addressing\n * In intent-based communication, the destination are capabilities, formulated in an abstract way, consisting of a a type, and optionally\n * a qualifier. The type categorizes a capability in terms of its functional semantics. A capability may also define a qualifier to\n * differentiate the different capabilities of the same type. The type is a string literal and the qualifier a dictionary of key-value pairs.\n *\n * ### Retained Intents\n * You can mark an intent as \"retained\" for helping newly subscribed clients to get the last intent published for a capability immediately upon\n * subscription. The broker stores one retained intent per capability, i.e., a later sent retained intent will replace a previously sent retained\n * intent. To delete a retained intent, send a retained intent without payload to the same destination.\n *\n * ### Retained Request\n * Unlike retained intents, retained requests are not replaced by later retained requests/intents and remain in the broker until the requestor unsubscribes.\n *\n * ### Request-Response Messaging\n * Sometimes it is useful to initiate a request-response communication to wait for a response. Unlike with fire-and-forget intents, a temporary\n * inbox is created for the intent issuer to receive replies.\n *\n * @see {@link IntentMessage}\n * @see {@link Intent}\n * @see {@link MessageHeaders}\n *\n * @category Messaging\n * @category Intention API\n */\nexport abstract class IntentClient {\n\n  /**\n   * Sends an intent.\n   *\n   * A micro application can send intents for intentions declared in its manifest. The platform transports the intent to micro applications\n   * that provide a fulfilling capability. Along with the intent, the application can pass transfer data, either as payload, message headers\n   * or parameters. Passed data must be serializable with the Structured Clone Algorithm.\n   *\n   * A micro application is implicitly qualified to interact with capabilities that it provides; thus, it must not declare an intention.\n   *\n   * An intent can be marked as \"retained\" by setting the {@link PublishOptions.retain} flag to `true`. It instructs the broker to store this intent and\n   * deliver it to new subscribers, even if they subscribe after the intent has been published. The broker stores one retained intent per capability. To\n   * delete a retained intent, send a retained intent without payload. Deletion intents are not transported to subscribers.\n   *\n   * @param  intent - Describes the intent. The qualifier, if any, must be exact, thus not contain wildcards.\n   * @param  body - Specifies optional transfer data to be carried along with the intent.\n   *         It can be any object which is serializable with the structured clone algorithm.\n   * @param  options - Controls how to issue the intent and allows setting message headers.\n   * @return A Promise that resolves when dispatched the intent, or that rejects if the intent could not be dispatched,\n   *         e.g., if missing the intention declaration, or because no application is registered to handle the intent.\n   */\n  public abstract publish<T = any>(intent: Intent, body?: T, options?: PublishOptions): Promise<void>;\n\n  /**\n   * Sends an intent and receives one or more replies.\n   *\n   * A micro application can send intents for intentions declared in its manifest. The platform transports the intent to micro applications\n   * that provide a fulfilling capability. Along with the intent, the application can pass transfer data, either as payload, message headers\n   * or parameters. Passed data must be serializable with the Structured Clone Algorithm.\n   *\n   * A micro application is implicitly qualified to interact with capabilities that it provides; thus, it must not declare an intention.\n   *\n   * A request can be marked as \"retained\" by setting the {@link RequestOptions.retain} flag to `true`. It instructs the broker to store this request and\n   * deliver it to new subscribers, even if they subscribe after the request has been sent. Retained requests are not replaced by later retained requests/\n   * intents and remain in the broker until the requestor unsubscribes.\n   *\n   * If not marking the request as \"retained\", at least one subscriber must be subscribed to the intent. Otherwise, the request is rejected.\n   *\n   * @param  intent - Describes the intent. The qualifier, if any, must be exact, thus not contain wildcards.\n   * @param  body - Specifies optional transfer data to be carried along with the intent.\n   *         It can be any object which is serializable with the structured clone algorithm.\n   * @param  options - Controls how to send the request and allows setting request headers.\n   * @return An Observable that emits when receiving a reply. It never completes unless the replier sets the status code {@link ResponseStatusCodes.TERMINAL}\n   *         in the {@link MessageHeaders.Status} message header. Then, the Observable completes immediately after emitted the reply.\n   *         The Observable errors if the request could not be dispatched. It will also error if the replier sets a status code greater than or equal to 400, e.g., {@link ResponseStatusCodes.ERROR}.\n   */\n  public abstract request$<T>(intent: Intent, body?: any, options?: RequestOptions): Observable<TopicMessage<T>>;\n\n  /**\n   * Receives an intent when some micro application wants to collaborate with this micro application.\n   *\n   * Intents are typically subscribed to in an activator. Refer to {@link ActivatorCapability} for more information.\n   *\n   * The micro application receives only intents for which it provides a fulfilling capability.\n   * You can filter received intents by passing a selector. The selector supports the use of wildcards.\n   *\n   * If the received intent has the {@link MessageHeaders.ReplyTo} header field set, the publisher expects the receiver to send one or more\n   * replies to that {@link MessageHeaders.ReplyTo ReplyTo} topic. If streaming responses, you can use the {@link takeUntilUnsubscribe}\n   * operator to stop replying when the requestor unsubscribes.\n   *\n   * ```typescript\n   *  const selector: IntentSelector = {\n   *    type: 'temperature',\n   *    qualifier: {room: 'kitchen'},\n   *  };\n   *\n   *  Beans.get(IntentClient).observe$(selector).subscribe((request: IntentMessage) => {\n   *    const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n   *    sensor$\n   *      .pipe(takeUntilUnsubscribe(replyTo))\n   *      .subscribe(temperature => {\n   *        Beans.get(MessageClient).publish(replyTo, `${temperature}°C`);\n   *      });\n   *  });\n   * ```\n   *\n   * @param  selector - Allows filtering intents. Note that the passed filter is only a filter for intents the application is qualified for, i.e., provides a fulfilling capability visible to the sender.\n   *         In the qualifier of the filter, you can use the asterisk wildcard character (`*`) to match multiple intents simultaneously.\n   *         - Asterisk wildcard character (*)\n   *           Matches intents with such a qualifier property no matter of its value (except `null` or `undefined`). Use it like this: `{property: '*'}`.\n   *         - Partial wildcard (**)\n   *           Matches intents even if having additional properties. Use it like this: `{'*': '*'}`.\n   *\n   * @return An Observable that emits received intents. It never completes.\n   */\n  public abstract observe$<T>(selector?: IntentSelector): Observable<IntentMessage<T>>;\n\n  /**\n   * Convenience API for handling intents.\n   *\n   * Unlike `observe$`, intents are passed to a callback function rather than emitted from an Observable. Response(s) can be returned directly\n   * from the callback. It supports error propagation and request termination. Using this method over `observe$` significantly reduces the code\n   * required to respond to requests.\n   *\n   * For each intent received, the specified callback function is called. When used in request-response communication,\n   * the callback function can return the response either directly or in the form of a Promise or Observable. Returning a Promise\n   * allows the response to be computed asynchronously, and an Observable allows to return one or more responses, e.g., for\n   * streaming data.\n   * If the callback function returns no value (void), returns `undefined`, or returns a Promise that resolves to `undefined`, communication is terminated\n   * immediately without a response. If the callback returns an Observable, all its emissions are transported to the requestor and communication is not\n   * terminated until the Observable completes. Termination of communication always completes the requestor's Observable.\n   * If the callback throws an error, or the returned Promise or Observable errors, the error is\n   * transported to the requestor, erroring the requestor's Observable.\n   *\n   * @param  selector - Allows filtering intents.\n   *         For more information, see the API description of {@link observe$}.\n   * @param  callback - Specifies the callback to be called for each intent. When used in request-response communication,\n   *         the callback function can return the response either directly or in the form of a Promise or Observable. If returning\n   *         a response in fire-and-forget communication, it is ignored. Throwing an error in the callback does not unregister the callback.\n   * @return Subscription to unregister the callback. Calling {@link rxjs!Subscription.unsubscribe Subscription.unsubscribe} will complete the Observable of all\n   *         requestors, if any.\n   */\n  public abstract onIntent<IN = any, OUT = any>(selector: IntentSelector, callback: (intentMessage: IntentMessage<IN>) => Observable<OUT> | Promise<OUT> | OUT | void): Subscription;\n}\n\n/**\n * Allows filtering intents.\n *\n * @category Messaging\n * @category Intention API\n */\nexport interface IntentSelector {\n  /**\n   * If specified, filters intents of the given type.\n   */\n  type?: string;\n  /**\n   * If specified, filters intents matching the given qualifier. You can use the asterisk wildcard (`*`) to match multiple intents.\n   * - Asterisk wildcard character (*)\n   *   Matches intents with such a qualifier property no matter of its value (except `null` or `undefined`). Use it like this: `{property: '*'}`.\n   * - Partial wildcard (**)\n   *   Matches intents even if having additional properties. Use it like this: `{'*': '*'}`.\n   */\n  qualifier?: Qualifier;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MessageClient} from '../messaging/message-client';\nimport {OUTLET_CONTEXT, OutletContext, PRIMARY_OUTLET, RouterOutlets} from './router-outlet.element';\nimport {ContextService} from '../context/context-service';\nimport {Urls} from '../../url.util';\nimport {RelativePathResolver} from './relative-path-resolver';\nimport {Maps} from '@scion/toolkit/util';\nimport {SHOW_SPLASH_MESSAGE_HEADER, NavigationOptions, PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER, CAPABILITY_ID_MESSAGE_HEADER} from './metadata';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {Intent, mapToBody, RequestError} from '../../messaging.model';\nimport {lastValueFrom} from 'rxjs';\nimport {IntentClient} from '../messaging/intent-client';\nimport {ACTIVATION_CONTEXT, PlatformCapabilityTypes, Qualifier} from '../../platform.model';\n\n/**\n * Allows navigating to a web page or microfrontend in a {@link SciRouterOutletElement `<sci-router-outlet>`} element.\n *\n * In SCION Microfrontend Platform, routing means instructing a `<sci-router-outlet>` to display the content of a URL. Routing works\n * across microfrontend and micro application boundaries, allowing the URL of an outlet to be set from anywhere in the application. The\n * web content displayed in an outlet can be any HTML document that has not set the HTTP header X-Frame-Options. Routing is also referred\n * to as navigating.\n *\n * The router supports multiple outlets in the same application to co-exist. By giving an outlet a name, you can reference it as the\n * routing target. If not naming an outlet, its name defaults to {@link PRIMARY_OUTLET primary}. If multiple outlets have the same name,\n * they all show the same content. If routing in the context of a router outlet, that is inside a microfrontend, and not specifying a\n * routing target, the content of the current outlet is replaced.\n *\n * An outlet does not necessarily have to exist at the time of routing. When adding the outlet to the DOM, the outlet displays the last URL\n * routed for it. When repeating routing for an outlet, its content is replaced.\n *\n * A router outlet is defined as follows. If no navigation has been performed for the outlet yet, then its content is empty.\n *\n *  ```html\n * <sci-router-outlet name=\"aside\"></sci-router-outlet>\n * ```\n *\n * ### Navigation via URL\n * The URL of the page to be loaded into the router outlet is passed to the router, as follows:\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {outlet: 'aside'});\n * ```\n *\n * #### Relative URL Navigation\n * The router allows to use both absolute and relative paths. A relative path begins with a navigational symbol `/`, `./`, or `../`. By default,\n * relative navigation is relative to the current window location of the navigating application, unless specifying a base path for the navigation.\n *\n * ```ts\n * // Navigation relative to the root path segment\n * Beans.get(OutletRouter).navigate('/products/:id', {outlet: PRIMARY_OUTLET});\n *\n * // Navigation relative to the parent path segment\n * Beans.get(OutletRouter).navigate('../products/:id', {outlet: PRIMARY_OUTLET});\n * ```\n *\n * #### Named URL Parameters\n * The URL being passed to the router can contain named parameters which the router replaces with values of the provided params object.\n * A named parameter begins with a colon (`:`) and is allowed in path segments, query parameters, matrix parameters and the fragment part,\n * e.g., `product/:id` or `product;id=:id` or `products?id=:id`.\n *\n * ### Navigating via Intent\n * As an alternative to navigating directly to a URL, the router supports navigation to a microfrontend capability via an intent.\n * We refer to this as intent-based routing.\n *\n * We recommend using intent-based routing over url-based routing, especially for cross-application navigations, since the navigation flows\n * are explicit, i.e., declared in the manifest, and to keep the microfrontend URLs an implementation detail of the micro applications that\n * provide the microfrontends.\n *\n * Note that if the microfrontend is provided by another micro app, the navigating app must manifest an intention. Also, the navigating\n * app can only navigate to public microfrontend capabilities.\n *\n * The following code snippet illustrates how to display the _product_ microfrontend in the \"aside\" outlet. Note that you only need to pass\n * the qualifier of the microfrontend capability and not its type. The capability type, which is always `microfrontend`, is implicitly set\n * by the router.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate({entity: 'product'}, {\n *   outlet: 'aside',\n *   params: {id: 123},\n * });\n * ```\n *\n * Applications can provide microfrontend capabilities through their manifest. A microfrontend can be either application private or exposed to\n * other micro applications. The platform requires all microfrontend capabilities to be of type `microfrontend`. A particular microfrontend can\n * be identified using its qualifier.\n *\n * ```json\n * {\n *   \"type\": \"microfrontend\",\n *   \"qualifier\": {\n *     \"entity\": \"product\"\n *   },\n *   \"description\": \"Displays a product.\",\n *   \"params\": [\n *     {\"name\": \"id\", \"required\": true}\n *   ],\n *   \"private\": false,\n *   \"properties\": {\n *     \"path\": \"product/:id\",\n *   }\n * }\n * ```\n *\n * Note that the providing micro application does not need to install an intent handler for its microfrontend capabilities. The platform intercepts\n * microfrontend intents and performs the navigation.\n *\n * ### Persistent Navigation\n * Persistent navigation refers to the mechanism for restoring the navigational state after an application reload.\n *\n * The router does not provide an implementation for persistent navigation out-of-the-box, mostly because many persistence strategies are imaginable.\n * For example, the navigational state could be added to the top-level URL, stored in local storage, or persisted in the backend.\n * However, you can easily implement persistent navigation yourself. The router publishes navigations to the topic `sci-router-outlets/:outlet/url`;\n * thus, they can be captured and persisted. When starting the application, you can then replay persisted navigations using the router.\n *\n * ### Unloading Outlet Content\n * To unload an outlet’s content, use null as the URL when routing, as follows:\n *\n * ```ts\n * Beans.get(OutletRouter).navigate(null, {outlet: 'aside'});\n * ```\n *\n * ### Browsing History and Session History\n * Routing does not add an entry to the browsing history, and, by default, not push a navigational state to the browser’s session history stack.\n *\n * You can instruct the router to add a navigational state to the browser’s session history stack, allowing the user to use the back button of the browser to\n * navigate back in an outlet.\n *\n * ```ts\n * Beans.get(OutletRouter).navigate('https://micro-frontends.org', {\n *   outlet: 'aside',\n *   pushStateToSessionHistoryStack: true,\n * });\n * ```\n *\n * @see {@link SciRouterOutletElement}\n *\n * @category Routing\n */\nexport class OutletRouter {\n\n  /**\n   * Navigates to the passed URL.\n   *\n   * If not specifying an outlet and if navigating in the context of an outlet, that outlet will be used as the navigation target,\n   * or the {@link PRIMARY_OUTLET primary} outlet otherwise.\n   *\n   * @param  url - Specifies the URL of the page to be loaded into the router outlet. To clear the outlet, pass `null` as the URL.\n   *         The URL allows the use of navigational symbols and named parameters. A named parameter begins with a colon (`:`)\n   *         and is allowed in path segments, query parameters, matrix parameters and the fragment part. Named parameters\n   *         are replaced with values passed via {@link NavigationOptions#params}. Named query and matrix parameters without\n   *         a replacement are removed.\n   *         Examples:\n   *         - `product/:id` // named path parameter\n   *         - `product;id=:id` // named matrix parameter\n   *         - `products?id=:id` // named query parameter\n   * @param  options - Instructs the router how to navigate, for example, you can specify the router outlet or pass named parameter values for substitution.\n   * @return Promise that resolves when navigated, or that rejects otherwise.\n   */\n  public navigate(url: string | null, options?: NavigationOptions): Promise<void>;\n  /**\n   * Navigates to the microfrontend provided as {@link MicrofrontendCapability} matching the passed qualifier.\n   *\n   * We recommend using intent-based routing over url-based routing, especially for cross-application navigations, since the navigation flows are\n   * explicit, i.e., declared in the manifest, and to keep the microfrontend URLs an implementation detail of the micro applications that provide\n   * the microfrontends.\n   *\n   * If the microfrontend is provided by another micro app, the navigating app must manifest an intention. Also, the navigating app can only navigate\n   * to public microfrontend capabilities.\n   *\n   * If not specifying an outlet and if navigating in the context of an outlet, that outlet will be used as the navigation target,\n   * or the {@link PRIMARY_OUTLET primary} outlet otherwise.\n   *\n   * @param  qualifier - Qualifies the microfrontend which to load into the outlet.\n   * @param  options - Instructs the router how to navigate, for example, you can specify the router outlet or pass intent parameters.\n   * @return Promise that resolves when navigated, or that rejects otherwise.\n   */\n  public navigate(qualifier: Qualifier, options?: NavigationOptions): Promise<void>;\n\n  public async navigate(target: string | Qualifier | null, options?: NavigationOptions): Promise<void> {\n    if (!target || typeof target === 'string') {\n      await this.navigateByUrl(target as string, options);\n    }\n    else {\n      await this.navigateByIntent(target, options);\n    }\n  }\n\n  /**\n   * Navigates to specified URL.\n   */\n  private async navigateByUrl(url: string | null, options?: NavigationOptions): Promise<void> {\n    const outlet = options?.outlet || await this.resolveContextualOutlet() || PRIMARY_OUTLET;\n    const outletUrlTopic = RouterOutlets.urlTopic(outlet);\n    const navigationUrl = this.computeNavigationUrl(url, options);\n\n    await Beans.get(MessageClient).publish(outletUrlTopic, navigationUrl, {\n      retain: true,\n      headers: new Map<string, any>()\n        .set(PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER, options?.pushStateToSessionHistoryStack ?? false)\n        .set(SHOW_SPLASH_MESSAGE_HEADER, options?.showSplash ?? false)\n        .set(CAPABILITY_ID_MESSAGE_HEADER, options?.ɵcapabilityId),\n    });\n\n    // Clear retained navigation message in case of a `null` URL navigation.\n    if (url === null) {\n      await Beans.get(MessageClient).publish(outletUrlTopic, undefined, {retain: true});\n    }\n  }\n\n  /**\n   * Navigates to a microfrontend available as {@link MicrofrontendCapability} matching the passed qualifier.\n   */\n  private async navigateByIntent(qualifier: Qualifier, options?: NavigationOptions): Promise<void> {\n    if (options?.relativeTo) {\n      throw Error('[OutletRouterError][UnsupportedOptionError] Unsupported navigation option \"relativeTo\". This option is not supported in intent-based routing.');\n    }\n\n    const contextualOutlet = await this.resolveContextualOutlet();\n    const intent: Intent = {type: PlatformCapabilityTypes.Microfrontend, qualifier, params: Maps.coerce(options?.params)};\n    const navigate$ = Beans.get(IntentClient).request$<void>(intent, options, {headers: new Map().set(ROUTING_CONTEXT_MESSAGE_HEADER, {[ROUTING_CONTEXT_OUTLET]: contextualOutlet})});\n    try {\n      await lastValueFrom(navigate$.pipe(mapToBody()));\n    }\n    catch (error) {\n      throw (error instanceof RequestError ? error.message : error);\n    }\n  }\n\n  private computeNavigationUrl(urlPattern: string | null | undefined, options?: NavigationOptions): string {\n    if (urlPattern === undefined || urlPattern === null) { // empty path is a valid url\n      return 'about:blank';\n    }\n\n    const params = Maps.coerce(options?.params);\n    const url = this.substituteNamedParameters(urlPattern, params);\n    if (Urls.isAbsoluteUrl(url)) {\n      return url;\n    }\n    else {\n      const relativeTo = options?.relativeTo ?? window.location.href;\n      return Beans.get(RelativePathResolver).resolve(url, {relativeTo});\n    }\n  }\n\n  private async resolveContextualOutlet(): Promise<string | undefined> {\n    // If navigating in the context of an activator, do not use that outlet as contextual outlet.\n    if (await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n      return undefined;\n    }\n    return (await Beans.get(ContextService).lookup<OutletContext>(OUTLET_CONTEXT))?.name;\n  }\n\n  /**\n   * Replaces named parameters in the given path with values contained in the given {@link Map}.\n   * Named parameters begin with a colon (`:`) and are allowed in path segments, query parameters, matrix parameters\n   * and the fragment part.\n   *\n   * Empty query and matrix params are removed, but not empty path params.\n   *\n   * Some examples about the usage of named parameters:\n   * /segment/:param1/segment/:param2 // path params\n   * /segment/segment;matrixParam1=:param1;matrixParam2=:param2 // matrix params\n   * /segment/segment?queryParam1=:param1&queryParam2=:param2 // query params\n   */\n  private substituteNamedParameters(path: string, params: Map<string, any>): string {\n    return path\n      // 1. Replace named params contained in the params map.\n      .replace(/:([^/;&?#]+)/g, (match, paramName) => params.get(paramName) !== undefined ? params.get(paramName) : match)\n      // 2. Remove named matrix params not contained in the params map.\n      .replace(/(?<delimiter>;)(?<paramName>[^=]+)=:(?<placeholder>[^;#?/]+)/g, () => {\n        return '';\n      })\n      // 3. Remove named query params not contained in the params map. Replaces the first query param\n      //    with a special marker for later substitution.\n      .replace(/(?<delimiter>[?&])(?<paramName>[^=]+)=:(?<placeholder>[^&#]+)/g, (match, delimiter) => {\n        return (delimiter === '?') ? 'ɵ__?__' : '';\n      })\n      // 4. Replace the marker with the question mark if at least one query parameter is present.\n      .replace(/ɵ__\\?__&/, '?')\n      // 5. Remove marker if no query params are present.\n      .replace(/ɵ__\\?__/, '');\n  }\n}\n\n/**\n * Message header with information about the current context of the navigator.\n * @internal\n */\nexport const ROUTING_CONTEXT_MESSAGE_HEADER = 'context';\n\n/**\n * Name of the current outlet if navigating in the context of an outlet.\n * @internal\n */\nexport const ROUTING_CONTEXT_OUTLET = 'outlet';\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {IntentMessage, MessageHeaders, ResponseStatusCodes} from '../../messaging.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {MicrofrontendCapability, PlatformCapabilityTypes} from '../../platform.model';\nimport {Handler, IntentInterceptor} from '../message-broker/message-interception';\nimport {OutletRouter, ROUTING_CONTEXT_MESSAGE_HEADER, ROUTING_CONTEXT_OUTLET} from '../../client/router-outlet/outlet-router';\nimport {NavigationOptions} from '../../client/router-outlet/metadata';\nimport {MessageClient} from '../../client/messaging/message-client';\nimport {Dictionaries} from '@scion/toolkit/util';\nimport {ApplicationRegistry} from '../application-registry';\nimport {PRIMARY_OUTLET} from '../../client/router-outlet/router-outlet.element';\n\n/**\n * Handles microfrontend intents, instructing the {@link OutletRouter} to navigate to the microfrontend of the resolved microfrontend capability.\n *\n * Microfrontend intents are handled in this interceptor in order to support microfrontends not using the SCION Microfrontend Platform.\n * They are not transported to the providing application.\n *\n * @internal\n */\nexport class MicrofrontendIntentNavigator implements IntentInterceptor {\n\n  /**\n   * Microfrontend intents are handled in this interceptor and then swallowed.\n   */\n  public intercept(intentMessage: IntentMessage, next: Handler<IntentMessage>): Promise<void> {\n    if (intentMessage.intent.type === PlatformCapabilityTypes.Microfrontend) {\n      return this.consumeMicrofrontendIntent(intentMessage);\n    }\n    else {\n      return next.handle(intentMessage);\n    }\n  }\n\n  private async consumeMicrofrontendIntent(message: IntentMessage<NavigationOptions>): Promise<void> {\n    const replyTo = message.headers.get(MessageHeaders.ReplyTo);\n    await this.navigate(message);\n    await Beans.get(MessageClient).publish(replyTo, null, {headers: new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL)});\n  }\n\n  private async navigate(message: IntentMessage<NavigationOptions>): Promise<void> {\n    const microfrontendCapability = message.capability as MicrofrontendCapability;\n    const options = message.body;\n    const intent = message.intent;\n\n    const microfrontendPath = microfrontendCapability.properties?.path;\n    if (microfrontendPath === undefined || microfrontendPath === null) { // empty path is a valid path\n      throw Error(`[OutletRouterError][NullPathError] Microfrontend capability has no path to the microfrontend defined. [capability=${JSON.stringify(microfrontendCapability)}]`);\n    }\n    const appSymbolicName = microfrontendCapability.metadata!.appSymbolicName;\n    const application = Beans.get(ApplicationRegistry).getApplication(appSymbolicName, {orElse: null});\n    if (!application) {\n      throw Error(`[OutletRouterError][NullApplicationError] Unexpected error. No application found with the symbolic name \"${appSymbolicName}\".`);\n    }\n\n    await Beans.get(OutletRouter).navigate(microfrontendPath, {\n      ...options,\n      outlet: this.resolveTargetOutlet(message),\n      relativeTo: application.baseUrl,\n      params: {...intent.qualifier, ...Dictionaries.coerce(intent.params)},\n      showSplash: microfrontendCapability.properties.showSplash,\n      ɵcapabilityId: microfrontendCapability.metadata!.id,\n    });\n  }\n\n  /**\n   * Resolves the target outlet in the following order:\n   *\n   * - Outlet as specified by navigator via {@link NavigationOptions#outlet}.\n   * - Preferred outlet as specified in the microfrontend capability.\n   * - Current outlet if navigating in the context of an outlet.\n   * - {@link PRIMARY_OUTLET primary} outlet.\n   */\n  private resolveTargetOutlet(message: IntentMessage<NavigationOptions>): string {\n    const microfrontendCapability = message.capability as MicrofrontendCapability;\n    const options = message.body;\n\n    if (options?.outlet) {\n      return options.outlet;\n    }\n    if (microfrontendCapability.properties.outlet) {\n      return microfrontendCapability.properties.outlet;\n    }\n    const contextualOutlet = message.headers.get(ROUTING_CONTEXT_MESSAGE_HEADER)?.[ROUTING_CONTEXT_OUTLET];\n    if (contextualOutlet) {\n      return contextualOutlet;\n    }\n    return PRIMARY_OUTLET;\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {Subject} from 'rxjs';\nimport {Client} from './client';\nimport {Logger, LoggingContext} from '../../logger';\nimport {ClientRegistry} from './client.registry';\n\n/**\n * @internal\n */\nexport class ɵClientRegistry implements ClientRegistry, PreDestroy {\n\n  private readonly _clientsById = new Map<string, Client>();\n  private readonly _clientsByWindow = new Map<Window, Client>();\n  public readonly register$ = new Subject<Client>();\n  public readonly unregister$ = new Subject<Client>();\n\n  public registerClient(client: Client): void {\n    const staleClient = this._clientsByWindow.get(client.window);\n    if (staleClient) {\n      Beans.get(Logger).warn(\n        `[StaleClient] Stale client registration detected when loading application '${client.application.symbolicName}'\n        into the window of '${staleClient.application.symbolicName}'. Removing stale registration. Most likely, the client could not disconnect\n        from the broker, for example, because the client was disposed without notice, i.e., without receiving the browser's \"unload\" event, or\n        because the browser discarded the 'DISCONNECT' message, maybe due to a high load on the client during unloading.`.replace(/\\s+/g, ' '),\n        new LoggingContext(staleClient.application.symbolicName, staleClient.version),\n      );\n      this.unregisterClient(staleClient);\n    }\n    this._clientsById.set(client.id, client);\n    this._clientsByWindow.set(client.window, client);\n    this.register$.next(client);\n  }\n\n  public unregisterClient(client: Client): void {\n    this._clientsById.delete(client.id);\n    this._clientsByWindow.delete(client.window);\n    this.unregister$.next(client);\n    client.dispose();\n  }\n\n  public getByClientId(clientId: string): Client | undefined {\n    return this._clientsById.get(clientId);\n  }\n\n  public getByWindow(window: Window): Client | undefined {\n    return this._clientsByWindow.get(window);\n  }\n\n  public getByApplication(appSymbolicName: string): Client[] {\n    return Array.from(this._clientsById.values()).filter(client => client.application.symbolicName === appSymbolicName);\n  }\n\n  public preDestroy(): void {\n    this._clientsById.forEach(client => this.unregisterClient(client));\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Manifest} from '../platform.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {ApplicationConfig} from './application-config';\nimport {HostConfig} from './host-config';\nimport {MicrofrontendPlatform} from '../microfrontend-platform';\nimport {HostManifestInterceptor} from './host-manifest-interceptor';\nimport {PlatformState} from '../platform-state';\n\n/**\n * Provides the config for the host app.\n *\n * NOTE: Use static class instead of namespace to be tree shakable, i.e., to not be included in client app.\n *\n * @internal\n */\nexport class HostAppConfigProvider {\n\n  private constructor() {\n  }\n\n  /**\n   * Creates the {@link ApplicationConfig} for the host app.\n   */\n  public static createAppConfig(hostConfig: HostConfig & {symbolicName: string}): ApplicationConfig {\n    return {\n      symbolicName: hostConfig.symbolicName,\n      manifestUrl: provideHostManifestUrl(hostConfig.manifest),\n      scopeCheckDisabled: hostConfig.scopeCheckDisabled,\n      intentionCheckDisabled: hostConfig.intentionCheckDisabled,\n      intentionRegisterApiDisabled: hostConfig.intentionRegisterApiDisabled,\n    };\n  }\n\n  /**\n   * Intercepts the host manifest by registered interceptors.\n   */\n  public static interceptManifest(manifest: Manifest): void {\n    Beans.all(HostManifestInterceptor).forEach(interceptor => interceptor.intercept(manifest));\n  }\n}\n\nfunction provideHostManifestUrl(hostManifest: string | Manifest | undefined): string {\n  if (typeof hostManifest === 'string') {\n    return hostManifest; // URL specified\n  }\n  return serveHostManifest(hostManifest || {name: 'Host Application'});\n}\n\nfunction serveHostManifest(manifest: Manifest): string {\n  const url = URL.createObjectURL(new Blob([JSON.stringify(manifest)], {type: 'application/json'}));\n  MicrofrontendPlatform.whenState(PlatformState.Stopped).then(() => URL.revokeObjectURL(url));\n  return url;\n}\n","/*\n * Copyright (c) 2018-2021 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BehaviorSubject, combineLatest, OperatorFunction, Subject} from 'rxjs';\nimport {distinctUntilChanged, map, takeUntil, takeWhile} from 'rxjs/operators';\n\n/**\n * Represents a monitor to track the progress of some work.\n *\n * A monitor can be split into child monitors, allowing the work to be broken down into smaller units,\n * with each child monitor contributing to the overall progress of the parent monitor.\n *\n * @internal\n */\nexport class ProgressMonitor {\n\n  private _progress$ = new BehaviorSubject<number>(0);\n  private _done$ = new Subject<void>();\n  private _hasSubMonitors = false;\n\n  /**\n   * Reports the current progress of this monitor in percent.\n   *\n   * Upon subscription, emits the current progress, and then continuously as the progress advances.\n   * At 100%, the Observable completes.\n   */\n  public readonly progress$ = this._progress$.pipe(\n    distinctUntilChanged(),\n    map(progress => Math.round(progress * 10000) / 100),\n    takeWhile(progress => progress < 100, true),\n  );\n\n  /**\n   * Splits this monitor into separate child monitors for breaking down this monitor's work into smaller units.\n   *\n   * Each child monitor contributes to the overall progress of this monitor. The ratio allows child monitors to be\n   * weighted differently, for example, one child monitor can contribute twice as much as another to the overall progress.\n   * After all child monitors reported \"done\", this monitor will also enter \"done\".\n   */\n  public split(...ratio: number[]): ProgressMonitor[] {\n    if (this._hasSubMonitors) {\n      throw Error('[IllegalMonitorStateError] Monitor cannot be split multiple times.');\n    }\n    this._hasSubMonitors = true;\n\n    const subMonitors = ratio.map(() => new ProgressMonitor());\n    combineLatest(subMonitors.map(subMonitor => subMonitor._progress$))\n      .pipe(\n        computeProgress(ratio),\n        takeWhile(progress => progress < 1, true),\n        takeUntil(this._done$),\n      )\n      .subscribe(progress => {\n        this._progress$.next(progress);\n      });\n\n    return subMonitors;\n  }\n\n  /**\n   * Like {@link split}, but creates `n` child monitors with the same weight.\n   */\n  public splitEven(n: number): ProgressMonitor[] {\n    if (n <= 0) {\n      throw Error(`[IllegalMonitorArgumentError] Monitor split count must be greater than 0, but was ${n}.`);\n    }\n    return this.split(...new Array(n).fill(1));\n  }\n\n  /**\n   * Completes this monitor, setting its progress to '100%'.\n   * Has no effect if this monitor is already \"done\".\n   */\n  public done(): void {\n    this._progress$.next(1);\n    this._done$.next();\n  }\n}\n\nfunction computeProgress(ratio: number[]): OperatorFunction<number[], number> {\n  const ratioSum = ratio.reduce((sum, weight) => sum + weight, 0);\n  return map((subMonitorsProgress: number[]) => {\n    return ratio.reduce((totalProgress, subMonitorWeight, subMonitorIndex) => {\n      return totalProgress + subMonitorsProgress[subMonitorIndex] * (subMonitorWeight / ratioSum);\n    }, 0);\n  });\n}\n","/*\n * Copyright (c) 2018-2021 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {ProgressMonitor} from './progress-monitor';\n\n/**\n * Tracks the progress of loading application manifests.\n *\n * @internal\n */\nexport abstract class ManifestLoadProgressMonitor extends ProgressMonitor {\n}\n\n/**\n * Tracks the progress of loading application activators.\n *\n * @internal\n */\nexport abstract class ActivatorLoadProgressMonitor extends ProgressMonitor {\n}\n\n/**\n * @internal\n */\nexport abstract class StartupProgressMonitor extends ProgressMonitor {\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {HostAppConfigProvider} from './host-app-config-provider';\nimport {ManifestFetcher} from './manifest-fetcher';\nimport {ApplicationRegistry} from './application-registry';\nimport {HostConfig} from './host-config';\nimport {ApplicationConfig} from './application-config';\nimport {Logger} from '../logger';\nimport {ManifestLoadProgressMonitor} from './progress-monitor/progress-monitors';\n\n/**\n * Installs registered applications in the platform.\n *\n * @internal\n */\nexport class AppInstaller {\n\n  private readonly _appConfigs: ApplicationConfig[];\n\n  constructor(private _hostConfig: HostConfig & {symbolicName: string}, appConfigs: ApplicationConfig[]) {\n    this._appConfigs = appConfigs.filter(appConfig => !appConfig.exclude);\n  }\n\n  /**\n   * Installs registered applications in the platform.\n   */\n  public async install(): Promise<void> {\n    // Create config for the host.\n    const hostAppConfig = HostAppConfigProvider.createAppConfig(this._hostConfig);\n    const appConfigs = [hostAppConfig, ...this._appConfigs];\n    const manifestLoadMonitors = Beans.get(ManifestLoadProgressMonitor).splitEven(appConfigs.length);\n\n    // Fetch manifests and register applications.\n    await Promise.all(appConfigs.map(async appConfig => {\n      const monitor = manifestLoadMonitors.shift()!;\n      try {\n        // Fetch the manifest.\n        const manifest = await Beans.get(ManifestFetcher).fetch(appConfig);\n\n        // Let interceptors intercept the host manifest, for example by libraries integrating the SCION Microfrontend Platform,\n        // e.g., to contribute integrator-specific capabilities and intentions.\n        if (appConfig === hostAppConfig) {\n          HostAppConfigProvider.interceptManifest(manifest);\n        }\n\n        // Register application in the platform.\n        await Beans.get(ApplicationRegistry).registerApplication(appConfig, manifest);\n        Beans.get(Logger).info(`Registered application '${appConfig.symbolicName}' in the SCION Microfrontend Platform.`);\n      }\n      catch (error) {\n        Beans.get(Logger).error(`[AppInstaller] Failed to install application '${appConfig.symbolicName}' in the SCION Microfrontend Platform.`, error);\n      }\n      finally {\n        monitor.done();\n      }\n    }));\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {ACTIVATION_CONTEXT, ActivationContext, ActivatorCapability, PlatformCapabilityTypes} from '../../platform.model';\nimport {first} from 'rxjs/operators';\nimport {ApplicationRegistry} from '../application-registry';\nimport {OutletRouter} from '../../client/router-outlet/outlet-router';\nimport {SciRouterOutletElement} from '../../client/router-outlet/router-outlet.element';\nimport {Arrays, Maps} from '@scion/toolkit/util';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {Logger} from '../../logger';\nimport {MessageHeaders} from '../../messaging.model';\nimport {EMPTY, firstValueFrom, identity, Observable, timeout} from 'rxjs';\nimport {PlatformState} from '../../platform-state';\nimport {Beans, Initializer} from '@scion/toolkit/bean-manager';\nimport {MicrofrontendPlatform} from '../../microfrontend-platform';\nimport {ProgressMonitor} from '../progress-monitor/progress-monitor';\nimport {ActivatorLoadProgressMonitor} from '../progress-monitor/progress-monitors';\nimport {ManifestService} from '../../client/manifest-registry/manifest-service';\nimport {MessageClient} from '../../client/messaging/message-client';\n\n/**\n * Activates micro applications which provide an activator capability.\n *\n * Activators enable micro applications to interact with the platform for the entire platform lifecycle.\n * Activators can signal when ready for operation, causing this initializer to wait until received respective readiness messages.\n *\n * @internal\n */\nexport class ActivatorInstaller implements Initializer {\n\n  public async init(): Promise<void> {\n    // Lookup activators.\n    const activators: ActivatorCapability[] = await firstValueFrom(Beans.get(ManifestService).lookupCapabilities$<ActivatorCapability>({type: PlatformCapabilityTypes.Activator}));\n\n    const monitor = Beans.get(ActivatorLoadProgressMonitor);\n    if (!activators.length) {\n      monitor.done();\n      return;\n    }\n\n    // Group activators by their providing application.\n    const activatorsGroupedByApp: Map<string, ActivatorCapability[]> = activators\n      .filter(this.skipInvalidActivators())\n      .reduce((grouped, activator) => Maps.addListValue(grouped, activator.metadata!.appSymbolicName, activator), new Map<string, ActivatorCapability[]>());\n\n    // Create Promises that wait for activators to signal ready.\n    const subMonitors = monitor.splitEven(activatorsGroupedByApp.size);\n    const activatorReadyPromises: Promise<void>[] = Array\n      .from(activatorsGroupedByApp.entries())\n      .reduce((acc, [appSymbolicName, appActivators], index) => {\n        return acc.concat(this.waitForActivatorsToSignalReady(appSymbolicName, appActivators, subMonitors[index]));\n      }, [] as Promise<void>[]);\n\n    // Mount activators in hidden iframes\n    activatorsGroupedByApp.forEach((sameAppActivators: ActivatorCapability[]) => {\n      // Nominate one activator of each app as primary activator.\n      const primaryActivator = sameAppActivators[0];\n      sameAppActivators.forEach(activator => this.mountActivator(activator, activator === primaryActivator));\n    });\n\n    // Wait until activators signal ready.\n    await Promise.all(activatorReadyPromises);\n  }\n\n  private skipInvalidActivators(): (activator: ActivatorCapability) => boolean {\n    return (activator: ActivatorCapability): boolean => {\n      if (!activator.properties || !activator.properties.path) {\n        Beans.get(Logger).error(`[ActivatorError] Failed to activate the application '${activator.metadata!.appSymbolicName}'. Missing required 'path' property in the provided activator capability.`, activator);\n        return false;\n      }\n      return true;\n    };\n  }\n\n  /**\n   * Creates a Promise that resolves when given activators signal ready.\n   */\n  private async waitForActivatorsToSignalReady(appSymbolicName: string, activators: ActivatorCapability[], monitor: ProgressMonitor): Promise<void> {\n    const t0 = Date.now();\n    const activatorLoadTimeout = Beans.get(ApplicationRegistry).getApplication(appSymbolicName).activatorLoadTimeout;\n    const readinessPromises: Promise<void>[] = activators\n      .reduce((acc, activator) => acc.concat(Arrays.coerce(activator.properties.readinessTopics)), new Array<string>()) // concat readiness topics\n      .map(readinessTopic => {\n          const onReadinessTimeout = (): Observable<never> => {\n            Beans.get(Logger).error(`[ActivatorLoadTimeoutError] Timeout elapsed while waiting for application to signal readiness [app=${appSymbolicName}, timeout=${activatorLoadTimeout}ms, readinessTopic=${readinessTopic}].`);\n            return EMPTY;\n          };\n          return new Promise((resolve, reject) => {\n            return Beans.get(MessageClient).observe$<void>(readinessTopic)\n              .pipe(\n                first(msg => msg.headers.get(MessageHeaders.AppSymbolicName) === appSymbolicName),\n                activatorLoadTimeout ? timeout({first: activatorLoadTimeout, with: onReadinessTimeout}) : identity,\n              )\n              .subscribe({\n                error: reject,\n                complete: resolve,\n              });\n          });\n        },\n      );\n\n    if (!readinessPromises.length) {\n      monitor.done();\n      return;\n    }\n\n    await Promise.all(readinessPromises);\n    monitor.done();\n    Beans.get(Logger).info(`Activator startup of '${appSymbolicName}' took ${Date.now() - t0}ms.`);\n  }\n\n  /**\n   * Mounts a hidden <sci-router-outlet> and loads the activator endpoint.\n   */\n  private mountActivator(activator: ActivatorCapability, primary: boolean): void {\n    const application = Beans.get(ApplicationRegistry).getApplication(activator.metadata!.appSymbolicName);\n\n    // Create the router outlet and navigate to the activator endpoint.\n    const routerOutlet = document.createElement('sci-router-outlet') as SciRouterOutletElement;\n    routerOutlet.name = UUID.randomUUID();\n    Beans.get(OutletRouter).navigate(activator.properties.path, {\n      outlet: routerOutlet.name,\n      relativeTo: application.baseUrl,\n    }).then();\n\n    // Provide the activation context\n    routerOutlet.setContextValue<ActivationContext>(ACTIVATION_CONTEXT, {primary, activator});\n    // Add CSS classes for debugging purposes\n    routerOutlet.classList.add('sci-activator');\n    // Add custom data attribute with the application's symbolic name for debugging purposes\n    routerOutlet.dataset['app'] = application.symbolicName;\n    // Make the router outlet invisible\n    routerOutlet.style.display = 'none';\n    // Take the router outlet out of the document flow\n    routerOutlet.style.position = 'absolute';\n    // Add the router outlet to the DOM\n    document.body.appendChild(routerOutlet);\n    // Unmount the router outlet on platform shutdown\n    MicrofrontendPlatform.whenState(PlatformState.Stopped).then(() => document.body.removeChild(routerOutlet));\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {Observable} from 'rxjs';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {MessageClient} from '../messaging/message-client';\nimport {mapToBody} from '../../messaging.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\n\n/**\n * Allow observing whether the current microfrontend has received focus or contains embedded web content that has received focus.\n *\n * @category Focus\n */\nexport class FocusMonitor {\n\n  /**\n   * Observable that emits when the current microfrontend or any of its child microfrontends has gained or lost focus.\n   * The Observable does not emit while the focus remains within this microfrontend or any of its child microfrontends.\n   * Upon subscription, the Observable emits the current focus-within state, and then continuously emits when it changes.\n   * It never completes.\n   *\n   * This Observable is like the `:focus-within` CSS pseudo-class but operates across iframe boundaries.\n   * For example, it can be useful when implementing overlays that close upon focus loss.\n   *\n   * Note that this Observable emits only for microfrontends that are connected to the platform as registered micro app.\n   *\n   * See also the `onfocuswithin` event triggered by `<sci-router-outlet>` when embedded content has gained or lost focus.\n   */\n  public readonly focusWithin$: Observable<boolean> = Beans.get(MessageClient).request$<boolean>(PlatformTopics.IsFocusWithin).pipe(mapToBody());\n\n  /**\n   * Observable that emits when the current microfrontend has gained or lost focus.\n   *\n   * Upon subscription, the Observable emits the current focus state, and then continuously emits when it changes.\n   * It never completes.\n   */\n  public readonly focus$: Observable<boolean> = Beans.get(MessageClient).request$<boolean>(PlatformTopics.HasFocus).pipe(mapToBody());\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {EMPTY, fromEvent, race, Subject, switchMap} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MessageClient} from '../messaging/message-client';\nimport {PlatformTopics} from '../../ɵmessaging.model';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {FocusMonitor} from './focus-monitor';\nimport {OUTLET_CONTEXT, OutletContext, RouterOutlets} from '../router-outlet/router-outlet.element';\nimport {ContextService} from '../context/context-service';\nimport {ACTIVATION_CONTEXT} from '../../platform.model';\n\n/**\n * Sends a 'focusin' event to the topic {@link PlatformTopics.FocusIn} when this document gains focus.\n *\n * @see FocusTracker\n * @internal\n */\nexport class FocusInEventDispatcher implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n\n  constructor() {\n    // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n    // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n    this.installFocusEventDispatcher().then();\n  }\n\n  /**\n   * Installs focus event dispatching, but only if not loaded as activator.\n   */\n  private async installFocusEventDispatcher(): Promise<void> {\n    if (await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n      return;\n    }\n\n    this.publishFocusInEvent();\n    await this.notifyOutletAboutFocusChange();\n  }\n\n  /**\n   * Publishes 'focusin' events for the platform to track focus ownership.\n   */\n  private publishFocusInEvent(): void {\n    Beans.get(FocusMonitor).focus$\n      .pipe(\n        switchMap(hasFocus => hasFocus ? EMPTY : race(\n          fromEvent(window, 'focusin', {once: true}), // when gaining focus, e.g., via click on focusable element or sequential keyboard navigation\n          fromEvent(window, 'mousedown', {once: true, capture: true}), // required if \"focusin\" is not triggered, e.g., if element is not focusable or prevent default was invoked on the mousedown event\n        )),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        Beans.get(MessageClient).publish<void>(PlatformTopics.FocusIn);\n      });\n  }\n\n  /**\n   * Reports the embedding outlet when the current microfrontend or any of its child microfrontends has gained or lost focus.\n   * It does not report while the focus remains within this microfrontend or any of its child microfrontends.\n   */\n  private async notifyOutletAboutFocusChange(): Promise<void> {\n    const outletContext = await Beans.get(ContextService).lookup<OutletContext>(OUTLET_CONTEXT);\n    if (!outletContext) {\n      return;\n    }\n\n    Beans.get(FocusMonitor).focusWithin$\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(focusWithin => {\n        const publishTo = RouterOutlets.focusWithinOutletTopic(outletContext.uid);\n        Beans.get(MessageClient).publish<boolean>(publishTo, focusWithin);\n      });\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {EMPTY, fromEvent, Subject, switchMap} from 'rxjs';\nimport {auditTime, filter, takeUntil} from 'rxjs/operators';\nimport {MessageClient} from '../messaging/message-client';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {mapToBody} from '../../messaging.model';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {ContextService} from '../context/context-service';\nimport {ACTIVATION_CONTEXT} from '../../platform.model';\nimport {FocusMonitor} from '../focus/focus-monitor';\n\n/**\n * Dispatches 'mousemove' events originating from other documents as synthetic 'sci-mousemove' events on the document event bus.\n * The events are only dispatched if the user has pressed the primary mouse button.\n *\n * Mouse event dispatching is important if having non-focusable scrollbars which are positioned at the iframe border. It enables the user\n * to scroll seamlessly even when the mouse cursor leaves the iframe.\n *\n * @internal\n */\nexport class MouseMoveEventDispatcher implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _dispatcherId = UUID.randomUUID();\n\n  constructor() {\n    // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n    // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n    this.installMouseEventDispatcher().then();\n  }\n\n  /**\n   * Installs mouse event dispatching, but only if not loaded as activator.\n   */\n  private async installMouseEventDispatcher(): Promise<void> {\n    if (await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n      return;\n    }\n\n    this.publishMouseMoveEvent();\n    this.receiveMouseMoveEvent();\n  }\n\n  /**\n   * Publishes 'mousemove' events if the user has pressed the primary mouse button, but only if this document does not have the focus,\n   * so that the active document can dispatch the events on its event bus.\n   */\n  private publishMouseMoveEvent(): void {\n    Beans.get(FocusMonitor).focus$\n      .pipe(\n        switchMap(hasFocus => hasFocus ? EMPTY : fromEvent<MouseEvent>(document, 'mousemove')),\n        filter(event => event.buttons === PRIMARY_MOUSE_BUTTON),\n        auditTime(20),\n        takeUntil(this._destroy$),\n      )\n      .subscribe((event: MouseEvent) => {\n        const options = {headers: new Map().set(DISPATCHER_ID_HEADER, this._dispatcherId)};\n        Beans.get(MessageClient).publish(MOUSEMOVE_EVENT_TOPIC, [event.screenX, event.screenY], options);\n      });\n  }\n\n  /**\n   * Receives 'mousemove' events from other documents, but only if this document has the focus, and dispatches them on the event bus.\n   */\n  private receiveMouseMoveEvent(): void {\n    // Consume synth mouse events only if owning the focus.\n    Beans.get(FocusMonitor).focus$\n      .pipe(\n        switchMap(hasFocus => hasFocus ? Beans.get(MessageClient).observe$<[number, number]>(MOUSEMOVE_EVENT_TOPIC) : EMPTY),\n        filter(msg => msg.headers.get(DISPATCHER_ID_HEADER) !== this._dispatcherId),\n        mapToBody(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(([screenX, screenY]: [number, number]) => {\n        const sciMouseEvent: any = new Event('sci-mousemove');\n        sciMouseEvent.screenX = screenX;\n        sciMouseEvent.screenY = screenY;\n        document.dispatchEvent(sciMouseEvent);\n      });\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Indicates that the primary mouse button is pressed (usually left).\n */\nconst PRIMARY_MOUSE_BUTTON = 1;\n/**\n * Message header to pass the dispatcher's identity.\n */\nconst DISPATCHER_ID_HEADER = 'ɵDISPATCHER_ID';\n/**\n * Topic to publish 'mousemove' events so that they can be consumed by dispatchers of other documents.\n */\nconst MOUSEMOVE_EVENT_TOPIC = 'ɵMOUSEMOVE';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {EMPTY, fromEvent, Subject, switchMap} from 'rxjs';\nimport {filter, takeUntil} from 'rxjs/operators';\nimport {MessageClient} from '../messaging/message-client';\nimport {UUID} from '@scion/toolkit/uuid';\nimport {mapToBody} from '../../messaging.model';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {ACTIVATION_CONTEXT} from '../../platform.model';\nimport {FocusMonitor} from '../focus/focus-monitor';\nimport {ContextService} from '../context/context-service';\n\n/**\n * Dispatches 'mouseup' events originating from other documents as synthetic 'sci-mouseup' events on the document event bus.\n *\n * Mouse event dispatching is important if having non-focusable scrollbars which are positioned at the iframe border. It enables the user\n * to scroll seamlessly even when the mouse cursor leaves the iframe.\n *\n * @internal\n */\nexport class MouseUpEventDispatcher implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _dispatcherId = UUID.randomUUID();\n\n  constructor() {\n    // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n    // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n    this.installMouseEventDispatcher().then();\n  }\n\n  /**\n   * Installs mouse event dispatching, but only if not loaded as activator.\n   */\n  private async installMouseEventDispatcher(): Promise<void> {\n    if (await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n      return;\n    }\n\n    this.publishMouseUpEvent();\n    this.receiveMouseMoveEvent();\n  }\n\n  /**\n   * Publishes 'mouseup' events, but only if this document does not have the focus, so that the active document can dispatch the events on its event bus.\n   */\n  private publishMouseUpEvent(): void {\n    Beans.get(FocusMonitor).focus$\n      .pipe(\n        switchMap(hasFocus => hasFocus ? EMPTY : fromEvent(window, 'mouseup', {capture: true})),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        const options = {headers: new Map().set(DISPATCHER_ID_HEADER, this._dispatcherId)};\n        Beans.get(MessageClient).publish(MOUSEUP_EVENT_TOPIC, undefined, options);\n      });\n  }\n\n  /**\n   * Receives 'mouseup' events from other documents, but only if this document has the focus, and dispatches them on the event bus.\n   */\n  private receiveMouseMoveEvent(): void {\n    Beans.get(FocusMonitor).focus$\n      .pipe(\n        switchMap(hasFocus => hasFocus ? Beans.get(MessageClient).observe$<void>(MOUSEUP_EVENT_TOPIC) : EMPTY),\n        filter(msg => msg.headers.get(DISPATCHER_ID_HEADER) !== this._dispatcherId),\n        mapToBody(),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        document.dispatchEvent(new Event('sci-mouseup'));\n      });\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Message header to pass the dispatcher's identity.\n */\nconst DISPATCHER_ID_HEADER = 'ɵDISPATCHER_ID';\n/**\n * Topic to publish 'mouseup' events so that they can be consumed by dispatchers of other documents.\n */\nconst MOUSEUP_EVENT_TOPIC = 'ɵMOUSEUP';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {fromDimension$} from '@scion/toolkit/observable';\nimport {combineLatestWith, filter, takeUntil} from 'rxjs/operators';\nimport {merge, Subject} from 'rxjs';\nimport {ContextService} from '../context/context-service';\nimport {OUTLET_CONTEXT, OutletContext, RouterOutlets} from '../router-outlet/router-outlet.element';\nimport {MessageClient} from '../messaging/message-client';\nimport {PreferredSize} from './preferred-size';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {runSafe} from '../../safe-runner';\n\n/**\n * Allows web content displayed in a {@link SciRouterOutletElement `<sci-router-outlet>`} to define its preferred size.\n *\n * The preferred size of an element is the minimum size that will allow it to display normally.\n * Setting a preferred size is useful if the outlet is displayed in a layout that aligns its items based on the items's content size.\n *\n * When setting a preferred size, the outlet containing this microfrontend will adapt its size to the reported preferred size.\n *\n * @category Preferred Size\n */\nexport class PreferredSizeService implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n  private _fromDimensionElementChange$ = new Subject<void>();\n  private _preferredSizePublisher = new PreferredSizePublisher();\n\n  /**\n   * Sets the preferred size of this web content.\n   * The size is reported to the router outlet embedding this web content and is used as the outlet's size.\n   */\n  public setPreferredSize(preferredSize: PreferredSize): void {\n    this._preferredSizePublisher.publish(preferredSize);\n  }\n\n  /**\n   * Determines the preferred size from the given element's dimension and reports it to the router outlet embedding this web content.\n   * As the value for the preferred size, the `offset-width` and `offset-height` of the element are used, which is the total amount of space\n   * the element occupies, including the width of the visible content, scrollbars (if any), padding, and border.\n   *\n   * When the size of the element changes, the changed size is reported to the outlet, which then adaps its size accordingly.\n   * To stop the notifying of the preferred size to the outlet, pass `undefined` as the value, which also unsets the preferred size.\n   *\n   * If the element is removed from the DOM, the preferred size is reset and reporting suspended until it is attached again.\n   * If a new element is set as dimension observer, then the previous one is unsubscribed.\n   *\n   * *Prerequisites*\n   * - The element to be observed must behave as block-level box and not as inline-level box. So, if you want to observe an inline element,\n   *   set its display type to either `block` or `inline-block`.\n   * - If the element to be observed should not fill the remaining space and may change in size, we recommend taking it out of the document\n   *   element flow, i.e., position it absolutely without defining a width and height. Otherwise, once the element has reported a preferred\n   *   size, it could not shrink below that size.\n   *\n   * @param element - The element of which the preferred size is to be observed and used as the outlet's size.\n   */\n  public fromDimension(element: HTMLElement | undefined): void {\n    this._fromDimensionElementChange$.next();\n\n    if (!element) {\n      this.resetPreferredSize();\n      return;\n    }\n\n    fromDimension$(element)\n      .pipe(takeUntil(merge(this._fromDimensionElementChange$, this._destroy$)))\n      .subscribe(dimension => {\n        // If the element is removed from the DOM, the preferred size is reset and reporting suspended until it is attached again.\n        if (!document.body.contains(dimension.element)) {\n          this.resetPreferredSize();\n        }\n        else {\n          this.setPreferredSize({\n            minWidth: `${dimension.offsetWidth}px`,\n            width: `${dimension.offsetWidth}px`,\n            maxWidth: `${dimension.offsetWidth}px`,\n            minHeight: `${dimension.offsetHeight}px`,\n            height: `${dimension.offsetHeight}px`,\n            maxHeight: `${dimension.offsetHeight}px`,\n          });\n        }\n      });\n  }\n\n  /**\n   * Resets the preferred size. Has no effect if no preferred size is set.\n   */\n  public resetPreferredSize(): void {\n    this._preferredSizePublisher.publish(null);\n  }\n\n  /** @ignore */\n  public preDestroy(): void {\n    this._preferredSizePublisher.destroy();\n    this._destroy$.next();\n  }\n}\n\n/**\n * Publishes the preferred size to the outlet embedding this page.\n */\nclass PreferredSizePublisher {\n\n  private _preferredSize$ = new Subject<PreferredSize | null>();\n  private _destroy$ = new Subject<void>();\n\n  constructor() {\n    this._preferredSize$\n      .pipe(\n        combineLatestWith(Beans.get(ContextService).observe$<OutletContext>(OUTLET_CONTEXT).pipe(filter(Boolean))),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(([preferredSize, outletContext]) => runSafe(() => {\n        const topic = RouterOutlets.preferredSizeTopic(outletContext.uid);\n        Beans.get(MessageClient).publish(topic, preferredSize);\n      }));\n  }\n\n  public publish(preferredSize: PreferredSize | null): void {\n    this._preferredSize$.next(preferredSize);\n  }\n\n  public destroy(): void {\n    this._destroy$.next();\n  }\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {fromEvent, merge, MonoTypeOperatorFunction, Observable, Subject, withLatestFrom} from 'rxjs';\nimport {filter, map, switchMap, takeUntil, tap} from 'rxjs/operators';\nimport {MessageClient} from '../messaging/message-client';\nimport {ContextService} from '../context/context-service';\nimport {KEYSTROKE_CONTEXT_NAME_PREFIX, OUTLET_CONTEXT, OutletContext, RouterOutlets} from '../router-outlet/router-outlet.element';\nimport {Keystroke, KeystrokeFlags} from './keystroke';\nimport {runSafe} from '../../safe-runner';\nimport {Beans, PreDestroy} from '@scion/toolkit/bean-manager';\nimport {filterArray, mapArray} from '@scion/toolkit/operators';\nimport {ACTIVATION_CONTEXT} from '../../platform.model';\n\n/**\n * Propagates keyboard events for keystrokes registered in the current context or any parent contexts.\n *\n * This dispatcher listens to keyboard events for keystrokes registered in parent contexts and publishes\n * them as {@link KeyboardEventInit} events to the topic {@link RouterOutlets.keyboardEventTopic}.\n *\n * @internal\n */\nexport class KeyboardEventDispatcher implements PreDestroy {\n\n  private _destroy$ = new Subject<void>();\n\n  constructor() {\n    // IMPORTANT: For Angular applications, the platform is started outside the Angular zone. To avoid excessive change detection cycles,\n    // this dispatcher is eagerly set up at platform startup and installed only for regular microfrontends, not activator microfrontends.\n    this.installKeystrokeDispatcher().then();\n  }\n\n  /**\n   * Dispatches keyboard events of registered keystrokes to the embedding router outlet.\n   */\n  private async installKeystrokeDispatcher(): Promise<void> {\n    if (!await Beans.get(ContextService).isPresent(OUTLET_CONTEXT) || await Beans.get(ContextService).isPresent(ACTIVATION_CONTEXT)) {\n      return;\n    }\n\n    Beans.get(ContextService).names$()\n      .pipe(\n        map(contextNames => Array.from(contextNames)),\n        filterArray(contextName => contextName.startsWith(KEYSTROKE_CONTEXT_NAME_PREFIX)),\n        mapArray(keystrokeContextName => keystrokeContextName.substring(KEYSTROKE_CONTEXT_NAME_PREFIX.length)),\n        mapArray(keystroke => this.observeKeyboardEvent$(keystroke)),\n        switchMap(keyboardEvents => merge(...keyboardEvents)),\n        withLatestFrom(Beans.get(ContextService).observe$<OutletContext>(OUTLET_CONTEXT)),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(([event, outletContext]) => runSafe(() => {\n        const eventInit: KeyboardEventInit = {\n          key: event.key,\n          ctrlKey: event.ctrlKey,\n          shiftKey: event.shiftKey,\n          altKey: event.altKey,\n          metaKey: event.metaKey,\n          bubbles: event.bubbles,\n        };\n\n        const publishTo = RouterOutlets.keyboardEventTopic(outletContext!.uid, event.type);\n        Beans.get(MessageClient).publish<KeyboardEventInit>(publishTo, eventInit);\n      }));\n  }\n\n  /**\n   * Observes keyboard events matching the given keystroke, applying flags as declared on the keystroke.\n   */\n  private observeKeyboardEvent$(keystrokeFormat: string): Observable<KeyboardEvent> {\n    return Beans.get(ContextService).observe$<KeystrokeFlags>(KEYSTROKE_CONTEXT_NAME_PREFIX + keystrokeFormat, {collect: true})\n      .pipe(switchMap((keystrokeFlags: KeystrokeFlags[]) => {\n        const keystroke = Keystroke\n          .fromString(keystrokeFormat)\n          .withFlags(keystrokeFlags.reduceRight<KeystrokeFlags>((acc, flags) => ({...acc, ...flags}), {}));\n        return fromEvent<KeyboardEvent>(document, keystroke.eventType, {capture: true})\n          .pipe(\n            filter(event => event.bubbles && !!event.key),\n            filter(event => Keystroke.fromEvent(event).parts === keystroke.parts),\n            applyKeystrokeFlags(keystroke.flags),\n          );\n      }));\n  }\n\n  public preDestroy(): void {\n    this._destroy$.next();\n  }\n}\n\n/**\n * Applies keystroke flags on each keyboard event emitted by the source Observable.\n *\n * Note that `preventDefault()` has to be invoked on the original event, which has its `isTrusted` flag set to `true`.\n *\n * For more information about trusted events\n * @see https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events\n * @see https://www.chromestatus.com/features#istrusted\n */\nfunction applyKeystrokeFlags(flags: KeystrokeFlags | undefined): MonoTypeOperatorFunction<KeyboardEvent> {\n  return tap(keystrokeEvent => {\n    if (flags?.preventDefault) {\n      keystrokeEvent.preventDefault();\n    }\n  });\n}\n","import {MessageClient, takeUntilUnsubscribe} from './message-client';\nimport {Message, MessageHeaders, ResponseStatusCodes} from '../../messaging.model';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {EMPTY, from, Observable, of, Subscription, throwError} from 'rxjs';\nimport {runSafe} from '../../safe-runner';\nimport {stringifyError} from '../../error.util';\nimport {filter, finalize, takeUntil} from 'rxjs/operators';\nimport {MicrofrontendPlatform} from '../../microfrontend-platform';\nimport {PlatformState} from '../../platform-state';\n\n/**\n * Subscribes to messages, passing each message to the callback.\n *\n * The callback can return a response to be transported to the requestor, if any. When the final response is produced,\n * the handler terminates the communication, completing the requestor's Observable. If the callback errors, the error is\n * transported to the requestor, erroring the requestor's Observable.\n *\n * @internal\n */\nexport class MessageHandler<MSG extends Message, REPLY> {\n\n  private _messageClient = Beans.get(MessageClient);\n\n  /**\n   * Represents this handler's subscription for receiving messages. Calling {@link Subscription.unsubscribe} will also complete\n   * the Observable of all requestors, if any.\n   */\n  public readonly subscription = new Subscription();\n\n  constructor(message$: Observable<MSG>, private _callback: (message: MSG) => Observable<REPLY> | Promise<REPLY> | REPLY | void) {\n    this.subscription.add(message$.subscribe(message => {\n      if (message.headers.has(MessageHeaders.ReplyTo)) {\n        this.handleMessage(message);\n      }\n      else {\n        this.consumeMessage(message);\n      }\n    }));\n  }\n\n  /**\n   * The requestor has initiated a fire-and-forget communication, thus we simply pass the message to the callback and ignore response(s).\n   */\n  private consumeMessage(message: MSG): void {\n    runSafe(() => this._callback(message));\n  }\n\n  /**\n   * The requestor has initiated a request-response communication, thus we pass the request to the callback and send response(s)\n   * or a potential completion or error to the requestor.\n   */\n  private handleMessage(request: MSG): void {\n    const replyTo = request.headers.get(MessageHeaders.ReplyTo);\n    const platformStopping$ = MicrofrontendPlatform.state$.pipe(filter(state => state === PlatformState.Stopping));\n\n    // Invoke the callback to produce value(s).\n    let reply: Observable<REPLY> | Promise<REPLY> | REPLY | void;\n    try {\n      reply = this._callback(request);\n    }\n    catch (error) {\n      reply = throwError(() => error);\n    }\n\n    // Send response(s) or a potential completion or error back to the requestor.\n    let observableStatus: 'alive' | 'completed' | 'errored' = 'alive';\n    this.subscription.add(fromCallbackResult$(reply)\n      .pipe(\n        takeUntilUnsubscribe(replyTo), // unsubscribe once the requestor terminates the communication\n        takeUntil(platformStopping$), // terminate the communication when the platform is shutting down.\n        finalize(() => {\n          // Note that the `finalize` operator is also called when unsubscribing from the observable, e.g. when unsubscribing\n          // from the handler. If the observable errors or completes, the `finalize` operator is guaranteed to be called after\n          // the observer's `complete` or `error` methods; thus, the variable `observableStatus` is only `alive` when\n          // unsubscribing from the observable.\n          if (observableStatus === 'alive') {\n            // Terminate the communication when the handler is being unsubscribed.\n            const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL);\n            this._messageClient.publish(replyTo, undefined, {headers: replyHeaders}).then();\n          }\n        }),\n      )\n      .subscribe({\n        next: next => {\n          // Transport the value to the requestor.\n          const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.OK);\n          this._messageClient.publish(replyTo, next, {headers: replyHeaders}).then();\n        },\n        error: error => {\n          observableStatus = 'errored';\n          // Transport the error to the requestor.\n          const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.ERROR);\n          this._messageClient.publish(replyTo, stringifyError(error), {headers: replyHeaders}).then();\n        },\n        complete: () => {\n          observableStatus = 'completed';\n          // Terminate the communication when finished producing responses.\n          const replyHeaders = new Map().set(MessageHeaders.Status, ResponseStatusCodes.TERMINAL);\n          this._messageClient.publish(replyTo, undefined, {headers: replyHeaders}).then();\n        },\n      }));\n  }\n}\n\n/**\n * Creates an Observable from the result of the callback.\n *\n * If the callback returns no value (`void`), returns `undefined`, or returns a Promise that resolves to `undefined`,\n * the returned observable will complete immediately.\n */\nfunction fromCallbackResult$<T>(value: T | Observable<T> | Promise<T>): Observable<T> {\n  if (value === undefined) {\n    return EMPTY;\n  }\n  if (value instanceof Observable) {\n    return value;\n  }\n  if (value instanceof Promise) {\n    return from(value).pipe(filter(resolved => resolved !== undefined));\n  }\n  return of(value);\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {defer, noop, Observable, Subject, Subscription} from 'rxjs';\nimport {mapToBody, throwOnErrorStatus, TopicMessage} from '../../messaging.model';\nimport {BrokerGateway} from './broker-gateway';\nimport {MessagingChannel, PlatformTopics, TopicSubscribeCommand} from '../../ɵmessaging.model';\nimport {MessageClient} from './message-client';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {MessageHandler} from './message-handler';\nimport {takeUntil} from 'rxjs/operators';\nimport {PublishOptions, RequestOptions} from './publish-options';\n\n/**\n * @internal\n */\nexport class ɵMessageClient implements MessageClient {\n\n  private readonly _brokerGateway = Beans.get(BrokerGateway);\n\n  public publish<T = any>(topic: string, message?: T, options?: PublishOptions): Promise<void> {\n    const topicMessage: TopicMessage = {\n      topic,\n      retain: options?.retain ?? false,\n      headers: new Map(options?.headers),\n      body: message,\n    };\n    return this._brokerGateway.postMessage(MessagingChannel.Topic, topicMessage);\n  }\n\n  public request$<T>(topic: string, request?: any, options?: RequestOptions): Observable<TopicMessage<T>> {\n    // IMPORTANT:\n    // When sending a request, the platform adds various headers to the message. Therefore, to support multiple subscriptions\n    // to the returned Observable, each subscription must have its individual message instance and headers map.\n    // In addition, the headers are copied to prevent modifications before the effective subscription.\n    const headers = new Map(options?.headers);\n    return defer(() => {\n      const topicMessage: TopicMessage = {\n        topic,\n        retain: options?.retain ?? false,\n        headers: new Map(headers), /* make a copy for each subscription to support multiple subscriptions */\n        body: request,\n      };\n      return this._brokerGateway.requestReply$(MessagingChannel.Topic, topicMessage).pipe(throwOnErrorStatus());\n    });\n  }\n\n  public observe$<T>(topic: string): Observable<TopicMessage<T>> {\n    return this._brokerGateway.subscribe$({\n      messageChannel: MessagingChannel.Topic,\n      subscribeChannel: MessagingChannel.TopicSubscribe,\n      unsubscribeChannel: MessagingChannel.TopicUnsubscribe,\n      newSubscribeCommand: (subscriberId: string): TopicSubscribeCommand => ({topic, subscriberId, headers: new Map()}),\n    });\n  }\n\n  public onMessage<IN = any, OUT = any>(topic: string, callback: (message: TopicMessage<IN>) => Observable<OUT> | Promise<OUT> | OUT | void): Subscription {\n    return new MessageHandler(Beans.get(MessageClient).observe$<IN>(topic), callback).subscription;\n  }\n\n  public subscriberCount$(topic: string): Observable<number> {\n    return new Observable<number>(observer => {\n      const unsubscribe$ = new Subject<void>();\n      this.request$<number>(PlatformTopics.RequestSubscriberCount, topic)\n        .pipe(\n          mapToBody(),\n          takeUntil(unsubscribe$),\n        )\n        .subscribe({\n          next: reply => observer.next(reply),\n          error: error => observer.error(error),\n          complete: noop, // As per the API, the Observable never completes, even if receiving a TERMINAL signal.\n        });\n      return (): void => unsubscribe$.next();\n    });\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {defer, Observable, Subscription} from 'rxjs';\nimport {Intent, IntentMessage, throwOnErrorStatus, TopicMessage} from '../../messaging.model';\nimport {BrokerGateway} from './broker-gateway';\nimport {IntentSubscribeCommand, MessagingChannel} from '../../ɵmessaging.model';\nimport {IntentClient, IntentSelector} from './intent-client';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {MessageHandler} from './message-handler';\nimport {PublishOptions, RequestOptions} from './publish-options';\n\n/**\n * @internal\n */\nexport class ɵIntentClient implements IntentClient {\n\n  private readonly _brokerGateway = Beans.get(BrokerGateway);\n\n  public publish<T = any>(intent: Intent, body?: T, options?: PublishOptions): Promise<void> {\n    const intentMessage: IntentMessage = {\n      intent,\n      retain: options?.retain ?? false,\n      headers: new Map(options?.headers),\n      capability: undefined!, /* set by the broker when dispatching the intent */\n      body,\n    };\n    return this._brokerGateway.postMessage(MessagingChannel.Intent, intentMessage);\n  }\n\n  public request$<T>(intent: Intent, body?: any, options?: RequestOptions): Observable<TopicMessage<T>> {\n    // IMPORTANT:\n    // When sending a request, the platform adds various headers to the message. Therefore, to support multiple subscriptions\n    // to the returned Observable, each subscription must have its individual message instance and headers map.\n    // In addition, the headers are copied to prevent modifications before the effective subscription.\n    const headers = new Map(options?.headers);\n    return defer(() => {\n      const intentMessage: IntentMessage = {\n        intent,\n        retain: options?.retain ?? false,\n        headers: new Map(headers) /* make a copy for each subscription to support multiple subscriptions */,\n        capability: undefined!, /* set by the broker when dispatching the intent */\n        body,\n      };\n      return this._brokerGateway.requestReply$(MessagingChannel.Intent, intentMessage).pipe(throwOnErrorStatus());\n    });\n  }\n\n  public observe$<T>(selector?: IntentSelector): Observable<IntentMessage<T>> {\n    return this._brokerGateway.subscribe$({\n      messageChannel: MessagingChannel.Intent,\n      subscribeChannel: MessagingChannel.IntentSubscribe,\n      unsubscribeChannel: MessagingChannel.IntentUnsubscribe,\n      newSubscribeCommand: (subscriberId: string): IntentSubscribeCommand => ({selector, subscriberId, headers: new Map()}),\n    });\n  }\n\n  public onIntent<IN = any, OUT = any>(selector: IntentSelector, callback: (intentMessage: IntentMessage<IN>) => Observable<OUT> | Promise<OUT> | OUT | void): Subscription {\n    return new MessageHandler(Beans.get(IntentClient).observe$<IN>(selector), callback).subscription;\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {BeanDestroyOrders, MicrofrontendPlatform, providePlatformEnvironment} from '../microfrontend-platform';\nimport {ConnectOptions} from './connect-options';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {PlatformPropertyService} from '../platform-property-service';\nimport {MessageClient} from './messaging/message-client';\nimport {IntentClient} from './messaging/intent-client';\nimport {OutletRouter} from './router-outlet/outlet-router';\nimport {RelativePathResolver} from './router-outlet/relative-path-resolver';\nimport {RouterOutletUrlAssigner} from './router-outlet/router-outlet-url-assigner';\nimport {FocusInEventDispatcher} from './focus/focus-in-event-dispatcher';\nimport {FocusMonitor} from './focus/focus-monitor';\nimport {MouseMoveEventDispatcher} from './mouse-event/mouse-move-event-dispatcher';\nimport {MouseUpEventDispatcher} from './mouse-event/mouse-up-event-dispatcher';\nimport {PreferredSizeService} from './preferred-size/preferred-size-service';\nimport {ContextService} from './context/context-service';\nimport {ManifestService} from './manifest-registry/manifest-service';\nimport {KeyboardEventDispatcher} from './keyboard-event/keyboard-event-dispatcher';\nimport {PlatformState, Runlevel} from '../platform-state';\nimport {OUTLET_CONTEXT, OutletContext, RouterOutlets, SciRouterOutletElement} from './router-outlet/router-outlet.element';\nimport {BrokerGateway, NullBrokerGateway, ɵBrokerGateway} from './messaging/broker-gateway';\nimport {ɵMessageClient} from './messaging/ɵmessage-client';\nimport {ɵIntentClient} from './messaging/ɵintent-client';\n\n/**\n * Central point for a microfrontend to connect to the platform host in order to interact with the platform and other microfrontends.\n * This class cannot be instantiated. All functionality is provided by static methods.\n *\n * @see MicrofrontendPlatform\n * @see MicrofrontendPlatformHost\n * @see MicrofrontendPlatformClient\n *\n * @category Platform\n * @category Lifecycle\n */\nexport class MicrofrontendPlatformClient {\n\n  private constructor() {\n  }\n\n  /**\n   * Connects this microfrontend to the platform host.\n   *\n   * A microfrontend should connect to the platform host during application bootstrapping. In Angular, for example, this is typically\n   * done in an app initializer. Since connecting to the platform host is an asynchronous operation, the microfrontend should wait\n   * for the Promise to resolve before interacting with the platform or other microfrontends.\n   *\n   * The platform connects to the host through its window hierarchy. Therefore, the microfrontend must be embedded as direct or\n   * indirect child window of the host application window.\n   *\n   * @param  symbolicName - Specifies the symbolic name of the application of this microfrontend. The application must be registered\n   *         in the platform host under this symbol.\n   * @param  connectOptions - Controls how to connect to the platform host.\n   * @return Promise that resolves when successfully connected to the platform host, or that rejects otherwise, e.g., if not allowed\n   *         to connect because not registered.\n   */\n  public static connect(symbolicName: string, connectOptions?: ConnectOptions): Promise<void> {\n    return MicrofrontendPlatform.startPlatform(() => {\n        // Provide environment for running the platform as client.\n        providePlatformEnvironment({symbolicName, isPlatformHost: false});\n        provideClientEnvironment({...connectOptions, connectRunlevel: Runlevel.Zero});\n\n        // Provide initializers to start the platform as client.\n        provideClientStartupInitializers();\n      },\n    );\n  }\n\n  /**\n   * Tests whether this microfrontend is connected to the platform host.\n   */\n  public static async isConnected(): Promise<boolean> {\n    if (MicrofrontendPlatform.state === PlatformState.Stopped) {\n      return false;\n    }\n    const brokerGateway = Beans.opt(BrokerGateway);\n    if (!brokerGateway) {\n      return false;\n    }\n    return brokerGateway.isConnected();\n  }\n\n  /**\n   * Signals readiness to notify the platform that the microfrontend has completed initialization.\n   *\n   * When navigating to the microfrontend with `OutletRouter.navigate('path/to/microfrontend', {showSplash: true})`,\n   * a splash is displayed until the microfrontend signals readiness.\n   *\n   * @see SciRouterOutletElement\n   * @see NavigationOptions.showSplash\n   */\n  public static signalReady(): void {\n    Beans.get(ContextService).lookup<OutletContext>(OUTLET_CONTEXT).then(outletContext => {\n      if (!outletContext) {\n        return Promise.reject(Error('[NullOutletContextError] not running in the context of a <sci-router-outlet>.'));\n      }\n      return Beans.get(MessageClient).publish(RouterOutlets.signalReadyTopic(outletContext.uid));\n    });\n  }\n}\n\n/**\n * Provides the environment for running the platform as client.\n *\n * @internal\n */\nexport function provideClientEnvironment(connectOptions: ConnectOptions & {connectRunlevel: number}): void {\n  Beans.registerIfAbsent(MessageClient, {useClass: ɵMessageClient, eager: true, destroyOrder: BeanDestroyOrders.MESSAGING});\n  Beans.registerIfAbsent(IntentClient, {useClass: ɵIntentClient, eager: true, destroyOrder: BeanDestroyOrders.MESSAGING});\n  Beans.registerIfAbsent(OutletRouter);\n  Beans.registerIfAbsent(RelativePathResolver);\n  Beans.registerIfAbsent(RouterOutletUrlAssigner);\n  Beans.register(FocusInEventDispatcher, {eager: true});\n  Beans.register(MouseMoveEventDispatcher, {eager: true});\n  Beans.register(MouseUpEventDispatcher, {eager: true});\n  Beans.register(KeyboardEventDispatcher, {eager: true});\n  Beans.register(PreferredSizeService, {eager: true});\n  Beans.register(ContextService);\n  Beans.register(ManifestService);\n  Beans.register(PlatformPropertyService);\n  Beans.register(FocusMonitor);\n  provideBrokerGateway(connectOptions);\n}\n\n/**\n * Provide initializers to start the platform as client.\n */\nfunction provideClientStartupInitializers(): void {\n  // Block until received platform properties to support synchronous access via `PlatformPropertyService#properties`.\n  Beans.registerInitializer({\n    useExisting: PlatformPropertyService,\n    runlevel: Runlevel.Two,\n  });\n\n  // Block until received list of applications to support synchronous access via `ManifestService#applications`.\n  Beans.registerInitializer({\n    useExisting: ManifestService,\n    runlevel: Runlevel.Two,\n  });\n\n  // Register router outlet, delaying its instantiation until initialized the platform.\n  // Otherwise, router outlet construction may fail or result in unexpected behavior, for example, because beans are not yet registered.\n  Beans.registerInitializer({\n    useFunction: () => SciRouterOutletElement.define(),\n    runlevel: Runlevel.Two,\n  });\n}\n\n/**\n * Provides the gateway to communicate with the host.\n */\nfunction provideBrokerGateway(connectOptions: ConnectOptions & {connectRunlevel: number}): void {\n  if (connectOptions.connect ?? true) {\n    Beans.register(ɵBrokerGateway, {\n      useFactory: () => new ɵBrokerGateway(connectOptions),\n      destroyOrder: BeanDestroyOrders.MESSAGING,\n    });\n    Beans.register(BrokerGateway, {useExisting: ɵBrokerGateway});\n    Beans.registerInitializer({useExisting: ɵBrokerGateway, runlevel: connectOptions.connectRunlevel});\n  }\n  else {\n    Beans.register(BrokerGateway, {useClass: NullBrokerGateway});\n  }\n}\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\nimport {MicrofrontendPlatformConfig} from './microfrontend-platform-config';\nimport {HostManifestInterceptor, ɵHostManifestInterceptor} from './host-manifest-interceptor';\nimport {BeanDestroyOrders, MicrofrontendPlatform, providePlatformEnvironment} from '../microfrontend-platform';\nimport {Beans} from '@scion/toolkit/bean-manager';\nimport {ClientRegistry} from './client-registry/client.registry';\nimport {Logger} from '../logger';\nimport {PlatformPropertyService} from '../platform-property-service';\nimport {HttpClient} from './http-client';\nimport {ManifestRegistry} from './manifest-registry/manifest-registry';\nimport {ApplicationRegistry} from './application-registry';\nimport {ɵManifestRegistry} from './manifest-registry/ɵmanifest-registry';\nimport {FocusTracker} from './focus/focus-tracker';\nimport {ManifestFetcher} from './manifest-fetcher';\nimport {MessageBroker} from './message-broker/message-broker';\nimport {TopicSubscriptionRegistry} from './message-broker/topic-subscription.registry';\nimport {IntentSubscriptionRegistry} from './message-broker/intent-subscription.registry';\nimport {ManifestService} from '../client/manifest-registry/manifest-service';\nimport {IntentInterceptor} from './message-broker/message-interception';\nimport {MicrofrontendIntentNavigator} from './router/microfrontend-intent-navigator.interceptor';\nimport {ɵClientRegistry} from './client-registry/ɵclient.registry';\nimport {MessageClient} from '../client/messaging/message-client';\nimport {PlatformState, Runlevel} from '../platform-state';\nimport {CLIENT_PING_INTERVAL, CLIENT_PING_TIMEOUT} from './client-registry/client';\nimport {LivenessConfig} from './liveness-config';\nimport {AppInstaller} from './app-installer';\nimport {ActivatorInstaller} from './activator/activator-installer';\nimport {PlatformTopics} from '../ɵmessaging.model';\nimport {SciRouterOutletElement} from '../client/router-outlet/router-outlet.element';\nimport {ProgressMonitor} from './progress-monitor/progress-monitor';\nimport {ActivatorLoadProgressMonitor, ManifestLoadProgressMonitor, StartupProgressMonitor} from './progress-monitor/progress-monitors';\nimport {provideClientEnvironment} from '../client/microfrontend-platform-client';\nimport {defer, Observable, ReplaySubject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n/**\n * Main entry point for configuring and starting the platform in the host application. This class cannot be instantiated. All functionality is provided by static methods.\n *\n * The host application, sometimes also called the container application, provides the top-level integration container for microfrontends. Typically, it is the web\n * application which the user loads into the browser that provides the main application shell, defining areas to embed microfrontends.\n *\n * In the host application the SCION Microfrontend Platform is configured and web applications that want to interact with the platform are registered.\n * The host application can provide a manifest to contribute behavior to integrated applications. For more information, see {@link HostConfig.manifest}\n * in {@link MicrofrontendPlatformConfig.host}.\n *\n * If integrating the SCION Microfrontend Platform in a library, the manifest of the host can be augmented by registering a {@link HostManifestInterceptor}.\n *\n * @see MicrofrontendPlatform\n * @see MicrofrontendPlatformHost\n * @see MicrofrontendPlatformClient\n *\n * @category Platform\n * @category Lifecycle\n */\nexport class MicrofrontendPlatformHost {\n\n  private static _startupProgress$: Observable<number>;\n\n  private constructor() {\n  }\n\n  /**\n   * Starts the platform host.\n   *\n   * In the host application the SCION Microfrontend Platform is configured and web applications that want to interact with the platform are registered.\n   *\n   * The host application can provide a manifest to declare intentions and contribute behavior to integrated applications via {@link HostConfig.manifest} in\n   * {@link MicrofrontendPlatformConfig.host}. The manifest can be specified either as an object literal or as a URL to load it over the network.\n   *\n   * The platform should be started during the bootstrapping of the host application. In Angular, for example, the platform is typically\n   * started in an app initializer. Since starting the platform host may take some time, you should wait for the startup Promise to resolve\n   * before interacting with the platform.\n   *\n   * @param  config - Configures the platform and lists applications allowed to interact with the platform.\n   * @return A Promise that resolves when started the platform host.\n   */\n  public static start(config: MicrofrontendPlatformConfig): Promise<void> {\n    return MicrofrontendPlatform.startPlatform(() => {\n        const symbolicName = config.host?.symbolicName || 'host';\n\n        // Provide environment for running the platform as host.\n        providePlatformEnvironment({symbolicName, isPlatformHost: true});\n        provideClientEnvironment({\n          messageDeliveryTimeout: config.host?.messageDeliveryTimeout,\n          brokerDiscoverTimeout: config.host?.brokerDiscoverTimeout,\n          connectRunlevel: Runlevel.One, // Connect to the broker in runlevel 1, that is, after registration of the applications.\n        });\n        provideHostEnvironment(config);\n\n        // Provide initializers to start the platform as host.\n        provideHostStartupInitializers(symbolicName, config);\n      },\n    );\n  }\n\n  /**\n   * Monitors the startup progress of the platform host.\n   *\n   * Starting the platform host may take some time. During startup, the manifests of the registered applications are fetched,\n   * activator microfrontends are installed, and the platform waits until all applications have signaled readiness.\n   *\n   * Subscribe to this Observable to monitor the startup progress and provide feedback to the user like displaying a\n   * progress bar or a spinner. The Observable reports the progress as a percentage number. The Observable completes\n   * after the platform has been started.\n   */\n  public static get startupProgress$(): Observable<number> {\n    this._startupProgress$ = this._startupProgress$ || new Observable<number>(observer => {\n      const unsubscribe$ = new ReplaySubject<void>(1);\n      const progress$ = defer(() => Beans.get(StartupProgressMonitor).progress$).pipe(takeUntil(unsubscribe$));\n\n      if (MicrofrontendPlatform.state === PlatformState.Stopped) {\n        MicrofrontendPlatform.whenState(PlatformState.Starting).then(() => progress$.subscribe(observer));\n      }\n      else {\n        progress$.subscribe(observer);\n      }\n      return () => unsubscribe$.next();\n    });\n    return this._startupProgress$;\n  }\n}\n\n/**\n * Provides the environment for running the platform as host.\n */\nfunction provideHostEnvironment(config: MicrofrontendPlatformConfig): void {\n  Beans.register(MicrofrontendPlatformConfig, {useValue: config});\n  Beans.register(HostManifestInterceptor, {useClass: ɵHostManifestInterceptor, multi: true});\n  Beans.register(ClientRegistry, {useClass: ɵClientRegistry, destroyOrder: BeanDestroyOrders.CORE});\n  Beans.registerIfAbsent(HttpClient);\n  Beans.register(ManifestRegistry, {useClass: ɵManifestRegistry, eager: true});\n  Beans.register(ApplicationRegistry, {eager: true});\n  Beans.register(FocusTracker, {eager: true});\n  Beans.register(MessageBroker, {destroyOrder: BeanDestroyOrders.BROKER});\n  Beans.register(ManifestFetcher);\n  Beans.register(TopicSubscriptionRegistry, {destroyOrder: BeanDestroyOrders.BROKER});\n  Beans.register(IntentSubscriptionRegistry, {destroyOrder: BeanDestroyOrders.BROKER});\n  Beans.register(IntentInterceptor, {useClass: MicrofrontendIntentNavigator, multi: true});\n\n  provideLivenessProbeConfig(config.liveness);\n  provideStartupProgressMonitor();\n}\n\n/**\n * Provide initializers to start the platform as host.\n */\nfunction provideHostStartupInitializers(symbolicName: string, config: MicrofrontendPlatformConfig): void {\n  // Construct message broker immediately to not lose connect requests from clients.\n  Beans.registerInitializer({\n    useExisting: MessageBroker,\n    runlevel: Runlevel.Zero,\n  });\n\n  // Install registered applications.\n  Beans.registerInitializer({\n    useFunction: () => new AppInstaller({...config.host, symbolicName}, config.applications).install(),\n    runlevel: Runlevel.Zero,\n  });\n\n  // Provide platform properties to clients.\n  Beans.registerInitializer({\n    useFunction: () => Beans.get(MessageClient).publish(PlatformTopics.PlatformProperties, config.properties || {}, {retain: true}),\n    runlevel: Runlevel.Two,\n  });\n\n  // Provide list of installed applications to clients.\n  Beans.registerInitializer({\n    useFunction: () => Beans.get(MessageClient).publish(PlatformTopics.Applications, Beans.get(ApplicationRegistry).getApplications(), {retain: true}),\n    runlevel: Runlevel.Two,\n  });\n\n  // Register router outlet, delaying its instantiation until initialized the platform.\n  // Otherwise, router outlet construction may fail or result in unexpected behavior, for example, because beans are not yet registered.\n  Beans.registerInitializer({\n    useFunction: () => SciRouterOutletElement.define(),\n    runlevel: Runlevel.Two,\n  });\n\n  // Block until received platform properties to support synchronous access via `PlatformPropertyService#properties`.\n  Beans.registerInitializer({\n    useExisting: PlatformPropertyService,\n    runlevel: Runlevel.Three,\n  });\n\n  // Block until received list of applications to support synchronous access via `ManifestService#applications`.\n  Beans.registerInitializer({\n    useExisting: ManifestService,\n    runlevel: Runlevel.Three,\n  });\n\n  // Install activator microfrontends.\n  Beans.registerInitializer({\n    useClass: ActivatorInstaller,\n    runlevel: Runlevel.Three,\n  });\n}\n\n/**\n * Provides beans to monitor the startup progress of the host.\n */\nfunction provideStartupProgressMonitor(): void {\n  const monitor = new ProgressMonitor();\n  const [platformProgressMonitor, manifestLoadProgressMonitor, activatorLoadProgressMonitor] = monitor.split(1, 3, 5);\n  Beans.register(StartupProgressMonitor, {useValue: monitor});\n  Beans.register(ManifestLoadProgressMonitor, {useValue: manifestLoadProgressMonitor});\n  Beans.register(ActivatorLoadProgressMonitor, {useValue: activatorLoadProgressMonitor});\n  MicrofrontendPlatform.whenState(PlatformState.Started).then(() => platformProgressMonitor.done());\n}\n\n/**\n * Provides beans describing how often to check connected clients to be alive.\n */\nfunction provideLivenessProbeConfig(config?: LivenessConfig): void {\n  const defaults = {interval: 60, timeout: 10};\n  const interval = config?.interval ?? defaults.interval;\n  const timeout = config?.timeout ?? defaults.timeout;\n\n  const invalid = interval <= 2 * timeout;\n  if (invalid) {\n    Beans.get(Logger).warn(`[LivenessProbeConfig] Illegal config provided. The interval [${interval}s] must be greater than twice the timeout period [${timeout}s]. Using platform defaults instead: [interval=${defaults.interval}s, timeout=${defaults.timeout}s]`);\n  }\n  Beans.registerIfAbsent(CLIENT_PING_INTERVAL, {useValue: (invalid ? defaults.interval : interval) * 1_000});\n  Beans.registerIfAbsent(CLIENT_PING_TIMEOUT, {useValue: (invalid ? defaults.timeout : timeout) * 1_000});\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Manifest} from '../platform.model';\n\n/**\n * Configures the interaction of the host application with the platform.\n *\n * As with micro applications, you can provide a manifest for the host, allowing the host to contribute capabilities and declare intentions.\n *\n * @category Platform\n */\nexport abstract class HostConfig {\n  /**\n   * Symbolic name of the host. If not set, 'host' is used as the symbolic name of the host.\n   *\n   * The symbolic name must be unique and contain only lowercase alphanumeric characters and hyphens.\n   */\n  public abstract symbolicName?: string;\n  /**\n   * The manifest of the host.\n   *\n   * The manifest can be passed either as an {@link Manifest object literal} or specified as a URL to be loaded over the network.\n   * Providing a manifest lets the host contribute capabilities or declare intentions.\n   */\n  public abstract readonly manifest?: Manifest | string;\n  /**\n   * Controls whether the host can interact with private capabilities of other micro applications.\n   *\n   * By default, scope check is enabled. Disabling scope check is strongly discouraged.\n   */\n  public abstract readonly scopeCheckDisabled?: boolean;\n  /**\n   * Controls whether the host can interact with the capabilities of other apps without having to declare respective intentions.\n   *\n   * By default, intention check is enabled. Disabling intention check is strongly discouraged.\n   */\n  public abstract readonly intentionCheckDisabled?: boolean;\n  /**\n   * Controls whether the host can register and unregister intentions dynamically at runtime.\n   *\n   * By default, this API is disabled. Enabling this API is strongly discouraged.\n   */\n  public abstract readonly intentionRegisterApiDisabled?: boolean;\n  /**\n   * Maximum time (in milliseconds) that the platform waits to receive dispatch confirmation for messages sent by the host until rejecting the publishing Promise.\n   * By default, a timeout of 10s is used.\n   */\n  public abstract readonly messageDeliveryTimeout?: number;\n  /**\n   * Maximum time (in milliseconds) to wait until the message broker is discovered on platform startup. If the broker is not discovered within\n   * the specified time, platform startup fails with an error. By default, a timeout of 10s is used.\n   *\n   * @internal\n   */\n  public abstract readonly brokerDiscoverTimeout?: number;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Describes how to register an application in the platform.\n *\n * @category Platform\n */\nexport interface ApplicationConfig {\n  /**\n   * Unique symbolic name of this micro application.\n   *\n   * The symbolic name must be unique and contain only lowercase alphanumeric characters and hyphens.\n   */\n  symbolicName: string;\n  /**\n   * URL to the application manifest.\n   */\n  manifestUrl: string;\n  /**\n   * Specifies an additional origin (in addition to the origin of the application) from which the application is allowed\n   * to connect to the platform.\n   *\n   * By default, if not set, the application is allowed to connect from the origin of the manifest URL or the base URL as\n   * specified in the manifest file. Setting an additional origin may be necessary if, for example, integrating microfrontends\n   * into a rich client, enabling an integrator to bridge messages between clients and host across browser boundaries.\n   */\n  secondaryOrigin?: string;\n  /**\n   * Maximum time (in milliseconds) that the host waits until the manifest for this application is loaded.\n   *\n   * If set, overrides the global timeout as configured in {@link MicrofrontendPlatformConfig.manifestLoadTimeout}.\n   */\n  manifestLoadTimeout?: number;\n  /**\n   * Maximum time (in milliseconds) for this application to signal readiness.\n   *\n   * If activating this application takes longer, the host logs an error and continues startup.\n   * If set, overrides the global timeout as configured in {@link MicrofrontendPlatformConfig.activatorLoadTimeout}.\n   */\n  activatorLoadTimeout?: number;\n  /**\n   * Excludes this micro application from registration, e.g. to not register it in a specific environment.\n   */\n  exclude?: boolean;\n  /**\n   * Controls whether this micro application can interact with private capabilities of other micro applications.\n   *\n   * By default, scope check is enabled. Disabling scope check is strongly discouraged.\n   */\n  scopeCheckDisabled?: boolean;\n  /**\n   * Controls whether this micro application can interact with the capabilities of other apps without having to declare respective intentions.\n   *\n   * By default, intention check is enabled. Disabling intention check is strongly discouraged.\n   */\n  intentionCheckDisabled?: boolean;\n  /**\n   * Controls whether this micro application can register and unregister intentions dynamically at runtime.\n   *\n   * By default, this API is disabled. Enabling this API is strongly discouraged.\n   */\n  intentionRegisterApiDisabled?: boolean;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Entry point for all public APIs of this package.\n */\nexport {CapabilityInterceptor} from './capability-interceptors';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nexport * from './message-interception';\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Configures the liveness probe performed between host and clients to detect and dispose stale clients.\n * Clients not replying to the probe are removed.\n *\n * @category Platform\n */\nexport interface LivenessConfig {\n  /**\n   * Interval (in seconds) at which liveness probes are performed between host and connected clients.\n   * Note that the interval must not be 0 and be greater than twice the timeout period to give a probe enough time to complete before performing a new probe.\n   *\n   * By default, if not set, an interval of 60s is used.\n   */\n  interval: number;\n  /**\n   * Timeout (in seconds) after which a client is unregistered if not replying to the probe.\n   * Note that timeout must not be 0 and be less than half the interval period to give a probe enough time to complete before performing a new probe.\n   *\n   * By default, if not set, a timeout of 10s is used.\n   */\n  timeout: number;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Entry point for all public APIs of this package.\n */\nexport * from './microfrontend-platform-host';\nexport * from './microfrontend-platform-config';\nexport * from './host-config';\nexport * from './application-config';\nexport * from './manifest-registry/public_api';\nexport * from './message-broker/public_api';\nexport * from './host-manifest-interceptor';\nexport * from './liveness-config';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Controls how to connect to the platform host.\n *\n * @category Platform\n */\nexport interface ConnectOptions {\n  /**\n   * Controls whether to actually connect to the platform host.\n   *\n   * Disabling this flag can be useful in tests to not connect to the platform host but still have platform beans available.\n   * In this mode, messaging is disabled, i.e., sending and receiving messages results in a NOOP.\n   *\n   * By default, this flag is set to `true`.\n   */\n  connect?: boolean;\n  /**\n   * Specifies the maximum time (in milliseconds) to wait until the message broker is discovered on platform startup. If the broker is not discovered within\n   * the specified time, platform startup fails with an error. By default, a timeout of 10s is used.\n   */\n  brokerDiscoverTimeout?: number;\n  /**\n   * Specifies the maximum time (in milliseconds) that the platform waits to receive dispatch confirmation for messages sent by this application until rejecting\n   * the publishing Promise. By default, a timeout of 10s is used.\n   */\n  messageDeliveryTimeout?: number;\n}\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nexport {SciRouterOutletElement, OutletContext, OUTLET_CONTEXT, PRIMARY_OUTLET} from './router-outlet.element';\nexport {OutletRouter} from './outlet-router';\nexport {RelativePathResolver} from './relative-path-resolver';\nexport {NavigationOptions, Navigation} from './metadata';\nexport {RouterOutletUrlAssigner} from './router-outlet-url-assigner';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nexport {ContextLookupOptions} from './context.model';\nexport {ContextService} from './context-service';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nexport {FocusMonitor} from './focus-monitor';\n\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nexport {PreferredSizeService} from './preferred-size-service';\nexport {PreferredSize} from './preferred-size';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nexport {ManifestService} from './manifest-service';\n","/*\n * Copyright (c) 2018-2022 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\nexport {MessageClient, takeUntilUnsubscribe} from './message-client';\nexport {IntentClient, IntentSelector} from './intent-client';\nexport {PublishOptions, RequestOptions} from './publish-options';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Entry point for all public APIs of this package.\n */\nexport * from './microfrontend-platform-client';\nexport * from './connect-options';\nexport * from './router-outlet/public_api';\nexport * from './context/public_api';\nexport * from './focus/public_api';\nexport * from './preferred-size/public_api';\nexport * from './manifest-registry/public_api';\nexport * from './messaging/public_api';\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Entry point for all public APIs of this package.\n */\nexport * from './lib/microfrontend-platform';\nexport * from './lib/host/public_api';\nexport * from './lib/client/public_api';\nexport * from './lib/platform.model';\nexport * from './lib/messaging.model';\nexport * from './lib/platform-property-service';\nexport * from './lib/microfrontend-platform-stopper';\nexport * from './lib/platform-state';\nexport * from './lib/logger';\nexport * from './lib/topic-matcher.util';\nexport * from './lib/qualifier-matcher';\nexport * from './lib/observable-decorator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { __extends } from \"tslib\";\nimport { Subject } from './Subject';\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._value = null;\n        _this._hasValue = false;\n        _this._isComplete = false;\n        return _this;\n    }\n    AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {\n        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped || _isComplete) {\n            _hasValue && subscriber.next(_value);\n            subscriber.complete();\n        }\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._value = value;\n            this._hasValue = true;\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;\n        if (!_isComplete) {\n            this._isComplete = true;\n            _hasValue && _super.prototype.next.call(this, _value);\n            _super.prototype.complete.call(this);\n        }\n    };\n    return AsyncSubject;\n}(Subject));\nexport { AsyncSubject };\n//# sourceMappingURL=AsyncSubject.js.map","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private _value: T | null = null;\n  private _hasValue = false;\n  private _isComplete = false;\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<T>) {\n    const { hasError, _hasValue, _value, thrownError, isStopped, _isComplete } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped || _isComplete) {\n      _hasValue && subscriber.next(_value!);\n      subscriber.complete();\n    }\n  }\n\n  next(value: T): void {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  }\n\n  complete(): void {\n    const { _hasValue, _value, _isComplete } = this;\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && super.next(_value!);\n      super.complete();\n    }\n  }\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","import { __extends, __values } from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.closed = false;\n        _this.currentObservers = null;\n        _this.observers = [];\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype._throwIfClosed = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    };\n    Subject.prototype.next = function (value) {\n        var _this = this;\n        errorContext(function () {\n            var e_1, _a;\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                if (!_this.currentObservers) {\n                    _this.currentObservers = Array.from(_this.observers);\n                }\n                try {\n                    for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var observer = _c.value;\n                        observer.next(value);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        });\n    };\n    Subject.prototype.error = function (err) {\n        var _this = this;\n        errorContext(function () {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.hasError = _this.isStopped = true;\n                _this.thrownError = err;\n                var observers = _this.observers;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    };\n    Subject.prototype.complete = function () {\n        var _this = this;\n        errorContext(function () {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.isStopped = true;\n                var observers = _this.observers;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    };\n    Object.defineProperty(Subject.prototype, \"observed\", {\n        get: function () {\n            var _a;\n            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Subject.prototype._trySubscribe = function (subscriber) {\n        this._throwIfClosed();\n        return _super.prototype._trySubscribe.call(this, subscriber);\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    };\n    Subject.prototype._innerSubscribe = function (subscriber) {\n        var _this = this;\n        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(function () {\n            _this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    };\n    Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create custom Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n","import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nvar Observable = (function () {\n    function Observable(subscribe) {\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var _this = this;\n        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n        errorContext(function () {\n            var _a = _this, operator = _a.operator, source = _a.source;\n            subscriber.add(operator\n                ?\n                    operator.call(subscriber, source)\n                : source\n                    ?\n                        _this._subscribe(subscriber)\n                    :\n                        _this._trySubscribe(subscriber));\n        });\n        return subscriber;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.error(err);\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscriber = new SafeSubscriber({\n                next: function (value) {\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscriber.unsubscribe();\n                    }\n                },\n                error: reject,\n                complete: resolve,\n            });\n            _this.subscribe(subscriber);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var _a;\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    };\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        return pipeFromArray(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n    var _a;\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\nfunction isSubscriber(value) {\n    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n//# sourceMappingURL=Observable.js.map","import { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observerOrNext?: Partial<Observer<T>> | ((value: T) => void)): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * #### Examples\n   *\n   * Subscribe with an {@link guide/observer Observer}\n   *\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Subscribe with functions ({@link deprecations/subscribe-arguments deprecated})\n   *\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Cancel a subscription\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // 'unsubscribed!' after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   * or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   * Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   * the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * #### Example\n   *\n   * ```ts\n   * import { interval, take } from 'rxjs';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *   let total = 0;\n   *\n   *   await source$.forEach(value => {\n   *     total += value;\n   *     console.log('observable -> ' + value);\n   *   });\n   *\n   *   return total;\n   * }\n   *\n   * getTotal().then(\n   *   total => console.log('Total: ' + total)\n   * );\n   *\n   * // Expected:\n   * // 'observable -> 0'\n   * // 'observable -> 1'\n   * // 'observable -> 2'\n   * // 'observable -> 3'\n   * // 'Total: 6'\n   * ```\n   *\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      const subscriber = new SafeSubscriber<T>({\n        next: (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve,\n      });\n      this.subscribe(subscriber);\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, filter, map, scan } from 'rxjs';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x));\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n","import { __extends } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    function Subscriber(destination) {\n        var _this = _super.call(this) || this;\n        _this.isStopped = false;\n        if (destination) {\n            _this.destination = destination;\n            if (isSubscription(destination)) {\n                destination.add(_this);\n            }\n        }\n        else {\n            _this.destination = EMPTY_OBSERVER;\n        }\n        return _this;\n    }\n    Subscriber.create = function (next, error, complete) {\n        return new SafeSubscriber(next, error, complete);\n    };\n    Subscriber.prototype.next = function (value) {\n        if (this.isStopped) {\n            handleStoppedNotification(nextNotification(value), this);\n        }\n        else {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (this.isStopped) {\n            handleStoppedNotification(errorNotification(err), this);\n        }\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (this.isStopped) {\n            handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n        }\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n            this.destination = null;\n        }\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        try {\n            this.destination.error(err);\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    Subscriber.prototype._complete = function () {\n        try {\n            this.destination.complete();\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar _bind = Function.prototype.bind;\nfunction bind(fn, thisArg) {\n    return _bind.call(fn, thisArg);\n}\nvar ConsumerObserver = (function () {\n    function ConsumerObserver(partialObserver) {\n        this.partialObserver = partialObserver;\n    }\n    ConsumerObserver.prototype.next = function (value) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.next) {\n            try {\n                partialObserver.next(value);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    ConsumerObserver.prototype.error = function (err) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.error) {\n            try {\n                partialObserver.error(err);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n        else {\n            handleUnhandledError(err);\n        }\n    };\n    ConsumerObserver.prototype.complete = function () {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.complete) {\n            try {\n                partialObserver.complete();\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    return ConsumerObserver;\n}());\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        var partialObserver;\n        if (isFunction(observerOrNext) || !observerOrNext) {\n            partialObserver = {\n                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),\n                error: error !== null && error !== void 0 ? error : undefined,\n                complete: complete !== null && complete !== void 0 ? complete : undefined,\n            };\n        }\n        else {\n            var context_1;\n            if (_this && config.useDeprecatedNextContext) {\n                context_1 = Object.create(observerOrNext);\n                context_1.unsubscribe = function () { return _this.unsubscribe(); };\n                partialObserver = {\n                    next: observerOrNext.next && bind(observerOrNext.next, context_1),\n                    error: observerOrNext.error && bind(observerOrNext.error, context_1),\n                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),\n                };\n            }\n            else {\n                partialObserver = observerOrNext;\n            }\n        }\n        _this.destination = new ConsumerObserver(partialObserver);\n        return _this;\n    }\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\nfunction handleUnhandledError(error) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(error);\n    }\n    else {\n        reportUnhandledError(error);\n    }\n}\nfunction defaultErrorHandler(err) {\n    throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n    var onStoppedNotification = config.onStoppedNotification;\n    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });\n}\nexport var EMPTY_OBSERVER = {\n    closed: true,\n    next: noop,\n    error: defaultErrorHandler,\n    complete: noop,\n};\n//# sourceMappingURL=Subscriber.js.map","import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\n/**\n * Internal optimization only, DO NOT EXPOSE.\n * @internal\n */\nclass ConsumerObserver<T> implements Observer<T> {\n  constructor(private partialObserver: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    const { partialObserver } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n\n  error(err: any): void {\n    const { partialObserver } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n\n  complete(): void {\n    const { partialObserver } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let partialObserver: Partial<Observer<T>>;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      partialObserver = {\n        next: (observerOrNext ?? undefined) as (((value: T) => void) | undefined),\n        error: error ?? undefined,\n        complete: complete ?? undefined,\n      };\n    } else {\n      // The first argument is a partial observer.\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context),\n        };\n      } else {\n        // The \"normal\" path. Just use the partial observer directly.\n        partialObserver = observerOrNext;\n      }\n    }\n\n    // Wrap the partial observer to ensure it's a full observer, and\n    // make sure proper error handling is accounted for.\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\n\nfunction handleUnhandledError(error: any) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    // Ideal path, we report this as an unhandled error,\n    // which is thrown on a new call stack.\n    reportUnhandledError(error);\n  }\n}\n\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n","export function isFunction(value) {\n    return typeof value === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n","import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nvar Subscription = (function () {\n    function Subscription(initialTeardown) {\n        this.initialTeardown = initialTeardown;\n        this.closed = false;\n        this._parentage = null;\n        this._finalizers = null;\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var e_1, _a, e_2, _b;\n        var errors;\n        if (!this.closed) {\n            this.closed = true;\n            var _parentage = this._parentage;\n            if (_parentage) {\n                this._parentage = null;\n                if (Array.isArray(_parentage)) {\n                    try {\n                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n                            var parent_1 = _parentage_1_1.value;\n                            parent_1.remove(this);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n                else {\n                    _parentage.remove(this);\n                }\n            }\n            var initialFinalizer = this.initialTeardown;\n            if (isFunction(initialFinalizer)) {\n                try {\n                    initialFinalizer();\n                }\n                catch (e) {\n                    errors = e instanceof UnsubscriptionError ? e.errors : [e];\n                }\n            }\n            var _finalizers = this._finalizers;\n            if (_finalizers) {\n                this._finalizers = null;\n                try {\n                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {\n                        var finalizer = _finalizers_1_1.value;\n                        try {\n                            execFinalizer(finalizer);\n                        }\n                        catch (err) {\n                            errors = errors !== null && errors !== void 0 ? errors : [];\n                            if (err instanceof UnsubscriptionError) {\n                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n                            }\n                            else {\n                                errors.push(err);\n                            }\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            if (errors) {\n                throw new UnsubscriptionError(errors);\n            }\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        var _a;\n        if (teardown && teardown !== this) {\n            if (this.closed) {\n                execFinalizer(teardown);\n            }\n            else {\n                if (teardown instanceof Subscription) {\n                    if (teardown.closed || teardown._hasParent(this)) {\n                        return;\n                    }\n                    teardown._addParent(this);\n                }\n                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n            }\n        }\n    };\n    Subscription.prototype._hasParent = function (parent) {\n        var _parentage = this._parentage;\n        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _parentage = this._parentage;\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n    };\n    Subscription.prototype._removeParent = function (parent) {\n        var _parentage = this._parentage;\n        if (_parentage === parent) {\n            this._parentage = null;\n        }\n        else if (Array.isArray(_parentage)) {\n            arrRemove(_parentage, parent);\n        }\n    };\n    Subscription.prototype.remove = function (teardown) {\n        var _finalizers = this._finalizers;\n        _finalizers && arrRemove(_finalizers, teardown);\n        if (teardown instanceof Subscription) {\n            teardown._removeParent(this);\n        }\n    };\n    Subscription.EMPTY = (function () {\n        var empty = new Subscription();\n        empty.closed = true;\n        return empty;\n    })();\n    return Subscription;\n}());\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n    return (value instanceof Subscription ||\n        (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));\n}\nfunction execFinalizer(finalizer) {\n    if (isFunction(finalizer)) {\n        finalizer();\n    }\n    else {\n        finalizer.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscription.js.map","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the finalization\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown: initialFinalizer } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _finalizers } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The finalization logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the finalizer if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever finalizer is handed to it automatically.\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = this._finalizers ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subscription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All finalizer instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The finalizer to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _finalizers } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n","import { createErrorClass } from './createErrorClass';\nexport var UnsubscriptionError = createErrorClass(function (_super) {\n    return function UnsubscriptionErrorImpl(errors) {\n        _super(this);\n        this.message = errors\n            ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ')\n            : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n    };\n});\n//# sourceMappingURL=UnsubscriptionError.js.map","import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n","export function createErrorClass(createImpl) {\n    var _super = function (instance) {\n        Error.call(instance);\n        instance.stack = new Error().stack;\n    };\n    var ctorFunc = createImpl(_super);\n    ctorFunc.prototype = Object.create(Error.prototype);\n    ctorFunc.prototype.constructor = ctorFunc;\n    return ctorFunc;\n}\n//# sourceMappingURL=createErrorClass.js.map","/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","export function arrRemove(arr, item) {\n    if (arr) {\n        var index = arr.indexOf(item);\n        0 <= index && arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=arrRemove.js.map","/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","export var config = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: undefined,\n    useDeprecatedSynchronousErrorHandling: false,\n    useDeprecatedNextContext: false,\n};\n//# sourceMappingURL=config.js.map","import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\nexport function reportUnhandledError(err) {\n    timeoutProvider.setTimeout(function () {\n        var onUnhandledError = config.onUnhandledError;\n        if (onUnhandledError) {\n            onUnhandledError(err);\n        }\n        else {\n            throw err;\n        }\n    });\n}\n//# sourceMappingURL=reportUnhandledError.js.map","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n","import { __read, __spreadArray } from \"tslib\";\nexport var timeoutProvider = {\n    setTimeout: function (handler, timeout) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var delegate = timeoutProvider.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {\n            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));\n        }\n        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));\n    },\n    clearTimeout: function (handle) {\n        var delegate = timeoutProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=timeoutProvider.js.map","import type { TimerHandle } from './timerHandle';\ntype SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearTimeoutFunction = (handle: TimerHandle) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle as any);\n  },\n  delegate: undefined,\n};\n","export function noop() { }\n//# sourceMappingURL=noop.js.map","/* tslint:disable:no-empty */\nexport function noop() { }\n","export var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();\nexport function errorNotification(error) {\n    return createNotification('E', undefined, error);\n}\nexport function nextNotification(value) {\n    return createNotification('N', value, undefined);\n}\nexport function createNotification(kind, value, error) {\n    return {\n        kind: kind,\n        value: value,\n        error: error,\n    };\n}\n//# sourceMappingURL=NotificationFactories.js.map","import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n","import { config } from '../config';\nvar context = null;\nexport function errorContext(cb) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        var isRoot = !context;\n        if (isRoot) {\n            context = { errorThrown: false, error: null };\n        }\n        cb();\n        if (isRoot) {\n            var _a = context, errorThrown = _a.errorThrown, error = _a.error;\n            context = null;\n            if (errorThrown) {\n                throw error;\n            }\n        }\n    }\n    else {\n        cb();\n    }\n}\nexport function captureError(err) {\n    if (config.useDeprecatedSynchronousErrorHandling && context) {\n        context.errorThrown = true;\n        context.error = err;\n    }\n}\n//# sourceMappingURL=errorContext.js.map","import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n","export var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();\n//# sourceMappingURL=observable.js.map","/**\n * Symbol.observable or a string \"@@observable\". Used for interop\n *\n * @deprecated We will no longer be exporting this symbol in upcoming versions of RxJS.\n * Instead polyfill and use Symbol.observable directly *or* use https://www.npmjs.com/package/symbol-observable\n */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n","import { identity } from './identity';\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\n/**\n * pipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\n * and uses it to return a value.\n * It returns a function that takes one argument, passes it to the first UnaryFunction, and then\n * passes the result to the next one, passes that result to the next one, and so on.  \n */\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","/**\n * This function takes one parameter and just returns it. Simply put,\n * this is like `<T>(x: T): T => x`.\n *\n * ## Examples\n *\n * This is useful in some cases when using things like `mergeMap`\n *\n * ```ts\n * import { interval, take, map, range, mergeMap, identity } from 'rxjs';\n *\n * const source$ = interval(1000).pipe(take(5));\n *\n * const result$ = source$.pipe(\n *   map(i => range(i)),\n *   mergeMap(identity) // same as mergeMap(x => x)\n * );\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * Or when you want to selectively apply an operator\n *\n * ```ts\n * import { interval, take, identity } from 'rxjs';\n *\n * const shouldLimit = () => Math.random() < 0.5;\n *\n * const source$ = interval(1000);\n *\n * const result$ = source$.pipe(shouldLimit() ? take(5) : identity);\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * @param x Any value that is returned by this function\n * @returns The value passed as the first parameter to this function\n */\nexport function identity<T>(x: T): T {\n  return x;\n}\n","import { createErrorClass } from './createErrorClass';\nexport var ObjectUnsubscribedError = createErrorClass(function (_super) {\n    return function ObjectUnsubscribedErrorImpl() {\n        _super(this);\n        this.name = 'ObjectUnsubscribedError';\n        this.message = 'object unsubscribed';\n    };\n});\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import { createErrorClass } from './createErrorClass';\n\nexport interface ObjectUnsubscribedError extends Error {}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ObjectUnsubscribedError;\n}\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = createErrorClass(\n  (_super) =>\n    function ObjectUnsubscribedErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ObjectUnsubscribedError';\n      this.message = 'object unsubscribed';\n    }\n);\n","import { __extends } from \"tslib\";\nimport { Subject } from './Subject';\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        !subscription.closed && subscriber.next(this._value);\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;\n        if (hasError) {\n            throw thrownError;\n        }\n        this._throwIfClosed();\n        return _value;\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, (this._value = value));\n    };\n    return BehaviorSubject;\n}(Subject));\nexport { BehaviorSubject };\n//# sourceMappingURL=BehaviorSubject.js.map","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n\n  getValue(): T {\n    const { hasError, thrownError, _value } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n\n  next(value: T): void {\n    super.next((this._value = value));\n  }\n}\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function combineLatest() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = popScheduler(args);\n    var resultSelector = popResultSelector(args);\n    var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;\n    if (observables.length === 0) {\n        return from([], scheduler);\n    }\n    var result = new Observable(combineLatestInit(observables, scheduler, keys\n        ?\n            function (values) { return createObject(keys, values); }\n        :\n            identity));\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\nexport function combineLatestInit(observables, scheduler, valueTransform) {\n    if (valueTransform === void 0) { valueTransform = identity; }\n    return function (subscriber) {\n        maybeSchedule(scheduler, function () {\n            var length = observables.length;\n            var values = new Array(length);\n            var active = length;\n            var remainingFirstValues = length;\n            var _loop_1 = function (i) {\n                maybeSchedule(scheduler, function () {\n                    var source = from(observables[i], scheduler);\n                    var hasFirstValue = false;\n                    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n                        values[i] = value;\n                        if (!hasFirstValue) {\n                            hasFirstValue = true;\n                            remainingFirstValues--;\n                        }\n                        if (!remainingFirstValues) {\n                            subscriber.next(valueTransform(values.slice()));\n                        }\n                    }, function () {\n                        if (!--active) {\n                            subscriber.complete();\n                        }\n                    }));\n                }, subscriber);\n            };\n            for (var i = 0; i < length; i++) {\n                _loop_1(i);\n            }\n        }, subscriber);\n    };\n}\nfunction maybeSchedule(scheduler, execute, subscription) {\n    if (scheduler) {\n        executeSchedule(subscription, scheduler, execute);\n    }\n    else {\n        execute();\n    }\n}\n//# sourceMappingURL=combineLatest.js.map","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf, ObservableInputTuple } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { Subscriber } from '../Subscriber';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { Subscription } from '../Subscription';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { AnyCatcher } from '../AnyCatcher';\nimport { executeSchedule } from '../util/executeSchedule';\n\n// combineLatest(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function combineLatest<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// combineLatest([a, b, c])\nexport function combineLatest(sources: []): Observable<never>;\nexport function combineLatest<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R,\n  scheduler: SchedulerLike\n): Observable<R>;\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  sources: readonly [...ObservableInputTuple<A>],\n  scheduler: SchedulerLike\n): Observable<A>;\n\n// combineLatest(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelectorAndScheduler: [...ObservableInputTuple<A>, (...values: A) => R, SchedulerLike]\n): Observable<R>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): Observable<A>;\n\n// combineLatest({a, b, c})\nexport function combineLatest(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function combineLatest<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed in the\n * observables array. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to this operator,\n * the returned Observable will always emit an array of `n` values, in an order\n * corresponding to the order of the passed Observables (the value from the first Observable\n * will be at index 0 of the array and so on).\n *\n * Static version of `combineLatest` accepts an array of Observables. Note that an array of\n * Observables is a good choice, if you don't know beforehand how many Observables\n * you will combine. Passing an empty array will result in an Observable that\n * completes immediately.\n *\n * To ensure the output array always has the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will now be impossible to include a value from the\n * completed Observable in the resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, the resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, the result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of a completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * ## Examples\n *\n * Combine two timer Observables\n *\n * ```ts\n * import { timer, combineLatest } from 'rxjs';\n *\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest([firstTimer, secondTimer]);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * Combine a dictionary of Observables\n *\n * ```ts\n * import { of, delay, startWith, combineLatest } from 'rxjs';\n *\n * const observables = {\n *   a: of(1).pipe(delay(1000), startWith(0)),\n *   b: of(5).pipe(delay(5000), startWith(0)),\n *   c: of(10).pipe(delay(10000), startWith(0))\n * };\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // { a: 0, b: 0, c: 0 } immediately\n * // { a: 1, b: 0, c: 0 } after 1s\n * // { a: 1, b: 5, c: 0 } after 5s\n * // { a: 1, b: 5, c: 10 } after 10s\n * ```\n *\n * Combine an array of Observables\n *\n * ```ts\n * import { of, delay, startWith, combineLatest } from 'rxjs';\n *\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000), // emit 0 and then emit n after n seconds\n *     startWith(0)\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n * Use map operator to dynamically calculate the Body-Mass Index\n *\n * ```ts\n * import { of, combineLatest, map } from 'rxjs';\n *\n * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest([weight, height]).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} [observables] An array of input Observables to combine with each other.\n * An array of Observables must be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<O extends ObservableInput<any>, R>(...args: any[]): Observable<R> | Observable<ObservedValueOf<O>[]> {\n  const scheduler = popScheduler(args);\n  const resultSelector = popResultSelector(args);\n\n  const { args: observables, keys } = argsArgArrayOrObject(args);\n\n  if (observables.length === 0) {\n    // If no observables are passed, or someone has passed an empty array\n    // of observables, or even an empty object POJO, we need to just\n    // complete (EMPTY), but we have to honor the scheduler provided if any.\n    return from([], scheduler as any);\n  }\n\n  const result = new Observable<ObservedValueOf<O>[]>(\n    combineLatestInit(\n      observables as ObservableInput<ObservedValueOf<O>>[],\n      scheduler,\n      keys\n        ? // A handler for scrubbing the array of args into a dictionary.\n          (values) => createObject(keys, values)\n        : // A passthrough to just return the array\n          identity\n    )\n  );\n\n  return resultSelector ? (result.pipe(mapOneOrManyArgs(resultSelector)) as Observable<R>) : result;\n}\n\nexport function combineLatestInit(\n  observables: ObservableInput<any>[],\n  scheduler?: SchedulerLike,\n  valueTransform: (values: any[]) => any = identity\n) {\n  return (subscriber: Subscriber<any>) => {\n    // The outer subscription. We're capturing this in a function\n    // because we may have to schedule it.\n    maybeSchedule(\n      scheduler,\n      () => {\n        const { length } = observables;\n        // A store for the values each observable has emitted so far. We match observable to value on index.\n        const values = new Array(length);\n        // The number of currently active subscriptions, as they complete, we decrement this number to see if\n        // we are all done combining values, so we can complete the result.\n        let active = length;\n        // The number of inner sources that still haven't emitted the first value\n        // We need to track this because all sources need to emit one value in order\n        // to start emitting values.\n        let remainingFirstValues = length;\n        // The loop to kick off subscription. We're keying everything on index `i` to relate the observables passed\n        // in to the slot in the output array or the key in the array of keys in the output dictionary.\n        for (let i = 0; i < length; i++) {\n          maybeSchedule(\n            scheduler,\n            () => {\n              const source = from(observables[i], scheduler as any);\n              let hasFirstValue = false;\n              source.subscribe(\n                createOperatorSubscriber(\n                  subscriber,\n                  (value) => {\n                    // When we get a value, record it in our set of values.\n                    values[i] = value;\n                    if (!hasFirstValue) {\n                      // If this is our first value, record that.\n                      hasFirstValue = true;\n                      remainingFirstValues--;\n                    }\n                    if (!remainingFirstValues) {\n                      // We're not waiting for any more\n                      // first values, so we can emit!\n                      subscriber.next(valueTransform(values.slice()));\n                    }\n                  },\n                  () => {\n                    if (!--active) {\n                      // We only complete the result if we have no more active\n                      // inner observables.\n                      subscriber.complete();\n                    }\n                  }\n                )\n              );\n            },\n            subscriber\n          );\n        }\n      },\n      subscriber\n    );\n  };\n}\n\n/**\n * A small utility to handle the couple of locations where we want to schedule if a scheduler was provided,\n * but we don't if there was no scheduler.\n */\nfunction maybeSchedule(scheduler: SchedulerLike | undefined, execute: () => void, subscription: Subscription) {\n  if (scheduler) {\n    executeSchedule(subscription, scheduler, execute);\n  } else {\n    execute();\n  }\n}\n","var isArray = Array.isArray;\nvar getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;\nexport function argsArgArrayOrObject(args) {\n    if (args.length === 1) {\n        var first_1 = args[0];\n        if (isArray(first_1)) {\n            return { args: first_1, keys: null };\n        }\n        if (isPOJO(first_1)) {\n            var keys = getKeys(first_1);\n            return {\n                args: keys.map(function (key) { return first_1[key]; }),\n                keys: keys,\n            };\n        }\n    }\n    return { args: args, keys: null };\n}\nfunction isPOJO(obj) {\n    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n//# sourceMappingURL=argsArgArrayOrObject.js.map","const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n//# sourceMappingURL=from.js.map","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike | undefined): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from, take } from 'rxjs';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * With `asyncScheduler`\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // 'start'\n * // 'end'\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n//# sourceMappingURL=scheduled.js.map","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n//# sourceMappingURL=scheduleObservable.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { InteropObservable, SchedulerLike } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { __asyncValues, __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function innerFrom(input) {\n    if (input instanceof Observable) {\n        return input;\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromInteropObservable(input);\n        }\n        if (isArrayLike(input)) {\n            return fromArrayLike(input);\n        }\n        if (isPromise(input)) {\n            return fromPromise(input);\n        }\n        if (isAsyncIterable(input)) {\n            return fromAsyncIterable(input);\n        }\n        if (isIterable(input)) {\n            return fromIterable(input);\n        }\n        if (isReadableStreamLike(input)) {\n            return fromReadableStreamLike(input);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\nexport function fromInteropObservable(obj) {\n    return new Observable(function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (isFunction(obs.subscribe)) {\n            return obs.subscribe(subscriber);\n        }\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    });\n}\nexport function fromArrayLike(array) {\n    return new Observable(function (subscriber) {\n        for (var i = 0; i < array.length && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        subscriber.complete();\n    });\n}\nexport function fromPromise(promise) {\n    return new Observable(function (subscriber) {\n        promise\n            .then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, reportUnhandledError);\n    });\n}\nexport function fromIterable(iterable) {\n    return new Observable(function (subscriber) {\n        var e_1, _a;\n        try {\n            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {\n                var value = iterable_1_1.value;\n                subscriber.next(value);\n                if (subscriber.closed) {\n                    return;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        subscriber.complete();\n    });\n}\nexport function fromAsyncIterable(asyncIterable) {\n    return new Observable(function (subscriber) {\n        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });\n    });\n}\nexport function fromReadableStreamLike(readableStream) {\n    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\nfunction process(asyncIterable, subscriber) {\n    var asyncIterable_1, asyncIterable_1_1;\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var value, e_2_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _b.trys.push([0, 5, 6, 11]);\n                    asyncIterable_1 = __asyncValues(asyncIterable);\n                    _b.label = 1;\n                case 1: return [4, asyncIterable_1.next()];\n                case 2:\n                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];\n                    value = asyncIterable_1_1.value;\n                    subscriber.next(value);\n                    if (subscriber.closed) {\n                        return [2];\n                    }\n                    _b.label = 3;\n                case 3: return [3, 1];\n                case 4: return [3, 11];\n                case 5:\n                    e_2_1 = _b.sent();\n                    e_2 = { error: e_2_1 };\n                    return [3, 11];\n                case 6:\n                    _b.trys.push([6, , 9, 10]);\n                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];\n                    return [4, _a.call(asyncIterable_1)];\n                case 7:\n                    _b.sent();\n                    _b.label = 8;\n                case 8: return [3, 10];\n                case 9:\n                    if (e_2) throw e_2.error;\n                    return [7];\n                case 10: return [7];\n                case 11:\n                    subscriber.complete();\n                    return [2];\n            }\n        });\n    });\n}\n//# sourceMappingURL=innerFrom.js.map","import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ObservedValueOf, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n","export var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { isFunction } from \"./isFunction\";\nexport function isPromise(value) {\n    return isFunction(value === null || value === void 0 ? void 0 : value.then);\n}\n//# sourceMappingURL=isPromise.js.map","import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n","import { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\nexport function isInteropObservable(input) {\n    return isFunction(input[Symbol_observable]);\n}\n//# sourceMappingURL=isInteropObservable.js.map","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n","import { isFunction } from './isFunction';\nexport function isAsyncIterable(obj) {\n    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\n}\n//# sourceMappingURL=isAsyncIterable.js.map","import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n","export function createInvalidObservableTypeError(input) {\n    return new TypeError(\"You provided \" + (input !== null && typeof input === 'object' ? 'an invalid object' : \"'\" + input + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\n//# sourceMappingURL=throwUnobservableError.js.map","/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\nexport function isIterable(input) {\n    return isFunction(input === null || input === void 0 ? void 0 : input[Symbol_iterator]);\n}\n//# sourceMappingURL=isIterable.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = getSymbolIterator();\n//# sourceMappingURL=iterator.js.map","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n","import { __asyncGenerator, __await, __generator } from \"tslib\";\nimport { isFunction } from './isFunction';\nexport function readableStreamLikeToAsyncGenerator(readableStream) {\n    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {\n        var reader, _a, value, done;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    reader = readableStream.getReader();\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, , 9, 10]);\n                    _b.label = 2;\n                case 2:\n                    if (!true) return [3, 8];\n                    return [4, __await(reader.read())];\n                case 3:\n                    _a = _b.sent(), value = _a.value, done = _a.done;\n                    if (!done) return [3, 5];\n                    return [4, __await(void 0)];\n                case 4: return [2, _b.sent()];\n                case 5: return [4, __await(value)];\n                case 6: return [4, _b.sent()];\n                case 7:\n                    _b.sent();\n                    return [3, 2];\n                case 8: return [3, 10];\n                case 9:\n                    reader.releaseLock();\n                    return [7];\n                case 10: return [2];\n            }\n        });\n    });\n}\nexport function isReadableStreamLike(obj) {\n    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);\n}\n//# sourceMappingURL=isReadableStreamLike.js.map","import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return operate(function (source, subscriber) {\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));\n    });\n}\n//# sourceMappingURL=observeOn.js.map","/** @prettier */\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint\n *\n * ```ts\n * import { interval, observeOn, animationFrameScheduler } from 'rxjs';\n *\n * const someDiv = document.createElement('div');\n * someDiv.style.cssText = 'width: 200px;background: #09c';\n * document.body.appendChild(someDiv);\n * const intervals = interval(10);      // Intervals are scheduled\n *                                      // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\n * )                                    // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param delay Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\n        () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\n        (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\n      )\n    );\n  });\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {\n    if (delay === void 0) { delay = 0; }\n    if (repeat === void 0) { repeat = false; }\n    var scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n//# sourceMappingURL=executeSchedule.js.map","import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return function (source) {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n//# sourceMappingURL=lift.js.map","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","import { __extends } from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nvar OperatorSubscriber = (function (_super) {\n    __extends(OperatorSubscriber, _super);\n    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        var _this = _super.call(this, destination) || this;\n        _this.onFinalize = onFinalize;\n        _this.shouldUnsubscribe = shouldUnsubscribe;\n        _this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : _super.prototype._next;\n        _this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._error;\n        _this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._complete;\n        return _this;\n    }\n    OperatorSubscriber.prototype.unsubscribe = function () {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            var closed_1 = this.closed;\n            _super.prototype.unsubscribe.call(this);\n            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    };\n    return OperatorSubscriber;\n}(Subscriber));\nexport { OperatorSubscriber };\n//# sourceMappingURL=OperatorSubscriber.js.map","import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return operate(function (source, subscriber) {\n        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));\n    });\n}\n//# sourceMappingURL=subscribeOn.js.map","import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\n *\n * ```ts\n * import { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n//# sourceMappingURL=schedulePromise.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable(function (subscriber) {\n        var i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n//# sourceMappingURL=scheduleArray.js.map","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable(function (subscriber) {\n        var iterator;\n        executeSchedule(subscriber, scheduler, function () {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, function () {\n                var _a;\n                var value;\n                var done;\n                try {\n                    (_a = iterator.next(), value = _a.value, done = _a.done);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return function () { return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(function (subscriber) {\n        executeSchedule(subscriber, scheduler, function () {\n            var iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, function () {\n                iterator.next().then(function (result) {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n//# sourceMappingURL=scheduleAsyncIterable.js.map","import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n//# sourceMappingURL=scheduleReadableStreamLike.js.map","import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { map } from \"../operators/map\";\nvar isArray = Array.isArray;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n    return map(function (args) { return callOrApply(fn, args); });\n}\n//# sourceMappingURL=mapOneOrManyArgs.js.map","import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate(function (source, subscriber) {\n        var index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n//# sourceMappingURL=map.js.map","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n *\n * Map every click to the `clientX` position of that click\n *\n * ```ts\n * import { fromEvent, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n *\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n    return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n    return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n//# sourceMappingURL=args.js.map","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n//# sourceMappingURL=isScheduler.js.map","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n","export function createObject(keys, values) {\n    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});\n}\n//# sourceMappingURL=createObject.js.map","export function createObject(keys: string[], values: any[]) {\n  return keys.reduce((result, key, i) => ((result[key] = values[i]), result), {} as any);\n}\n","import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return concatAll()(from(args, popScheduler(args)));\n}\n//# sourceMappingURL=concat.js.map","import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(\n  ...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]\n): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n *\n * Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n *\n * ```ts\n * import { interval, take, range, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * Concatenate 3 Observables\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * Concatenate the same Observable to repeat it\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n *   .subscribe({\n *     next: value => console.log(value),\n *     complete: () => console.log('...and it is done!')\n *   });\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // '...and it is done!' also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param args Input Observables to concatenate.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(from(args, popScheduler(args)));\n}\n","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map","import { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.svg)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, map, interval, take, concatAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(4)))\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaustAll}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable emitting values from all the\n * inner Observables concatenated.\n */\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeAll(1);\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Infinity; }\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n *\n * ```ts\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n *\n * ```ts\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(10)))\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Infinity; }\n    if (isFunction(resultSelector)) {\n        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });\n}\n//# sourceMappingURL=mergeMap.js.map","import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    var buffer = [];\n    var active = 0;\n    var index = 0;\n    var isComplete = false;\n    var checkComplete = function () {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };\n    var doInnerSub = function (value) {\n        expand && subscriber.next(value);\n        active++;\n        var innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, function () {\n            innerComplete = true;\n        }, undefined, function () {\n            if (innerComplete) {\n                try {\n                    active--;\n                    var _loop_1 = function () {\n                        var bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    };\n                    while (buffer.length && active < concurrent) {\n                        _loop_1();\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {\n        isComplete = true;\n        checkComplete();\n    }));\n    return function () {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n//# sourceMappingURL=mergeInternals.js.map","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { concat } from './concat';\nexport function concatWith() {\n    var otherSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        otherSources[_i] = arguments[_i];\n    }\n    return concat.apply(void 0, __spreadArray([], __read(otherSources)));\n}\n//# sourceMappingURL=concatWith.js.map","import { ObservableInputTuple, OperatorFunction } from '../types';\nimport { concat } from './concat';\n\n/**\n * Emits all of the values from the source observable, then, once it completes, subscribes\n * to each observable source provided, one at a time, emitting all of their values, and not subscribing\n * to the next one until it completes.\n *\n * `concat(a$, b$, c$)` is the same as `a$.pipe(concatWith(b$, c$))`.\n *\n * ## Example\n *\n * Listen for one mouse click, then listen for all mouse moves.\n *\n * ```ts\n * import { fromEvent, map, take, concatWith } from 'rxjs';\n *\n * const clicks$ = fromEvent(document, 'click');\n * const moves$ = fromEvent(document, 'mousemove');\n *\n * clicks$.pipe(\n *   map(() => 'click'),\n *   take(1),\n *   concatWith(\n *     moves$.pipe(\n *       map(() => 'move')\n *     )\n *   )\n * )\n * .subscribe(x => console.log(x));\n *\n * // 'click'\n * // 'move'\n * // 'move'\n * // 'move'\n * // ...\n * ```\n *\n * @param otherSources Other observable sources to subscribe to, in sequence, after the original source is complete.\n * @return A function that returns an Observable that concatenates\n * subscriptions to the source and provided Observables subscribing to the next\n * only once the current subscription completes.\n */\nexport function concatWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  return concat(...otherSources);\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { operate } from '../util/lift';\nimport { concatAll } from './concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from '../observable/from';\nexport function concat() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = popScheduler(args);\n    return operate(function (source, subscriber) {\n        concatAll()(from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=concat.js.map","import { ObservableInputTuple, OperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { concatAll } from './concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from '../observable/from';\n\n/** @deprecated Replaced with {@link concatWith}. Will be removed in v8. */\nexport function concat<T, A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;\n/** @deprecated Replaced with {@link concatWith}. Will be removed in v8. */\nexport function concat<T, A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): OperatorFunction<T, T | A[number]>;\n\n/**\n * @deprecated Replaced with {@link concatWith}. Will be removed in v8.\n */\nexport function concat<T, R>(...args: any[]): OperatorFunction<T, R> {\n  const scheduler = popScheduler(args);\n  return operate((source, subscriber) => {\n    concatAll()(from([source, ...args], scheduler)).subscribe(subscriber);\n  });\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nexport function defer(observableFactory) {\n    return new Observable(function (subscriber) {\n        innerFrom(observableFactory()).subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=defer.js.map","import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInput } from '../types';\nimport { innerFrom } from './innerFrom';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create an Observable only when the Observer\n * subscribes. It waits until an Observer subscribes to it, calls the given\n * factory function to get an Observable -- where a factory function typically\n * generates a new Observable -- and subscribes the Observer to this Observable.\n * In case the factory function returns a falsy value, then EMPTY is used as\n * Observable instead. Last but not least, an exception during the factory\n * function call is transferred to the Observer by calling `error`.\n *\n * ## Example\n *\n * Subscribe to either an Observable of clicks or an Observable of interval, at random\n *\n * ```ts\n * import { defer, fromEvent, interval } from 'rxjs';\n *\n * const clicksOrInterval = defer(() => {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): ObservableInput} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n */\nexport function defer<R extends ObservableInput<any>>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\n  return new Observable<ObservedValueOf<R>>((subscriber) => {\n    innerFrom(observableFactory()).subscribe(subscriber);\n  });\n}\n","import { Observable } from '../Observable';\nexport var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\n}\n//# sourceMappingURL=empty.js.map","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * A simple Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * A simple Observable that only emits the complete notification. It can be used\n * for composing with other Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n *\n * Emit the number 7, then complete\n *\n * ```ts\n * import { EMPTY, startWith } from 'rxjs';\n *\n * const result = EMPTY.pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * Map and flatten only odd numbers to the sequence `'a'`, `'b'`, `'c'`\n *\n * ```ts\n * import { interval, mergeMap, of, EMPTY } from 'rxjs';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : EMPTY),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link NEVER}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n    return operate(function (source, subscriber) {\n        var index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));\n    });\n}\n//# sourceMappingURL=filter.js.map","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n *\n * Emit only click events whose target was a DIV element\n *\n * ```ts\n * import { fromEvent, filter } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n","import { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\nexport function firstValueFrom(source, config) {\n    var hasConfig = typeof config === 'object';\n    return new Promise(function (resolve, reject) {\n        var subscriber = new SafeSubscriber({\n            next: function (value) {\n                resolve(value);\n                subscriber.unsubscribe();\n            },\n            error: reject,\n            complete: function () {\n                if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n        source.subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=firstValueFrom.js.map","import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\n\nexport interface FirstValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function firstValueFrom<T, D>(source: Observable<T>, config: FirstValueFromConfig<D>): Promise<T | D>;\nexport function firstValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * and returning a promise that will resolve as soon as the first value\n * arrives from the observable. The subscription will then be closed.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will emit at least one value,\n * *OR* complete. If the source observable does not emit one value or complete, you will\n * end up with a promise that is hung up, and potentially all of the state of an\n * async function hanging out in memory. To avoid this situation, look into adding\n * something like {@link timeout}, {@link take}, {@link takeWhile}, or {@link takeUntil}\n * amongst others.\n *\n * ## Example\n *\n * Wait for the first value from a stream and emit it from a promise in\n * an async function\n *\n * ```ts\n * import { interval, firstValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000);\n *   const firstNumber = await firstValueFrom(source$);\n *   console.log(`The first number is ${ firstNumber }`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // 'The first number is 0'\n * ```\n *\n * @see {@link lastValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function firstValueFrom<T, D>(source: Observable<T>, config?: FirstValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    const subscriber = new SafeSubscriber<T>({\n      next: (value) => {\n        resolve(value);\n        subscriber.unsubscribe();\n      },\n      error: reject,\n      complete: () => {\n        if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n    source.subscribe(subscriber);\n  });\n}\n","import { createErrorClass } from './createErrorClass';\nexport var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {\n    _super(this);\n    this.name = 'EmptyError';\n    this.message = 'no elements in sequence';\n}; });\n//# sourceMappingURL=EmptyError.js.map","import { createErrorClass } from './createErrorClass';\n\nexport interface EmptyError extends Error {}\n\nexport interface EmptyErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): EmptyError;\n}\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n * @see {@link firstValueFrom}\n * @see {@link lastValueFrom}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = createErrorClass((_super) => function EmptyErrorImpl(this: any) {\n  _super(this);\n  this.name = 'EmptyError';\n  this.message = 'no elements in sequence';\n});\n","import { __read } from \"tslib\";\nimport { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nvar nodeEventEmitterMethods = ['addListener', 'removeListener'];\nvar eventTargetMethods = ['addEventListener', 'removeEventListener'];\nvar jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    var _a = __read(isEventTarget(target)\n        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [], 2), add = _a[0], remove = _a[1];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap(function (subTarget) { return fromEvent(subTarget, eventName, options); })(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable(function (subscriber) {\n        var handler = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return subscriber.next(1 < args.length ? args : args[0]);\n        };\n        add(handler);\n        return function () { return remove(handler); };\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n//# sourceMappingURL=fromEvent.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\n\n// These constants are used to create handler registry functions using array mapping below.\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'] as const;\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'] as const;\nconst jqueryMethods = ['on', 'off'] as const;\n\nexport interface NodeStyleEventEmitter {\n  addListener(eventName: string | symbol, handler: NodeEventHandler): this;\n  removeListener(eventName: string | symbol, handler: NodeEventHandler): this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener(eventName: string, handler: NodeEventHandler): void | {};\n  removeListener(eventName: string, handler: NodeEventHandler): void | {};\n}\n\n// Use handler types like those in @types/jquery. See:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/847731ba1d7fa6db6b911c0e43aa0afe596e7723/types/jquery/misc.d.ts#L6395\nexport interface JQueryStyleEventEmitter<TContext, T> {\n  on(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n  off(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n}\n\nexport interface EventListenerObject<E> {\n  handleEvent(evt: E): void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: EventListenerOptions | boolean\n  ): void;\n}\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\nexport function fromEvent<T>(target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>, eventName: string): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  resultSelector: (event: T) => R\n): Observable<R>;\nexport function fromEvent<T>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (event: T) => R\n): Observable<R>;\n\nexport function fromEvent(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string\n): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent<T>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string,\n  resultSelector: (value: T, ...args: any[]) => R\n): Observable<R>;\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n *\n * Emit clicks happening on the DOM document\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * Use `addEventListener` with capture option\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * // note optional configuration parameter which will be passed to addEventListener\n * const clicksInDocument = fromEvent(document, 'click', { capture: true });\n * const clicksInDiv = fromEvent(div, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n */\nexport function fromEvent<T>(\n  target: any,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T> {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent<T>(target, eventName, options as EventListenerOptions).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  // Figure out our add and remove methods. In order to do this,\n  // we are going to analyze the target in a preferred order, if\n  // the target matches a given signature, we take the two \"add\" and \"remove\"\n  // method names and apply them to a map to create opposite versions of the\n  // same function. This is because they all operate in duplicate pairs,\n  // `addListener(name, handler)`, `removeListener(name, handler)`, for example.\n  // The call only differs by method name, as to whether or not you're adding or removing.\n  const [add, remove] =\n    // If it is an EventTarget, we need to use a slightly different method than the other two patterns.\n    isEventTarget(target)\n      ? eventTargetMethods.map((methodName) => (handler: any) => target[methodName](eventName, handler, options as EventListenerOptions))\n      : // In all other cases, the call pattern is identical with the exception of the method names.\n      isNodeStyleEventEmitter(target)\n      ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n      : isJQueryStyleEventEmitter(target)\n      ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n      : [];\n\n  // If add is falsy, it's because we didn't match a pattern above.\n  // Check to see if it is an ArrayLike, because if it is, we want to\n  // try to apply fromEvent to all of it's items. We do this check last,\n  // because there are may be some types that are both ArrayLike *and* implement\n  // event registry points, and we'd rather delegate to that when possible.\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap((subTarget: any) => fromEvent(subTarget, eventName, options as EventListenerOptions))(\n        innerFrom(target)\n      ) as Observable<T>;\n    }\n  }\n\n  // If add is falsy and we made it here, it's because we didn't\n  // match any valid target objects above.\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n\n  return new Observable<T>((subscriber) => {\n    // The handler we are going to register. Forwards the event object, by itself, or\n    // an array of arguments to the event handler, if there is more than one argument,\n    // to the consumer.\n    const handler = (...args: any[]) => subscriber.next(1 < args.length ? args : args[0]);\n    // Do the work of adding the handler to the target.\n    add(handler);\n    // When we finalize, we want to remove the handler and free up memory.\n    return () => remove!(handler);\n  });\n}\n\n/**\n * Used to create `add` and `remove` functions to register and unregister event handlers\n * from a target in the most common handler pattern, where there are only two arguments.\n * (e.g.  `on(name, fn)`, `off(name, fn)`, `addListener(name, fn)`, or `removeListener(name, fn)`)\n * @param target The target we're calling methods on\n * @param eventName The event name for the event we're creating register or unregister functions for\n */\nfunction toCommonHandlerRegistry(target: any, eventName: string) {\n  return (methodName: string) => (handler: any) => target[methodName](eventName, handler);\n}\n\n/**\n * Checks to see if the target implements the required node-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isNodeStyleEventEmitter(target: any): target is NodeStyleEventEmitter {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\n\n/**\n * Checks to see if the target implements the required jQuery-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isJQueryStyleEventEmitter(target: any): target is JQueryStyleEventEmitter<any, any> {\n  return isFunction(target.on) && isFunction(target.off);\n}\n\n/**\n * Checks to see if the target implements the required EventTarget methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isEventTarget(target: any): target is HasEventTargetAddRemove<any> {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period, scheduler) {\n    if (period === void 0) { period = 0; }\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n//# sourceMappingURL=interval.js.map","import { Observable } from '../Observable';\nimport { asyncScheduler } from '../scheduler/async';\nimport { SchedulerLike } from '../types';\nimport { timer } from './timer';\n\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified {@link SchedulerLike}.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.</span>\n *\n * ![](interval.png)\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n * {@link SchedulerLike} to it.\n *\n * ## Example\n *\n * Emits ascending numbers, one every second (1000ms) up to the number 3\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const numbers = interval(1000);\n *\n * const takeFourNumbers = numbers.pipe(take(4));\n *\n * takeFourNumbers.subscribe(x => console.log('Next: ', x));\n *\n * // Logs:\n * // Next: 0\n * // Next: 1\n * // Next: 2\n * // Next: 3\n * ```\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n */\nexport function interval(period = 0, scheduler: SchedulerLike = asyncScheduler): Observable<number> {\n  if (period < 0) {\n    // We cannot schedule an interval in the past.\n    period = 0;\n  }\n\n  return timer(period, period, scheduler);\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport var asyncScheduler = new AsyncScheduler(AsyncAction);\nexport var async = asyncScheduler;\n//# sourceMappingURL=async.js.map","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * const task = () => console.log('it works!');\n *\n * asyncScheduler.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * asyncScheduler.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n */\n\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\n\n/**\n * @deprecated Renamed to {@link asyncScheduler}. Will be removed in v8.\n */\nexport const async = asyncScheduler;\n","import { __extends } from \"tslib\";\nimport { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        var _a;\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    };\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, _delay) {\n        var errored = false;\n        var errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            var _a = this, id = _a.id, scheduler = _a.scheduler;\n            var actions = scheduler.actions;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            _super.prototype.unsubscribe.call(this);\n        }\n    };\n    return AsyncAction;\n}(Action));\nexport { AsyncAction };\n//# sourceMappingURL=AsyncAction.js.map","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncAction<T> extends Action<T> {\n  public id: TimerHandle | undefined;\n  public state?: T;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id ?? this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, _id?: TimerHandle, delay: number = 0): TimerHandle {\n    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(_scheduler: AsyncScheduler, id?: TimerHandle, delay: number | null = 0): TimerHandle | undefined {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    if (id != null) {\n      intervalProvider.clearInterval(id);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, _delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      // HACK: Since code elsewhere is relying on the \"truthiness\" of the\n      // return here, we can't have it return \"\" or 0 or false.\n      // TODO: Clean this up when we refactor schedulers mid-version-8 or so.\n      errorValue = e ? e : new Error('Scheduled action threw falsy error');\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      const { id, scheduler } = this;\n      const { actions } = scheduler;\n\n      this.work = this.state = this.scheduler = null!;\n      this.pending = false;\n\n      arrRemove(actions, this);\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null!;\n      super.unsubscribe();\n    }\n  }\n}\n","import { __extends } from \"tslib\";\nimport { Subscription } from '../Subscription';\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription));\nexport { Action };\n//# sourceMappingURL=Action.js.map","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { __read, __spreadArray } from \"tslib\";\nexport var intervalProvider = {\n    setInterval: function (handler, timeout) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var delegate = intervalProvider.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));\n        }\n        return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));\n    },\n    clearInterval: function (handle) {\n        var delegate = intervalProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=intervalProvider.js.map","import type { TimerHandle } from './timerHandle';\ntype SetIntervalFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearIntervalFunction = (handle: TimerHandle) => void;\n\ninterface IntervalProvider {\n  setInterval: SetIntervalFunction;\n  clearInterval: ClearIntervalFunction;\n  delegate:\n    | {\n        setInterval: SetIntervalFunction;\n        clearInterval: ClearIntervalFunction;\n      }\n    | undefined;\n}\n\nexport const intervalProvider: IntervalProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setInterval(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = intervalProvider;\n    if (delegate?.setInterval) {\n      return delegate.setInterval(handler, timeout, ...args);\n    }\n    return setInterval(handler, timeout, ...args);\n  },\n  clearInterval(handle) {\n    const { delegate } = intervalProvider;\n    return (delegate?.clearInterval || clearInterval)(handle as any);\n  },\n  delegate: undefined,\n};\n","import { __extends } from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        var _this = _super.call(this, SchedulerAction, now) || this;\n        _this.actions = [];\n        _this._active = false;\n        return _this;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\nexport { AsyncScheduler };\n//# sourceMappingURL=AsyncScheduler.js.map","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: TimerHandle | undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nvar Scheduler = (function () {\n    function Scheduler(schedulerActionCtor, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    };\n    Scheduler.now = dateTimestampProvider.now;\n    return Scheduler;\n}());\nexport { Scheduler };\n//# sourceMappingURL=Scheduler.js.map","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}. Will be made internal in v8.\n */\nexport class Scheduler implements SchedulerLike {\n  public static now: () => number = dateTimestampProvider.now;\n\n  constructor(private schedulerActionCtor: typeof Action, now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);\n  }\n}\n","export var dateTimestampProvider = {\n    now: function () {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=dateTimestampProvider.js.map","import { TimestampProvider } from '../types';\n\ninterface DateTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const dateTimestampProvider: DateTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (dateTimestampProvider.delegate || Date).now();\n  },\n  delegate: undefined,\n};\n","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime, intervalOrScheduler, scheduler) {\n    if (dueTime === void 0) { dueTime = 0; }\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\n    var intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable(function (subscriber) {\n        var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        var n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n//# sourceMappingURL=timer.js.map","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\n\n/**\n * Creates an observable that will wait for a specified time period, or exact date, before\n * emitting the number 0.\n *\n * <span class=\"informal\">Used to emit a notification after a delay.</span>\n *\n * This observable is useful for creating delays in code, or racing against other values\n * for ad-hoc timeouts.\n *\n * The `delay` is specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Examples\n *\n * Wait 3 seconds and start another observable\n *\n * You might want to use `timer` to delay subscription to an\n * observable by a set amount of time. Here we use a timer with\n * {@link concatMapTo} or {@link concatMap} in order to wait\n * a few seconds and start a subscription to a source.\n *\n * ```ts\n * import { of, timer, concatMap } from 'rxjs';\n *\n * // This could be any observable\n * const source = of(1, 2, 3);\n *\n * timer(3000)\n *   .pipe(concatMap(() => source))\n *   .subscribe(console.log);\n * ```\n *\n * Take all values until the start of the next minute\n *\n * Using a `Date` as the trigger for the first emission, you can\n * do things like wait until midnight to fire an event, or in this case,\n * wait until a new minute starts (chosen so the example wouldn't take\n * too long to run) in order to stop watching a stream. Leveraging\n * {@link takeUntil}.\n *\n * ```ts\n * import { interval, takeUntil, timer } from 'rxjs';\n *\n * // Build a Date object that marks the\n * // next minute.\n * const currentDate = new Date();\n * const startOfNextMinute = new Date(\n *   currentDate.getFullYear(),\n *   currentDate.getMonth(),\n *   currentDate.getDate(),\n *   currentDate.getHours(),\n *   currentDate.getMinutes() + 1\n * );\n *\n * // This could be any observable stream\n * const source = interval(1000);\n *\n * const result = source.pipe(\n *   takeUntil(timer(startOfNextMinute))\n * );\n *\n * result.subscribe(console.log);\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `dueTime`.\n *\n * @param due If a `number`, the amount of time in milliseconds to wait before emitting.\n * If a `Date`, the exact time at which to emit.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(due: number | Date, scheduler?: SchedulerLike): Observable<0>;\n\n/**\n * Creates an observable that starts an interval after a specified delay, emitting incrementing numbers -- starting at `0` --\n * on each interval after words.\n *\n * The `delay` and `intervalDuration` are specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Example\n *\n * ### Start an interval that starts right away\n *\n * Since {@link interval} waits for the passed delay before starting,\n * sometimes that's not ideal. You may want to start an interval immediately.\n * `timer` works well for this. Here we have both side-by-side so you can\n * see them in comparison.\n *\n * Note that this observable will never complete.\n *\n * ```ts\n * import { timer, interval } from 'rxjs';\n *\n * timer(0, 1000).subscribe(n => console.log('timer', n));\n * interval(1000).subscribe(n => console.log('interval', n));\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `startDue`.\n * @param startDue If a `number`, is the time to wait before starting the interval.\n * If a `Date`, is the exact time at which to start the interval.\n * @param intervalDuration The delay between each value emitted in the interval. Passing a\n * negative number here will result in immediate completion after the first value is emitted, as though\n * no `intervalDuration` was passed at all.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(startDue: number | Date, intervalDuration: number, scheduler?: SchedulerLike): Observable<number>;\n\n/**\n * @deprecated The signature allowing `undefined` to be passed for `intervalDuration` will be removed in v8. Use the `timer(dueTime, scheduler?)` signature instead.\n */\nexport function timer(dueTime: number | Date, unused: undefined, scheduler?: SchedulerLike): Observable<0>;\n\nexport function timer(\n  dueTime: number | Date = 0,\n  intervalOrScheduler?: number | SchedulerLike,\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> {\n  // Since negative intervalDuration is treated as though no\n  // interval was specified at all, we start with a negative number.\n  let intervalDuration = -1;\n\n  if (intervalOrScheduler != null) {\n    // If we have a second argument, and it's a scheduler,\n    // override the scheduler we had defaulted. Otherwise,\n    // it must be an interval.\n    if (isScheduler(intervalOrScheduler)) {\n      scheduler = intervalOrScheduler;\n    } else {\n      // Note that this *could* be negative, in which case\n      // it's like not passing an intervalDuration at all.\n      intervalDuration = intervalOrScheduler;\n    }\n  }\n\n  return new Observable((subscriber) => {\n    // If a valid date is passed, calculate how long to wait before\n    // executing the first value... otherwise, if it's a number just schedule\n    // that many milliseconds (or scheduler-specified unit size) in the future.\n    let due = isValidDate(dueTime) ? +dueTime - scheduler!.now() : dueTime;\n\n    if (due < 0) {\n      // Ensure we don't schedule in the future.\n      due = 0;\n    }\n\n    // The incrementing value we emit.\n    let n = 0;\n\n    // Start the timer.\n    return scheduler.schedule(function () {\n      if (!subscriber.closed) {\n        // Emit the next value and increment.\n        subscriber.next(n++);\n\n        if (0 <= intervalDuration) {\n          // If we have a interval after the initial timer,\n          // reschedule with the period.\n          this.schedule(undefined, intervalDuration);\n        } else {\n          // We didn't have an interval. So just complete.\n          subscriber.complete();\n        }\n      }\n    }, due);\n  });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n//# sourceMappingURL=isDate.js.map","/**\n * Checks to see if a value is not only a `Date` object,\n * but a *valid* `Date` object that can be converted to a\n * number. For example, `new Date('blah')` is indeed an\n * `instanceof Date`, however it cannot be converted to a\n * number.\n */\nexport function isValidDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value as any);\n}\n","import { EmptyError } from './util/EmptyError';\nexport function lastValueFrom(source, config) {\n    var hasConfig = typeof config === 'object';\n    return new Promise(function (resolve, reject) {\n        var _hasValue = false;\n        var _value;\n        source.subscribe({\n            next: function (value) {\n                _value = value;\n                _hasValue = true;\n            },\n            error: reject,\n            complete: function () {\n                if (_hasValue) {\n                    resolve(_value);\n                }\n                else if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n    });\n}\n//# sourceMappingURL=lastValueFrom.js.map","import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\n\nexport interface LastValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function lastValueFrom<T, D>(source: Observable<T>, config: LastValueFromConfig<D>): Promise<T | D>;\nexport function lastValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * waiting for it to complete, and resolving the returned promise with the\n * last value from the observed stream.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will complete. If the source\n * observable does not complete, you will end up with a promise that is hung up, and\n * potentially all of the state of an async function hanging out in memory. To avoid\n * this situation, look into adding something like {@link timeout}, {@link take},\n * {@link takeWhile}, or {@link takeUntil} amongst others.\n *\n * ## Example\n *\n * Wait for the last value from a stream and emit it from a promise in\n * an async function\n *\n * ```ts\n * import { interval, take, lastValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000).pipe(take(10));\n *   const finalNumber = await lastValueFrom(source$);\n *   console.log(`The final number is ${ finalNumber }`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // 'The final number is 9'\n * ```\n *\n * @see {@link firstValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function lastValueFrom<T, D>(source: Observable<T>, config?: LastValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    let _hasValue = false;\n    let _value: T;\n    source.subscribe({\n      next: (value) => {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: () => {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n  });\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = popScheduler(args);\n    var concurrent = popNumber(args, Infinity);\n    var sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n//# sourceMappingURL=merge.js.map","import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Merge together two Observables: 1s interval and clicks\n *\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console every time the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * Merge together 3 Observables, but run only 2 concurrently\n *\n * ```ts\n * import { interval, take, merge } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\nexport var NEVER = new Observable(noop);\nexport function never() {\n    return NEVER;\n}\n//# sourceMappingURL=never.js.map","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n *\n * Emit the number 7, then never emit anything else (not even complete)\n *\n * ```ts\n * import { NEVER, startWith } from 'rxjs';\n *\n * const info = () => console.log('Will not be called');\n *\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe({\n *   next: x => console.log(x),\n *   error: info,\n *   complete: info\n * });\n * ```\n *\n * @see {@link Observable}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Replaced with the {@link NEVER} constant. Will be removed in v8.\n */\nexport function never() {\n  return NEVER;\n}\n","import { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function of() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = popScheduler(args);\n    return from(args, scheduler);\n}\n//# sourceMappingURL=of.js.map","import { SchedulerLike, ValueFromArray } from '../types';\nimport { Observable } from '../Observable';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return from(args as T[], scheduler);\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nexport function race() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    sources = argsOrArgArray(sources);\n    return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));\n}\nexport function raceInit(sources) {\n    return function (subscriber) {\n        var subscriptions = [];\n        var _loop_1 = function (i) {\n            subscriptions.push(innerFrom(sources[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n                if (subscriptions) {\n                    for (var s = 0; s < subscriptions.length; s++) {\n                        s !== i && subscriptions[s].unsubscribe();\n                    }\n                    subscriptions = null;\n                }\n                subscriber.next(value);\n            })));\n        };\n        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n            _loop_1(i);\n        }\n    };\n}\n//# sourceMappingURL=race.js.map","import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, ObservableInputTuple } from '../types';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { Subscriber } from '../Subscriber';\n\nexport function race<T extends readonly unknown[]>(inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function race<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\n\n/**\n * Returns an observable that mirrors the first source observable to emit an item.\n *\n * ![](race.png)\n *\n * `race` returns an observable, that when subscribed to, subscribes to all source observables immediately.\n * As soon as one of the source observables emits a value, the result unsubscribes from the other sources.\n * The resulting observable will forward all notifications, including error and completion, from the \"winning\"\n * source observable.\n *\n * If one of the used source observable throws an errors before a first notification\n * the race operator will also throw an error, no matter if another source observable\n * could potentially win the race.\n *\n * `race` can be useful for selecting the response from the fastest network connection for\n * HTTP or WebSockets. `race` can also be useful for switching observable context based on user\n * input.\n *\n * ## Example\n *\n * Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { interval, map, race } from 'rxjs';\n *\n * const obs1 = interval(7000).pipe(map(() => 'slow one'));\n * const obs2 = interval(3000).pipe(map(() => 'fast one'));\n * const obs3 = interval(5000).pipe(map(() => 'medium one'));\n *\n * race(obs1, obs2, obs3)\n *   .subscribe(winner => console.log(winner));\n *\n * // Outputs\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n */\nexport function race<T>(...sources: (ObservableInput<T> | ObservableInput<T>[])[]): Observable<any> {\n  sources = argsOrArgArray(sources);\n  // If only one source was passed, just return it. Otherwise return the race.\n  return sources.length === 1 ? innerFrom(sources[0] as ObservableInput<T>) : new Observable<T>(raceInit(sources as ObservableInput<T>[]));\n}\n\n/**\n * An observable initializer function for both the static version and the\n * operator version of race.\n * @param sources The sources to race\n */\nexport function raceInit<T>(sources: ObservableInput<T>[]) {\n  return (subscriber: Subscriber<T>) => {\n    let subscriptions: Subscription[] = [];\n\n    // Subscribe to all of the sources. Note that we are checking `subscriptions` here\n    // Is is an array of all actively \"racing\" subscriptions, and it is `null` after the\n    // race has been won. So, if we have racer that synchronously \"wins\", this loop will\n    // stop before it subscribes to any more.\n    for (let i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n      subscriptions.push(\n        innerFrom(sources[i] as ObservableInput<T>).subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            if (subscriptions) {\n              // We're still racing, but we won! So unsubscribe\n              // all other subscriptions that we have, except this one.\n              for (let s = 0; s < subscriptions.length; s++) {\n                s !== i && subscriptions[s].unsubscribe();\n              }\n              subscriptions = null!;\n            }\n            subscriber.next(value);\n          })\n        )\n      );\n    }\n  };\n}\n","var isArray = Array.isArray;\nexport function argsOrArgArray(args) {\n    return args.length === 1 && isArray(args[0]) ? args[0] : args;\n}\n//# sourceMappingURL=argsOrArgArray.js.map","const { isArray } = Array;\n\n/**\n * Used in operators and functions that accept either a list of arguments, or an array of arguments\n * as a single argument.\n */\nexport function argsOrArgArray<T>(args: (T | T[])[]): T[] {\n  return args.length === 1 && isArray(args[0]) ? args[0] : (args as T[]);\n}\n","import { __extends } from \"tslib\";\nimport { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {\n        if (_bufferSize === void 0) { _bufferSize = Infinity; }\n        if (_windowTime === void 0) { _windowTime = Infinity; }\n        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }\n        var _this = _super.call(this) || this;\n        _this._bufferSize = _bufferSize;\n        _this._windowTime = _windowTime;\n        _this._timestampProvider = _timestampProvider;\n        _this._buffer = [];\n        _this._infiniteTimeWindow = true;\n        _this._infiniteTimeWindow = _windowTime === Infinity;\n        _this._bufferSize = Math.max(1, _bufferSize);\n        _this._windowTime = Math.max(1, _windowTime);\n        return _this;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        var subscription = this._innerSubscribe(subscriber);\n        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;\n        var copy = _buffer.slice();\n        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    };\n    ReplaySubject.prototype._trimBuffer = function () {\n        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;\n        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            var now = _timestampProvider.now();\n            var last = 0;\n            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    };\n    return ReplaySubject;\n}(Subject));\nexport { ReplaySubject };\n//# sourceMappingURL=ReplaySubject.js.map","import { Subject } from './Subject';\nimport { TimestampProvider } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n *\n * `ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n * `ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\n * value for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n *\n * When a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\n * a First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\n * error if it has observed an error.\n *\n * There are two main configuration items to be concerned with:\n *\n * 1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n * 2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n *\n * Both configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\n * are less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n *\n * ### Differences with BehaviorSubject\n *\n * `BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple of exceptions:\n *\n * 1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n * 2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n * @see {@link shareReplay}\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _buffer: (T | number)[] = [];\n  private _infiniteTimeWindow = true;\n\n  /**\n   * @param bufferSize The size of the buffer to replay on subscription\n   * @param windowTime The amount of time the buffered items will stay buffered\n   * @param timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\n   * calculate the amount of time something has been buffered.\n   */\n  constructor(\n    private _bufferSize = Infinity,\n    private _windowTime = Infinity,\n    private _timestampProvider: TimestampProvider = dateTimestampProvider\n  ) {\n    super();\n    this._infiniteTimeWindow = _windowTime === Infinity;\n    this._bufferSize = Math.max(1, _bufferSize);\n    this._windowTime = Math.max(1, _windowTime);\n  }\n\n  next(value: T): void {\n    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n    if (!isStopped) {\n      _buffer.push(value);\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n    this._trimBuffer();\n    super.next(value);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._trimBuffer();\n\n    const subscription = this._innerSubscribe(subscriber);\n\n    const { _infiniteTimeWindow, _buffer } = this;\n    // We use a copy here, so reentrant code does not mutate our array while we're\n    // emitting it to a new subscriber.\n    const copy = _buffer.slice();\n    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i] as T);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  }\n\n  private _trimBuffer() {\n    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n    // If we don't have an infinite buffer size, and we're over the length,\n    // use splice to truncate the old buffer values off. Note that we have to\n    // double the size for instances where we're not using an infinite time window\n    // because we're storing the values and the timestamps in the same array.\n    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    // Now, if we're not in an infinite time window, remove all values where the time is\n    // older than what is allowed.\n    if (!_infiniteTimeWindow) {\n      const now = _timestampProvider.now();\n      let last = 0;\n      // Search the array for the first timestamp that isn't expired and\n      // truncate the buffer up to that point.\n      for (let i = 1; i < _buffer.length && (_buffer[i] as number) <= now; i += 2) {\n        last = i;\n      }\n      last && _buffer.splice(0, last + 1);\n    }\n  }\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount) {\n    if (configOrCount === void 0) { configOrCount = Infinity; }\n    var config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;\n    return count <= 0\n        ? identity\n        : operate(function (source, subscriber) {\n            var soFar = 0;\n            var innerSub;\n            var subscribeForRetry = function () {\n                var syncUnsub = false;\n                innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, function (err) {\n                    if (soFar++ < count) {\n                        var resub_1 = function () {\n                            if (innerSub) {\n                                innerSub.unsubscribe();\n                                innerSub = null;\n                                subscribeForRetry();\n                            }\n                            else {\n                                syncUnsub = true;\n                            }\n                        };\n                        if (delay != null) {\n                            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                            var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {\n                                notifierSubscriber_1.unsubscribe();\n                                resub_1();\n                            }, function () {\n                                subscriber.complete();\n                            });\n                            notifier.subscribe(notifierSubscriber_1);\n                        }\n                        else {\n                            resub_1();\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n//# sourceMappingURL=retry.js.map","import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { Subscription } from '../Subscription';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * The {@link retry} operator configuration object. `retry` either accepts a `number`\n * or an object described by this interface.\n */\nexport interface RetryConfig {\n  /**\n   * The maximum number of times to retry. If `count` is omitted, `retry` will try to\n   * resubscribe on errors infinite number of times.\n   */\n  count?: number;\n  /**\n   * The number of milliseconds to delay before retrying, OR a function to\n   * return a notifier for delaying. If a function is given, that function should\n   * return a notifier that, when it emits will retry the source. If the notifier\n   * completes _without_ emitting, the resulting observable will complete without error,\n   * if the notifier errors, the error will be pushed to the result.\n   */\n  delay?: number | ((error: any, retryCount: number) => ObservableInput<any>);\n  /**\n   * Whether or not to reset the retry counter when the retried subscription\n   * emits its first value.\n   */\n  resetOnSuccess?: boolean;\n}\n\nexport function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\nexport function retry<T>(config: RetryConfig): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`.\n *\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * `count` resubscriptions rather than propagating the `error` call.\n *\n * ![](retry.png)\n *\n * The number of retries is determined by the `count` parameter. It can be set either by passing a number to\n * `retry` function or by setting `count` property when `retry` is configured using {@link RetryConfig}. If\n * `count` is omitted, `retry` will try to resubscribe on errors infinite number of times.\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those\n * emitted during failed subscriptions. For example, if an Observable fails at first but emits `[1, 2]` then\n * succeeds the second time and emits: `[1, 2, 3, 4, 5, complete]` then the complete stream of emissions and\n * notifications would be: `[1, 2, 1, 2, 3, 4, 5, complete]`.\n *\n * ## Example\n *\n * ```ts\n * import { interval, mergeMap, throwError, of, retry } from 'rxjs';\n *\n * const source = interval(1000);\n * const result = source.pipe(\n *   mergeMap(val => val > 5 ? throwError(() => 'Error!') : of(val)),\n *   retry(2) // retry 2 times on error\n * );\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(`${ err }: Retried 2 times then quit!`)\n * });\n *\n * // Output:\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // 'Error!: Retried 2 times then quit!'\n * ```\n *\n * @see {@link retryWhen}\n *\n * @param configOrCount - Either number of retry attempts before failing or a {@link RetryConfig} object.\n * @return A function that returns an Observable that will resubscribe to the\n * source stream when the source stream errors, at most `count` times.\n */\nexport function retry<T>(configOrCount: number | RetryConfig = Infinity): MonoTypeOperatorFunction<T> {\n  let config: RetryConfig;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount as number,\n    };\n  }\n  const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\n\n  return count <= 0\n    ? identity\n    : operate((source, subscriber) => {\n        let soFar = 0;\n        let innerSub: Subscription | null;\n        const subscribeForRetry = () => {\n          let syncUnsub = false;\n          innerSub = source.subscribe(\n            createOperatorSubscriber(\n              subscriber,\n              (value) => {\n                // If we're resetting on success\n                if (resetOnSuccess) {\n                  soFar = 0;\n                }\n                subscriber.next(value);\n              },\n              // Completions are passed through to consumer.\n              undefined,\n              (err) => {\n                if (soFar++ < count) {\n                  // We are still under our retry count\n                  const resub = () => {\n                    if (innerSub) {\n                      innerSub.unsubscribe();\n                      innerSub = null;\n                      subscribeForRetry();\n                    } else {\n                      syncUnsub = true;\n                    }\n                  };\n\n                  if (delay != null) {\n                    // The user specified a retry delay.\n                    // They gave us a number, use a timer, otherwise, it's a function,\n                    // and we're going to call it to get a notifier.\n                    const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                    const notifierSubscriber = createOperatorSubscriber(\n                      subscriber,\n                      () => {\n                        // After we get the first notification, we\n                        // unsubscribe from the notifier, because we don't want anymore\n                        // and we resubscribe to the source.\n                        notifierSubscriber.unsubscribe();\n                        resub();\n                      },\n                      () => {\n                        // The notifier completed without emitting.\n                        // The author is telling us they want to complete.\n                        subscriber.complete();\n                      }\n                    );\n                    notifier.subscribe(notifierSubscriber);\n                  } else {\n                    // There was no notifier given. Just resub immediately.\n                    resub();\n                  }\n                } else {\n                  // We're past our maximum number of retries.\n                  // Just send along the error.\n                  subscriber.error(err);\n                }\n              }\n            )\n          );\n          if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRetry();\n          }\n        };\n        subscribeForRetry();\n      });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate(function (source, subscriber) {\n        var innerSubscriber = null;\n        var index = 0;\n        var isComplete = false;\n        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            var innerIndex = 0;\n            var outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, function () {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n//# sourceMappingURL=switchMap.js.map","import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switchAll}.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n *\n * Generate new Observable according to source Observable values\n *\n * ```ts\n * import { of, switchMap } from 'rxjs';\n *\n * const switched = of(1, 2, 3).pipe(switchMap(x => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // 3\n * // 9\n * // 27\n * ```\n *\n * Restart an interval Observable on every click event\n *\n * ```ts\n * import { fromEvent, switchMap, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * only the values from the most recently projected inner Observable.\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return operate((source, subscriber) => {\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\n    let index = 0;\n    // Whether or not the source subscription has completed\n    let isComplete = false;\n\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\n    // This is called both when the source completes and when the inners complete.\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Cancel the previous inner subscription if there was one\n          innerSubscriber?.unsubscribe();\n          let innerIndex = 0;\n          const outerIndex = index++;\n          // Start the next inner subscription\n          innerFrom(project(value, outerIndex)).subscribe(\n            (innerSubscriber = createOperatorSubscriber(\n              subscriber,\n              // When we get a new inner value, next it through. Note that this is\n              // handling the deprecate result selector here. This is because with this architecture\n              // it ends up being smaller than using the map operator.\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\n              () => {\n                // The inner has completed. Null out the inner subscriber to\n                // free up memory and to signal that we have no inner subscription\n                // currently.\n                innerSubscriber = null!;\n                checkComplete();\n              }\n            ))\n          );\n        },\n        () => {\n          isComplete = true;\n          checkComplete();\n        }\n      )\n    );\n  });\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nexport function throwError(errorOrErrorFactory, scheduler) {\n    var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function () { return errorOrErrorFactory; };\n    var init = function (subscriber) { return subscriber.error(errorFactory()); };\n    return new Observable(scheduler ? function (subscriber) { return scheduler.schedule(init, 0, subscriber); } : init);\n}\n//# sourceMappingURL=throwError.js.map","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerLike } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * Creates an observable that will create an error instance and push it to the consumer as an error\n * immediately upon subscription.\n *\n * <span class=\"informal\">Just errors and does nothing else</span>\n *\n * ![](throw.png)\n *\n * This creation function is useful for creating an observable that will create an error and error every\n * time it is subscribed to. Generally, inside of most operators when you might want to return an errored\n * observable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\n * {@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\n * that up and notify the consumer of the error.\n *\n * ## Example\n *\n * Create a simple observable that will create a new error with a timestamp and log it\n * and the message every time you subscribe to it\n *\n * ```ts\n * import { throwError } from 'rxjs';\n *\n * let errorCount = 0;\n *\n * const errorWithTimestamp$ = throwError(() => {\n *   const error: any = new Error(`This is error number ${ ++errorCount }`);\n *   error.timestamp = Date.now();\n *   return error;\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * // Logs the timestamp and a new error message for each subscription\n * ```\n *\n * ### Unnecessary usage\n *\n * Using `throwError` inside of an operator or creation function\n * with a callback, is usually not necessary\n *\n * ```ts\n * import { of, concatMap, timer, throwError } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // This is probably overkill.\n *       return throwError(() => new Error(`Invalid time ${ ms }`));\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * You can just throw the error instead\n *\n * ```ts\n * import { of, concatMap, timer } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // Cleaner and easier to read for most folks.\n *       throw new Error(`Invalid time ${ ms }`);\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * @param errorFactory A factory function that will create the error instance that is pushed.\n */\nexport function throwError(errorFactory: () => any): Observable<never>;\n\n/**\n * Returns an observable that will error with the specified error immediately upon subscription.\n *\n * @param error The error instance to emit\n * @deprecated Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\n */\nexport function throwError(error: any): Observable<never>;\n\n/**\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\n *\n * @param errorOrErrorFactory An error instance or error factory\n * @param scheduler A scheduler to use to schedule the error notification\n * @deprecated The `scheduler` parameter will be removed in v8.\n * Use `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\n * Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;\n\nexport function throwError(errorOrErrorFactory: any, scheduler?: SchedulerLike): Observable<never> {\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n  const init = (subscriber: Subscriber<never>) => subscriber.error(errorFactory());\n  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { isValidDate } from '../util/isDate';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport var TimeoutError = createErrorClass(function (_super) {\n    return function TimeoutErrorImpl(info) {\n        if (info === void 0) { info = null; }\n        _super(this);\n        this.message = 'Timeout has occurred';\n        this.name = 'TimeoutError';\n        this.info = info;\n    };\n});\nexport function timeout(config, schedulerArg) {\n    var _a = (isValidDate(config) ? { first: config } : typeof config === 'number' ? { each: config } : config), first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;\n    if (first == null && each == null) {\n        throw new TypeError('No timeout provided.');\n    }\n    return operate(function (source, subscriber) {\n        var originalSourceSubscription;\n        var timerSubscription;\n        var lastValue = null;\n        var seen = 0;\n        var startTimer = function (delay) {\n            timerSubscription = executeSchedule(subscriber, scheduler, function () {\n                try {\n                    originalSourceSubscription.unsubscribe();\n                    innerFrom(_with({\n                        meta: meta,\n                        lastValue: lastValue,\n                        seen: seen,\n                    })).subscribe(subscriber);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }, delay);\n        };\n        originalSourceSubscription = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n            seen++;\n            subscriber.next((lastValue = value));\n            each > 0 && startTimer(each);\n        }, undefined, undefined, function () {\n            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {\n                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n            }\n            lastValue = null;\n        }));\n        !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);\n    });\n}\nfunction timeoutErrorFactory(info) {\n    throw new TimeoutError(info);\n}\n//# sourceMappingURL=timeout.js.map","import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { isValidDate } from '../util/isDate';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport interface TimeoutConfig<T, O extends ObservableInput<unknown> = ObservableInput<T>, M = unknown> {\n  /**\n   * The time allowed between values from the source before timeout is triggered.\n   */\n  each?: number;\n\n  /**\n   * The relative time as a `number` in milliseconds, or a specific time as a `Date` object,\n   * by which the first value must arrive from the source before timeout is triggered.\n   */\n  first?: number | Date;\n\n  /**\n   * The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\n   */\n  scheduler?: SchedulerLike;\n\n  /**\n   * A factory used to create observable to switch to when timeout occurs. Provides\n   * a {@link TimeoutInfo} about the source observable's emissions and what delay or\n   * exact time triggered the timeout.\n   */\n  with?: (info: TimeoutInfo<T, M>) => O;\n\n  /**\n   * Optional additional metadata you can provide to code that handles\n   * the timeout, will be provided through the {@link TimeoutError}.\n   * This can be used to help identify the source of a timeout or pass along\n   * other information related to the timeout.\n   */\n  meta?: M;\n}\n\nexport interface TimeoutInfo<T, M = unknown> {\n  /** Optional metadata that was provided to the timeout configuration. */\n  readonly meta: M;\n  /** The number of messages seen before the timeout */\n  readonly seen: number;\n  /** The last message seen */\n  readonly lastValue: T | null;\n}\n\n/**\n * An error emitted when a timeout occurs.\n */\nexport interface TimeoutError<T = unknown, M = unknown> extends Error {\n  /**\n   * The information provided to the error by the timeout\n   * operation that created the error. Will be `null` if\n   * used directly in non-RxJS code with an empty constructor.\n   * (Note that using this constructor directly is not recommended,\n   * you should create your own errors)\n   */\n  info: TimeoutInfo<T, M> | null;\n}\n\nexport interface TimeoutErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new <T = unknown, M = unknown>(info?: TimeoutInfo<T, M>): TimeoutError<T, M>;\n}\n\n/**\n * An error thrown by the {@link timeout} operator.\n *\n * Provided so users can use as a type and do quality comparisons.\n * We recommend you do not subclass this or create instances of this class directly.\n * If you have need of a error representing a timeout, you should\n * create your own error class and use that.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport const TimeoutError: TimeoutErrorCtor = createErrorClass(\n  (_super) =>\n    function TimeoutErrorImpl(this: any, info: TimeoutInfo<any> | null = null) {\n      _super(this);\n      this.message = 'Timeout has occurred';\n      this.name = 'TimeoutError';\n      this.info = info;\n    }\n);\n\n/**\n * If `with` is provided, this will return an observable that will switch to a different observable if the source\n * does not push values within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ## Examples\n *\n * Emit a custom error if there is too much time between values\n *\n * ```ts\n * import { interval, timeout, throwError } from 'rxjs';\n *\n * class CustomTimeoutError extends Error {\n *   constructor() {\n *     super('It was too slow');\n *     this.name = 'CustomTimeoutError';\n *   }\n * }\n *\n * const slow$ = interval(900);\n *\n * slow$.pipe(\n *   timeout({\n *     each: 1000,\n *     with: () => throwError(() => new CustomTimeoutError())\n *   })\n * )\n * .subscribe({\n *   error: console.error\n * });\n * ```\n *\n * Switch to a faster observable if your source is slow.\n *\n * ```ts\n * import { interval, timeout } from 'rxjs';\n *\n * const slow$ = interval(900);\n * const fast$ = interval(500);\n *\n * slow$.pipe(\n *   timeout({\n *     each: 1000,\n *     with: () => fast$,\n *   })\n * )\n * .subscribe(console.log);\n * ```\n * @param config The configuration for the timeout.\n */\nexport function timeout<T, O extends ObservableInput<unknown>, M = unknown>(\n  config: TimeoutConfig<T, O, M> & { with: (info: TimeoutInfo<T, M>) => O }\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n\n/**\n * Returns an observable that will error or switch to a different observable if the source does not push values\n * within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ### Handling TimeoutErrors\n *\n * If no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\n * The timeout error provides useful information you can examine when you're handling the error. The most common way to handle\n * the error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\n * directly, if your error handling is only a side effect (such as notifying the user, or logging).\n *\n * In this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\n * not from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\n *\n * ## Examples\n *\n * Emit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\n *\n * ```ts\n * import { interval, timeout } from 'rxjs';\n *\n * // A random interval that lasts between 0 and 10 seconds per tick\n * const source$ = interval(Math.round(Math.random() * 10_000));\n *\n * source$.pipe(\n *   timeout({ first: 5_000 })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * Emit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\n * and subscription.\n *\n * ```ts\n * import { timer, timeout, expand } from 'rxjs';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10_000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime())\n *   .pipe(expand(() => timer(getRandomTime())));\n *\n * source$\n *   .pipe(timeout({ each: 5_000 }))\n *   .subscribe({\n *     next: console.log,\n *     error: console.error\n *   });\n * ```\n *\n * Emit a {@link TimeoutError} if the source does not emit before 7 seconds, _or_ if the source waits longer than\n * 5 seconds between any two values after the first.\n *\n * ```ts\n * import { timer, timeout, expand } from 'rxjs';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10_000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime())\n *   .pipe(expand(() => timer(getRandomTime())));\n *\n * source$\n *   .pipe(timeout({ first: 7_000, each: 5_000 }))\n *   .subscribe({\n *     next: console.log,\n *     error: console.error\n *   });\n * ```\n */\nexport function timeout<T, M = unknown>(config: Omit<TimeoutConfig<T, any, M>, 'with'>): OperatorFunction<T, T>;\n\n/**\n * Returns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\n * This is functionally the same as `timeout({ first: someDate })`.\n *\n * <span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\n *\n * ![](timeout.png)\n *\n * @param first The date to at which the resulting observable will timeout if the source observable\n * does not emit at least one value.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(first: Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an observable that will error if the source does not push a value within the specified time in milliseconds.\n * This is functionally the same as `timeout({ each: milliseconds })`.\n *\n * <span class=\"informal\">Errors if it waits too long between any value</span>\n *\n * ![](timeout.png)\n *\n * @param each The time allowed between each pushed value from the source before the resulting observable\n * will timeout.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(each: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * ![](timeout.png)\n *\n * @see {@link timeoutWith}\n *\n * @return A function that returns an Observable that mirrors behaviour of the\n * source Observable, unless timeout happens when it throws an error.\n */\nexport function timeout<T, O extends ObservableInput<any>, M>(\n  config: number | Date | TimeoutConfig<T, O, M>,\n  schedulerArg?: SchedulerLike\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  // Intentionally terse code.\n  // If the first argument is a valid `Date`, then we use it as the `first` config.\n  // Otherwise, if the first argument is a `number`, then we use it as the `each` config.\n  // Otherwise, it can be assumed the first argument is the configuration object itself, and\n  // we destructure that into what we're going to use, setting important defaults as we do.\n  // NOTE: The default for `scheduler` will be the `scheduler` argument if it exists, or\n  // it will default to the `asyncScheduler`.\n  const {\n    first,\n    each,\n    with: _with = timeoutErrorFactory,\n    scheduler = schedulerArg ?? asyncScheduler,\n    meta = null!,\n  } = (isValidDate(config) ? { first: config } : typeof config === 'number' ? { each: config } : config) as TimeoutConfig<T, O, M>;\n\n  if (first == null && each == null) {\n    // Ensure timeout was provided at runtime.\n    throw new TypeError('No timeout provided.');\n  }\n\n  return operate((source, subscriber) => {\n    // This subscription encapsulates our subscription to the\n    // source for this operator. We're capturing it separately,\n    // because if there is a `with` observable to fail over to,\n    // we want to unsubscribe from our original subscription, and\n    // hand of the subscription to that one.\n    let originalSourceSubscription: Subscription;\n    // The subscription for our timeout timer. This changes\n    // every time we get a new value.\n    let timerSubscription: Subscription;\n    // A bit of state we pass to our with and error factories to\n    // tell what the last value we saw was.\n    let lastValue: T | null = null;\n    // A bit of state we pass to the with and error factories to\n    // tell how many values we have seen so far.\n    let seen = 0;\n    const startTimer = (delay: number) => {\n      timerSubscription = executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          try {\n            originalSourceSubscription.unsubscribe();\n            innerFrom(\n              _with!({\n                meta,\n                lastValue,\n                seen,\n              })\n            ).subscribe(subscriber);\n          } catch (err) {\n            subscriber.error(err);\n          }\n        },\n        delay\n      );\n    };\n\n    originalSourceSubscription = source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // clear the timer so we can emit and start another one.\n          timerSubscription?.unsubscribe();\n          seen++;\n          // Emit\n          subscriber.next((lastValue = value));\n          // null | undefined are both < 0. Thanks, JavaScript.\n          each! > 0 && startTimer(each!);\n        },\n        undefined,\n        undefined,\n        () => {\n          if (!timerSubscription?.closed) {\n            timerSubscription?.unsubscribe();\n          }\n          // Be sure not to hold the last value in memory after unsubscription\n          // it could be quite large.\n          lastValue = null;\n        }\n      )\n    );\n\n    // Intentionally terse code.\n    // If we've `seen` a value, that means the \"first\" clause was met already, if it existed.\n    //   it also means that a timer was already started for \"each\" (in the next handler above).\n    // If `first` was provided, and it's a number, then use it.\n    // If `first` was provided and it's not a number, it's a Date, and we get the difference between it and \"now\".\n    // If `first` was not provided at all, then our first timer will be the value from `each`.\n    !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler!.now()) : each!);\n  });\n}\n\n/**\n * The default function to use to emit an error when timeout occurs and a `with` function\n * is not specified.\n * @param info The information about the timeout to pass along to the error\n */\nfunction timeoutErrorFactory(info: TimeoutInfo<any>): Observable<never> {\n  throw new TimeoutError(info);\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\nexport function withLatestFrom() {\n    var inputs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        inputs[_i] = arguments[_i];\n    }\n    var project = popResultSelector(inputs);\n    return operate(function (source, subscriber) {\n        var len = inputs.length;\n        var otherValues = new Array(len);\n        var hasValue = inputs.map(function () { return false; });\n        var ready = false;\n        var _loop_1 = function (i) {\n            innerFrom(inputs[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n                otherValues[i] = value;\n                if (!ready && !hasValue[i]) {\n                    hasValue[i] = true;\n                    (ready = hasValue.every(identity)) && (hasValue = null);\n                }\n            }, noop));\n        };\n        for (var i = 0; i < len; i++) {\n            _loop_1(i);\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            if (ready) {\n                var values = __spreadArray([value], __read(otherValues));\n                subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);\n            }\n        }));\n    });\n}\n//# sourceMappingURL=withLatestFrom.js.map","import { OperatorFunction, ObservableInputTuple } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\n\nexport function withLatestFrom<T, O extends unknown[]>(...inputs: [...ObservableInputTuple<O>]): OperatorFunction<T, [T, ...O]>;\n\nexport function withLatestFrom<T, O extends unknown[], R>(\n  ...inputs: [...ObservableInputTuple<O>, (...value: [T, ...O]) => R]\n): OperatorFunction<T, R>;\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n *\n * On every click event, emit an array with the latest timer event plus the click event\n *\n * ```ts\n * import { fromEvent, interval, withLatestFrom } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return A function that returns an Observable of projected values from the\n * most recent values from each input Observable, or an array of the most\n * recent values from each input Observable.\n */\nexport function withLatestFrom<T, R>(...inputs: any[]): OperatorFunction<T, R | any[]> {\n  const project = popResultSelector(inputs) as ((...args: any[]) => R) | undefined;\n\n  return operate((source, subscriber) => {\n    const len = inputs.length;\n    const otherValues = new Array(len);\n    // An array of whether or not the other sources have emitted. Matched with them by index.\n    // TODO: At somepoint, we should investigate the performance implications here, and look\n    // into using a `Set()` and checking the `size` to see if we're ready.\n    let hasValue = inputs.map(() => false);\n    // Flipped true when we have at least one value from all other sources and\n    // we are ready to start emitting values.\n    let ready = false;\n\n    // Other sources. Note that here we are not checking `subscriber.closed`,\n    // this causes all inputs to be subscribed to, even if nothing can be emitted\n    // from them. This is an important distinction because subscription constitutes\n    // a side-effect.\n    for (let i = 0; i < len; i++) {\n      innerFrom(inputs[i]).subscribe(\n        createOperatorSubscriber(\n          subscriber,\n          (value) => {\n            otherValues[i] = value;\n            if (!ready && !hasValue[i]) {\n              // If we're not ready yet, flag to show this observable has emitted.\n              hasValue[i] = true;\n              // Intentionally terse code.\n              // If all of our other observables have emitted, set `ready` to `true`,\n              // so we know we can start emitting values, then clean up the `hasValue` array,\n              // because we don't need it anymore.\n              (ready = hasValue.every(identity)) && (hasValue = null!);\n            }\n          },\n          // Completing one of the other sources has\n          // no bearing on the completion of our result.\n          noop\n        )\n      );\n    }\n\n    // Source subscription\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        if (ready) {\n          // We have at least one value from the other sources. Go ahead and emit.\n          const values = [value, ...otherValues];\n          subscriber.next(project ? project(...values) : values);\n        }\n      })\n    );\n  });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\n    return audit(function () { return timer(duration, scheduler); });\n}\n//# sourceMappingURL=auditTime.js.map","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source value, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * ![](auditTime.png)\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link SchedulerLike} for managing timers.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, auditTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(auditTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function auditTime<T>(duration: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate(function (source, subscriber) {\n        var hasValue = false;\n        var lastValue = null;\n        var durationSubscriber = null;\n        var isComplete = false;\n        var endDuration = function () {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                var value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        var cleanupDuration = function () {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, function () {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n//# sourceMappingURL=audit.js.map","import { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\n\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.svg)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, audit, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function audit<T>(durationSelector: (value: T) => ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    let durationSubscriber: Subscriber<any> | null = null;\n    let isComplete = false;\n\n    const endDuration = () => {\n      durationSubscriber?.unsubscribe();\n      durationSubscriber = null;\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n      isComplete && subscriber.complete();\n    };\n\n    const cleanupDuration = () => {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          lastValue = value;\n          if (!durationSubscriber) {\n            innerFrom(durationSelector(value)).subscribe(\n              (durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration))\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\nexport function catchError(selector) {\n    return operate(function (source, subscriber) {\n        var innerSub = null;\n        var syncUnsub = false;\n        var handledResult;\n        innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {\n            handledResult = innerFrom(selector(err, catchError(selector)(source)));\n            if (innerSub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                handledResult.subscribe(subscriber);\n            }\n            else {\n                syncUnsub = true;\n            }\n        }));\n        if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            handledResult.subscribe(subscriber);\n        }\n    });\n}\n//# sourceMappingURL=catchError.js.map","import { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { Subscription } from '../Subscription';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <span class=\"informal\">\n * It only listens to the error channel and ignores notifications.\n * Handles errors from the source observable, and maps them to a new observable.\n * The error may also be rethrown, or a new error can be thrown to emit an error from the result.\n * </span>\n *\n * ![](catch.png)\n *\n * This operator handles errors, but forwards along all other events to the resulting observable.\n * If the source observable terminates with an error, it will map that error to a new observable,\n * subscribe to it, and forward all of its events to the resulting observable.\n *\n * ## Examples\n *\n * Continue with a different Observable when there's an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V'))\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retry the caught source Observable again in case of error, similar to `retry()` operator\n *\n * ```ts\n * import { of, map, catchError, take } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30)\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throw a new error when the source Observable throws an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     })\n *   )\n *   .subscribe({\n *     next: x => console.log(x),\n *     error: err => console.log(err)\n *   });\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n * @see {@link onErrorResumeNext}\n * @see {@link repeat}\n * @see {@link repeatWhen}\n * @see {@link retry }\n * @see {@link retryWhen}\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n * is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n * is returned by the `selector` will be used to continue the observable chain.\n * @return A function that returns an Observable that originates from either\n * the source or the Observable returned by the `selector` function.\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null = null;\n    let syncUnsub = false;\n    let handledResult: Observable<ObservedValueOf<O>>;\n\n    innerSub = source.subscribe(\n      createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\n        handledResult = innerFrom(selector(err, catchError(selector)(source)));\n        if (innerSub) {\n          innerSub.unsubscribe();\n          innerSub = null;\n          handledResult.subscribe(subscriber);\n        } else {\n          // We don't have an innerSub yet, that means the error was synchronous\n          // because the subscribe call hasn't returned yet.\n          syncUnsub = true;\n        }\n      })\n    );\n\n    if (syncUnsub) {\n      // We have a synchronous error, we need to make sure to\n      // finalize right away. This ensures that callbacks in the `finalize` operator are called\n      // at the right time, and that finalization occurs at the expected\n      // time between the source error and the subscription to the\n      // next observable.\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult!.subscribe(subscriber);\n    }\n  });\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { combineLatest } from './combineLatest';\nexport function combineLatestWith() {\n    var otherSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        otherSources[_i] = arguments[_i];\n    }\n    return combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));\n}\n//# sourceMappingURL=combineLatestWith.js.map","import { ObservableInputTuple, OperatorFunction, Cons } from '../types';\nimport { combineLatest } from './combineLatest';\n\n/**\n * Create an observable that combines the latest values from all passed observables and the source\n * into arrays and emits them.\n *\n * Returns an observable, that when subscribed to, will subscribe to the source observable and all\n * sources provided as arguments. Once all sources emit at least one value, all of the latest values\n * will be emitted as an array. After that, every time any source emits a value, all of the latest values\n * will be emitted as an array.\n *\n * This is a useful operator for eagerly calculating values based off of changed inputs.\n *\n * ## Example\n *\n * Simple concatenation of values from two inputs\n *\n * ```ts\n * import { fromEvent, combineLatestWith, map } from 'rxjs';\n *\n * // Setup: Add two inputs to the page\n * const input1 = document.createElement('input');\n * document.body.appendChild(input1);\n * const input2 = document.createElement('input');\n * document.body.appendChild(input2);\n *\n * // Get streams of changes\n * const input1Changes$ = fromEvent(input1, 'change');\n * const input2Changes$ = fromEvent(input2, 'change');\n *\n * // Combine the changes by adding them together\n * input1Changes$.pipe(\n *   combineLatestWith(input2Changes$),\n *   map(([e1, e2]) => (<HTMLInputElement>e1.target).value + ' - ' + (<HTMLInputElement>e2.target).value)\n * )\n * .subscribe(x => console.log(x));\n * ```\n *\n * @param otherSources the other sources to subscribe to.\n * @return A function that returns an Observable that emits the latest\n * emissions from both source and provided Observables.\n */\nexport function combineLatestWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, Cons<T, A>> {\n  return combineLatest(...otherSources);\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { combineLatestInit } from '../observable/combineLatest';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\nexport function combineLatest() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var resultSelector = popResultSelector(args);\n    return resultSelector\n        ? pipe(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs(resultSelector))\n        : operate(function (source, subscriber) {\n            combineLatestInit(__spreadArray([source], __read(argsOrArgArray(args))))(subscriber);\n        });\n}\n//# sourceMappingURL=combineLatest.js.map","import { combineLatestInit } from '../observable/combineLatest';\nimport { ObservableInput, ObservableInputTuple, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\n\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(\n  sources: [...ObservableInputTuple<A>],\n  project: (...values: [T, ...A]) => R\n): OperatorFunction<T, R>;\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(sources: [...ObservableInputTuple<A>]): OperatorFunction<T, [T, ...A]>;\n\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(\n  ...sourcesAndProject: [...ObservableInputTuple<A>, (...values: [T, ...A]) => R]\n): OperatorFunction<T, R>;\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, [T, ...A]>;\n\n/**\n * @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8.\n */\nexport function combineLatest<T, R>(...args: (ObservableInput<any> | ((...values: any[]) => R))[]): OperatorFunction<T, unknown> {\n  const resultSelector = popResultSelector(args);\n  return resultSelector\n    ? pipe(combineLatest(...(args as Array<ObservableInput<any>>)), mapOneOrManyArgs(resultSelector))\n    : operate((source, subscriber) => {\n        combineLatestInit([source, ...argsOrArgArray(args)])(subscriber);\n      });\n}\n","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector) {\n    if (keySelector === void 0) { keySelector = identity; }\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate(function (source, subscriber) {\n        var previousKey;\n        var first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            var currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n//# sourceMappingURL=distinctUntilChanged.js.map","import { MonoTypeOperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function distinctUntilChanged<T>(comparator?: (previous: T, current: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(\n  comparator: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a result {@link Observable} that emits all values pushed by the source observable if they\n * are distinct in comparison to the last value the result observable emitted.\n *\n * When provided without parameters or with the first parameter (`{@link distinctUntilChanged#comparator comparator}`),\n * it behaves like this:\n *\n * 1. It will always emit the first value from the source.\n * 2. For all subsequent values pushed by the source, they will be compared to the previously emitted values\n *    using the provided `comparator` or an `===` equality check.\n * 3. If the value pushed by the source is determined to be unequal by this check, that value is emitted and\n *    becomes the new \"previously emitted value\" internally.\n *\n * When the second parameter (`{@link distinctUntilChanged#keySelector keySelector}`) is provided, the behavior\n * changes:\n *\n * 1. It will always emit the first value from the source.\n * 2. The `keySelector` will be run against all values, including the first value.\n * 3. For all values after the first, the selected key will be compared against the key selected from\n *    the previously emitted value using the `comparator`.\n * 4. If the keys are determined to be unequal by this check, the value (not the key), is emitted\n *    and the selected key from that value is saved for future comparisons against other keys.\n *\n * ## Examples\n *\n * A very basic example with no `{@link distinctUntilChanged#comparator comparator}`. Note that `1` is emitted more than once,\n * because it's distinct in comparison to the _previously emitted_ value,\n * not in comparison to _all other emitted values_.\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * of(1, 1, 1, 2, 2, 2, 1, 1, 3, 3)\n *   .pipe(distinctUntilChanged())\n *   .subscribe(console.log);\n * // Logs: 1, 2, 1, 3\n * ```\n *\n * With a `{@link distinctUntilChanged#comparator comparator}`, you can do custom comparisons. Let's say\n * you only want to emit a value when all of its components have\n * changed:\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * const totallyDifferentBuilds$ = of(\n *   { engineVersion: '1.1.0', transmissionVersion: '1.2.0' },\n *   { engineVersion: '1.1.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.5.0' },\n *   { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ).pipe(\n *   distinctUntilChanged((prev, curr) => {\n *     return (\n *       prev.engineVersion === curr.engineVersion ||\n *       prev.transmissionVersion === curr.transmissionVersion\n *     );\n *   })\n * );\n *\n * totallyDifferentBuilds$.subscribe(console.log);\n *\n * // Logs:\n * // { engineVersion: '1.1.0', transmissionVersion: '1.2.0' }\n * // { engineVersion: '1.3.0', transmissionVersion: '1.4.0' }\n * // { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ```\n *\n * You can also provide a custom `{@link distinctUntilChanged#comparator comparator}` to check that emitted\n * changes are only in one direction. Let's say you only want to get\n * the next record temperature:\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * const temps$ = of(30, 31, 20, 34, 33, 29, 35, 20);\n *\n * const recordHighs$ = temps$.pipe(\n *   distinctUntilChanged((prevHigh, temp) => {\n *     // If the current temp is less than\n *     // or the same as the previous record,\n *     // the record hasn't changed.\n *     return temp <= prevHigh;\n *   })\n * );\n *\n * recordHighs$.subscribe(console.log);\n * // Logs: 30, 31, 34, 35\n * ```\n *\n * Selecting update events only when the `updatedBy` field shows\n * the account changed hands.\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * // A stream of updates to a given account\n * const accountUpdates$ = of(\n *   { updatedBy: 'blesh', data: [] },\n *   { updatedBy: 'blesh', data: [] },\n *   { updatedBy: 'ncjamieson', data: [] },\n *   { updatedBy: 'ncjamieson', data: [] },\n *   { updatedBy: 'blesh', data: [] }\n * );\n *\n * // We only want the events where it changed hands\n * const changedHands$ = accountUpdates$.pipe(\n *   distinctUntilChanged(undefined, update => update.updatedBy)\n * );\n *\n * changedHands$.subscribe(console.log);\n * // Logs:\n * // { updatedBy: 'blesh', data: Array[0] }\n * // { updatedBy: 'ncjamieson', data: Array[0] }\n * // { updatedBy: 'blesh', data: Array[0] }\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param comparator A function used to compare the previous and current keys for\n * equality. Defaults to a `===` check.\n * @param keySelector Used to select a key value to be passed to the `comparator`.\n *\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinctUntilChanged<T, K>(\n  comparator?: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K = identity as (value: T) => K\n): MonoTypeOperatorFunction<T> {\n  // We've been allowing `null` do be passed as the `compare`, so we can't do\n  // a default value for the parameter, because that will only work\n  // for `undefined`.\n  comparator = comparator ?? defaultCompare;\n\n  return operate((source, subscriber) => {\n    // The previous key, used to compare against keys selected\n    // from new arrivals to determine \"distinctiveness\".\n    let previousKey: K;\n    // Whether or not this is the first value we've gotten.\n    let first = true;\n\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        // We always call the key selector.\n        const currentKey = keySelector(value);\n\n        // If it's the first value, we always emit it.\n        // Otherwise, we compare this key to the previous key, and\n        // if the comparer returns false, we emit.\n        if (first || !comparator!(previousKey, currentKey)) {\n          // Update our state *before* we emit the value\n          // as emission can be the source of re-entrant code\n          // in functional libraries like this. We only really\n          // need to do this if it's the first value, or if the\n          // key we're tracking in previous needs to change.\n          first = false;\n          previousKey = currentKey;\n\n          // Emit the value!\n          subscriber.next(value);\n        }\n      })\n    );\n  });\n}\n\nfunction defaultCompare(a: any, b: any) {\n  return a === b;\n}\n","import { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Infinity; }\n    concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n    return operate(function (source, subscriber) {\n        return mergeInternals(source, subscriber, project, concurrent, undefined, true, scheduler);\n    });\n}\n//# sourceMappingURL=expand.js.map","import { OperatorFunction, ObservableInput, ObservedValueOf, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/**\n * @deprecated The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\n * use `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\n * Details: Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent: number | undefined,\n  scheduler: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n *\n * Start emitting the powers of two on every click, at most 10 of them\n *\n * ```ts\n * import { fromEvent, map, expand, of, delay, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   map(() => 1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10)\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return A function that returns an Observable that emits the source values\n * and also result of applying the projection function to each value emitted on\n * the output Observable and merging the results of the Observables obtained\n * from this transformation.\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent = Infinity,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>> {\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n  return operate((source, subscriber) =>\n    mergeInternals(\n      // General merge params\n      source,\n      subscriber,\n      project,\n      concurrent,\n\n      // onBeforeNext\n      undefined,\n\n      // Expand-specific\n      true, // Use expand path\n      scheduler // Inner subscription scheduler\n    )\n  );\n}\n","import { operate } from '../util/lift';\nexport function finalize(callback) {\n    return operate(function (source, subscriber) {\n        try {\n            source.subscribe(subscriber);\n        }\n        finally {\n            subscriber.add(callback);\n        }\n    });\n}\n//# sourceMappingURL=finalize.js.map","import { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * The specified function will also be called when the subscriber explicitly unsubscribes.\n *\n * ## Examples\n *\n * Execute callback function when the observable completes\n *\n * ```ts\n * import { interval, take, finalize } from 'rxjs';\n *\n * // emit value in sequence every 1 second\n * const source = interval(1000);\n * const example = source.pipe(\n *   take(5), //take only the first 5 values\n *   finalize(() => console.log('Sequence complete')) // Execute when the observable completes\n * );\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // results:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * // 'Sequence complete'\n * ```\n *\n * Execute callback function when the subscriber explicitly unsubscribes\n *\n * ```ts\n * import { interval, finalize, tap, noop, timer } from 'rxjs';\n *\n * const source = interval(100).pipe(\n *   finalize(() => console.log('[finalize] Called')),\n *   tap({\n *     next: () => console.log('[next] Called'),\n *     error: () => console.log('[error] Not called'),\n *     complete: () => console.log('[tap complete] Not called')\n *   })\n * );\n *\n * const sub = source.subscribe({\n *   next: x => console.log(x),\n *   error: noop,\n *   complete: () => console.log('[complete] Not called')\n * });\n *\n * timer(150).subscribe(() => sub.unsubscribe());\n *\n * // results:\n * // '[next] Called'\n * // 0\n * // '[finalize] Called'\n * ```\n *\n * @param {function} callback Function to be called when source terminates.\n * @return A function that returns an Observable that mirrors the source, but\n * will call the specified function on termination.\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\n    // REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n    var hasDefaultValue = arguments.length >= 2;\n    return function (source) {\n        return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));\n    };\n}\n//# sourceMappingURL=first.js.map","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\n\nexport function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport function first<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function first<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;\nexport function first<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function first<T, S extends T, D>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue: D\n): OperatorFunction<T, S | D>;\nexport function first<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * ![](first.png)\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. Throws an error if\n * `defaultValue` was not provided and a matching element is not found.\n *\n * ## Examples\n *\n * Emit only the first click that happens on the DOM\n *\n * ```ts\n * import { fromEvent, first } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Emits the first click that happens on a DIV\n *\n * ```ts\n * import { fromEvent, first } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * This is how `first()` is different from {@link take}(1) which completes instead.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {D} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return A function that returns an Observable that emits the first item that\n * matches the condition.\n */\nexport function first<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n      take(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\n    );\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            function () { return EMPTY; }\n        : operate(function (source, subscriber) {\n            var seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n//# sourceMappingURL=take.js.map","import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n *\n * Take the first 5 seconds of an infinite 1-second interval Observable\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function defaultIfEmpty(defaultValue) {\n    return operate(function (source, subscriber) {\n        var hasValue = false;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            hasValue = true;\n            subscriber.next(value);\n        }, function () {\n            if (!hasValue) {\n                subscriber.next(defaultValue);\n            }\n            subscriber.complete();\n        }));\n    });\n}\n//# sourceMappingURL=defaultIfEmpty.js.map","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n *\n * If no clicks happen in 5 seconds, then emit 'no clicks'\n *\n * ```ts\n * import { fromEvent, takeUntil, interval, defaultIfEmpty } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param defaultValue The default value used if the source\n * Observable is empty.\n * @return A function that returns an Observable that emits either the\n * specified `defaultValue` if the source Observable emits no items, or the\n * values emitted by the source Observable.\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R): OperatorFunction<T, T | R> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => {\n          if (!hasValue) {\n            subscriber.next(defaultValue!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function throwIfEmpty(errorFactory) {\n    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }\n    return operate(function (source, subscriber) {\n        var hasValue = false;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            hasValue = true;\n            subscriber.next(value);\n        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));\n    });\n}\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n//# sourceMappingURL=throwIfEmpty.js.map","import { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n *\n * Throw an error if the document wasn't clicked within 1 second\n *\n * ```ts\n * import { fromEvent, takeUntil, timer, throwIfEmpty } from 'rxjs';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(() => new Error('The document was not clicked within 1 second'))\n * )\n * .subscribe({\n *   next() {\n *    console.log('The document was clicked');\n *   },\n *   error(err) {\n *     console.error(err.message);\n *   }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n * @return A function that returns an Observable that throws an error if the\n * source Observable completed without emitting.\n */\nexport function throwIfEmpty<T>(errorFactory: () => any = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\n      )\n    );\n  });\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate(function (source, subscriber) {\n        var prev;\n        var hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            var p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n//# sourceMappingURL=pairwise.js.map","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n *\n * On every click (starting from the second), emit the relative distance to the previous click\n *\n * ```ts\n * import { fromEvent, pairwise, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(([first, second]) => {\n *     const x0 = first.clientX;\n *     const y0 = first.clientY;\n *     const x1 = second.clientX;\n *     const y1 = second.clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   })\n * );\n *\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return A function that returns an Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return operate((source, subscriber) => {\n    let prev: T;\n    let hasPrev = false;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const p = prev;\n        prev = value;\n        hasPrev && subscriber.next([p, value]);\n        hasPrev = true;\n      })\n    );\n  });\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.connector, connector = _a === void 0 ? function () { return new Subject(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;\n    return function (wrapperSource) {\n        var connection;\n        var resetConnection;\n        var subject;\n        var refCount = 0;\n        var hasCompleted = false;\n        var hasErrored = false;\n        var cancelReset = function () {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        var reset = function () {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        var resetAndUnsubscribe = function () {\n            var conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate(function (source, subscriber) {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(function () {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: function (value) { return dest.next(value); },\n                    error: function (err) {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: function () {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    var onSubscriber = new SafeSubscriber({\n        next: function () {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return innerFrom(on.apply(void 0, __spreadArray([], __read(args)))).subscribe(onSubscriber);\n}\n//# sourceMappingURL=share.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubjectLike, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\n\nexport interface ShareConfig<T> {\n  /**\n   * The factory used to create the subject that will connect the source observable to\n   * multicast consumers.\n   */\n  connector?: () => SubjectLike<T>;\n  /**\n   * If `true`, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"retried\" in the event of an error.\n   * If `false`, when an error comes from the source it will push the error into the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\n   * or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n   * {@link ReplaySubject} will also push its buffered values before pushing the error.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnError?: boolean | ((error: any) => ObservableInput<any>);\n  /**\n   * If `true`, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"repeated\" after it is done.\n   * If `false`, when the source completes, it will push the completion through the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\n   * or resubscriptions will resubscribe to that same subject.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnComplete?: boolean | (() => ObservableInput<any>);\n  /**\n   * If `true`, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\n   * internal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\n   * time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\n   * again.\n   * If `false`, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\n   * will remain connected to the source, and new subscriptions to the result will be connected through that same subject.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnRefCountZero?: boolean | (() => ObservableInput<any>);\n}\n\nexport function share<T>(): MonoTypeOperatorFunction<T>;\n\nexport function share<T>(options: ShareConfig<T>): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\n * if the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\n * possible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\n * note that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\n * of the source because the error or complete will be forwarded to all subscribers and their subscription will be\n * closed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\n * source. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.\n *\n * ![](share.png)\n *\n * ## Example\n *\n * Generate new multicast Observable from the `source` Observable value\n *\n * ```ts\n * import { interval, tap, map, take, share } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   tap(x => console.log('Processing: ', x)),\n *   map(x => x * x),\n *   take(6),\n *   share()\n * );\n *\n * source.subscribe(x => console.log('subscription 1: ', x));\n * source.subscribe(x => console.log('subscription 2: ', x));\n *\n * // Logs:\n * // Processing: 0\n * // subscription 1: 0\n * // subscription 2: 0\n * // Processing: 1\n * // subscription 1: 1\n * // subscription 2: 1\n * // Processing: 2\n * // subscription 1: 4\n * // subscription 2: 4\n * // Processing: 3\n * // subscription 1: 9\n * // subscription 2: 9\n * // Processing: 4\n * // subscription 1: 16\n * // subscription 2: 16\n * // Processing: 5\n * // subscription 1: 25\n * // subscription 2: 25\n * ```\n *\n * ## Example with notifier factory: Delayed reset\n *\n * ```ts\n * import { interval, take, share, timer } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   take(3),\n *   share({\n *     resetOnRefCountZero: () => timer(1000)\n *   })\n * );\n *\n * const subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\n * setTimeout(() => subscriptionOne.unsubscribe(), 1300);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n *\n * // Logs:\n * // subscription 1:  0\n * // (subscription 1 unsubscribes here)\n * // (subscription 2 subscribes here ~400ms later, source was not reset)\n * // subscription 2:  1\n * // subscription 2:  2\n * // (subscription 2 unsubscribes here)\n * // (subscription 3 subscribes here ~2000ms later, source did reset before)\n * // subscription 3:  0\n * // subscription 3:  1\n * // subscription 3:  2\n * ```\n *\n * @see {@link shareReplay}\n *\n * @return A function that returns an Observable that mirrors the source.\n */\nexport function share<T>(options: ShareConfig<T> = {}): MonoTypeOperatorFunction<T> {\n  const { connector = () => new Subject<T>(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n  // It's necessary to use a wrapper here, as the _operator_ must be\n  // referentially transparent. Otherwise, it cannot be used in calls to the\n  // static `pipe` function - to create a partial pipeline.\n  //\n  // The _operator function_ - the function returned by the _operator_ - will\n  // not be referentially transparent - as it shares its source - but the\n  // _operator function_ is called when the complete pipeline is composed via a\n  // call to a source observable's `pipe` method - not when the static `pipe`\n  // function is called.\n  return (wrapperSource) => {\n    let connection: SafeSubscriber<T> | undefined;\n    let resetConnection: Subscription | undefined;\n    let subject: SubjectLike<T> | undefined;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection?.unsubscribe();\n      resetConnection = undefined;\n    };\n    // Used to reset the internal state to a \"cold\"\n    // state, as though it had never been subscribed to.\n    const reset = () => {\n      cancelReset();\n      connection = subject = undefined;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      // We need to capture the connection before\n      // we reset (if we need to reset).\n      const conn = connection;\n      reset();\n      conn?.unsubscribe();\n    };\n\n    return operate<T, T>((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      // Create the subject if we don't have one yet. Grab a local reference to\n      // it as well, which avoids non-null assertions when using it and, if we\n      // connect to it now, then error/complete need a reference after it was\n      // reset.\n      const dest = (subject = subject ?? connector());\n\n      // Add the finalization directly to the subscriber - instead of returning it -\n      // so that the handling of the subscriber's unsubscription will be wired\n      // up _before_ the subscription to the source occurs. This is done so that\n      // the assignment to the source connection's `closed` property will be seen\n      // by synchronous firehose sources.\n      subscriber.add(() => {\n        refCount--;\n\n        // If we're resetting on refCount === 0, and it's 0, we only want to do\n        // that on \"unsubscribe\", really. Resetting on error or completion is a different\n        // configuration.\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n\n      // The following line adds the subscription to the subscriber passed.\n      // Basically, `subscriber === dest.subscribe(subscriber)` is `true`.\n      dest.subscribe(subscriber);\n\n      if (\n        !connection &&\n        // Check this shareReplay is still activate - it can be reset to 0\n        // and be \"unsubscribed\" _before_ it actually subscribes.\n        // If we were to subscribe then, it'd leak and get stuck.\n        refCount > 0\n      ) {\n        // We need to create a subscriber here - rather than pass an observer and\n        // assign the returned subscription to connection - because it's possible\n        // for reentrant subscriptions to the shared observable to occur and in\n        // those situations we want connection to be already-assigned so that we\n        // don't create another connection to the source.\n        connection = new SafeSubscriber({\n          next: (value) => dest.next(value),\n          error: (err) => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          },\n        });\n        innerFrom(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset<T extends unknown[] = never[]>(\n  reset: () => void,\n  on: boolean | ((...args: T) => ObservableInput<any>),\n  ...args: T\n): Subscription | undefined {\n  if (on === true) {\n    reset();\n    return;\n  }\n\n  if (on === false) {\n    return;\n  }\n\n  const onSubscriber = new SafeSubscriber({\n    next: () => {\n      onSubscriber.unsubscribe();\n      reset();\n    },\n  });\n\n  return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function skipWhile(predicate) {\n    return operate(function (source, subscriber) {\n        var taking = false;\n        var index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return (taking || (taking = !predicate(value, index++))) && subscriber.next(value); }));\n    });\n}\n//# sourceMappingURL=skipWhile.js.map","import { Falsy, MonoTypeOperatorFunction, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function skipWhile<T>(predicate: BooleanConstructor): OperatorFunction<T, Extract<T, Falsy> extends never ? never : T>;\nexport function skipWhile<T>(predicate: (value: T, index: number) => true): OperatorFunction<T, never>;\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * Skips all the notifications with a truthy predicate. It will not skip the notifications when the predicate is falsy.\n * It can also be skipped using index. Once the predicate is true, it will not be called again.\n *\n * ## Example\n *\n * Skip some super heroes\n *\n * ```ts\n * import { from, skipWhile } from 'rxjs';\n *\n * const source = from(['Green Arrow', 'SuperMan', 'Flash', 'SuperGirl', 'Black Canary'])\n * // Skip the heroes until SuperGirl\n * const example = source.pipe(skipWhile(hero => hero !== 'SuperGirl'));\n * // output: SuperGirl, Black Canary\n * example.subscribe(femaleHero => console.log(femaleHero));\n * ```\n *\n * Skip values from the array until index 5\n *\n * ```ts\n * import { from, skipWhile } from 'rxjs';\n *\n * const source = from([1, 2, 3, 4, 5, 6, 7, 9, 10]);\n * const example = source.pipe(skipWhile((_, i) => i !== 5));\n * // output: 6, 7, 9, 10\n * example.subscribe(value => console.log(value));\n * ```\n *\n * @see {@link last}\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return A function that returns an Observable that begins emitting items\n * emitted by the source Observable when the specified predicate becomes false.\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let taking = false;\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => (taking || (taking = !predicate(value, index++))) && subscriber.next(value))\n    );\n  });\n}\n","import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    var scheduler = popScheduler(values);\n    return operate(function (source, subscriber) {\n        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=startWith.js.map","import { concat } from '../observable/concat';\nimport { OperatorFunction, SchedulerLike, ValueFromArray } from '../types';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function startWith<T>(value: null): OperatorFunction<T, T | null>;\nexport function startWith<T>(value: undefined): OperatorFunction<T, T | undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function startWith<T, A extends readonly unknown[] = T[]>(\n  ...valuesAndScheduler: [...A, SchedulerLike]\n): OperatorFunction<T, T | ValueFromArray<A>>;\nexport function startWith<T, A extends readonly unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\n\n/**\n * Returns an observable that, at the moment of subscription, will synchronously emit all\n * values provided to this operator, then subscribe to the source and mirror all of its emissions\n * to subscribers.\n *\n * This is a useful way to know when subscription has occurred on an existing observable.\n *\n * <span class=\"informal\">First emits its arguments in order, and then any\n * emissions from the source.</span>\n *\n * ![](startWith.png)\n *\n * ## Examples\n *\n * Emit a value when a timer starts.\n *\n * ```ts\n * import { timer, map, startWith } from 'rxjs';\n *\n * timer(1000)\n *   .pipe(\n *     map(() => 'timer emit'),\n *     startWith('timer start')\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // results:\n * // 'timer start'\n * // 'timer emit'\n * ```\n *\n * @param values Items you want the modified Observable to emit first.\n * @return A function that returns an Observable that synchronously emits\n * provided values before subscribing to the source Observable.\n *\n * @see {@link endWith}\n * @see {@link finalize}\n * @see {@link concat}\n */\nexport function startWith<T, D>(...values: D[]): OperatorFunction<T, T | D> {\n  const scheduler = popScheduler(values);\n  return operate((source, subscriber) => {\n    // Here we can't pass `undefined` as a scheduler, because if we did, the\n    // code inside of `concat` would be confused by the `undefined`, and treat it\n    // like an invalid observable. So we have to split it two different ways.\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n  });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate(function (source, subscriber) {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function () { return subscriber.complete(); }, noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=takeUntil.js.map","import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n *\n * Tick every second until the first click happens\n *\n * ```ts\n * import { interval, fromEvent, takeUntil } from 'rxjs';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return A function that returns an Observable that emits the values from the\n * source Observable until `notifier` emits its first value.\n */\nexport function takeUntil<T>(notifier: ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeWhile(predicate, inclusive) {\n    if (inclusive === void 0) { inclusive = false; }\n    return operate(function (source, subscriber) {\n        var index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            var result = predicate(value, index++);\n            (result || inclusive) && subscriber.next(value);\n            !result && subscriber.complete();\n        }));\n    });\n}\n//# sourceMappingURL=takeWhile.js.map","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function takeWhile<T>(predicate: BooleanConstructor, inclusive: true): MonoTypeOperatorFunction<T>;\nexport function takeWhile<T>(predicate: BooleanConstructor, inclusive: false): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function takeWhile<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S, inclusive: false): OperatorFunction<T, S>;\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive?: boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * ![](takeWhile.png)\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * ## Example\n *\n * Emit click events only while the clientX property is greater than 200\n *\n * ```ts\n * import { fromEvent, takeWhile } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @param {boolean} inclusive When set to `true` the value that caused\n * `predicate` to return `false` will also be emitted.\n * @return A function that returns an Observable that emits values from the\n * source Observable so long as each value satisfies the condition defined by\n * the `predicate`, then completes.\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive = false): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const result = predicate(value, index++);\n        (result || inclusive) && subscriber.next(value);\n        !result && subscriber.complete();\n      })\n    );\n  });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    var tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error: error, complete: complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate(function (source, subscriber) {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            var isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, function () {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, function (err) {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, function () {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n//# sourceMappingURL=tap.js.map","import { MonoTypeOperatorFunction, Observer } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\n\n/**\n * An extension to the {@link Observer} interface used only by the {@link tap} operator.\n *\n * It provides a useful set of callbacks a user can register to do side-effects in\n * cases other than what the usual {@link Observer} callbacks are\n * ({@link guide/glossary-and-semantics#next next},\n * {@link guide/glossary-and-semantics#error error} and/or\n * {@link guide/glossary-and-semantics#complete complete}).\n *\n * ## Example\n *\n * ```ts\n * import { fromEvent, switchMap, tap, interval, take } from 'rxjs';\n *\n * const source$ = fromEvent(document, 'click');\n * const result$ = source$.pipe(\n *   switchMap((_, i) => i % 2 === 0\n *     ? fromEvent(document, 'mousemove').pipe(\n *         tap({\n *           subscribe: () => console.log('Subscribed to the mouse move events after click #' + i),\n *           unsubscribe: () => console.log('Mouse move events #' + i + ' unsubscribed'),\n *           finalize: () => console.log('Mouse move events #' + i + ' finalized')\n *         })\n *       )\n *     : interval(1_000).pipe(\n *         take(5),\n *         tap({\n *           subscribe: () => console.log('Subscribed to the 1-second interval events after click #' + i),\n *           unsubscribe: () => console.log('1-second interval events #' + i + ' unsubscribed'),\n *           finalize: () => console.log('1-second interval events #' + i + ' finalized')\n *         })\n *       )\n *   )\n * );\n *\n * const subscription = result$.subscribe({\n *   next: console.log\n * });\n *\n * setTimeout(() => {\n *   console.log('Unsubscribe after 60 seconds');\n *   subscription.unsubscribe();\n * }, 60_000);\n * ```\n */\nexport interface TapObserver<T> extends Observer<T> {\n  /**\n   * The callback that `tap` operator invokes at the moment when the source Observable\n   * gets subscribed to.\n   */\n  subscribe: () => void;\n  /**\n   * The callback that `tap` operator invokes when an explicit\n   * {@link guide/glossary-and-semantics#unsubscription unsubscribe} happens. It won't get invoked on\n   * `error` or `complete` events.\n   */\n  unsubscribe: () => void;\n  /**\n   * The callback that `tap` operator invokes when any kind of\n   * {@link guide/glossary-and-semantics#finalization finalization} happens - either when\n   * the source Observable `error`s or `complete`s or when it gets explicitly unsubscribed\n   * by the user. There is no difference in using this callback or the {@link finalize}\n   * operator, but if you're already using `tap` operator, you can use this callback\n   * instead. You'd get the same result in either case.\n   */\n  finalize: () => void;\n}\nexport function tap<T>(observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void)): MonoTypeOperatorFunction<T>;\n/** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\nexport function tap<T>(\n  next?: ((value: T) => void) | null,\n  error?: ((error: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Used to perform side-effects for notifications from the source observable\n *\n * <span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span>\n *\n * ![](tap.png)\n *\n * Tap is designed to allow the developer a designated place to perform side effects. While you _could_ perform side-effects\n * inside of a `map` or a `mergeMap`, that would make their mapping functions impure, which isn't always a big deal, but will\n * make it so you can't do things like memoize those functions. The `tap` operator is designed solely for such side-effects to\n * help you remove side-effects from other operations.\n *\n * For any notification, next, error, or complete, `tap` will call the appropriate callback you have provided to it, via a function\n * reference, or a partial observer, then pass that notification down the stream.\n *\n * The observable returned by `tap` is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\n * provided to `tap` will be emitted as an error from the returned observable.\n *\n * > Be careful! You can mutate objects as they pass through the `tap` operator's handlers.\n *\n * The most common use of `tap` is actually for debugging. You can place a `tap(console.log)` anywhere\n * in your observable `pipe`, log out the notifications as they are emitted by the source returned by the previous\n * operation.\n *\n * ## Examples\n *\n * Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\n * and emit `'big'` or `'small'` depending on the size of that number. But we wanted to log what the original number\n * was, so we have added a `tap(console.log)`.\n *\n * ```ts\n * import { of, tap, map } from 'rxjs';\n *\n * of(Math.random()).pipe(\n *   tap(console.log),\n *   map(n => n > 0.5 ? 'big' : 'small')\n * ).subscribe(console.log);\n * ```\n *\n * Using `tap` to analyze a value and force an error. Below is an observable where in our system we only\n * want to emit numbers 3 or less we get from another source. We can force our observable to error\n * using `tap`.\n *\n * ```ts\n * import { of, tap } from 'rxjs';\n *\n * const source = of(1, 2, 3, 4, 5);\n *\n * source.pipe(\n *   tap(n => {\n *     if (n > 3) {\n *       throw new TypeError(`Value ${ n } is greater than 3`);\n *     }\n *   })\n * )\n * .subscribe({ next: console.log, error: err => console.log(err.message) });\n * ```\n *\n * We want to know when an observable completes before moving on to the next observable. The system\n * below will emit a random series of `'X'` characters from 3 different observables in sequence. The\n * only way we know when one observable completes and moves to the next one, in this case, is because\n * we have added a `tap` with the side effect of logging to console.\n *\n * ```ts\n * import { of, concatMap, interval, take, map, tap } from 'rxjs';\n *\n * of(1, 2, 3).pipe(\n *   concatMap(n => interval(1000).pipe(\n *     take(Math.round(Math.random() * 10)),\n *     map(() => 'X'),\n *     tap({ complete: () => console.log(`Done with ${ n }`) })\n *   ))\n * )\n * .subscribe(console.log);\n * ```\n *\n * @see {@link finalize}\n * @see {@link TapObserver}\n *\n * @param observerOrNext A next handler or partial observer\n * @param error An error handler\n * @param complete A completion handler\n * @return A function that returns an Observable identical to the source, but\n * runs the specified Observer or callback(s) for each item.\n */\nexport function tap<T>(\n  observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void) | null,\n  error?: ((e: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T> {\n  // We have to check to see not only if next is a function,\n  // but if error or complete were passed. This is because someone\n  // could technically call tap like `tap(null, fn)` or `tap(null, null, fn)`.\n  const tapObserver =\n    isFunction(observerOrNext) || error || complete\n      ? // tslint:disable-next-line: no-object-literal-type-assertion\n        ({ next: observerOrNext as Exclude<typeof observerOrNext, Partial<TapObserver<T>>>, error, complete } as Partial<TapObserver<T>>)\n      : observerOrNext;\n\n  return tapObserver\n    ? operate((source, subscriber) => {\n        tapObserver.subscribe?.();\n        let isUnsub = true;\n        source.subscribe(\n          createOperatorSubscriber(\n            subscriber,\n            (value) => {\n              tapObserver.next?.(value);\n              subscriber.next(value);\n            },\n            () => {\n              isUnsub = false;\n              tapObserver.complete?.();\n              subscriber.complete();\n            },\n            (err) => {\n              isUnsub = false;\n              tapObserver.error?.(err);\n              subscriber.error(err);\n            },\n            () => {\n              if (isUnsub) {\n                tapObserver.unsubscribe?.();\n              }\n              tapObserver.finalize?.();\n            }\n          )\n        );\n      })\n    : // Tap was called with no valid tap observer or handler\n      // (e.g. `tap(null, null, null)` or `tap(null)` or `tap()`)\n      // so we're going to just mirror the source.\n      identity;\n}\n","import { Defined, Maps } from '@scion/toolkit/util';\nimport { BehaviorSubject, noop, firstValueFrom } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/**\n * The bean manager allows getting references to singleton objects, so-called beans.\n *\n * #### Bean\n * A bean can be any object or even a primitive like a `boolean`. A bean is registered under some symbol in the bean manager. In most\n * cases, the class of the bean is used as the symbol. You can then look up the bean under its registration symbol. A symbol is either\n * a class type, an abstract class type, or a `Symbol`.\n *\n * #### Bean Scope\n * Beans are application-scoped, sometimes also referred to as singleton objects.\n *\n * #### Bean Construction\n * By default, the bean manager constructs beans lazily when looked up for the first time. Subsequent lookups then get the same bean instance.\n * When registering a bean, however, you can instruct the bean manager to construct the bean eagerly at startup. Eager beans are constructed after\n * all initializers complete.\n *\n * #### Registering Beans\n * A bean is registered in the bean manager under some class type, abstract class type or `Symbol`. In most cases, the symbol is also the type of the bean\n * instance but does not have to be. You can then look up the bean from the bean manager using that symbol.\n *\n * When registering a bean, you must tell the bean manager how to construct the bean. Different strategies are supported, as listed below.\n *\n * |Strategy|Description|Example|\n * |-|-|-|\n * |useClass             |if to create an instance of a class                                   |```Beans.register(Logger, {useClass: ConsoleLogger});```|\n * |useClass (shorthand) |Shorthand syntax if class and lookup symbol are identical             |```Beans.register(ConsoleLogger);```|\n * |useValue             |if to use a static value as bean                                      |```Beans.register(LoggingConfig, {useValue: config});```|\n * |useFactory           |if to construct the bean with a factory function                      |```Beans.register(Logger, {useFactory: () => new ConsoleLogger()});```|\n * |useExisting          |if to create an alias for another bean registered in the bean manager |```Beans.register(Logger, {useExisting: ConsoleLogger});```|\n *\n * #### Registering multiple Beans on the same Symbol\n * Multiple beans can be registered under the same symbol by setting the multi flag to `true`. When looking them up, they are returned in an array in registration order.\n *\n * ```ts\n * Beans.register(MessageInterceptor, {useClass: MessageLoggerInterceptor, multi: true});\n * ```\n * #### Looking up Beans\n * Beans are looked up using the symbol under which they were registered. The bean manager providers different methods to look up beans, as listed below.\n *\n * |Method|Description|\n * |-|-|\n * |`Beans.get` |Returns the bean registered under the given symbol. If no or multiple beans are registered under the passed symbol, an error is thrown. |\n * |`Beans.opt` |Returns the bean registered under the given symbol, if any, or returns `undefined` otherwise. |\n * |`Beans.all` |Returns all beans registered under the given symbol. Returns an empty array if no bean is found. |\n *\n * #### Replacing Beans\n * A bean can be replaced by registering another bean under a bean's symbol. In turn, the replaced bean is disposed and unregistered.\n *\n * #### Decorating Beans\n * The bean manager allows decorating a bean to intercept invocations to its methods and properties. Multiple decorators can decorate a single bean. Decoration\n * takes place in decorator registration order.\n *\n * Decorators are registered in the bean manager using the `Beans.registerDecorator` method under the symbol of the bean to be decorated.\n * As with the registration of a bean, you must tell the bean manager how to construct the decorator. For more information, see Bean Construction Strategies.\n * Decorators must be registered before starting the bean manager.\n *\n * A decorator must implement the decorate method of the BeanDecorator interface and return the proxied bean. To proxy a bean, you can create a JavaScript proxy,\n * or create an anonymous class delegating to the actual bean.\n *\n * #### Initializers\n * Initializers help to run initialization tasks during startup. Initializers can specify a runlevel in which to execute. Initializers bound to lower\n * runlevels execute before initializers of higher runlevels. Initializers of the same runlevel may execute in parallel.\n *\n * Initializers are registered in the bean manager using the `Beans.registerInitializer` method, passing a function or an initializer object, and optionally a runlevel.\n * If not specifying a runlevel, the initializer is executed in runlevel <code>0</code>, or in the default runlevel as specified when starting the bean manager.\n *\n * @category BeanManager\n */\nclass BeanManager {\n    constructor() {\n        this._beanRegistry = new Map();\n        this._decoratorRegistry = new Map();\n        this._initializers = [];\n        this._sequence = 0;\n        this._runlevel$ = new BehaviorSubject(-1);\n        this._eagerBeansConstructed = false;\n        this._started = false;\n    }\n    /**\n     * Registers a bean under the given symbol.\n     *\n     * If not providing instructions, the given symbol is used as the constructor function to construct the bean.\n     *\n     * By default, bean construction is lazy, meaning that the bean is constructed when looked up for the first time.\n     * If another bean is registered under the same symbol, that other bean is disposed and replaced with the given bean.\n     * To register multiple beans on the same symbol, register it with the flag `multi` set to `true`.\n     *\n     * Beans can be registered, replaced or removed even after starting the bean manager.\n     *\n     * @param  symbol - Symbol under which to register the bean.\n     * @param  instructions - Control bean construction; see {@link BeanInstanceConstructInstructions} for more detail.\n     * @return handle to unregister the bean.\n     */\n    register(symbol, instructions) {\n        if (!symbol) {\n            throw Error('[BeanRegisterError] Missing bean lookup symbol.');\n        }\n        if (!instructions || !containsBeansConstructStrategy(instructions)) {\n            instructions = { ...instructions, useClass: symbol };\n        }\n        validateBeanConstructInstructions(symbol, instructions);\n        // Check that either 'multi' or 'non-multi' beans are registered on the same symbol.\n        const multi = Defined.orElse(instructions.multi, false);\n        if (multi && this._beanRegistry.has(symbol) && Array.from(this._beanRegistry.get(symbol)).some(metaData => !metaData.multi)) {\n            throw Error('[BeanRegisterError] Trying to register a bean as \\'multi-bean\\' on a symbol that has already registered a \\'non-multi-bean\\'. This is probably not what was intended.');\n        }\n        if (!multi && this._beanRegistry.has(symbol) && Array.from(this._beanRegistry.get(symbol)).some(metaData => metaData.multi)) {\n            throw Error('[BeanRegisterError] Trying to register a bean on a symbol that has already registered a \\'multi-bean\\'. This is probably not what was intended.');\n        }\n        // Destroy an already registered bean under the same symbol, if any, unless multi is set to `true`.\n        if (!multi && this._beanRegistry.has(symbol)) {\n            this.disposeBean(this._beanRegistry.get(symbol).values().next().value);\n        }\n        const beanInfo = {\n            symbol: symbol,\n            beanConstructFn: createBeanConstructFunction(instructions),\n            eager: Defined.orElse(instructions.eager || instructions.useValue !== undefined, false),\n            multi: multi,\n            instructions: instructions,\n            constructing: false,\n        };\n        if (multi) {\n            const beans = this._beanRegistry.get(symbol) || new Set();\n            this._beanRegistry.set(symbol, beans.add(beanInfo));\n        }\n        else {\n            this._beanRegistry.set(symbol, new Set([beanInfo]));\n        }\n        if (beanInfo.eager && this._eagerBeansConstructed) {\n            this.getOrConstructBeanInstance(beanInfo);\n        }\n        return { unregister: () => this.disposeBean(beanInfo) };\n    }\n    /**\n     * Registers a bean under the given symbol, but only if no other bean is registered under that symbol yet.\n     *\n     * For detailed information about how to register a bean, see {@link register}.\n     *\n     * @param  symbol - Symbol under which to register the bean.\n     * @param  instructions - Control bean construction; see {@link BeanInstanceConstructInstructions} for more detail.\n     * @return handle to unregister the bean.\n     */\n    registerIfAbsent(symbol, instructions) {\n        if (!symbol) {\n            throw Error('[BeanRegisterError] Missing bean lookup symbol.');\n        }\n        if (!this._beanRegistry.has(symbol)) {\n            return this.register(symbol, instructions);\n        }\n        return { unregister: noop };\n    }\n    /**\n     * Registers a decorator to proxy a bean.\n     *\n     * The decorator is invoked when the bean is constructed. Multiple decorators can be registered to decorate a bean.\n     * They are invoked in the order as registered.\n     *\n     * Decorators must be registered before starting the bean manager.\n     *\n     * @param symbol - Identifies the bean(s) which to decorate. If multiple beans are registered under that symbol, they all are decorated.\n     * @param decorator - Specifies the decorator.\n     */\n    registerDecorator(symbol, decorator) {\n        if (this._started) {\n            throw Error('[BeanManagerLifecycleError] Decorators can only be registered before starting the bean manager.');\n        }\n        if (!symbol) {\n            throw Error('[BeanDecoratorRegisterError] A decorator requires a symbol.');\n        }\n        validateBeanConstructInstructions(symbol, decorator);\n        const constructFn = createBeanConstructFunction(decorator)();\n        Maps.addListValue(this._decoratorRegistry, symbol, constructFn);\n    }\n    /**\n     * Registers an initializer that is executed when the bean manager starts. The bean manager is fully started when all initializers are completed.\n     *\n     * Initializers can specify a runlevel in which to execute. Initializers bound to lower runlevels execute before initializers of higher runlevels.\n     * Initializers of the same runlevel may execute in parallel. Runlevels must be >= 0;\n     *\n     * Initializers must be registered before starting the bean manager.\n     */\n    registerInitializer(initializer) {\n        if (this._started) {\n            throw Error('[BeanManagerLifecycleError] Initializers can only be registered before starting the bean manager.');\n        }\n        const initializerInfo = (() => {\n            if (typeof initializer === 'function') {\n                return { fn: initializer };\n            }\n            else if (initializer.runlevel !== undefined && initializer.runlevel < 0) {\n                throw Error(`[InitializerRegisterError] The runlevel of an initializer must be >= 0, but was ${initializer.runlevel}.`);\n            }\n            else if (initializer.useFunction) {\n                return { fn: initializer.useFunction, runlevel: initializer.runlevel };\n            }\n            else if (initializer.useClass) {\n                const useClass = initializer.useClass;\n                return { fn: () => new useClass().init(), runlevel: initializer.runlevel };\n            }\n            else if (initializer.useExisting) {\n                const useExisting = initializer.useExisting;\n                return { fn: () => Beans.get(useExisting).init(), runlevel: initializer.runlevel };\n            }\n            throw Error('[NullInitializerError] No initializer specified.');\n        })();\n        this._initializers.push(initializerInfo);\n    }\n    /**\n     * Returns the bean registered under the given symbol.\n     *\n     * By default, if no or multiple beans are registered under the given symbol, an error is thrown.\n     *\n     * @param  symbol - Symbol to look up the bean.\n     * @param  orElse - Controls what to do if no bean is found under the given symbol. If not set and if no bean is found, the bean manager throws an error.\n     * @throws if not finding a bean, or if multiple beans are found under the given symbol.\n     */\n    get(symbol, orElse) {\n        const beans = this.all(symbol);\n        switch (beans.length) {\n            case 0: {\n                if (orElse?.orElseGet !== undefined) {\n                    return orElse.orElseGet;\n                }\n                if (orElse?.orElseSupply) {\n                    return orElse.orElseSupply();\n                }\n                throw Error(`[NullBeanError] No bean registered under the symbol '${getSymbolName(symbol)}'.`);\n            }\n            case 1: {\n                return beans[0];\n            }\n            default: {\n                throw Error(`[MultiBeanError] Multiple beans registered under the symbol '${getSymbolName(symbol)}'.`);\n            }\n        }\n    }\n    /**\n     * Returns the bean registered under the given symbol, if any, or returns `undefined` otherwise.\n     *\n     * @param  symbol - Symbol to look up the bean.\n     * @throws if multiple beans are found under the given symbol.\n     */\n    opt(symbol) {\n        return this.get(symbol, { orElseSupply: () => undefined });\n    }\n    /**\n     * Returns all beans registered under the given symbol. Returns an empty array if no bean is found.\n     *\n     * @param symbol - Symbol to look up the beans.\n     */\n    all(symbol) {\n        const beanInfos = Array.from(this._beanRegistry.get(symbol) || new Set());\n        if (!beanInfos || !beanInfos.length) {\n            return [];\n        }\n        if (beanInfos.some(beanInfo => beanInfo.constructing)) {\n            throw Error(`[BeanConstructError] Circular bean construction cycle detected [bean={${getSymbolName(symbol)}}].`);\n        }\n        return beanInfos.map(beanInfo => this.getOrConstructBeanInstance(beanInfo));\n    }\n    /**\n     * Starts the bean manager by running initializers and constructing eager beans. By default, constructs eager beans after\n     * all initializers completed.\n     *\n     * Initializers with a lower runlevel are executed before initializers with a higher runlevel. After all initializers of the\n     * same runlevel have completed, initializers of the next higher runlevel are executed, and so on. Initializers of the same\n     * runlevel may run in parallel.\n     *\n     * @param  config - Control initialization of the bean manager.\n     * @return A Promise that resolves when all initializers completed.\n     */\n    async start(config) {\n        if (this._started) {\n            throw Error('[BeanManagerLifecycleError] Bean manager already started.');\n        }\n        const initializerDefaultRunlevel = config?.initializerDefaultRunlevel ?? 0;\n        const eagerBeanConstructRunlevel = config?.eagerBeanConstructRunlevel ?? (() => {\n            if (this._initializers.length === 0) {\n                return initializerDefaultRunlevel + 1;\n            }\n            return Math.max(...this._initializers.map(initializer => initializer.runlevel ?? initializerDefaultRunlevel)) + 1;\n        })();\n        // Register initializer to construct eager beans.\n        this.registerInitializer({\n            useFunction: async () => {\n                this.constructEagerBeans();\n                this._eagerBeansConstructed = true;\n            },\n            runlevel: eagerBeanConstructRunlevel,\n        });\n        // Run initializers.\n        await this.runInitializers(initializerDefaultRunlevel);\n        this._started = true;\n    }\n    /**\n     * Destroys all beans managed by the bean manager.\n     *\n     * After calling this method, beans, initializers and decorators unregistered.\n     *\n     * Calling this method has no effect if the bean manager is not started, or failed to start.\n     */\n    destroy() {\n        this.getBeanInfos()\n            .sort(compareByDestroyOrder)\n            .forEach(bean => this.disposeBean(bean));\n        this._beanRegistry.clear();\n        this._decoratorRegistry.clear();\n        this._initializers.length = 0;\n        this._runlevel$.next(-1);\n        this._eagerBeansConstructed = false;\n        this._started = false;\n    }\n    disposeBean(beanInfo) {\n        const destroyable = beanInfo.instructions.useClass || beanInfo.instructions.useFactory;\n        if (destroyable && beanInfo.instance && typeof beanInfo.instance.preDestroy === 'function') {\n            try {\n                beanInfo.instance.preDestroy();\n            }\n            catch (error) {\n                console?.error('Bean threw an error in `preDestroy`', error);\n            }\n        }\n        beanInfo.instance = undefined;\n        beanInfo.constructing = false;\n        Maps.removeSetValue(this._beanRegistry, beanInfo.symbol, beanInfo);\n    }\n    /**\n     * Returns a Promise that resolves when the bean manager enters the specified runlevel.\n     * The Promise resolves immediately when the bean manager has already entered or completed that runlevel.\n     */\n    async whenRunlevel(runlevel) {\n        return firstValueFrom(this._runlevel$\n            .pipe(filter(currentRunlevel => currentRunlevel >= runlevel)))\n            .then(() => Promise.resolve());\n    }\n    getBeanInfos() {\n        return Array.from(this._beanRegistry.values()).reduce((acc, beanInfos) => acc.concat(Array.from(beanInfos)), []);\n    }\n    /**\n     * Runs registered initializers, where initializers with a lower runlevel are executed before initializers with a higher runlevel.\n     * After all initializers of the same runlevel have completed, initializers of the next higher runlevel are executed, and so on.\n     * Initializers of the same runlevel may run in parallel.\n     */\n    async runInitializers(defaultInitializerRunlevel) {\n        const initializersGroupedByRunlevel = this._initializers.reduce((grouped, initializer) => Maps.addListValue(grouped, initializer.runlevel ?? defaultInitializerRunlevel, initializer.fn), new Map());\n        const runlevels = Array\n            .from(initializersGroupedByRunlevel.keys())\n            .sort((a, b) => (a - b)); // sort numerically, not alphabetically\n        for (const runlevel of runlevels) {\n            this._runlevel$.next(runlevel);\n            try {\n                await Promise.all(initializersGroupedByRunlevel.get(runlevel).map(initializerFn => initializerFn()));\n            }\n            catch (error) {\n                throw Error(`[InitializerError] Initializer rejected with an error: ${error} [runlevel=${runlevel}]`);\n            }\n        }\n    }\n    /**\n     * Constructs beans with an eager construction.\n     */\n    constructEagerBeans() {\n        this.getBeanInfos()\n            .filter(beanInfo => beanInfo.eager)\n            .forEach(beanInfo => this.getOrConstructBeanInstance(beanInfo));\n    }\n    /**\n     * Returns the bean instance if already constructed, or constructs the bean otherwise.\n     */\n    getOrConstructBeanInstance(beanInfo) {\n        // Check if the bean is already constructed.\n        if (beanInfo.instance) {\n            return beanInfo.instance;\n        }\n        // Construct the bean and decorate it.\n        beanInfo.constructing = true;\n        try {\n            const bean = beanInfo.beanConstructFn();\n            const decorators = this._decoratorRegistry.get(beanInfo.symbol) || [];\n            beanInfo.instance = [...decorators].reverse().reduce((decoratedBean, decorator) => decorator.decorate(decoratedBean), bean);\n            beanInfo.constructInstant = ++this._sequence;\n            return beanInfo.instance;\n        }\n        finally {\n            beanInfo.constructing = false;\n        }\n    }\n}\n/**\n * Provides access to beans registered in the bean manager.\n *\n * @category BeanManager\n */\nconst Beans = new BeanManager();\n/**\n * Compares beans according to their destroy order. If the order is the same, the construction time of the beans is compared, in reverse construction order.\n *\n * @ignore\n */\nfunction compareByDestroyOrder(bean1, bean2) {\n    if ((bean1.instructions.destroyOrder ?? 0) < (bean2.instructions.destroyOrder ?? 0)) {\n        return -1;\n    }\n    if ((bean1.instructions.destroyOrder ?? 0) > (bean2.instructions.destroyOrder ?? 0)) {\n        return +1;\n    }\n    return (bean2.constructInstant ?? 0) - (bean1.constructInstant ?? 0); // reverse construction order\n}\n/** @ignore */\nfunction createBeanConstructFunction(instructions) {\n    if (instructions.useValue !== undefined) {\n        const useValue = instructions.useValue;\n        return () => useValue;\n    }\n    else if (instructions.useClass) {\n        const useClassFn = instructions.useClass;\n        return () => new useClassFn();\n    }\n    else if (instructions.useFactory) {\n        const useFactoryFn = instructions.useFactory;\n        return () => useFactoryFn();\n    }\n    else if (instructions.useExisting) {\n        const useExisting = instructions.useExisting;\n        return () => Beans.get(useExisting);\n    }\n    throw Error(`[BeanConstructError] Missing bean construction strategy`);\n}\n/**\n * Validates passed instructions to construct the bean to be valid.\n *\n * @ignore\n */\nfunction validateBeanConstructInstructions(symbol, instructions) {\n    switch (Object.keys(instructions).filter(instruction => instruction.startsWith('use')).length) {\n        case 0:\n            throw Error(`[BeanRegisterError] Missing bean construction strategy. Expected one of 'useValue', 'useClass', 'useFactory' or 'useExisting' [bean=${symbol.toString()}, instructions=${JSON.stringify(instructions)}]`);\n        case 1:\n            break;\n        default:\n            throw Error(`[BeanRegisterError] Multiple bean construction strategies specified. Expected one of 'useValue', 'useClass', 'useFactory' or 'useExisting' [bean=${symbol.toString()}, instructions=${JSON.stringify(instructions)}]`);\n    }\n    if (Object.keys(instructions).includes('useValue') && instructions.useValue === undefined) {\n        throw Error(`[BeanRegisterError] Passing \\`undefined\\` as bean value is not supported [bean=${symbol.toString()}].`);\n    }\n}\n/** @ignore */\nfunction containsBeansConstructStrategy(instructions) {\n    return Object.keys(instructions).some(property => property.startsWith('use'));\n}\n/**\n * @ignore\n */\nfunction getSymbolName(symbol) {\n    return (typeof symbol === 'function' ? symbol.name : symbol.toString());\n}\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/*\n * Secondary entrypoint: '@scion/toolkit/bean-manager'\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BeanManager, Beans };\n//# sourceMappingURL=scion-toolkit-bean-manager.mjs.map\n","/*\n * Copyright (c) 2018-2020 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Defined, Maps} from '@scion/toolkit/util';\nimport {BehaviorSubject, firstValueFrom, noop} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n/**\n * The bean manager allows getting references to singleton objects, so-called beans.\n *\n * #### Bean\n * A bean can be any object or even a primitive like a `boolean`. A bean is registered under some symbol in the bean manager. In most\n * cases, the class of the bean is used as the symbol. You can then look up the bean under its registration symbol. A symbol is either\n * a class type, an abstract class type, or a `Symbol`.\n *\n * #### Bean Scope\n * Beans are application-scoped, sometimes also referred to as singleton objects.\n *\n * #### Bean Construction\n * By default, the bean manager constructs beans lazily when looked up for the first time. Subsequent lookups then get the same bean instance.\n * When registering a bean, however, you can instruct the bean manager to construct the bean eagerly at startup. Eager beans are constructed after\n * all initializers complete.\n *\n * #### Registering Beans\n * A bean is registered in the bean manager under some class type, abstract class type or `Symbol`. In most cases, the symbol is also the type of the bean\n * instance but does not have to be. You can then look up the bean from the bean manager using that symbol.\n *\n * When registering a bean, you must tell the bean manager how to construct the bean. Different strategies are supported, as listed below.\n *\n * |Strategy|Description|Example|\n * |-|-|-|\n * |useClass             |if to create an instance of a class                                   |```Beans.register(Logger, {useClass: ConsoleLogger});```|\n * |useClass (shorthand) |Shorthand syntax if class and lookup symbol are identical             |```Beans.register(ConsoleLogger);```|\n * |useValue             |if to use a static value as bean                                      |```Beans.register(LoggingConfig, {useValue: config});```|\n * |useFactory           |if to construct the bean with a factory function                      |```Beans.register(Logger, {useFactory: () => new ConsoleLogger()});```|\n * |useExisting          |if to create an alias for another bean registered in the bean manager |```Beans.register(Logger, {useExisting: ConsoleLogger});```|\n *\n * #### Registering multiple Beans on the same Symbol\n * Multiple beans can be registered under the same symbol by setting the multi flag to `true`. When looking them up, they are returned in an array in registration order.\n *\n * ```ts\n * Beans.register(MessageInterceptor, {useClass: MessageLoggerInterceptor, multi: true});\n * ```\n * #### Looking up Beans\n * Beans are looked up using the symbol under which they were registered. The bean manager providers different methods to look up beans, as listed below.\n *\n * |Method|Description|\n * |-|-|\n * |`Beans.get` |Returns the bean registered under the given symbol. If no or multiple beans are registered under the passed symbol, an error is thrown. |\n * |`Beans.opt` |Returns the bean registered under the given symbol, if any, or returns `undefined` otherwise. |\n * |`Beans.all` |Returns all beans registered under the given symbol. Returns an empty array if no bean is found. |\n *\n * #### Replacing Beans\n * A bean can be replaced by registering another bean under a bean's symbol. In turn, the replaced bean is disposed and unregistered.\n *\n * #### Decorating Beans\n * The bean manager allows decorating a bean to intercept invocations to its methods and properties. Multiple decorators can decorate a single bean. Decoration\n * takes place in decorator registration order.\n *\n * Decorators are registered in the bean manager using the `Beans.registerDecorator` method under the symbol of the bean to be decorated.\n * As with the registration of a bean, you must tell the bean manager how to construct the decorator. For more information, see Bean Construction Strategies.\n * Decorators must be registered before starting the bean manager.\n *\n * A decorator must implement the decorate method of the BeanDecorator interface and return the proxied bean. To proxy a bean, you can create a JavaScript proxy,\n * or create an anonymous class delegating to the actual bean.\n *\n * #### Initializers\n * Initializers help to run initialization tasks during startup. Initializers can specify a runlevel in which to execute. Initializers bound to lower\n * runlevels execute before initializers of higher runlevels. Initializers of the same runlevel may execute in parallel.\n *\n * Initializers are registered in the bean manager using the `Beans.registerInitializer` method, passing a function or an initializer object, and optionally a runlevel.\n * If not specifying a runlevel, the initializer is executed in runlevel <code>0</code>, or in the default runlevel as specified when starting the bean manager.\n *\n * @category BeanManager\n */\nexport class BeanManager {\n\n  private _beanRegistry = new Map<Type<any> | AbstractType<any> | symbol, Set<BeanInfo>>();\n  private _decoratorRegistry = new Map<Type<any> | AbstractType<any> | symbol, BeanDecorator<any>[]>();\n  private _initializers: InitializerInfo[] = [];\n\n  private _sequence = 0;\n  private _runlevel$ = new BehaviorSubject<number>(-1);\n  private _eagerBeansConstructed = false;\n  private _started = false;\n\n  /**\n   * Registers a bean under the given symbol.\n   *\n   * If not providing instructions, the given symbol is used as the constructor function to construct the bean.\n   *\n   * By default, bean construction is lazy, meaning that the bean is constructed when looked up for the first time.\n   * If another bean is registered under the same symbol, that other bean is disposed and replaced with the given bean.\n   * To register multiple beans on the same symbol, register it with the flag `multi` set to `true`.\n   *\n   * Beans can be registered, replaced or removed even after starting the bean manager.\n   *\n   * @param  symbol - Symbol under which to register the bean.\n   * @param  instructions - Control bean construction; see {@link BeanInstanceConstructInstructions} for more detail.\n   * @return handle to unregister the bean.\n   */\n  public register<T>(symbol: Type<T | any> | AbstractType<T | any> | symbol, instructions?: BeanInstanceConstructInstructions<T>): Registration {\n    if (!symbol) {\n      throw Error('[BeanRegisterError] Missing bean lookup symbol.');\n    }\n\n    if (!instructions || !containsBeansConstructStrategy(instructions)) {\n      instructions = {...instructions, useClass: symbol as Type<T>};\n    }\n    validateBeanConstructInstructions(symbol, instructions);\n\n    // Check that either 'multi' or 'non-multi' beans are registered on the same symbol.\n    const multi = Defined.orElse(instructions.multi, false);\n    if (multi && this._beanRegistry.has(symbol) && Array.from(this._beanRegistry.get(symbol)!).some(metaData => !metaData.multi)) {\n      throw Error('[BeanRegisterError] Trying to register a bean as \\'multi-bean\\' on a symbol that has already registered a \\'non-multi-bean\\'. This is probably not what was intended.');\n    }\n    if (!multi && this._beanRegistry.has(symbol) && Array.from(this._beanRegistry.get(symbol)!).some(metaData => metaData.multi)) {\n      throw Error('[BeanRegisterError] Trying to register a bean on a symbol that has already registered a \\'multi-bean\\'. This is probably not what was intended.');\n    }\n\n    // Destroy an already registered bean under the same symbol, if any, unless multi is set to `true`.\n    if (!multi && this._beanRegistry.has(symbol)) {\n      this.disposeBean(this._beanRegistry.get(symbol)!.values().next().value);\n    }\n\n    const beanInfo: BeanInfo<T> = {\n      symbol: symbol,\n      beanConstructFn: createBeanConstructFunction(instructions),\n      eager: Defined.orElse(instructions.eager || instructions.useValue !== undefined, false),\n      multi: multi,\n      instructions: instructions,\n      constructing: false,\n    };\n\n    if (multi) {\n      const beans = this._beanRegistry.get(symbol) || new Set<BeanInfo>();\n      this._beanRegistry.set(symbol, beans.add(beanInfo));\n    }\n    else {\n      this._beanRegistry.set(symbol, new Set<BeanInfo>([beanInfo]));\n    }\n\n    if (beanInfo.eager && this._eagerBeansConstructed) {\n      this.getOrConstructBeanInstance(beanInfo);\n    }\n\n    return {unregister: (): void => this.disposeBean(beanInfo)};\n  }\n\n  /**\n   * Registers a bean under the given symbol, but only if no other bean is registered under that symbol yet.\n   *\n   * For detailed information about how to register a bean, see {@link register}.\n   *\n   * @param  symbol - Symbol under which to register the bean.\n   * @param  instructions - Control bean construction; see {@link BeanInstanceConstructInstructions} for more detail.\n   * @return handle to unregister the bean.\n   */\n  public registerIfAbsent<T>(symbol: Type<T | any> | AbstractType<T | any> | symbol, instructions?: BeanInstanceConstructInstructions<T>): Registration {\n    if (!symbol) {\n      throw Error('[BeanRegisterError] Missing bean lookup symbol.');\n    }\n\n    if (!this._beanRegistry.has(symbol)) {\n      return this.register(symbol, instructions);\n    }\n    return {unregister: noop};\n  }\n\n  /**\n   * Registers a decorator to proxy a bean.\n   *\n   * The decorator is invoked when the bean is constructed. Multiple decorators can be registered to decorate a bean.\n   * They are invoked in the order as registered.\n   *\n   * Decorators must be registered before starting the bean manager.\n   *\n   * @param symbol - Identifies the bean(s) which to decorate. If multiple beans are registered under that symbol, they all are decorated.\n   * @param decorator - Specifies the decorator.\n   */\n  public registerDecorator<T extends BeanDecorator<any>>(symbol: Type<any> | AbstractType<any> | symbol, decorator: {useValue: T} | {useClass?: Type<T>} | {useFactory?: () => T}): void {\n    if (this._started) {\n      throw Error('[BeanManagerLifecycleError] Decorators can only be registered before starting the bean manager.');\n    }\n\n    if (!symbol) {\n      throw Error('[BeanDecoratorRegisterError] A decorator requires a symbol.');\n    }\n\n    validateBeanConstructInstructions(symbol, decorator);\n    const constructFn = createBeanConstructFunction(decorator)();\n    Maps.addListValue(this._decoratorRegistry, symbol, constructFn);\n  }\n\n  /**\n   * Registers an initializer that is executed when the bean manager starts. The bean manager is fully started when all initializers are completed.\n   *\n   * Initializers can specify a runlevel in which to execute. Initializers bound to lower runlevels execute before initializers of higher runlevels.\n   * Initializers of the same runlevel may execute in parallel. Runlevels must be >= 0;\n   *\n   * Initializers must be registered before starting the bean manager.\n   */\n  public registerInitializer(initializer: InitializerFn | {useFunction?: InitializerFn; useClass?: Type<Initializer>; useExisting?: Type<Initializer> | AbstractType<Initializer> | symbol; runlevel?: number}): void {\n    if (this._started) {\n      throw Error('[BeanManagerLifecycleError] Initializers can only be registered before starting the bean manager.');\n    }\n\n    const initializerInfo: InitializerInfo = ((): InitializerInfo => {\n      if (typeof initializer === 'function') {\n        return {fn: initializer};\n      }\n      else if (initializer.runlevel !== undefined && initializer.runlevel < 0) {\n        throw Error(`[InitializerRegisterError] The runlevel of an initializer must be >= 0, but was ${initializer.runlevel}.`);\n      }\n      else if (initializer.useFunction) {\n        return {fn: initializer.useFunction, runlevel: initializer.runlevel};\n      }\n      else if (initializer.useClass) {\n        const useClass = initializer.useClass;\n        return {fn: (): Promise<void> => new useClass().init(), runlevel: initializer.runlevel};\n      }\n      else if (initializer.useExisting) {\n        const useExisting = initializer.useExisting;\n        return {fn: (): Promise<void> => Beans.get(useExisting).init(), runlevel: initializer.runlevel};\n      }\n      throw Error('[NullInitializerError] No initializer specified.');\n    })();\n\n    this._initializers.push(initializerInfo);\n  }\n\n  /**\n   * Returns the bean registered under the given symbol.\n   *\n   * By default, if no or multiple beans are registered under the given symbol, an error is thrown.\n   *\n   * @param  symbol - Symbol to look up the bean.\n   * @param  orElse - Controls what to do if no bean is found under the given symbol. If not set and if no bean is found, the bean manager throws an error.\n   * @throws if not finding a bean, or if multiple beans are found under the given symbol.\n   */\n  public get<T>(symbol: Type<T> | AbstractType<T> | Type<any> | AbstractType<any> | symbol, orElse?: {orElseGet?: T; orElseSupply?: () => T}): T {\n    const beans = this.all(symbol);\n    switch (beans.length) {\n      case 0: {\n        if (orElse?.orElseGet !== undefined) {\n          return orElse.orElseGet;\n        }\n        if (orElse?.orElseSupply) {\n          return orElse.orElseSupply();\n        }\n\n        throw Error(`[NullBeanError] No bean registered under the symbol '${getSymbolName(symbol)}'.`);\n      }\n      case 1: {\n        return beans[0];\n      }\n      default: {\n        throw Error(`[MultiBeanError] Multiple beans registered under the symbol '${getSymbolName(symbol)}'.`);\n      }\n    }\n  }\n\n  /**\n   * Returns the bean registered under the given symbol, if any, or returns `undefined` otherwise.\n   *\n   * @param  symbol - Symbol to look up the bean.\n   * @throws if multiple beans are found under the given symbol.\n   */\n  public opt<T>(symbol: Type<T> | AbstractType<T> | Type<any> | AbstractType<any> | symbol): T | undefined {\n    return this.get(symbol, {orElseSupply: (): undefined => undefined});\n  }\n\n  /**\n   * Returns all beans registered under the given symbol. Returns an empty array if no bean is found.\n   *\n   * @param symbol - Symbol to look up the beans.\n   */\n  public all<T>(symbol: Type<T> | AbstractType<T> | Type<any> | AbstractType<any> | symbol): T[] {\n    const beanInfos = Array.from(this._beanRegistry.get(symbol) || new Set<BeanInfo>());\n    if (!beanInfos || !beanInfos.length) {\n      return [];\n    }\n    if (beanInfos.some(beanInfo => beanInfo.constructing)) {\n      throw Error(`[BeanConstructError] Circular bean construction cycle detected [bean={${getSymbolName(symbol)}}].`);\n    }\n\n    return beanInfos.map(beanInfo => this.getOrConstructBeanInstance(beanInfo));\n  }\n\n  /**\n   * Starts the bean manager by running initializers and constructing eager beans. By default, constructs eager beans after\n   * all initializers completed.\n   *\n   * Initializers with a lower runlevel are executed before initializers with a higher runlevel. After all initializers of the\n   * same runlevel have completed, initializers of the next higher runlevel are executed, and so on. Initializers of the same\n   * runlevel may run in parallel.\n   *\n   * @param  config - Control initialization of the bean manager.\n   * @return A Promise that resolves when all initializers completed.\n   */\n  public async start(config?: BeanManagerConfig): Promise<void> {\n    if (this._started) {\n      throw Error('[BeanManagerLifecycleError] Bean manager already started.');\n    }\n\n    const initializerDefaultRunlevel = config?.initializerDefaultRunlevel ?? 0;\n    const eagerBeanConstructRunlevel = config?.eagerBeanConstructRunlevel ?? ((): number => {\n      if (this._initializers.length === 0) {\n        return initializerDefaultRunlevel + 1;\n      }\n      return Math.max(...this._initializers.map(initializer => initializer.runlevel ?? initializerDefaultRunlevel)) + 1;\n    })();\n\n    // Register initializer to construct eager beans.\n    this.registerInitializer({\n      useFunction: async () => {\n        this.constructEagerBeans();\n        this._eagerBeansConstructed = true;\n      },\n      runlevel: eagerBeanConstructRunlevel,\n    });\n\n    // Run initializers.\n    await this.runInitializers(initializerDefaultRunlevel);\n\n    this._started = true;\n  }\n\n  /**\n   * Destroys all beans managed by the bean manager.\n   *\n   * After calling this method, beans, initializers and decorators unregistered.\n   *\n   * Calling this method has no effect if the bean manager is not started, or failed to start.\n   */\n  public destroy(): void {\n    this.getBeanInfos()\n      .sort(compareByDestroyOrder)\n      .forEach(bean => this.disposeBean(bean));\n\n    this._beanRegistry.clear();\n    this._decoratorRegistry.clear();\n    this._initializers.length = 0;\n    this._runlevel$.next(-1);\n    this._eagerBeansConstructed = false;\n    this._started = false;\n  }\n\n  private disposeBean(beanInfo: BeanInfo): void {\n    const destroyable = beanInfo.instructions.useClass || beanInfo.instructions.useFactory;\n    if (destroyable && beanInfo.instance && typeof (beanInfo.instance as PreDestroy).preDestroy === 'function') {\n      try {\n        beanInfo.instance.preDestroy();\n      }\n      catch (error) {\n        console?.error('Bean threw an error in `preDestroy`', error);\n      }\n    }\n\n    beanInfo.instance = undefined;\n    beanInfo.constructing = false;\n    Maps.removeSetValue(this._beanRegistry, beanInfo.symbol, beanInfo);\n  }\n\n  /**\n   * Returns a Promise that resolves when the bean manager enters the specified runlevel.\n   * The Promise resolves immediately when the bean manager has already entered or completed that runlevel.\n   */\n  public async whenRunlevel(runlevel: number): Promise<void> {\n    return firstValueFrom(this._runlevel$\n      .pipe(filter(currentRunlevel => currentRunlevel >= runlevel)))\n      .then(() => Promise.resolve());\n  }\n\n  private getBeanInfos(): BeanInfo[] {\n    return Array.from(this._beanRegistry.values()).reduce((acc, beanInfos) => acc.concat(Array.from(beanInfos)), [] as BeanInfo[]);\n  }\n\n  /**\n   * Runs registered initializers, where initializers with a lower runlevel are executed before initializers with a higher runlevel.\n   * After all initializers of the same runlevel have completed, initializers of the next higher runlevel are executed, and so on.\n   * Initializers of the same runlevel may run in parallel.\n   */\n  private async runInitializers(defaultInitializerRunlevel: number): Promise<void> {\n    const initializersGroupedByRunlevel = this._initializers.reduce((grouped, initializer) => Maps.addListValue(grouped, initializer.runlevel ?? defaultInitializerRunlevel, initializer.fn), new Map<number, InitializerFn[]>());\n    const runlevels = Array\n      .from(initializersGroupedByRunlevel.keys())\n      .sort((a, b) => (a - b)); // sort numerically, not alphabetically\n\n    for (const runlevel of runlevels) {\n      this._runlevel$.next(runlevel);\n      try {\n        await Promise.all(initializersGroupedByRunlevel.get(runlevel)!.map(initializerFn => initializerFn()));\n      }\n      catch (error) {\n        throw Error(`[InitializerError] Initializer rejected with an error: ${error} [runlevel=${runlevel}]`);\n      }\n    }\n  }\n\n  /**\n   * Constructs beans with an eager construction.\n   */\n  private constructEagerBeans(): void {\n    this.getBeanInfos()\n      .filter(beanInfo => beanInfo.eager)\n      .forEach(beanInfo => this.getOrConstructBeanInstance(beanInfo));\n  }\n\n  /**\n   * Returns the bean instance if already constructed, or constructs the bean otherwise.\n   */\n  private getOrConstructBeanInstance<T>(beanInfo: BeanInfo): T {\n    // Check if the bean is already constructed.\n    if (beanInfo.instance) {\n      return beanInfo.instance;\n    }\n\n    // Construct the bean and decorate it.\n    beanInfo.constructing = true;\n    try {\n      const bean: T = beanInfo.beanConstructFn();\n      const decorators = this._decoratorRegistry.get(beanInfo.symbol) || [];\n\n      beanInfo.instance = [...decorators].reverse().reduce((decoratedBean, decorator) => decorator.decorate(decoratedBean), bean);\n      beanInfo.constructInstant = ++this._sequence;\n\n      return beanInfo.instance;\n    }\n    finally {\n      beanInfo.constructing = false;\n    }\n  }\n}\n\n/**\n * Provides access to beans registered in the bean manager.\n *\n * @category BeanManager\n */\nexport const Beans = new BeanManager();\n\n/**\n * Compares beans according to their destroy order. If the order is the same, the construction time of the beans is compared, in reverse construction order.\n *\n * @ignore\n */\nfunction compareByDestroyOrder(bean1: BeanInfo, bean2: BeanInfo): number {\n  if ((bean1.instructions.destroyOrder ?? 0) < (bean2.instructions.destroyOrder ?? 0)) {\n    return -1;\n  }\n  if ((bean1.instructions.destroyOrder ?? 0) > (bean2.instructions.destroyOrder ?? 0)) {\n    return +1;\n  }\n  return (bean2.constructInstant ?? 0) - (bean1.constructInstant ?? 0); // reverse construction order\n}\n\n/** @ignore */\nfunction createBeanConstructFunction<T>(instructions: BeanInstanceConstructInstructions<T>): () => T | null {\n  if (instructions.useValue !== undefined) {\n    const useValue = instructions.useValue;\n    return (): T | null => useValue;\n  }\n  else if (instructions.useClass) {\n    const useClassFn = instructions.useClass;\n    return (): T => new useClassFn();\n  }\n  else if (instructions.useFactory) {\n    const useFactoryFn = instructions.useFactory;\n    return (): T => useFactoryFn();\n  }\n  else if (instructions.useExisting) {\n    const useExisting = instructions.useExisting;\n    return (): T => Beans.get(useExisting);\n  }\n  throw Error(`[BeanConstructError] Missing bean construction strategy`);\n}\n\n/**\n * Validates passed instructions to construct the bean to be valid.\n *\n * @ignore\n */\nfunction validateBeanConstructInstructions(symbol: Type<any> | AbstractType<any> | symbol, instructions: BeanInstanceConstructInstructions): void {\n  switch (Object.keys(instructions).filter(instruction => instruction.startsWith('use')).length) {\n    case 0:\n      throw Error(`[BeanRegisterError] Missing bean construction strategy. Expected one of 'useValue', 'useClass', 'useFactory' or 'useExisting' [bean=${symbol.toString()}, instructions=${JSON.stringify(instructions)}]`);\n    case 1:\n      break;\n    default:\n      throw Error(`[BeanRegisterError] Multiple bean construction strategies specified. Expected one of 'useValue', 'useClass', 'useFactory' or 'useExisting' [bean=${symbol.toString()}, instructions=${JSON.stringify(instructions)}]`);\n  }\n\n  if (Object.keys(instructions).includes('useValue') && instructions.useValue === undefined) {\n    throw Error(`[BeanRegisterError] Passing \\`undefined\\` as bean value is not supported [bean=${symbol.toString()}].`);\n  }\n}\n\n/** @ignore */\nfunction containsBeansConstructStrategy(instructions: BeanInstanceConstructInstructions): boolean {\n  return Object.keys(instructions).some(property => property.startsWith('use'));\n}\n\n/**\n * Lifecycle hook will be executed before destroying this bean.\n *\n * @category BeanManager\n */\nexport interface PreDestroy {\n\n  /**\n   * Method invoked before destroying this bean, e.g., when unregistering it, or when shutting down the bean manager.\n   */\n  preDestroy(): void;\n}\n\n/**\n * Metadata about a bean.\n *\n * @ignore\n */\ninterface BeanInfo<T = any> {\n  symbol: Type<T | any> | AbstractType<T | any> | symbol;\n  instance?: T;\n  constructing: boolean;\n  beanConstructFn: () => T | null;\n  constructInstant?: number;\n  eager: boolean;\n  multi: boolean;\n  instructions: BeanInstanceConstructInstructions;\n}\n\n/**\n * @ignore\n */\ninterface InitializerInfo {\n  fn: InitializerFn;\n  runlevel?: number;\n}\n\n/**\n * Describes how a bean instance is created.\n *\n * @category BeanManager\n */\nexport interface BeanInstanceConstructInstructions<T = any> {\n  /**\n   * Set if to use a static value as bean.\n   */\n  useValue?: T | null;\n  /**\n   * Set if to create an instance of a class.\n   */\n  useClass?: Type<T>;\n  /**\n   * Set if to construct the instance with a factory function.\n   */\n  useFactory?: () => T;\n  /**\n   * Set if to create an alias for another bean.\n   */\n  useExisting?: Type<any> | AbstractType<any> | symbol;\n  /**\n   * Set if to construct the bean eagerly. By default, bean construction is lazy when the bean is looked up for the first time.\n   */\n  eager?: boolean;\n  /**\n   * Set if to provide multiple beans for a single symbol.\n   */\n  multi?: boolean;\n  /**\n   * Control when to destroy the bean when destroying the bean manager.\n   * Beans with a lower destroy order are destroyed before beans with a higher destroy order. Beans of the same destroy order\n   * are destroyed in reverse construction order.\n   */\n  destroyOrder?: number;\n}\n\n/**\n * Allows executing initialization tasks (synchronous or asynchronous) when starting the bean manager. The bean manager is fully started when all initializers are completed.\n *\n * Initializers can specify a runlevel in which to execute. Initializers bound to lower runlevels execute before initializers of higher runlevels.\n * Initializers of the same runlevel may execute in parallel.\n *\n * @see {@link BeanManager.registerInitializer Beans.registerInitializer}\n * @category BeanManager\n */\nexport interface Initializer {\n  /**\n   * Executes some work during bean manager startup.\n   *\n   * @return a Promise that resolves when this initializer completes its initialization.\n   */\n  init(): Promise<void>;\n}\n\n/**\n * Allows executing initialization tasks (synchronous or asynchronous) when starting the bean manager. The bean manager is fully started when all initializers are completed.\n *\n * Initializers can specify a runlevel in which to execute. Initializers bound to lower runlevels execute before initializers of higher runlevels.\n * Initializers of the same runlevel may execute in parallel.\n *\n * The initializer function must return a Promise that resolves when completed its initialization.\n *\n * @see {@link BeanManager.registerInitializer Beans.registerInitializer}\n * @category BeanManager\n */\nexport declare type InitializerFn = () => Promise<void>;\n\n/**\n * Allows intercepting bean method or property invocations.\n * When the bean is constructed, it is passed to the decorator in order to be proxied.\n *\n * @see {@link BeanManager.registerDecorator Beans.registerDecorator}\n * @category BeanManager\n */\nexport interface BeanDecorator<T> {\n  /**\n   * Method invoked when the bean is instantiated.\n   *\n   * @param  bean - The actual bean instance; use it to delegate invoations to the actual bean.\n   * @return proxied bean\n   */\n  decorate(bean: T): T;\n}\n\n/**\n * Represents a symbol of an abstract class.\n *\n * @category BeanManager\n */\nexport interface AbstractType<T> extends Function {\n  prototype: T;\n}\n\n/**\n * Represents a symbol of a class.\n *\n * @category BeanManager\n */\nexport interface Type<T> extends Function {\n  new(...args: any[]): T;\n}\n\n/**\n * @ignore\n */\nfunction getSymbolName(symbol: Type<any> | AbstractType<any> | symbol): string {\n  return (typeof symbol === 'function' ? symbol.name : symbol.toString());\n}\n\n/**\n * Handle to undo a registration.\n */\nexport interface Registration {\n  unregister: () => void;\n}\n\n/**\n * Control initialization of the bean manager.\n *\n * @category BeanManager\n */\nexport interface BeanManagerConfig {\n  /**\n   * Defines the runlevel in which to construct eager beans.\n   * If not set, eager beans are constructed after all registered initializers completed.\n   */\n  eagerBeanConstructRunlevel?: number;\n  /**\n   * Defines the runlevel in which initializers, that do not specify a runlevel, should be executed.\n   * If not set, initializers not specifying a runlevel are bound to the runlevel <code>0</code>.\n   */\n  initializerDefaultRunlevel?: number;\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Secondary entrypoint: '@scion/toolkit/bean-manager'\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\nexport * from './bean-manager';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n","import { identity, Observable, from, of } from 'rxjs';\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides utility methods to work with `undefined` values. The value `null` is considered as a defined value.\n *\n * Note: TypeScript 3.7 introduces the `nullish coalescing operator` [1] `(??)`, which is similar to the `Defined` function,\n * but also applies for `null` values.\n *\n * ## Links:\n * [1] https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing\n */\nvar Defined;\n(function (Defined) {\n    /**\n     * Returns the value if not `undefined`, otherwise \"orElseValue\". The \"orElseValue\" value can be created with a factory function.\n     *\n     * Unlike JavaScript's \"nullish coalescing operator (??)\", the \"orElse\" function only tests for `undefined`, not `null`.\n     */\n    function orElse(value, orElseValue) {\n        return (value !== undefined ? value : (typeof orElseValue === 'function' ? orElseValue() : orElseValue));\n    }\n    Defined.orElse = orElse;\n    /**\n     * Returns the value if not `undefined`, otherwise throws the error created by the passed factory function.\n     */\n    function orElseThrow(value, orElseThrowFn) {\n        if (value !== undefined) {\n            return value;\n        }\n        throw orElseThrowFn();\n    }\n    Defined.orElseThrow = orElseThrow;\n})(Defined || (Defined = {}));\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides array utility methods.\n */\nvar Arrays;\n(function (Arrays) {\n    function coerce(value, options) {\n        if (value === null || value === undefined) {\n            if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n                return [];\n            }\n            return value;\n        }\n        return Array.isArray(value) ? value : [value];\n    }\n    Arrays.coerce = coerce;\n    /**\n     * Compares items of given arrays for reference equality.\n     *\n     * Use the parameter `exactOrder` to control if the item order must be equal (which is by default) or not.\n     */\n    function isEqual(array1, array2, options) {\n        if (array1 === array2) {\n            return true;\n        }\n        if (!array1 || !array2) {\n            return false;\n        }\n        if (array1.length !== array2.length) {\n            return false;\n        }\n        if (options?.exactOrder ?? true) {\n            return array1.every((item, index) => item === array2[index]);\n        }\n        return array1.every(item => array2.includes(item)) && array2.every(item => array1.includes(item));\n    }\n    Arrays.isEqual = isEqual;\n    /**\n     * Removes the specified element from an array, or the elements which satisfy the provided predicate function.\n     * The original array will be changed.\n     *\n     * @param  array - The array from which elements should be removed.\n     * @param  element - The element to be removed, or a predicate function to resolve elements which to be removed.\n     * @param  options - Control if to remove all occurrences of the element. If not specified, all occurrences are removed.\n     * @return the elements removed from the array.\n     */\n    function remove(array, element, options) {\n        const firstOnly = Defined.orElse(options && options.firstOnly, false);\n        // define a function to resolve the element's index in the original array\n        const indexOfElementFn = (() => {\n            if (typeof element === 'function') {\n                const predicate = element;\n                return () => array.findIndex(predicate);\n            }\n            else {\n                return () => array.indexOf(element);\n            }\n        })();\n        const removedElements = [];\n        for (let i = indexOfElementFn(); i !== -1; i = indexOfElementFn()) {\n            removedElements.push(...array.splice(i, 1)); // changes the original array\n            if (firstOnly) {\n                break;\n            }\n        }\n        return removedElements;\n    }\n    Arrays.remove = remove;\n    /**\n     * Removes duplicate items from the array. The original array will not be modified.\n     *\n     * Use the parameter `keySelector` to provide a function for comparing objects.\n     */\n    function distinct(items, keySelector = identity) {\n        const itemSet = new Set(items.map(keySelector));\n        return items.filter(item => itemSet.delete(keySelector(item)));\n    }\n    Arrays.distinct = distinct;\n    /**\n     * Intersects the given arrays, returning a new array containing all the elements contained in every array.\n     * Arrays which are `undefined` or `null` are ignored.\n     */\n    function intersect(...arrays) {\n        const _arrays = arrays.filter(array => array !== undefined && array !== null);\n        if (!_arrays.length) {\n            return [];\n        }\n        const first = _arrays.pop();\n        return _arrays.reduce((intersection, array) => intersection.filter(value => array.includes(value)), [...first]);\n    }\n    Arrays.intersect = intersect;\n    /**\n     * Returns the last element in the given array, optionally matching the predicate if given.\n     *\n     * Returns `undefined` if no element is found.\n     */\n    function last(array, predicate) {\n        if (!array) {\n            return undefined;\n        }\n        if (!predicate) {\n            return array[array.length - 1];\n        }\n        for (let i = array.length - 1; i >= 0; i--) {\n            if (predicate(array[i])) {\n                return array[i];\n            }\n        }\n        return undefined;\n    }\n    Arrays.last = last;\n})(Arrays || (Arrays = {}));\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\nvar Objects;\n(function (Objects) {\n    /**\n     * Compares the two objects for shallow equality.\n     */\n    function isEqual(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        if (Object.keys(a).length !== Object.keys(b).length) {\n            return false;\n        }\n        return Object.entries(a).every(([key, value]) => (b[key] === value));\n    }\n    Objects.isEqual = isEqual;\n})(Objects || (Objects = {}));\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides dictionary utility methods.\n */\nvar Dictionaries;\n(function (Dictionaries) {\n    function coerce(dictionaryLike, options) {\n        if (dictionaryLike === null || dictionaryLike === undefined) {\n            if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n                return {};\n            }\n            return dictionaryLike;\n        }\n        if (dictionaryLike instanceof Map) {\n            return createDictionaryFromMap(dictionaryLike);\n        }\n        // Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n        // Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n        // This is most likely because the serialization takes place in a different realm.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n        // @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n        try {\n            const map = new Map(dictionaryLike);\n            return createDictionaryFromMap(map);\n        }\n        catch {\n            // noop\n        }\n        return dictionaryLike;\n    }\n    Dictionaries.coerce = coerce;\n    /**\n     * Returns a new {@link Dictionary} with `undefined` values removed.\n     */\n    function withoutUndefinedEntries(object) {\n        return Object.entries(object).reduce((dictionary, [key, value]) => {\n            if (value !== undefined) {\n                dictionary[key] = value;\n            }\n            return dictionary;\n        }, {});\n    }\n    Dictionaries.withoutUndefinedEntries = withoutUndefinedEntries;\n})(Dictionaries || (Dictionaries = {}));\nfunction createDictionaryFromMap(map) {\n    return Array\n        .from(map.entries())\n        .reduce((dictionary, [key, value]) => {\n        dictionary[key] = value;\n        return dictionary;\n    }, {});\n}\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Provides utility methods for {@link Map}.\n */\nvar Maps;\n(function (Maps) {\n    function coerce(mapLike, options) {\n        if (mapLike === null || mapLike === undefined) {\n            if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n                return new Map();\n            }\n            return mapLike;\n        }\n        if (mapLike instanceof Map) {\n            return mapLike;\n        }\n        // Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n        // Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n        // This is most likely because the serialization takes place in a different realm.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n        // @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n        try {\n            return new Map(mapLike);\n        }\n        catch {\n            // noop\n        }\n        return Object\n            .entries(mapLike)\n            .reduce((map, [key, value]) => map.set(key, value), new Map());\n    }\n    Maps.coerce = coerce;\n    /**\n     * Adds the given value into a {@link Set} in the multi value {@link Map}.\n     */\n    function addSetValue(multiValueMap, key, value) {\n        const values = multiValueMap.get(key) || new Set();\n        return multiValueMap.set(key, values.add(value));\n    }\n    Maps.addSetValue = addSetValue;\n    /**\n     * Removes the given value or values matching the given predicate from the multi {@link Map}.\n     *\n     * @return `true` if the element was removed, or `false` otherwise.\n     */\n    function removeSetValue(multiValueMap, key, value) {\n        const values = multiValueMap.get(key) || new Set();\n        let hasRemoved;\n        if (typeof value === 'function') {\n            const predicateFn = value;\n            hasRemoved = Array.from(values)\n                .filter(predicateFn)\n                .reduce((removed, it) => values.delete(it) || removed, false);\n        }\n        else {\n            hasRemoved = values.delete(value);\n        }\n        if (hasRemoved && !values.size) {\n            multiValueMap.delete(key);\n        }\n        return hasRemoved;\n    }\n    Maps.removeSetValue = removeSetValue;\n    /**\n     * Adds the given value into an {@link Array} in the multi value {@link Map}.\n     */\n    function addListValue(map, key, value) {\n        const values = map.get(key) || [];\n        return map.set(key, values.concat(value));\n    }\n    Maps.addListValue = addListValue;\n    /**\n     * Removes the given value or values matching the given predicate from the multi {@link Map}.\n     *\n     * @return `true` if the element was removed, or `false` otherwise.\n     */\n    function removeListValue(multiValueMap, key, value) {\n        const values = multiValueMap.get(key) || [];\n        const hasRemoved = Arrays.remove(values, value, { firstOnly: false }).length > 0;\n        if (hasRemoved && !values.length) {\n            multiValueMap.delete(key);\n        }\n        return hasRemoved;\n    }\n    Maps.removeListValue = removeListValue;\n})(Maps || (Maps = {}));\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\nvar Observables;\n(function (Observables) {\n    /**\n     * Creates an `Observable` from the passed value, which will emit the value and then complete,\n     * or, if passing an `Observable`, returns it unchanged. If passing a `Promise`, it is converted\n     * to an `Observable`.\n     */\n    function coerce(value) {\n        if (value instanceof Observable) {\n            return value;\n        }\n        if (value instanceof Promise) {\n            return from(value);\n        }\n        return of(value);\n    }\n    Observables.coerce = coerce;\n})(Observables || (Observables = {}));\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/*\n * Secondary entrypoint: '@scion/toolkit/util'\n * This module does not depend on Angular.\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Arrays, Defined, Dictionaries, Maps, Objects, Observables };\n//# sourceMappingURL=scion-toolkit-util.mjs.map\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\n/**\n * Provides utility methods to work with `undefined` values. The value `null` is considered as a defined value.\n *\n * Note: TypeScript 3.7 introduces the `nullish coalescing operator` [1] `(??)`, which is similar to the `Defined` function,\n * but also applies for `null` values.\n *\n * ## Links:\n * [1] https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing\n */\nexport namespace Defined {\n\n  /**\n   * Returns the value if not `undefined`, otherwise \"orElseValue\". The \"orElseValue\" value can be created with a factory function.\n   *\n   * Unlike JavaScript's \"nullish coalescing operator (??)\", the \"orElse\" function only tests for `undefined`, not `null`.\n   */\n  export function orElse<T>(value: T | undefined, orElseValue: T | (() => T)): T {\n    return (value !== undefined ? value : (typeof orElseValue === 'function' ? (orElseValue as (() => T))() : orElseValue));\n  }\n\n  /**\n   * Returns the value if not `undefined`, otherwise throws the error created by the passed factory function.\n   */\n  export function orElseThrow<T>(value: T | undefined, orElseThrowFn: () => Error): T {\n    if (value !== undefined) {\n      return value;\n    }\n    throw orElseThrowFn();\n  }\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Defined} from './defined.util';\nimport {identity} from 'rxjs';\n\n/**\n * Provides array utility methods.\n */\nexport namespace Arrays {\n\n  /**\n   * Returns the value, if an array, or adds it to an array. If `null` or `undefined` is given, by default, returns an empty array.\n   */\n  export function coerce<T>(value: T | T[] | readonly T[] | null | undefined, options?: {coerceNullOrUndefined: true} | {}): NonNullable<T[]>;\n  export function coerce<T>(value: T | T[] | readonly T[] | null | undefined, options: {coerceNullOrUndefined: false}): T[] | null | undefined;\n  export function coerce<T>(value: T | T[] | readonly T[] | null | undefined, options?: {coerceNullOrUndefined?: boolean}): T[] | null | undefined {\n    if (value === null || value === undefined) {\n      if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n        return [];\n      }\n      return value as null | undefined;\n    }\n\n    return Array.isArray(value) ? value : [value as T];\n  }\n\n  /**\n   * Compares items of given arrays for reference equality.\n   *\n   * Use the parameter `exactOrder` to control if the item order must be equal (which is by default) or not.\n   */\n  export function isEqual(array1: any[] | null | undefined, array2: any[] | null | undefined, options?: {exactOrder?: boolean}): boolean {\n    if (array1 === array2) {\n      return true;\n    }\n    if (!array1 || !array2) {\n      return false;\n    }\n    if (array1.length !== array2.length) {\n      return false;\n    }\n    if (options?.exactOrder ?? true) {\n      return array1.every((item, index) => item === array2[index]);\n    }\n    return array1.every(item => array2.includes(item)) && array2.every(item => array1.includes(item));\n  }\n\n  /**\n   * Removes the specified element from an array, or the elements which satisfy the provided predicate function.\n   * The original array will be changed.\n   *\n   * @param  array - The array from which elements should be removed.\n   * @param  element - The element to be removed, or a predicate function to resolve elements which to be removed.\n   * @param  options - Control if to remove all occurrences of the element. If not specified, all occurrences are removed.\n   * @return the elements removed from the array.\n   */\n  export function remove<T>(array: T[], element: T | ((element: T) => boolean), options?: {firstOnly: boolean}): T[] {\n    const firstOnly = Defined.orElse(options && options.firstOnly, false);\n\n    // define a function to resolve the element's index in the original array\n    const indexOfElementFn = ((): () => number => {\n      if (typeof element === 'function') {\n        const predicate = element as (element: T) => boolean;\n        return (): number => array.findIndex(predicate);\n      }\n      else {\n        return (): number => array.indexOf(element);\n      }\n    })();\n\n    const removedElements = [];\n    for (let i = indexOfElementFn(); i !== -1; i = indexOfElementFn()) {\n      removedElements.push(...array.splice(i, 1)); // changes the original array\n      if (firstOnly) {\n        break;\n      }\n    }\n    return removedElements;\n  }\n\n  /**\n   * Removes duplicate items from the array. The original array will not be modified.\n   *\n   * Use the parameter `keySelector` to provide a function for comparing objects.\n   */\n  export function distinct<T>(items: T[] | readonly T[], keySelector: (item: T) => any = identity): T[] {\n    const itemSet = new Set(items.map(keySelector));\n    return items.filter(item => itemSet.delete(keySelector(item)));\n  }\n\n  /**\n   * Intersects the given arrays, returning a new array containing all the elements contained in every array.\n   * Arrays which are `undefined` or `null` are ignored.\n   */\n  export function intersect<T>(...arrays: Array<T[] | readonly T[] | undefined | null>): T[] {\n    const _arrays = arrays.filter(array => array !== undefined && array !== null) as Array<T[]>;\n\n    if (!_arrays.length) {\n      return [];\n    }\n\n    const first = _arrays.pop()!;\n    return _arrays.reduce((intersection, array) => intersection.filter(value => array.includes(value)), [...first]);\n  }\n\n  /**\n   * Returns the last element in the given array, optionally matching the predicate if given.\n   *\n   * Returns `undefined` if no element is found.\n   */\n  export function last<T>(array: T[] | readonly T[] | null | undefined, predicate?: (item: T) => boolean): T | undefined {\n    if (!array) {\n      return undefined;\n    }\n\n    if (!predicate) {\n      return array[array.length - 1];\n    }\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      if (predicate(array[i])) {\n        return array[i];\n      }\n    }\n\n    return undefined;\n  }\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nexport namespace Objects {\n\n  /**\n   * Compares the two objects for shallow equality.\n   */\n  export function isEqual(a: any, b: any): boolean {\n    if (a === b) {\n      return true;\n    }\n\n    if (!a || !b) {\n      return false;\n    }\n\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n\n    return Object.entries(a).every(([key, value]) => (b[key] === value));\n  }\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Defined} from './defined.util';\n\n/**\n * Provides dictionary utility methods.\n */\nexport namespace Dictionaries {\n\n  /**\n   * Creates a {@link Dictionary} from the given dictionary-like object. If given a `Dictionary`, it is returned. If given `null` or `undefined`, by default, returns an empty {@link Dictionary}.\n   */\n  export function coerce<T = any>(dictionaryLike: Dictionary<T> | Map<string, T> | undefined | null, options?: {coerceNullOrUndefined: true} | {}): NonNullable<Dictionary<T>>;\n  export function coerce<T = any>(dictionaryLike: Dictionary<T> | Map<string, T> | undefined | null, options: {coerceNullOrUndefined: false}): Dictionary<T> | null | undefined;\n  export function coerce<T = any>(dictionaryLike: Dictionary<T> | Map<string, T> | undefined | null, options?: {coerceNullOrUndefined?: boolean}): Dictionary<T> | null | undefined {\n    if (dictionaryLike === null || dictionaryLike === undefined) {\n      if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n        return {};\n      }\n      return dictionaryLike as null | undefined;\n    }\n\n    if (dictionaryLike instanceof Map) {\n      return createDictionaryFromMap(dictionaryLike);\n    }\n\n    // Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n    // Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n    // This is most likely because the serialization takes place in a different realm.\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    // @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n    try {\n      const map = new Map(dictionaryLike as any);\n      return createDictionaryFromMap(map);\n    }\n    catch {\n      // noop\n    }\n\n    return dictionaryLike;\n  }\n\n  /**\n   * Returns a new {@link Dictionary} with `undefined` values removed.\n   */\n  export function withoutUndefinedEntries(object: Dictionary): Dictionary {\n    return Object.entries(object).reduce<Dictionary>((dictionary, [key, value]) => {\n      if (value !== undefined) {\n        dictionary[key] = value;\n      }\n      return dictionary;\n    }, {});\n  }\n}\n\n/**\n * Represents an object with a variable number of properties, whose keys are not known at development time.\n */\nexport interface Dictionary<T = any> {\n  [key: string]: T;\n}\n\nfunction createDictionaryFromMap(map: Map<any, any>): Dictionary {\n  return Array\n    .from(map.entries())\n    .reduce(\n      (dictionary: Dictionary, [key, value]: [string, any]): Dictionary => {\n        dictionary[key] = value;\n        return dictionary;\n      },\n      {},\n    );\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Arrays} from './arrays.util';\nimport {Dictionary} from './dictionaries.util';\nimport {Defined} from './defined.util';\n\n/**\n * Provides utility methods for {@link Map}.\n */\nexport namespace Maps {\n\n  /**\n   * Creates a {@link Map} from the given map-like object. If given a `Map`, it is returned. If given `null` or `undefined`, by default, returns an empty {@link Map}.\n   */\n  export function coerce<T = any>(mapLike: Map<string, T> | Dictionary<T> | undefined | null, options?: {coerceNullOrUndefined: true} | {}): NonNullable<Map<string, T>>;\n  export function coerce<T = any>(mapLike: Map<string, T> | Dictionary<T> | undefined | null, options: {coerceNullOrUndefined: false}): Map<string, T> | null | undefined;\n  export function coerce<T = any>(mapLike: Map<string, T> | Dictionary<T> | undefined | null, options?: {coerceNullOrUndefined?: boolean}): Map<string, T> | null | undefined {\n    if (mapLike === null || mapLike === undefined) {\n      if (Defined.orElse(options && options.coerceNullOrUndefined, true)) {\n        return new Map<string, T>();\n      }\n      return mapLike as null | undefined;\n    }\n\n    if (mapLike instanceof Map) {\n      return mapLike;\n    }\n\n    // Data sent from one JavaScript realm to another is serialized with the structured clone algorithm.\n    // Although the algorithm supports the `Map` data type, a deserialized map object cannot be checked to be instance of `Map`.\n    // This is most likely because the serialization takes place in a different realm.\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    // @see http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm.html\n    try {\n      return new Map(mapLike as any);\n    }\n    catch {\n      // noop\n    }\n\n    return Object\n      .entries(mapLike)\n      .reduce(\n        (map: Map<string, any>, [key, value]: [string, any]) => map.set(key, value),\n        new Map<string, any>(),\n      );\n  }\n\n  /**\n   * Adds the given value into a {@link Set} in the multi value {@link Map}.\n   */\n  export function addSetValue<K, V>(multiValueMap: Map<K, Set<V>>, key: K, value: V): Map<K, Set<V>> {\n    const values = multiValueMap.get(key) || new Set<V>();\n    return multiValueMap.set(key, values.add(value));\n  }\n\n  /**\n   * Removes the given value or values matching the given predicate from the multi {@link Map}.\n   *\n   * @return `true` if the element was removed, or `false` otherwise.\n   */\n  export function removeSetValue<K, V>(multiValueMap: Map<K, Set<V>>, key: K, value: V | PredicateFn<V>): boolean {\n    const values = multiValueMap.get(key) || new Set<V>();\n\n    let hasRemoved;\n    if (typeof value === 'function') {\n      const predicateFn = value as PredicateFn<V>;\n      hasRemoved = Array.from(values)\n        .filter(predicateFn)\n        .reduce<boolean>((removed, it) => values.delete(it) || removed, false);\n    }\n    else {\n      hasRemoved = values.delete(value);\n    }\n\n    if (hasRemoved && !values.size) {\n      multiValueMap.delete(key);\n    }\n    return hasRemoved;\n  }\n\n  /**\n   * Adds the given value into an {@link Array} in the multi value {@link Map}.\n   */\n  export function addListValue<K, V>(map: Map<K, V[]>, key: K, value: V): Map<K, V[]> {\n    const values = map.get(key) || [];\n    return map.set(key, values.concat(value));\n  }\n\n  /**\n   * Removes the given value or values matching the given predicate from the multi {@link Map}.\n   *\n   * @return `true` if the element was removed, or `false` otherwise.\n   */\n  export function removeListValue<K, V>(multiValueMap: Map<K, V[]>, key: K, value: V | PredicateFn<V>): boolean {\n    const values = multiValueMap.get(key) || [];\n    const hasRemoved = Arrays.remove(values, value, {firstOnly: false}).length > 0;\n    if (hasRemoved && !values.length) {\n      multiValueMap.delete(key);\n    }\n    return hasRemoved;\n  }\n}\n\n/**\n * Represents a predicate function which returns `true` or `false`.\n */\nexport type PredicateFn<T> = (value: T) => boolean;\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {from, Observable, of} from 'rxjs';\n\nexport namespace Observables {\n\n  /**\n   * Creates an `Observable` from the passed value, which will emit the value and then complete,\n   * or, if passing an `Observable`, returns it unchanged. If passing a `Promise`, it is converted\n   * to an `Observable`.\n   */\n  export function coerce<T>(value: T | Observable<T> | Promise<T>): Observable<T> {\n    if (value instanceof Observable) {\n      return value;\n    }\n    if (value instanceof Promise) {\n      return from(value);\n    }\n    return of(value);\n  }\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Secondary entrypoint: '@scion/toolkit/util'\n * This module does not depend on Angular.\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\nexport {Defined} from './defined.util';\nexport {Arrays} from './arrays.util';\nexport {Objects} from './objects.util';\nexport {Dictionaries, Dictionary} from './dictionaries.util';\nexport {Maps, PredicateFn} from './maps.util';\nexport {Observables} from './observables.util';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n","/*\n * Copyright (c) 2018-2023 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\nconst uuidIterator = generateUUID();\nfunction* generateUUID() {\n    const lut = [];\n    for (let i = 0; i < 256; i++) {\n        lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n    }\n    while (true) {\n        const d0 = Math.random() * 0xffffffff | 0;\n        const d1 = Math.random() * 0xffffffff | 0;\n        const d2 = Math.random() * 0xffffffff | 0;\n        const d3 = Math.random() * 0xffffffff | 0;\n        const uuid = lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' +\n            lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' +\n            lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] +\n            lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];\n        yield uuid;\n    }\n}\n/**\n * Generates a UUID (universally unique identifier) compliant with the RFC 4122 version 4.\n */\nfunction randomUUID() {\n    return uuidIterator.next().value;\n}\n\nvar uuid_util = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    randomUUID: randomUUID\n});\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/*\n * Secondary entrypoint: '@scion/toolkit/util'\n * This module does not depend on Angular.\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { uuid_util as UUID };\n//# sourceMappingURL=scion-toolkit-uuid.mjs.map\n","/*\n * Copyright (c) 2018-2023 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nconst uuidIterator = generateUUID();\n\nfunction* generateUUID(): IterableIterator<string> {\n  const lut = [];\n  for (let i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n  }\n\n  while (true) {\n    const d0 = Math.random() * 0xffffffff | 0;\n    const d1 = Math.random() * 0xffffffff | 0;\n    const d2 = Math.random() * 0xffffffff | 0;\n    const d3 = Math.random() * 0xffffffff | 0;\n\n    const uuid = lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' +\n      lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' +\n      lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] +\n      lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];\n\n    yield uuid;\n  }\n}\n\n/**\n * Generates a UUID (universally unique identifier) compliant with the RFC 4122 version 4.\n */\nexport function randomUUID(): string {\n  return uuidIterator.next().value;\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Secondary entrypoint: '@scion/toolkit/util'\n * This module does not depend on Angular.\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\nexport * as UUID from './uuid.util';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n","import { switchMap, defaultIfEmpty, catchError, distinctUntilChanged, map, take, mergeMap, share } from 'rxjs/operators';\nimport { of, combineLatest, pipe, identity, from, EMPTY, concat, Observable, Subscriber, noop } from 'rxjs';\nimport { Observables, Arrays } from '@scion/toolkit/util';\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\nfunction filterArray(predicate) {\n    if (!predicate) {\n        return source$ => source$;\n    }\n    return switchMap((items) => {\n        if (!items.length) {\n            return of([]);\n        }\n        // Filter items if all predicates return a boolean value.\n        const matches = items.map(predicate);\n        if (matches.every(match => typeof match === 'boolean')) {\n            return of(items.filter((item, i) => matches[i]));\n        }\n        /*\n         * Notes about `combineLatest` operator:\n         * - Passing an empty array will result in an Observable that completes immediately.\n         * - Waits for all Observables to emit at least once.\n         * - If some Observable does not emit a value but completes, resulting Observable will complete at the same moment without emitting anything.\n         * - If some Observable does not emit any value and never completes, `combineLatest` will also never emit and never complete.\n         * - If any Observable errors, `combineLatest` will error immediately as well, and all other Observables will be unsubscribed.\n         */\n        return combineLatest(matches.map(match => Observables.coerce(match).pipe(defaultIfEmpty(false), catchError(() => of(false)))))\n            .pipe(distinctUntilChanged((previous, current) => Arrays.isEqual(previous, current)), map(matches => items.filter((item, i) => matches[i])));\n    });\n}\n/**\n * Maps each element in the source array to its extracted property.\n *\n * Like rxjs 'pluck' but based on an array with a function to extract the property.\n *\n * @deprecated since version 10.0.0-beta.3. Use {@link mapArray} instead.\n */\nfunction pluckArray(extractor) {\n    return map((items) => items.map(item => extractor(item)));\n}\n/**\n * Maps each element in the source array to its mapped value.\n */\nfunction mapArray(projectFn) {\n    return map((items) => items.map(item => projectFn(item)));\n}\n/**\n * Sorts items in the source array and emits an array with those items sorted.\n */\nfunction sortArray(comparator) {\n    return map((items) => [...items].sort(comparator));\n}\n/**\n * Combines the Observables contained in the source array by applying {@link combineLatest}, emitting an array with the latest\n * value of each Observable of the source array. Combines only the Observables of the most recently emitted array.\n *\n * <span class=“informal”>Each time the source emits an array of Observables, combines its Observables by subscribing to each\n * of them, cancelling any subscription of a previous source emission.</span>\n */\nfunction combineArray() {\n    return pipe(switchMap((items) => items.length ? combineLatest(items) : of([])), map((items) => new Array().concat(...items)));\n}\n/**\n * Removes duplicates of elements in the source array.\n *\n * <span class=“informal”>Each time the source emits, maps the array to a new array with duplicates removed.</span>\n */\nfunction distinctArray(keySelector = identity) {\n    return pipe(map((items) => Arrays.distinct(items, keySelector)));\n}\n/**\n * Buffers the source Observable values until `closingNotifier$` notifier resolves, emits or completes.\n *\n * Once closed the buffer, emits its buffered values as a separate emission per buffered value, in the\n * order as collected. After that, this operator mirrors the source Observable, i.e., emits values as they\n * arrive.\n *\n * Unlike {@link bufferWhen} RxJS operator, the buffer is not re-opened once closed.\n *\n * @param closingNotifier$ Closes the buffer when the passed Promise resolves, or when the passed Observable\n *                         emits or completes.\n */\nfunction bufferUntil(closingNotifier$) {\n    const guard$ = from(closingNotifier$)\n        .pipe(take(1), mergeMap(() => EMPTY), share({ resetOnComplete: false, resetOnError: false, resetOnRefCountZero: false }));\n    return mergeMap((item) => concat(guard$, of(item)));\n}\n/**\n * Executes a tap-function for the first percolating value.\n */\nfunction tapFirst(tapFn, scheduler) {\n    return map(((value, index) => {\n        if (index === 0) {\n            scheduler ? scheduler.schedule(tapFn) : tapFn(value);\n        }\n        return value;\n    }));\n}\n/**\n * Mirrors the source Observable, but runs downstream operators (operators below the `observeInside` operator) and subscription handlers\n * (next, error, complete) inside the given execution context.\n *\n * This operator is particularly useful in Angular applications to run downstream operators inside or outside the Angular zone,\n * as following: `observeInside(continueFn => ngzone.run(continueFn))`.\n *\n * This operator is similar to RxJS's `observeOn` operator, but instead of a scheduler, it accepts an executor. An executor is a function to\n * create an execution context in which downstream operators are then executed. The function is called with a single argument, a function\n * to continue the execution chain.\n *\n * #### Example showing in which Angular zone operators run:\n * ```\n * // Code running outside Angular\n *\n * interval(1000) // Observable creation outside Angular\n *   .pipe(\n *     tap(() => ...), // outside Angular\n *     tap(() => ...), // outside Angular\n *     observeInside(continueFn => zone.run(continueFn)),\n *     tap(() => ...), // inside Angular\n *   )\n *   .subscribe(); // inside Angular\n * ```\n *\n * @param   executionFn - Function for setting up a context in which to continue the execution chain.\n * @return  An Observable mirroring the source, but running downstream operators in a context.\n */\nfunction observeInside(executionFn) {\n    return (source) => {\n        return new Observable((observer) => {\n            const subscription = source.subscribe({\n                next: next => executionFn(() => observer.next(next)),\n                error: error => executionFn(() => observer.error(error)),\n                complete: () => executionFn(() => observer.complete()),\n            });\n            return () => subscription.unsubscribe();\n        });\n    };\n}\n/**\n * Mirrors the source Observable, but uses the given execution context to subscribe/unsubscribe to the source. It further runs all operators of the\n * execution chain (operators above and below the `subscribeInside` operator) as well as subscription handlers (next, error, complete) in the given\n * context.\n *\n * Unlike `observeInside` operator, the `subscribeInside` also acts upstream. By using the {@link observeInside} operator after the\n * {@link subscribeInside}, you can change the execution context for downstream operators.\n *\n * This operator is particularly useful in Angular applications to subscribe to the source inside or outside the Angular zone, as following:\n * `subscribeInside(continueFn => ngzone.run(continueFn))`.\n *\n * This operator is similar to RxJS's `subscribeOn` operator, but instead of a scheduler, it accepts an executor. An executor is a function to\n * create an execution context in which upstream and downstream operators are then executed. The function is called with a single argument,\n * a function to continue the execution chain.\n *\n * #### Example showing in which Angular zone operators run:\n * ```\n * // Code running outside Angular\n *\n * interval(1000) // Observable creation inside Angular\n *   .pipe(\n *     tap(() => ...), // inside Angular\n *     tap(() => ...), // inside Angular\n *     subscribeInside(continueFn => zone.run(continueFn)),\n *     tap(() => ...), // inside Angular\n *   )\n *   .subscribe(); // inside Angular\n * ```\n *\n * @param   executionFn - Function for setting up a context in which to continue the execution chain.\n * @return  An Observable mirroring the source, but running upstream and downstream operators in a context.\n */\nfunction subscribeInside(executionFn) {\n    return (source) => {\n        return new Observable((observer) => {\n            let subscription;\n            executionFn(() => {\n                subscription = source.subscribe(new class extends Subscriber {\n                    constructor() {\n                        super(observer);\n                    }\n                    _next(value) {\n                        executionFn(() => super._next(value));\n                    }\n                    _error(err) {\n                        executionFn(() => super._error(err));\n                    }\n                    _complete() {\n                        executionFn(() => super._complete());\n                    }\n                    unsubscribe() {\n                        executionFn(() => this.closed ? noop() : super.unsubscribe());\n                    }\n                });\n            });\n            return () => {\n                executionFn(() => subscription?.unsubscribe());\n            };\n        });\n    };\n}\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/*\n * Secondary entrypoint: '@scion/toolkit/operators'\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { bufferUntil, combineArray, distinctArray, filterArray, mapArray, observeInside, pluckArray, sortArray, subscribeInside, tapFirst };\n//# sourceMappingURL=scion-toolkit-operators.mjs.map\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {catchError, defaultIfEmpty, distinctUntilChanged, map, mergeMap, share, switchMap, take} from 'rxjs/operators';\nimport {combineLatest, concat, EMPTY, from, identity, MonoTypeOperatorFunction, noop, Observable, Observer, of, OperatorFunction, pipe, SchedulerLike, Subscriber, Subscription, TeardownLogic} from 'rxjs';\nimport {Arrays, Observables} from '@scion/toolkit/util';\n\n/**\n * Filters items in the source array and emits an array with items satisfying given predicate.\n *\n * - If passing `undefined` as predicate, the filter matches all items.\n * - If passing an asynchronous predicate:\n *   - Waits for all predicates to emit at least once or to complete.\n *     TIP: If you want to emit as soon as a predicate emits, use the `startWith(false)` operator in combination with\n *     the `skip` operator. Consequently, there will be a separate emission per item, in the order in which predicates\n *     emit.\n *\n *     ```ts\n *     source$\n *       .pipe(\n *         filterArray(item => matchesItem$(item).pipe(startWith(false))), // make the predicate immediately emit `false`\n *         skip(1), // skip initial emission caused by `startWith(false)`.\n *       )\n *       .subscribe(items => {});\n *     ```\n *   - Continues filtering the source Observable even if some predicate complete without first emission. Such items are not included in the emission.\n *   - Continues filtering the source Observable even if some predicate error. Such items are not included in the emission and the error is not propagated.\n */\nexport function filterArray<T, S extends T>(predicate?: (item: T) => item is S): OperatorFunction<T[] | readonly T[], S[]>;\nexport function filterArray<T>(predicate?: (item: T) => Observable<boolean> | Promise<boolean> | boolean): OperatorFunction<T[] | readonly T[], T[]>;\nexport function filterArray<T>(predicate?: (item: T) => Observable<boolean> | Promise<boolean> | boolean): OperatorFunction<T[] | readonly T[], T[]> {\n  if (!predicate) {\n    return source$ => source$ as Observable<T[]>;\n  }\n\n  return switchMap((items: T[] | readonly T[]): Observable<T[]> => {\n    if (!items.length) {\n      return of([]);\n    }\n\n    // Filter items if all predicates return a boolean value.\n    const matches = items.map(predicate);\n    if (matches.every(match => typeof match === 'boolean')) {\n      return of(items.filter((item, i) => matches[i]));\n    }\n\n    /*\n     * Notes about `combineLatest` operator:\n     * - Passing an empty array will result in an Observable that completes immediately.\n     * - Waits for all Observables to emit at least once.\n     * - If some Observable does not emit a value but completes, resulting Observable will complete at the same moment without emitting anything.\n     * - If some Observable does not emit any value and never completes, `combineLatest` will also never emit and never complete.\n     * - If any Observable errors, `combineLatest` will error immediately as well, and all other Observables will be unsubscribed.\n     */\n    return combineLatest(matches.map(match => Observables.coerce(match).pipe(defaultIfEmpty(false), catchError(() => of(false)))))\n      .pipe(\n        distinctUntilChanged((previous, current) => Arrays.isEqual(previous, current)),\n        map(matches => items.filter((item, i) => matches[i])),\n      );\n  });\n}\n\n/**\n * Maps each element in the source array to its extracted property.\n *\n * Like rxjs 'pluck' but based on an array with a function to extract the property.\n *\n * @deprecated since version 10.0.0-beta.3. Use {@link mapArray} instead.\n */\nexport function pluckArray<I, P>(extractor: (item: I) => P): OperatorFunction<I[] | readonly I[], P[]> {\n  return map((items: I[] | readonly I[]): P[] => items.map(item => extractor(item)));\n}\n\n/**\n * Maps each element in the source array to its mapped value.\n */\nexport function mapArray<I, P>(projectFn: (item: I) => P): OperatorFunction<I[] | readonly I[], P[]> {\n  return map((items: I[] | readonly I[]): P[] => items.map(item => projectFn(item)));\n}\n\n/**\n * Sorts items in the source array and emits an array with those items sorted.\n */\n\nexport function sortArray<T>(comparator: (item1: T, item2: T) => number): OperatorFunction<T[] | readonly T[], T[]> {\n  return map((items: T[] | readonly T[]): T[] => [...items].sort(comparator));\n}\n\n/**\n * Combines the Observables contained in the source array by applying {@link combineLatest}, emitting an array with the latest\n * value of each Observable of the source array. Combines only the Observables of the most recently emitted array.\n *\n * <span class=“informal”>Each time the source emits an array of Observables, combines its Observables by subscribing to each\n * of them, cancelling any subscription of a previous source emission.</span>\n */\nexport function combineArray<T>(): OperatorFunction<Array<Observable<T[]>>, T[]> {\n  return pipe(\n    switchMap((items: Array<Observable<T[]>>) => items.length ? combineLatest(items) : of([])),\n    map((items: Array<T[]>) => new Array<T>().concat(...items)),\n  );\n}\n\n/**\n * Removes duplicates of elements in the source array.\n *\n * <span class=“informal”>Each time the source emits, maps the array to a new array with duplicates removed.</span>\n */\nexport function distinctArray<T>(keySelector: (item: T) => any = identity): OperatorFunction<T[] | readonly T[], T[]> {\n  return pipe(map((items: T[] | readonly T[]): T[] => Arrays.distinct(items, keySelector)));\n}\n\n/**\n * Buffers the source Observable values until `closingNotifier$` notifier resolves, emits or completes.\n *\n * Once closed the buffer, emits its buffered values as a separate emission per buffered value, in the\n * order as collected. After that, this operator mirrors the source Observable, i.e., emits values as they\n * arrive.\n *\n * Unlike {@link bufferWhen} RxJS operator, the buffer is not re-opened once closed.\n *\n * @param closingNotifier$ Closes the buffer when the passed Promise resolves, or when the passed Observable\n *                         emits or completes.\n */\nexport function bufferUntil<T>(closingNotifier$: Observable<any> | Promise<any>): MonoTypeOperatorFunction<T> {\n  const guard$ = from(closingNotifier$)\n    .pipe(\n      take(1),\n      mergeMap(() => EMPTY),\n      share({resetOnComplete: false, resetOnError: false, resetOnRefCountZero: false}),\n    );\n  return mergeMap((item: T) => concat(guard$, of(item)));\n}\n\n/**\n * Executes a tap-function for the first percolating value.\n */\nexport function tapFirst<T>(tapFn: (value?: T) => void, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T> {\n  return map(((value: T, index: number): T => {\n    if (index === 0) {\n      scheduler ? scheduler.schedule(tapFn) : tapFn(value);\n    }\n    return value;\n  }));\n}\n\n/**\n * Mirrors the source Observable, but runs downstream operators (operators below the `observeInside` operator) and subscription handlers\n * (next, error, complete) inside the given execution context.\n *\n * This operator is particularly useful in Angular applications to run downstream operators inside or outside the Angular zone,\n * as following: `observeInside(continueFn => ngzone.run(continueFn))`.\n *\n * This operator is similar to RxJS's `observeOn` operator, but instead of a scheduler, it accepts an executor. An executor is a function to\n * create an execution context in which downstream operators are then executed. The function is called with a single argument, a function\n * to continue the execution chain.\n *\n * #### Example showing in which Angular zone operators run:\n * ```\n * // Code running outside Angular\n *\n * interval(1000) // Observable creation outside Angular\n *   .pipe(\n *     tap(() => ...), // outside Angular\n *     tap(() => ...), // outside Angular\n *     observeInside(continueFn => zone.run(continueFn)),\n *     tap(() => ...), // inside Angular\n *   )\n *   .subscribe(); // inside Angular\n * ```\n *\n * @param   executionFn - Function for setting up a context in which to continue the execution chain.\n * @return  An Observable mirroring the source, but running downstream operators in a context.\n */\nexport function observeInside<T>(executionFn: ExecutionFn): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>): Observable<T> => {\n    return new Observable((observer: Observer<T>): TeardownLogic => {\n      const subscription = source.subscribe({\n        next: next => executionFn(() => observer.next(next)),\n        error: error => executionFn(() => observer.error(error)),\n        complete: () => executionFn(() => observer.complete()),\n      });\n\n      return () => subscription.unsubscribe();\n    });\n  };\n}\n\n/**\n * Mirrors the source Observable, but uses the given execution context to subscribe/unsubscribe to the source. It further runs all operators of the\n * execution chain (operators above and below the `subscribeInside` operator) as well as subscription handlers (next, error, complete) in the given\n * context.\n *\n * Unlike `observeInside` operator, the `subscribeInside` also acts upstream. By using the {@link observeInside} operator after the\n * {@link subscribeInside}, you can change the execution context for downstream operators.\n *\n * This operator is particularly useful in Angular applications to subscribe to the source inside or outside the Angular zone, as following:\n * `subscribeInside(continueFn => ngzone.run(continueFn))`.\n *\n * This operator is similar to RxJS's `subscribeOn` operator, but instead of a scheduler, it accepts an executor. An executor is a function to\n * create an execution context in which upstream and downstream operators are then executed. The function is called with a single argument,\n * a function to continue the execution chain.\n *\n * #### Example showing in which Angular zone operators run:\n * ```\n * // Code running outside Angular\n *\n * interval(1000) // Observable creation inside Angular\n *   .pipe(\n *     tap(() => ...), // inside Angular\n *     tap(() => ...), // inside Angular\n *     subscribeInside(continueFn => zone.run(continueFn)),\n *     tap(() => ...), // inside Angular\n *   )\n *   .subscribe(); // inside Angular\n * ```\n *\n * @param   executionFn - Function for setting up a context in which to continue the execution chain.\n * @return  An Observable mirroring the source, but running upstream and downstream operators in a context.\n */\nexport function subscribeInside<T>(executionFn: ExecutionFn): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>): Observable<T> => {\n    return new Observable((observer: Observer<T>): TeardownLogic => {\n      let subscription: Subscription;\n\n      executionFn(() => {\n        subscription = source.subscribe(new class extends Subscriber<T> {\n\n          constructor() {\n            super(observer);\n          }\n\n          protected override _next(value: T): void {\n            executionFn(() => super._next(value));\n          }\n\n          protected override _error(err: any): void {\n            executionFn(() => super._error(err));\n          }\n\n          protected override _complete(): void {\n            executionFn(() => super._complete());\n          }\n\n          public override unsubscribe(): void {\n            executionFn(() => this.closed ? noop() : super.unsubscribe());\n          }\n        });\n      });\n\n      return () => {\n        executionFn(() => subscription?.unsubscribe());\n      };\n    });\n  };\n}\n\n/**\n * Function to continue the operator chain.\n *\n * @see observeInside\n * @see subscribeInside\n */\nexport type ContinueExecutionFn = () => void;\n\n/**\n * Function for setting up a context in which to continue the execution chain.\n *\n * @see observeInside\n * @see subscribeInside\n */\nexport type ExecutionFn = (fn: ContinueExecutionFn) => void;\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Secondary entrypoint: '@scion/toolkit/operators'\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\nexport * from './operators';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n","import { Observable, pipe, merge, fromEvent } from 'rxjs';\nimport { startWith, map, distinctUntilChanged, switchMap, auditTime } from 'rxjs/operators';\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows observing the dimension of an element. Upon subscription, it emits the element's dimension, and then continuously\n * emits when the dimension of the element changes. It never completes.\n *\n * The Observable uses the native `ResizeObserver` to detect size changes of the passed element.\n *\n * @param  target - HTMLElement to observe its dimension.\n * @return Observable that emits dimension changes of the passed element.\n */\nfunction fromDimension$(target) {\n    return new Observable((observer) => {\n        const resizeObserver = new ResizeObserver(() => observer.next(captureElementDimension(target)));\n        resizeObserver.observe(target); // emits the current dimension directly upon subscription\n        return () => {\n            resizeObserver.disconnect();\n        };\n    });\n}\n/**\n * Captures the dimension of the given element.\n */\nfunction captureElementDimension(element) {\n    return {\n        clientWidth: element.clientWidth,\n        offsetWidth: element.offsetWidth,\n        clientHeight: element.clientHeight,\n        offsetHeight: element.offsetHeight,\n        element,\n    };\n}\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows watching for changes being made to the DOM tree of an HTML element. It never completes.\n *\n * Wraps a {MutationObserver} in an Observable to watch for changes being made to the DOM tree.\n * See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver for more information.\n *\n * @param target - HTMLElement to observe.\n * @param options - describes the configuration of a mutation observer\n *        See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit\n */\nfunction fromMutation$(target, options) {\n    return new Observable((observer) => {\n        const mutationObserver = new MutationObserver((mutations) => observer.next(mutations));\n        mutationObserver.observe(target, options);\n        return () => {\n            mutationObserver.disconnect();\n        };\n    });\n}\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/**\n * Allows observing an element's bounding box, providing information about the element's size and position relative to the\n * browser viewport. Refer to https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect for more information.\n *\n * Upon subscription, the Observable emits the element's current bounding box, and then continuously emits when its\n * bounding box changes, e.g., due to a change in the layout. The Observable never completes.\n *\n * ***\n * If you are only interested in element size changes and not position changes, consider using the {@link fromDimension$} Observable\n * as it is more efficient because natively supported by the browser.\n * ***\n *\n * ### Note on the detection of position changes:\n *\n * There is, unfortunately, no native browser API to detect position changes of an element in a performant and reliable way.\n * Our approach to detecting position changes of an element is based on the premise that it usually involves a parent or a parent's\n * direct child changing in size. Repositioning can further occur when the user scrolls a parent container or when elements are added\n * to or removed from the DOM. This covers most cases, but not all.\n *\n * We are aware that this approach can be quite expensive, mainly because potentially a large number of elements need to be monitored\n * for resizing/scrolling. Therefore, use this Observable only if you need to be informed about position changes. For pure dimension\n * changes use the {@link fromDimension$} Observable instead.\n *\n * @see fromDimension$\n */\nfunction fromBoundingClientRect$(element) {\n    return fromMutation$(document.body, { childList: true, subtree: true })\n        .pipe(startWith(undefined), map(() => collectElements(element)), detectLayoutChange(), map(() => captureClientRect(element)), distinctUntilChanged((a, b) => a.left === b.left && a.top === b.top && a.width === b.width && a.height === b.height));\n}\n/**\n * Collects elements that can affect the given element's size and position.\n */\nfunction collectElements(element) {\n    const elements = [];\n    for (let el = element.parentElement; el !== null; el = el.parentElement) {\n        elements.push(...Array.from(el.children).filter(child => child instanceof HTMLElement));\n    }\n    return elements;\n}\n/**\n * Emits whenever one of the source elements changes in size or scrolls.\n */\nfunction detectLayoutChange() {\n    return pipe(switchMap(elements => merge(...elements.map(element => merge(fromDimension$(element), fromEvent(element, 'scroll', { passive: true }))))), map(() => undefined), \n    // Debounce to a single emission as a layout change can cause multiple elements to change.\n    auditTime(25));\n}\nfunction captureClientRect(element) {\n    return element.getBoundingClientRect();\n}\n\n/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n/*\n * Secondary entrypoint: '@scion/toolkit/observable'\n * This module does not depend on Angular.\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { captureElementDimension, fromBoundingClientRect$, fromDimension$, fromMutation$ };\n//# sourceMappingURL=scion-toolkit-observable.mjs.map\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Observable, Observer, TeardownLogic} from 'rxjs';\n\n/**\n * Allows observing the dimension of an element. Upon subscription, it emits the element's dimension, and then continuously\n * emits when the dimension of the element changes. It never completes.\n *\n * The Observable uses the native `ResizeObserver` to detect size changes of the passed element.\n *\n * @param  target - HTMLElement to observe its dimension.\n * @return Observable that emits dimension changes of the passed element.\n */\nexport function fromDimension$(target: HTMLElement): Observable<Dimension> {\n  return new Observable((observer: Observer<Dimension>): TeardownLogic => {\n    const resizeObserver = new ResizeObserver(() => observer.next(captureElementDimension(target)));\n    resizeObserver.observe(target); // emits the current dimension directly upon subscription\n\n    return (): void => {\n      resizeObserver.disconnect();\n    };\n  });\n}\n\n/**\n * Captures the dimension of the given element.\n */\nexport function captureElementDimension(element: HTMLElement): Dimension {\n  return {\n    clientWidth: element.clientWidth,\n    offsetWidth: element.offsetWidth,\n    clientHeight: element.clientHeight,\n    offsetHeight: element.offsetHeight,\n    element,\n  };\n}\n\n/**\n * Represents the dimension of an element.\n */\nexport interface Dimension {\n  offsetWidth: number;\n  offsetHeight: number;\n  clientWidth: number;\n  clientHeight: number;\n  element: HTMLElement;\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {Observable, Observer, TeardownLogic} from 'rxjs';\n\n/**\n * Allows watching for changes being made to the DOM tree of an HTML element. It never completes.\n *\n * Wraps a {MutationObserver} in an Observable to watch for changes being made to the DOM tree.\n * See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver for more information.\n *\n * @param target - HTMLElement to observe.\n * @param options - describes the configuration of a mutation observer\n *        See https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit\n */\nexport function fromMutation$(target: Node, options?: MutationObserverInit): Observable<MutationRecord[]> {\n  return new Observable((observer: Observer<MutationRecord[]>): TeardownLogic => {\n    const mutationObserver = new MutationObserver((mutations: MutationRecord[]): void => observer.next(mutations));\n    mutationObserver.observe(target, options);\n\n    return (): void => {\n      mutationObserver.disconnect();\n    };\n  });\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\nimport {fromEvent, merge, Observable, OperatorFunction, pipe} from 'rxjs';\nimport {auditTime, distinctUntilChanged, map, startWith, switchMap} from 'rxjs/operators';\nimport {fromMutation$} from './mutation.observable';\nimport {fromDimension$} from './dimension.observable';\n\n/**\n * Allows observing an element's bounding box, providing information about the element's size and position relative to the\n * browser viewport. Refer to https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect for more information.\n *\n * Upon subscription, the Observable emits the element's current bounding box, and then continuously emits when its\n * bounding box changes, e.g., due to a change in the layout. The Observable never completes.\n *\n * ***\n * If you are only interested in element size changes and not position changes, consider using the {@link fromDimension$} Observable\n * as it is more efficient because natively supported by the browser.\n * ***\n *\n * ### Note on the detection of position changes:\n *\n * There is, unfortunately, no native browser API to detect position changes of an element in a performant and reliable way.\n * Our approach to detecting position changes of an element is based on the premise that it usually involves a parent or a parent's\n * direct child changing in size. Repositioning can further occur when the user scrolls a parent container or when elements are added\n * to or removed from the DOM. This covers most cases, but not all.\n *\n * We are aware that this approach can be quite expensive, mainly because potentially a large number of elements need to be monitored\n * for resizing/scrolling. Therefore, use this Observable only if you need to be informed about position changes. For pure dimension\n * changes use the {@link fromDimension$} Observable instead.\n *\n * @see fromDimension$\n */\nexport function fromBoundingClientRect$(element: HTMLElement): Observable<Readonly<DOMRect>> {\n  return fromMutation$(document.body, {childList: true, subtree: true})\n    .pipe(\n      startWith(undefined as void),\n      map(() => collectElements(element)),\n      detectLayoutChange(),\n      map(() => captureClientRect(element)),\n      distinctUntilChanged((a, b) => a.left === b.left && a.top === b.top && a.width === b.width && a.height === b.height),\n    );\n}\n\n/**\n * Collects elements that can affect the given element's size and position.\n */\nfunction collectElements(element: HTMLElement): HTMLElement[] {\n  const elements: HTMLElement[] = [];\n\n  for (let el = element.parentElement; el !== null; el = el.parentElement) {\n    elements.push(...Array.from(el.children).filter(child => child instanceof HTMLElement) as HTMLElement[]);\n  }\n  return elements;\n}\n\n/**\n * Emits whenever one of the source elements changes in size or scrolls.\n */\nfunction detectLayoutChange(): OperatorFunction<HTMLElement[], void> {\n  return pipe(\n    switchMap(elements => merge(...elements.map(element => merge(\n      fromDimension$(element),\n      fromEvent(element, 'scroll', {passive: true})),\n    ))),\n    map(() => undefined),\n    // Debounce to a single emission as a layout change can cause multiple elements to change.\n    auditTime(25),\n  );\n}\n\nfunction captureClientRect(element: HTMLElement): Readonly<DOMRect> {\n  return element.getBoundingClientRect();\n}\n","/*\n * Copyright (c) 2018-2019 Swiss Federal Railways\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n *  SPDX-License-Identifier: EPL-2.0\n */\n\n/*\n * Secondary entrypoint: '@scion/toolkit/observable'\n * This module does not depend on Angular.\n *\n * @see https://github.com/ng-packagr/ng-packagr/blob/master/docs/secondary-entrypoints.md\n */\nexport {captureElementDimension, fromDimension$, Dimension} from './dimension.observable';\nexport {fromMutation$} from './mutation.observable';\nexport {fromBoundingClientRect$} from './bounding-client-rect.observable';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["Defined","Arrays","Dictionaries","Maps","PlatformState","Runlevel","PlatformCapabilityTypes","BeanDestroyOrders","MessagingTransport","MessagingChannel","PlatformTopics","MessageHeaders","RequestMethods","ResponseStatusCodes","GatewayErrors","Urls","RouterOutlets","KeystrokesAttributeUtil","$ccc574af478a1fb0$export$790c233a67baba3","$ccc574af478a1fb0$export$3b0ccdbbdb9feaa4","$ccc574af478a1fb0$export$5c089a222833d7b7","$ccc574af478a1fb0$export$45dae21dfe837dd7","$ccc574af478a1fb0$export$2869c604d0a0cf9c","$ccc574af478a1fb0$export$3e8af96bd6669133","$146947066e10b00e$export$f677ff3cbab00a1f","$146947066e10b00e$export$63daa6aa86ffb707","$146947066e10b00e$export$36e3ecc814ff657b","$146947066e10b00e$export$23337cc73d20200","$146947066e10b00e$var$MessagingTransport","$146947066e10b00e$var$MessagingChannel","$146947066e10b00e$var$PlatformTopics","$146947066e10b00e$export$b23af55470b7f1e1","$146947066e10b00e$export$846c248a91ff93f7","$146947066e10b00e$export$a499daaa5fe026d2","$146947066e10b00e$var$Topics","$146947066e10b00e$var$GatewayErrors","$146947066e10b00e$var$Urls","$146947066e10b00e$var$Qualifiers","$146947066e10b00e$var$Contexts","$146947066e10b00e$var$RouterOutlets","$146947066e10b00e$var$KeystrokesAttributeUtil","$746141bbf30b1d44$var$extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","$746141bbf30b1d44$export$a8ba968b8961cb8a","TypeError","String","__","constructor","create","$746141bbf30b1d44$export$67ebef60e6f28a6","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","Symbol","iterator","n","v","step","op","done","value","pop","length","push","e","$746141bbf30b1d44$export$19a8beecd37a4c45","o","s","m","i","$746141bbf30b1d44$export$8d051b38c9118094","r","ar","error","$746141bbf30b1d44$export$1216008129fb82ed","to","from","pack","arguments","l","slice","concat","$746141bbf30b1d44$export$10c90e4f7922046c","$e996a377a476308b$export$f6e2535fb5126e54","$84b00e98e2449571$export$128a15b65d1b6041","createImpl","ctorFunc","instance","Error","stack","SuppressedError","$ea002fe37e02483f$export$c9648b76fd580c34","_super","errors","message","map","err","toString","join","name","$e982355222966567$export$dae3f38077fc36c0","arr","item","index","indexOf","splice","$5124a93ca0cff8ae$export$f55210826850c514","empty","Subscription","initialTeardown","closed","_parentage","_finalizers","unsubscribe","e_1","_a","e_2","_b","isArray","_parentage_1","_parentage_1_1","parent_1","remove","e_1_1","return","initialFinalizer","_finalizers_1","_finalizers_1_1","finalizer","$5124a93ca0cff8ae$var$execFinalizer","e_2_1","add","teardown","_hasParent","_addParent","parent","includes","_removeParent","EMPTY","$5124a93ca0cff8ae$export$610f9c3ca1a38dd8","$5124a93ca0cff8ae$export$4f9221cbada3c4fc","$ed09702a4a712d45$export$e506a1d27d1eaa20","onUnhandledError","onStoppedNotification","Promise","undefined","useDeprecatedSynchronousErrorHandling","useDeprecatedNextContext","$9cfc76a232e78ed6$export$365aa6bd3c788e3d","setTimeout","handler","timeout","args","_i","delegate","apply","clearTimeout","handle","$e95832991341c572$export$ebf645db02d3e99f","$a2669f8c8173c8d3$export$8793edee2d425525","$a4b08c076fa88601$export$b7f97edb34bc1f87","$a4b08c076fa88601$export$9c8f6e8d39c60cf3","kind","$97e50eda4820bbda$var$context","$97e50eda4820bbda$export$d974811edc77eafa","cb","isRoot","errorThrown","$144251abd0e070aa$export$60959659b2c22881","Subscriber","destination","_this","isStopped","$144251abd0e070aa$export$88d395d20619a0af","complete","$144251abd0e070aa$export$94eeb6a328cab6c7","$144251abd0e070aa$var$handleStoppedNotification","_next","_error","_complete","$144251abd0e070aa$var$_bind","Function","bind","$144251abd0e070aa$var$bind","fn","$144251abd0e070aa$var$ConsumerObserver","ConsumerObserver","partialObserver","$144251abd0e070aa$var$handleUnhandledError","SafeSubscriber","observerOrNext","context_1","notification","subscriber","$ea15a553d1249983$export$5ab46cbf6120b33a","observable","$d964bb9c87650d9b$export$f0954fd7d5368655","x","$105ed219d50c6c26$export$a4627e546088548d","fns","$105ed219d50c6c26$export$71f88a61afaa14d7","input","reduce","prev","$157495f65d1fedd6$export$77cea355fa80b5f4","Observable","subscribe","_subscribe","lift","operator","source","$157495f65d1fedd6$var$isSubscriber","$157495f65d1fedd6$var$isObserver","_trySubscribe","sink","forEach","promiseCtor","$157495f65d1fedd6$var$getPromiseCtor","resolve","reject","pipe","operations","toPromise","$fc094a53485b6f1b$export$f708eee25634bc80","$489dabb836a96717$export$b6bbab5a9b109038","Subject","currentObservers","observers","hasError","thrownError","subject","$489dabb836a96717$export$155189cde295587d","_throwIfClosed","_c","observer","shift","defineProperty","get","enumerable","configurable","_checkFinalizedStatuses","_innerSubscribe","asObservable","AnonymousSubject","$d80e01a928648151$export$fe960da701faae26","AsyncSubject","_value","_hasValue","_isComplete","$30ec1b283cbb27fa$export$cc3d42e6b2b9cf8b","BehaviorSubject","getValue","subscription","$cb6028617666e135$var$isArray","$cb6028617666e135$var$getPrototypeOf","getPrototypeOf","$cb6028617666e135$var$objectProto","$cb6028617666e135$var$getKeys","keys","$91d542d0b784d24b$export$1e2f57719e155213","$7700e3a10fed84ae$export$4369c812aac99591","then","$8b01cc4a4fa9c790$export$edb10ab8dd75a915","obj","asyncIterator","$80eb79c79e8b4ce6$export$7cbe71b9fa263484","$10702573cd9f2753$export$6f58e2338da23f4d","$3172d966b15186c2$export$9652023d9040757","$022971cd29cb3478$export$cf4785e597badab3","readableStream","_arguments","generator","q","a","resume","fulfill","settle","reader","getReader","read","releaseLock","$022971cd29cb3478$export$c088ffafdba7405f","$d5e97ca40de1dca2$export$6a9cfa3ebc765910","obs","array","promise","$d5e97ca40de1dca2$export$e073fccf36d78cc1","iterable_1","iterable_1_1","asyncIterable","$d5e97ca40de1dca2$var$process","asyncIterable_1","asyncIterable_1_1","P","fulfilled","rejected","result","adopt","catch","$bb90871d75d428d3$export$a2b7447487315232","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","schedule","$b70519f632db53cb$export$871731df685d7753","init","liftedSource","$1082674ba26021fb$export$b9e075132cc6937f","onNext","onComplete","onError","onFinalize","$1082674ba26021fb$export$8fbbf0c4d80268e5","OperatorSubscriber","shouldUnsubscribe","closed_1","$b3be89a302f54553$export$9007f49c319d1ac7","$03c04c3ffa6f4f2b$export$1eb44d8f5f64733b","$099e1a95f8be7c6a$export$7c7f0979b56a32f3","$cecb8b01522e9ff4$export$6788812c4e6611e6","$a344549688aae3fd$export$871de8747c9eaa88","project","$fdef718a708846aa$var$isArray","$fdef718a708846aa$export$559affaa48f4288d","$c3cdee6cceaf9473$export$187e35932e88c15c","$798a448d65d66d7d$var$last","$798a448d65d66d7d$export$9ae19b645239a61b","$798a448d65d66d7d$export$29534b2f653ae592","$e9c33d8acb1fdd17$export$77fa7d86f5204e8a","resultSelector","first_1","key","observables","$e9c33d8acb1fdd17$export$f04dcfb475ed2128","values","valueTransform","execute","active","remainingFirstValues","_loop_1","hasFirstValue","$28f45fd372d3b455$export$600918ebaa9e0a1b","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","bufferedValue","$8657d55690de2a98$export$6b9f6c0d32c093f9","Infinity","ii","$b57c3fedf76caaed$export$18aef43295bbe906","$98685deadaab283c$export$ee1b3e54f0441b22","$2dc044d45b969f33$export$ee1b3e54f0441b22","$ead8e990cfbfe279$export$260e5c0943f31606","observableFactory","$6e7e0ef18f0a3115$export$ccb33e29d92c9a58","$827970c208304071$export$3dea766d36a8935f","predicate","$eec29157d02a25b0$export$78f6d1b1dbcda304","$f03dcc354f8c1062$export$400f9f949cef996c","config","hasConfig","defaultValue","$6ca17bc48d68771b$var$nodeEventEmitterMethods","$6ca17bc48d68771b$var$eventTargetMethods","$6ca17bc48d68771b$var$jqueryMethods","$6ca17bc48d68771b$export$a36e16046ae8f1bb","target","eventName","options","$6ca17bc48d68771b$var$isEventTarget","addEventListener","removeEventListener","methodName","$6ca17bc48d68771b$var$isNodeStyleEventEmitter","addListener","removeListener","$6ca17bc48d68771b$var$toCommonHandlerRegistry","$6ca17bc48d68771b$var$isJQueryStyleEventEmitter","on","off","subTarget","$e731e77718be64fd$export$e19cd5f9376f8cee","Action","state","$a4abb0157f6db370$export$f0ca5e16f6f68711","setInterval","clearInterval","$331a777e5f6dff82$export$b5369ffd7cb2211b","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","_id","flush","_scheduler","_execute","_delay","errorValue","errored","actions","$8777e340304a87e2$export$c1895ea2d519a677","now","Date","$699ca6a12b1d5e7c$export$d3e54bb8584cda7c","Scheduler","schedulerActionCtor","$03059729cc91d1d5$export$8d6b71a2b178fc32","AsyncScheduler","SchedulerAction","_active","action","$df0ca230b4c087cb$export$c03bb0116ee09d4b","isNaN","$ba06f10a02915e96$export$9dc4ecf953986f04","dueTime","intervalOrScheduler","intervalDuration","due","$7b246f86cff85ef0$export$a175cc82f1f2275e","$30ffe4e7b3d62072$export$4950aa0f605343fb","sources","$62d8f22c904e5fe7$export$96c94437c95d7862","$ed54d2f12a6f8669$export$ba255e9e49e00608","$4dfab0b79a6f46d4$var$isArray","$4dfab0b79a6f46d4$export$24e1bb79414042be","$886ab650a4e672e5$export$236c05de452bec2","subscriptions","$3abb0c810830a073$export$915d2682b0aa0991","ReplaySubject","_bufferSize","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","Math","max","_trimBuffer","copy","adjustedBufferSize","last","$e8a8f4270a768261$export$9f6ea8e48bc26eab","innerSubscriber","innerIndex","outerIndex","$7793e4bb10595700$export$8bf7aba4a9e09055","errorOrErrorFactory","errorFactory","$4be3df9c8b191a2f$export$66d311bf29d5c89c","info","$4be3df9c8b191a2f$export$83e74882c5df8fe1","schedulerArg","first","each","with","_with","$4be3df9c8b191a2f$var$timeoutErrorFactory","_d","meta","originalSourceSubscription","timerSubscription","lastValue","seen","startTimer","$a3c41b925191c992$export$3dede90624df3ba9","selector","handledResult","innerSub","syncUnsub","$b816cfe1994a56f7$export$77fa7d86f5204e8a","$419c2da03c3ac473$export$779c5fb865a0172e","comparator","keySelector","$419c2da03c3ac473$var$defaultCompare","previousKey","currentKey","$7d94a21417a1623d$export$9f77e0932fb78f72","$970a0f030dee86ff$export$578723aef62d92f5","callback","$c7828fe634a19a01$export$b7df5d561049483a","count","$34cec3157a65a432$export$e4ca6d7b7a6dcf9b","hasValue","$cbe8268c6277296f$export$43128fadae87b74a","hasDefaultValue","$f60f59c3c27c3419$export$ed80d9de1d9df928","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","refCount","hasCompleted","hasErrored","cancelReset","reset","resetAndUnsubscribe","conn","dest","$f60f59c3c27c3419$var$handleReset","onSubscriber","$369a1beddcfddd56$export$a4fe86229b0e9bdd","$095ad5aa66f29705$export$ac8dfd3a7ad06e80","notifier","$54e8ed1fe60bf698$export$9384c7afe4015e42","inclusive","$9654f9d6f3b258de$export$3f23594af5f37336","tapObserver","isUnsub","finalize","$ccc574af478a1fb0$var$createDictionaryFromMap","entries","dictionary","orElse","orElseValue","orElseThrow","orElseThrowFn","coerce","coerceNullOrUndefined","isEqual","array1","array2","exactOrder","every","element","firstOnly","indexOfElementFn","findIndex","removedElements","distinct","items","itemSet","Set","filter","delete","intersect","arrays","_arrays","intersection","Objects","dictionaryLike","Map","withoutUndefinedEntries","object","mapLike","set","addSetValue","multiValueMap","removeSetValue","hasRemoved","removed","it","size","addListValue","removeListValue","Observables","$0d8b1f299d46dd84$export$e1272dadeadaca63","_beanRegistry","_decoratorRegistry","_initializers","_sequence","_runlevel$","_eagerBeansConstructed","_started","register","symbol","instructions","some","property","startsWith","useClass","$0d8b1f299d46dd84$var$validateBeanConstructInstructions","multi","has","metaData","disposeBean","beanInfo","beanConstructFn","$0d8b1f299d46dd84$var$createBeanConstructFunction","eager","useValue","constructing","beans","getOrConstructBeanInstance","unregister","registerIfAbsent","registerDecorator","decorator","constructFn","registerInitializer","initializer","initializerInfo","runlevel","useFunction","useExisting","all","orElseGet","orElseSupply","$0d8b1f299d46dd84$var$getSymbolName","opt","beanInfos","start","initializerDefaultRunlevel","eagerBeanConstructRunlevel","constructEagerBeans","runInitializers","destroy","getBeanInfos","sort","$0d8b1f299d46dd84$var$compareByDestroyOrder","bean","clear","destroyable","useFactory","preDestroy","console","whenRunlevel","currentRunlevel","acc","defaultInitializerRunlevel","initializersGroupedByRunlevel","grouped","initializerFn","decorators","reverse","decoratedBean","decorate","constructInstant","bean1","bean2","destroyOrder","useClassFn","useFactoryFn","instruction","JSON","stringify","$65410acb3348d48d$var$uuidIterator","$65410acb3348d48d$var$generateUUID","lut","d0","random","d1","d2","d3","uuid","$65410acb3348d48d$export$bc35efed93511c4b","freeze","randomUUID","$d5bd6ae9534d951f$export$8f2c8e61d147b502","matches","match","previous","current","source$","$d5bd6ae9534d951f$export$4c9116dcf1374231","projectFn","$d5bd6ae9534d951f$export$b5f2084817235760","closingNotifier$","guard$","$146947066e10b00e$export$abac07b0d121aae2","$146947066e10b00e$export$a11aa4b1ad6eec09","$146947066e10b00e$export$3200a3edec649cbd","$146947066e10b00e$var$ɵVERSION","$146947066e10b00e$var$ɵWINDOW_TOP","$146947066e10b00e$export$61c6825dcf81208b","$146947066e10b00e$export$33b9eb3dc0ea6d8","_destroy$","window","$146947066e10b00e$export$5cce370cfaa52f9e","$146947066e10b00e$export$efa9a398d6368992","$146947066e10b00e$export$ba6a9c7ac8291f7f","debug","log","warn","severity","loggingContext","$146947066e10b00e$export$cfece0898859977d","appSymbolicName","version","prefix","consoleFn","$146947066e10b00e$export$1643d64233a33b47","_state$","Stopped","startPlatform","startupFn","Started","enterState","Starting","One","Two","Stopping","state$","whenState","newState","currentState","$146947066e10b00e$export$1b673bb034e791a0","isPlatformHost","symbolicName","top","CORE","Number","MAX_SAFE_INTEGER","BROKER","$146947066e10b00e$export$2eb36f74b177828a","$146947066e10b00e$export$3af33b08f01f58a3","$146947066e10b00e$export$6b8e491f5c8f1d29","intercept","hostManifest","intentions","activatorApiDisabled","type","Activator","qualifier","$146947066e10b00e$var$ClientRegistry","$146947066e10b00e$export$a5b24081a734c6a9","$146947066e10b00e$export$2509be367963fa45","topic","subscriberCount$","$146947066e10b00e$export$c3e6bb28c793a982","status","headers","Status","OK","messageBody","$146947066e10b00e$export$43ee7d0e4f429743","BAD_REQUEST","NOT_FOUND","ERROR","TERMINAL","$146947066e10b00e$export$d6978861bb0c00c2","RequestSubscriberCount","FocusIn","IsFocusWithin","HasFocus","PlatformProperties","Applications","LookupCapabilities","LookupIntentions","RegisterCapability","UnregisterCapabilities","RegisterIntention","UnregisterIntentions","IsApplicationQualifiedForCapability","platformVersion","ping","clientId","msg","Topics","isWildcardSegment","segment","split","Boolean","containsWildcardSegments","containsEmptySegments","computeWildcardSegmentPermutations","wildcardCharacter","segments","permutations","permutation","replaceWildcardSegments","replacement","replace","validateTopic","exactTopic","$146947066e10b00e$export$417f7cd86929f164","pattern","_patternSegments","inputTopicSegments","patternSegments","params","patternSegment","substring","$146947066e10b00e$var$filterByTransport","transport","event","envelope","data","channel","$146947066e10b00e$var$filterByChannel","channels","$146947066e10b00e$var$filterByTopicChannel","Topic","messageTopic","$146947066e10b00e$var$pluckMessage","messageEvent","$146947066e10b00e$var$runSafe","runnable","$146947066e10b00e$var$stringifyError","$146947066e10b00e$export$2ee0ab7012d73034","$146947066e10b00e$export$9e24f86ac127622f","decorate$","$146947066e10b00e$var$MessageSelector","_selectors","_sourceError$","_sourceComplete$","select$","selector$","ɵsubscriberCount","selectors","disconnect","$146947066e10b00e$var$BrokerGateway","$146947066e10b00e$var$NullBrokerGateway","isConnected","message$","postMessage","requestReply$","subscribe$","subscriptionDescriptor","$146947066e10b00e$var$ɵBrokerGateway","connectOptions","_platformStopping$","_session","_session$","_message$","_selectMessagesByTopic","_selectMessagesBySubscriberIdHeader","ɵSubscriberId","_appSymbolicName","_brokerDiscoverTimeout","brokerDiscoverTimeout","_messageDeliveryTimeout","messageDeliveryTimeout","session","connectToBroker","installBrokerMessageListener","installPingReplier","$146947066e10b00e$var$isPlatformStopped","PLATFORM_STOPPED_ERROR","messageId","ClientToBroker","MessageId","Timestamp","AppSymbolicName","ClientId","postError$","whenPosted","MESSAGE_DISPATCH_ERROR","statusMessage","ok","details","broker","origin","request","replyTo","subscriberId","unsubscribe$","requestError$","ReplyTo","unsubscribeChannel","TopicUnsubscribe","logContext","reply","messageChannel","subscribeChannel","newSubscribeCommand","subscribeError$","descriptor","unsubscribeCommand","window1","BrokerToClient","Intent","intentMessage","intent","topicMessage","observe$","publish","connectPromise","response","returnCode","returnMessage","BROKER_DISCOVER_ERROR","connectMessage","ClientConnect","Version","windowHierarchy","collectWindowHierarchy","disconnectFromBroker","disconnectMessage","ClientDisconnect","candidates","candidate","unshift","$146947066e10b00e$export$795435d319aa5def","_properties","properties$","properties","contains","$146947066e10b00e$var$HttpClient","fetch","$146947066e10b00e$var$ManifestRegistry","$146947066e10b00e$var$ABSOLUTE_URL_REGEX","isAbsoluteUrl","url","test","newUrl","base","baseUrl","URL","pathname","endsWith","ensureTrailingSlash","$146947066e10b00e$var$ApplicationRegistry","_applications","SYMBOLIC_NAME_REGEXP","registerApplication","applicationConfig","manifest","manifestUrl","application","computeBaseUrl","capability","manifestLoadTimeout","activatorLoadTimeout","allowedMessageOrigins","secondaryOrigin","scopeCheckDisabled","intentionCheckDisabled","intentionRegisterApiDisabled","capabilities","registerCapability","intention","registerIntention","getApplication","getApplications","isScopeCheckDisabled","isIntentionRegisterApiDisabled","isIntentionCheckDisabled","manifestURL","$146947066e10b00e$export$26246f283d6ee833","_pattern","_patternKeys","testee","testeeKeys","patternKeys","$146947066e10b00e$var$ManifestObjectStore","_objectById","_objectsByType","_objectsByApplication","_add$","_remove$","metadata","objectsToRemove","find","_remove","filterById","filterByType","filterByApp","findById","change$","add$","remove$","objects","deleted","objectId","$146947066e10b00e$export$6b68619c82449d52","Qualifiers","ALLOWED_VALUE_TYPES","validateQualifier","exactQualifier","$146947066e10b00e$var$ɵManifestRegistry","_subscriptions","_capabilityStore","_intentionStore","capabilityRegister$","capabilityUnregister$","installCapabilityRegisterRequestHandler","installCapabilityUnregisterRequestHandler","installIntentionRegisterRequestHandler","installIntentionUnregisterRequestHandler","installCapabilitiesLookupRequestHandler","installIntentionsLookupRequestHandler","installIsApplicationQualifiedRequestHandler","installVersionLookupHandler","resolveCapabilitiesByIntent","illegalQualifierError","isApplicationQualifiedForCapability","hasIntention","intentionQualifier","private","hasIntentionForCapability","$146947066e10b00e$var$assertCapabilityParamDefinitions","validSubstitutes","param","deprecated","required","useInstead","capabilityToRegister","$146947066e10b00e$var$interceptCapability","unregisterCapabilities","intentionToRegister","unregisterIntention","onMessage","capabilityFilter","$146947066e10b00e$var$assertIntentionRegisterApiEnabled","intentFilter","lookupFilter","registryChange$","finder$","capabilityId","clientRegister$","register$","client","platformVersion$","clients","getByApplication","otherSources","interceptor","$146947066e10b00e$var$FocusTracker","_focusOwner$","monitorFocusInEvents","replyToIsFocusWithinRequests","replyToHasFocusRequests","getByClientId","focusOwner","isFocusWithin","getParentClient","getByWindow","$146947066e10b00e$var$ManifestFetcher","appConfig","fetchManifest$","manifestFetchTimeout","manifestFetchResponse","statusText","json","$146947066e10b00e$var$MessageSubscriptionRegistry","_subscriptionsByApp","_subscriptionsByClient","_register$","_unregister$","unregister$","onRegister","onUnregister","notifyUnsubscribe","filterByClient","subscriptionById","subscriptionsByClient","subscriptionsByApp","$146947066e10b00e$var$MessageSubscription","whenUnsubscribe","$146947066e10b00e$var$ASTERISK","$146947066e10b00e$var$TopicSubscriptionRegistry","_subscriptionsByTopic","filterByTopic","subscriptionsByTopic","subscriptionCount$","illegalTopicError","$146947066e10b00e$var$TopicSubscription","$146947066e10b00e$export$928c6333c0fd2868","$146947066e10b00e$export$93458e9b1705f47e","$146947066e10b00e$export$218fc7342c49994f","interceptors","publisher","terminalHandler","$146947066e10b00e$export$a428cd33b25d5283","handlerChain","reduceRight","interceptAndPublish","$146947066e10b00e$var$SEMVER_REGEX","$146947066e10b00e$var$semver","major","$146947066e10b00e$var$parseVersion","lt","version1","version2","$146947066e10b00e$var$compare","v1","v2","semVer1","semVer2","majorCompare","sign","minorCompare","minor","patchCompare","patch","$146947066e10b00e$var$comparePreRelease","preRelease","identifier1","identifier2","groups","identifier","numericIdentifier","$146947066e10b00e$var$CLIENT_PING_INTERVAL","$146947066e10b00e$var$CLIENT_PING_TIMEOUT","$146947066e10b00e$var$ɵClient","installLivenessDetector","resetOnSuccess","period","performPing$","request$","soFar","subscribeForRetry","resub_1","notifierSubscriber_1","_livenessDetector","logStaleClientWarning","unregisterClient","stale","dispose","$146947066e10b00e$var$IntentSubscriptionRegistry","$146947066e10b00e$var$IntentSubscription","$146947066e10b00e$var$Predicates","not","alwaysTrue","$146947066e10b00e$var$ParamMatcher","definitions","_requiredParamDefs","_optionalParamDefs","_deprecatedParamDefs","paramDef","parameters","matcherResult","missingParams","unexpectedParams","deprecatedParams","deprecation","$146947066e10b00e$var$IntentParams","validateParams","sender","paramMatcherResult","$146947066e10b00e$var$toParamValidationError","paramsMatcherResult","intentStringified","deprecatedParam","warning","$146947066e10b00e$var$toDeprecatedParamWarning","$146947066e10b00e$var$MessageBroker","_clientRegistry","_topicSubscriptionRegistry","_intentSubscriptionRegistry","_retainedMessageStore","_retainedIntentStore","_applicationRegistry","_manifestRegistry","_clientMessage$","TopicSubscribe","IntentSubscribe","IntentUnsubscribe","$146947066e10b00e$var$checkOriginTrusted","$146947066e10b00e$var$catchErrorAndRetry","installClientConnectListener","installClientDisconnectListener","installMessageDispatcher","installTopicSubscribeListener","installTopicUnsubscribeListener","installTopicSubscriberCountObserver","sendRetainedMessageOnSubscribe","installIntentDispatcher","installIntentSubscribeListener","installIntentUnsubscribeListener","sendRetainedIntentOnSubscribe","deleteRetainedIntentOnCapabilityUnregister","_messagePublisher","createMessagePublisher","_intentPublisher","createIntentPublisher","eventSource","clientAppName","clientMessageTarget","$146947066e10b00e$var$MessageTarget","$146947066e10b00e$var$sendTopicMessage","currentClient","registerClient","$146947066e10b00e$var$getSendingClient","$146947066e10b00e$var$sendDeliveryStatusError","retain","$146947066e10b00e$var$isRequest","$146947066e10b00e$var$sendDeliveryStatusSuccess","requestorReplySubscription","subscribeForRepliesIfRequest","storeMessageIfRetained","storeIntentIfRetained","flat","retainedMessage","subscribers","$146947066e10b00e$var$sendIntentMessage","caught","$146947066e10b00e$export$aafa7a6a222a9fad","applications$","applications","lookupCapabilities$","lookupIntentions$","unregisterIntentions","isApplicationQualified$","qualifiedFor","$146947066e10b00e$var$CONTEXT_LOOKUP_OPTIONS","Contexts","contextValueLookupTopic","contextTreeNamesLookupTopic","contextTreeChangeTopic","newContextValueLookupRequest","MicrofrontendToOutlet","encodeURIComponent","newContextTreeNamesLookupRequest","names","newContextTreeObserveRequest","RootContextSubscribeEvent","$146947066e10b00e$var$RouterOutletContextProvider","iframe","_entries$","_entryChange$","_outletDisconnect$","_microfrontendRequest$","contentWindow","entries$","onOutletMount","installContextValueLookupListener","installContextTreeNamesLookupListener","installContextTreeObserveListener","onOutletUnmount","lookupRequest","decodeURIComponent","collect","collectedValues","collectedNames","observeRequest","$146947066e10b00e$export$b84d9f3cc1de7d1d","assign","currNavigation","prevNavigation","patchedUrl","patchUrl","pushStateToSessionHistoryStack","location","currUrl","prevUrl","prevURL","currURL","protocol","search","patchedURL","searchParams","$146947066e10b00e$var$Keystroke","eventType","modifiers","flags","parts","control","alt","toLowerCase","withFlags","fromEvent","$146947066e10b00e$var$escapeKeyboardEventKey","ctrlKey","shiftKey","altKey","metaKey","fromString","$146947066e10b00e$var$parseFlags","keystroke","flagsStr","flag","flagName","flagValue","preventDefault","$146947066e10b00e$var$PUSH_STATE_TO_SESSION_HISTORY_STACK_MESSAGE_HEADER","$146947066e10b00e$var$SHOW_SPLASH_MESSAGE_HEADER","$146947066e10b00e$var$CAPABILITY_ID_MESSAGE_HEADER","$146947066e10b00e$var$ELEMENT_NAME","$146947066e10b00e$var$ATTR_NAME","$146947066e10b00e$var$ATTR_SCROLLABLE","$146947066e10b00e$var$ATTR_KEYSTROKES","$146947066e10b00e$var$HTML_TEMPLATE","$146947066e10b00e$export$40346ab29ce71372","HTMLElement","_disconnect$","_uid","_empty$","_outletName$","$146947066e10b00e$export$61656ab94335dbc0","_shadowRoot","attachShadow","mode","innerHTML","trim","_iframe","querySelector","_contextProvider","_splash","$146947066e10b00e$var$Splash","empty$","setAttribute","removeAttribute","getAttribute","scrollable","keystrokes","setContextValue","removeContextValue","contextValues$","resetPreferredSize","preferredSizeTopic","preferredSize","minWidth","style","width","maxWidth","minHeight","height","maxHeight","installOutletContext","outletContext","uid","$146947066e10b00e$export$ff8ad477982f6328","installOutletUrlListener","outlet","$146947066e10b00e$var$outletNavigate$","outletNavigationTopic","urlTopic","navigateMessage","showSplash","navigation","hasPrev","attach","detach","dispatchEvent","CustomEvent","detail","installPreferredSizeListener","$146947066e10b00e$var$setStyle","setProperty","installKeyboardEventDispatcher","keyboardEventTopic","KeyboardEvent","installFocusWithinEventDispatcher","focusWithinOutletTopic","focusWithin","taking","bubbles","cancelable","installHostElementDecorator","host","classList","installSplashDisposer","signalReadyTopic","connectedCallback","disconnectedCallback","observedAttributes","attributeChangedCallback","oldValue","newValue","$146947066e10b00e$var$coerceBooleanProperty","$146947066e10b00e$var$KEYSTROKE_CONTEXT_NAME_PREFIX","keystrokeStr","define","customElements","whenDefined","outletName","outletUid","attributeValue","_iframeElement","_template","_element","documentFragment","content","cloneNode","appendChild","removeProperty","$146947066e10b00e$export$a8e56bb192edf201","_contextTreeChange$","_whenContextTreeChangeListenerInstalled","installContextTreeChangeListener","changeEvent","lookupContextValue$","lookup","isPresent","names$","lookupContextNames$","contextValueLookupRequest","$146947066e10b00e$var$whenSubscribedToReplyTopic","contextNamesLookupRequest","listener","contextObserveRequest","$146947066e10b00e$export$fc96cab2c66d5054","path","relativeTo","hash","$146947066e10b00e$export$453ace576174a6eb","$146947066e10b00e$export$7fb6e18939c89ffa","navigate","navigateByIntent","navigateByUrl","resolveContextualOutlet","outletUrlTopic","navigationUrl","computeNavigationUrl","ɵcapabilityId","contextualOutlet","Microfrontend","navigate$","$146947066e10b00e$var$ROUTING_CONTEXT_MESSAGE_HEADER","$146947066e10b00e$var$ROUTING_CONTEXT_OUTLET","urlPattern","substituteNamedParameters","href","paramName","delimiter","$146947066e10b00e$var$MicrofrontendIntentNavigator","consumeMicrofrontendIntent","microfrontendCapability","microfrontendPath","resolveTargetOutlet","$146947066e10b00e$var$ɵClientRegistry","_clientsById","_clientsByWindow","staleClient","$146947066e10b00e$var$HostAppConfigProvider","createAppConfig","hostConfig","$146947066e10b00e$var$serveHostManifest","createObjectURL","Blob","revokeObjectURL","interceptManifest","$146947066e10b00e$var$ProgressMonitor","_progress$","_done$","_hasSubMonitors","progress$","progress","round","ratio","subMonitors","subMonitor","$146947066e10b00e$var$computeProgress","ratioSum","sum","weight","subMonitorsProgress","totalProgress","subMonitorWeight","subMonitorIndex","splitEven","fill","$146947066e10b00e$var$ManifestLoadProgressMonitor","$146947066e10b00e$var$ActivatorLoadProgressMonitor","$146947066e10b00e$var$StartupProgressMonitor","$146947066e10b00e$var$AppInstaller","_hostConfig","appConfigs","_appConfigs","exclude","install","hostAppConfig","manifestLoadMonitors","monitor","$146947066e10b00e$var$ActivatorInstaller","activators","activatorsGroupedByApp","skipInvalidActivators","activator","activatorReadyPromises","appActivators","waitForActivatorsToSignalReady","sameAppActivators","primaryActivator","mountActivator","t0","readinessPromises","readinessTopics","readinessTopic","onReadinessTimeout","primary","routerOutlet","document","createElement","dataset","display","position","removeChild","$146947066e10b00e$export$9b078e20c2505aad","focusWithin$","focus$","$146947066e10b00e$var$FocusInEventDispatcher","installFocusEventDispatcher","publishFocusInEvent","notifyOutletAboutFocusChange","hasFocus","once","capture","publishTo","$146947066e10b00e$var$MouseMoveEventDispatcher","_dispatcherId","installMouseEventDispatcher","publishMouseMoveEvent","receiveMouseMoveEvent","durationSelector","buttons","$146947066e10b00e$var$PRIMARY_MOUSE_BUTTON","durationSubscriber","endDuration","cleanupDuration","$146947066e10b00e$var$DISPATCHER_ID_HEADER$1","$146947066e10b00e$var$MOUSEMOVE_EVENT_TOPIC","screenX","screenY","sciMouseEvent","Event","$146947066e10b00e$var$MouseUpEventDispatcher","publishMouseUpEvent","$146947066e10b00e$var$DISPATCHER_ID_HEADER","$146947066e10b00e$var$MOUSEUP_EVENT_TOPIC","$146947066e10b00e$export$a0e8060499828631","_fromDimensionElementChange$","_preferredSizePublisher","$146947066e10b00e$var$PreferredSizePublisher","setPreferredSize","fromDimension","resizeObserver","ResizeObserver","clientWidth","offsetWidth","clientHeight","offsetHeight","observe","dimension","_preferredSize$","$146947066e10b00e$var$KeyboardEventDispatcher","installKeystrokeDispatcher","contextNames","contextName","keystrokeContextName","observeKeyboardEvent$","keyboardEvents","inputs","len","otherValues","ready","eventInit","keystrokeFormat","keystrokeFlags","keystrokeEvent","$146947066e10b00e$var$MessageHandler","_callback","_messageClient","handleMessage","consumeMessage","platformStopping$","observableStatus","$146947066e10b00e$var$fromCallbackResult$","resolved","replyHeaders","$146947066e10b00e$var$ɵMessageClient","_brokerGateway","$146947066e10b00e$var$ɵIntentClient","onIntent","$146947066e10b00e$export$da564c49d7214465","connect","$146947066e10b00e$export$fe97885cb43f06a8","connectRunlevel","Zero","brokerGateway","signalReady","MESSAGING","$146947066e10b00e$export$da18e61ec521a371","$146947066e10b00e$var$provideLivenessProbeConfig","defaults","interval","invalid","liveness","$146947066e10b00e$var$provideStartupProgressMonitor","platformProgressMonitor","manifestLoadProgressMonitor","activatorLoadProgressMonitor","Three","startupProgress$","_startupProgress$","refs","MicrofrontendPlatform","MicrofrontendPlatformHost","MicrofrontendPlatformClient","MessageClient","IntentClient","OutletRouter","ManifestService","Beans","MessageInterceptor","IntentInterceptor","TopicMatcher","QualifierMatcher","UUID","switchMap","DISPATCHER_ID_HEADER"],"version":3,"file":"refs.js.map"}